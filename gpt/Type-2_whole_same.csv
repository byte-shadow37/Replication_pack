Pair ID,Source Folder 1,Package 1,Class 1,Method 1,Start Line 1,End Line 1,Source Folder 2,Package 2,Class 2,Method 2,Start Line 2,End Line 2,Clone Type,Clone response,Refactoring suggestions,Extracted Clone Type
7/2/03,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawDomainMarker,1016,1167,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawRangeMarker,1216,1366,Type 2,"**Code Snippet 1: Method: drawDomainMarker (Lines: 1016-1167)**

```java
public void drawDomainMarker(Graphics2D g2,
                             XYPlot plot,
                             ValueAxis domainAxis,
                             Marker marker,
                             Rectangle2D dataArea) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = domainAxis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double v = domainAxis.valueToJava2D(value, dataArea,
                plot.getDomainAxisEdge());

        PlotOrientation orientation = plot.getOrientation();
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            line = new Line2D.Double(dataArea.getMinX(), v,
                    dataArea.getMaxX(), v);
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            line = new Line2D.Double(v, dataArea.getMinY(), v,
                    dataArea.getMaxY());
        }

        final Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(
                AlphaComposite.SRC_OVER, marker.getAlpha()));
        g2.setPaint(marker.getPaint());
        g2.setStroke(marker.getStroke());
        g2.draw(line);

        String label = marker.getLabel();
        RectangleAnchor anchor = marker.getLabelAnchor();
        if (label != null) {
            Font labelFont = marker.getLabelFont();
            g2.setFont(labelFont);
            g2.setPaint(marker.getLabelPaint());
            Point2D coordinates = calculateDomainMarkerTextAnchorPoint(
                    g2, orientation, dataArea, line.getBounds2D(),
                    marker.getLabelOffset(),
                    LengthAdjustmentType.EXPAND, anchor);
            TextUtilities.drawAlignedString(label, g2,
                    (float) coordinates.getX(), (float) coordinates.getY(),
                    marker.getLabelTextAnchor());
        }
        g2.setComposite(originalComposite);
    }
    else if (marker instanceof IntervalMarker) {
        IntervalMarker im = (IntervalMarker) marker;
        double start = im.getStartValue();
        double end = im.getEndValue();
        Range range = domainAxis.getRange();
        if (!(range.intersects(start, end))) {
            return;
        }

        double start2d = domainAxis.valueToJava2D(start, dataArea,
                plot.getDomainAxisEdge());
        double end2d = domainAxis.valueToJava2D(end, dataArea,
                plot.getDomainAxisEdge());
        double low = Math.min(start2d, end2d);
        double high = Math.max(start2d, end2d);

        PlotOrientation orientation = plot.getOrientation();
        Rectangle2D rect = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            // clip top and bottom bounds to data area
            low = Math.max(low, dataArea.getMinY());
            high = Math.min(high, dataArea.getMaxY());
            rect = new Rectangle2D.Double(dataArea.getMinX(),
                    low, dataArea.getWidth(),
                    high - low);
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            // clip left and right bounds to data area
            low = Math.max(low, dataArea.getMinX());
            high = Math.min(high, dataArea.getMaxX());
            rect = new Rectangle2D.Double(low,
                    dataArea.getMinY(), high - low,
                    dataArea.getHeight());
        }

        final Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(
                AlphaComposite.SRC_OVER, marker.getAlpha()));
        Paint p = marker.getPaint();
        if (p instanceof GradientPaint) {
            GradientPaint gp = (GradientPaint) p;
            GradientPaintTransformer t = im.getGradientPaintTransformer();
            if (t != null) {
                gp = t.transform(gp, rect);
            }
            g2.setPaint(gp);
        }
        else {
            g2.setPaint(p);
        }
        g2.fill(rect);

        // now draw the outlines, if visible...
        if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
            if (orientation == PlotOrientation.VERTICAL) {
                Line2D line = new Line2D.Double();
                double y0 = dataArea.getMinY();
                double y1 = dataArea.getMaxY();
                g2.setPaint(im.getOutlinePaint());
                g2.setStroke(im.getOutlineStroke());
                if (range.contains(start)) {
                    line.setLine(start2d, y0, start2d, y1);
                    g2.draw(line);
                }
                if (range.contains(end)) {
                    line.setLine(end2d, y0, end2d, y1);
                    g2.draw(line);
                }
            }
            else { // PlotOrientation.HORIZONTAL
                Line2D line = new Line2D.Double();
                double x0 = dataArea.getMinX();
                double x1 = dataArea.getMaxX();
                g2.setPaint(im.getOutlinePaint());
                g2.setStroke(im.getOutlineStroke());
                if (range.contains(start)) {
                    line.setLine(x0, start2d, x1, start2d);
                    g2.draw(line);
                }
                if (range.contains(end)) {
                    line.setLine(x0, end2d, x1, end2d);
                    g2.draw(line);
                }
            }
        }

        String label = marker.getLabel();
        RectangleAnchor anchor = marker.getLabelAnchor();
        if (label != null) {
            Font labelFont = marker.getLabelFont();
            g2.setFont(labelFont);
            g2.setPaint(marker.getLabelPaint());
            Point2D coordinates = calculateDomainMarkerTextAnchorPoint(
                    g2, orientation, dataArea, rect,
                    marker.getLabelOffset(), marker.getLabelOffsetType(),
                    anchor);
            TextUtilities.drawAlignedString(label, g2,
                    (float) coordinates.getX(), (float) coordinates.getY(),
                    marker.getLabelTextAnchor());
        }
        g2.setComposite(originalComposite);

    }

}
```

---

**Code Snippet 2: Method: drawRangeMarker (Lines: 1216-1366)**

```java
public void drawRangeMarker(Graphics2D g2,
                            XYPlot plot,
                            ValueAxis rangeAxis,
                            Marker marker,
                            Rectangle2D dataArea) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = rangeAxis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double v = rangeAxis.valueToJava2D(value, dataArea,
                plot.getRangeAxisEdge());
        PlotOrientation orientation = plot.getOrientation();
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            line = new Line2D.Double(v, dataArea.getMinY(), v,
                    dataArea.getMaxY());
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            line = new Line2D.Double(dataArea.getMinX(), v,
                    dataArea.getMaxX(), v);
        }

        final Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(
                AlphaComposite.SRC_OVER, marker.getAlpha()));
        g2.setPaint(marker.getPaint());
        g2.setStroke(marker.getStroke());
        g2.draw(line);

        String label = marker.getLabel();
        RectangleAnchor anchor = marker.getLabelAnchor();
        if (label != null) {
            Font labelFont = marker.getLabelFont();
            g2.setFont(labelFont);
            g2.setPaint(marker.getLabelPaint());
            Point2D coordinates = calculateRangeMarkerTextAnchorPoint(
                    g2, orientation, dataArea, line.getBounds2D(),
                    marker.getLabelOffset(),
                    LengthAdjustmentType.EXPAND, anchor);
            TextUtilities.drawAlignedString(label, g2,
                    (float) coordinates.getX(), (float) coordinates.getY(),
                    marker.getLabelTextAnchor());
        }
        g2.setComposite(originalComposite);
    }
    else if (marker instanceof IntervalMarker) {
        IntervalMarker im = (IntervalMarker) marker;
        double start = im.getStartValue();
        double end = im.getEndValue();
        Range range = rangeAxis.getRange();
        if (!(range.intersects(start, end))) {
            return;
        }

        double start2d = rangeAxis.valueToJava2D(start, dataArea,
                plot.getRangeAxisEdge());
        double end2d = rangeAxis.valueToJava2D(end, dataArea,
                plot.getRangeAxisEdge());
        double low = Math.min(start2d, end2d);
        double high = Math.max(start2d, end2d);

        PlotOrientation orientation = plot.getOrientation();
        Rectangle2D rect = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            // clip left and right bounds to data area
            low = Math.max(low, dataArea.getMinX());
            high = Math.min(high, dataArea.getMaxX());
            rect = new Rectangle2D.Double(low,
                    dataArea.getMinY(), high - low,
                    dataArea.getHeight());
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            // clip top and bottom bounds to data area
            low = Math.max(low, dataArea.getMinY());
            high = Math.min(high, dataArea.getMaxY());
            rect = new Rectangle2D.Double(dataArea.getMinX(),
                    low, dataArea.getWidth(),
                    high - low);
        }

        final Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(
                AlphaComposite.SRC_OVER, marker.getAlpha()));
        Paint p = marker.getPaint();
        if (p instanceof GradientPaint) {
            GradientPaint gp = (GradientPaint) p;
            GradientPaintTransformer t = im.getGradientPaintTransformer();
            if (t != null) {
                gp = t.transform(gp, rect);
            }
            g2.setPaint(gp);
        }
        else {
            g2.setPaint(p);
        }
        g2.fill(rect);

        // now draw the outlines, if visible...
        if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
            if (orientation == PlotOrientation.VERTICAL) {
                Line2D line = new Line2D.Double();
                double x0 = dataArea.getMinX();
                double x1 = dataArea.getMaxX();
                g2.setPaint(im.getOutlinePaint());
                g2.setStroke(im.getOutlineStroke());
                if (range.contains(start)) {
                    line.setLine(x0, start2d, x1, start2d);
                    g2.draw(line);
                }
                if (range.contains(end)) {
                    line.setLine(x0, end2d, x1, end2d);
                    g2.draw(line);
                }
            }
            else { // PlotOrientation.HORIZONTAL
                Line2D line = new Line2D.Double();
                double y0 = dataArea.getMinY();
                double y1 = dataArea.getMaxY();
                g2.setPaint(im.getOutlinePaint());
                g2.setStroke(im.getOutlineStroke());
                if (range.contains(start)) {
                    line.setLine(start2d, y0, start2d, y1);
                    g2.draw(line);
                }
                if (range.contains(end)) {
                    line.setLine(end2d, y0, end2d, y1);
                    g2.draw(line);
                }
            }
        }

        String label = marker.getLabel();
        RectangleAnchor anchor = marker.getLabelAnchor();
        if (label != null) {
            Font labelFont = marker.getLabelFont();
            g2.setFont(labelFont);
            g2.setPaint(marker.getLabelPaint());
            Point2D coordinates = calculateRangeMarkerTextAnchorPoint(
                    g2, orientation, dataArea, rect,
                    marker.getLabelOffset(), marker.getLabelOffsetType(),
                    anchor);
            TextUtilities.drawAlignedString(label, g2,
                    (float) coordinates.getX(), (float) coordinates.getY(),
                    marker.getLabelTextAnchor());
        }
        g2.setComposite(originalComposite);
    }
}
```

---

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**

```java
private void drawMarker(Graphics2D g2, XYPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea, boolean isDomain) {
    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double v = axis.valueToJava2D(value, dataArea, isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
        PlotOrientation orientation = plot.getOrientation();
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            line = isDomain
                    ? new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v)
                    : new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
        } else if (orientation == PlotOrientation.VERTICAL) {
            line = isDomain
                    ? new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY())
                    : new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
        }

        final Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha()));
        g2.setPaint(marker.getPaint());
        g2.setStroke(marker.getStroke());
        g2.draw(line);

        String label = marker.getLabel();
        RectangleAnchor anchor = marker.getLabelAnchor();
        if (label != null) {
            Font labelFont = marker.getLabelFont();
            g2.setFont(labelFont);
            g2.setPaint(marker.getLabelPaint());
            Point2D coordinates = isDomain
                    ? calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(),
                            marker.getLabelOffset(), LengthAdjustmentType.EXPAND, anchor)
                    : calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, line.getBounds2D(),
                            marker.getLabelOffset(), LengthAdjustmentType.EXPAND, anchor);
            TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(),
                    marker.getLabelTextAnchor());
        }
        g2.setComposite(originalComposite);
    } else if (marker instanceof IntervalMarker) {
        IntervalMarker im = (IntervalMarker) marker;
        double start = im.getStartValue();
        double end = im.getEndValue();
        Range range = axis.getRange();
        if (!(range.intersects(start, end))) {
            return;
        }

        double start2d = axis.valueToJava2D(start, dataArea, isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
        double end2d = axis.valueToJava2D(end, dataArea, isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
        double low = Math.min(start2d, end2d);
        double high = Math.max(start2d, end2d);

        PlotOrientation orientation = plot.getOrientation();
        Rectangle2D rect = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            low = Math.max(low, dataArea.getMinY());
            high = Math.min(high, dataArea.getMaxY());
            rect = isDomain
                    ? new Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low)
                    : new Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight());
        } else if (orientation == PlotOrientation.VERTICAL) {
            low = Math.max(low, dataArea.getMinX());
            high = Math.min(high, dataArea.getMaxX());
            rect = isDomain
                    ? new Rectangle2D.Double(low, dataArea.getMinY(), high - low, dataArea.getHeight())
                    : new Rectangle2D.Double(dataArea.getMinX(), low, dataArea.getWidth(), high - low);
        }

        final Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, marker.getAlpha()));
        Paint p = marker.getPaint();
        if (p instanceof GradientPaint) {
            GradientPaint gp = (GradientPaint) p;
            GradientPaintTransformer t = im.getGradientPaintTransformer();
            if (t != null) {
                gp = t.transform(gp, rect);
            }
            g2.setPaint(gp);
        } else {
            g2.setPaint(p);
        }
        g2.fill(rect);

        if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
            if (orientation == PlotOrientation.VERTICAL) {
                Line2D line = new Line2D.Double();
                double x0 = dataArea.getMinX();
                double x1 = dataArea.getMaxX();
                g2.setPaint(im.getOutlinePaint());
                g2.setStroke(im.getOutlineStroke());
                if (range.contains(start)) {
                    line.setLine(x0, start2d, x1, start2d);
                    g2.draw(line);
                }
                if (range.contains(end)) {
                    line.setLine(x0, end2d, x1, end2d);
                    g2.draw(line);
                }
            } else {
                Line2D line = new Line2D.Double();
                double y0 = dataArea.getMinY();
                double y1 = dataArea.getMaxY();
                g2.setPaint(im.getOutlinePaint());
                g2.setStroke(im.getOutlineStroke());
                if (range.contains(start)) {
                    line.setLine(start2d, y0, start2d, y1);
                    g2.draw(line);
                }
                if (range.contains(end)) {
                    line.setLine(end2d, y0, end2d, y1);
                    g2.draw(line);
                }
            }
        }

        String label = marker.getLabel();
        RectangleAnchor anchor = marker.getLabelAnchor();
        if (label != null) {
            Font labelFont = marker.getLabelFont();
            g2.setFont(labelFont);
            g2.setPaint(marker.getLabelPaint());
            Point2D coordinates = isDomain
                    ? calculateDomainMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(),
                            marker.getLabelOffsetType(), anchor)
                    : calculateRangeMarkerTextAnchorPoint(g2, orientation, dataArea, rect, marker.getLabelOffset(),
                            marker.getLabelOffsetType(), anchor);
            TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(),
                    marker.getLabelTextAnchor());
        }
        g2.setComposite(originalComposite);
    }
}
```

---

**2. Method Calls Replacing Clones:**

**For `drawDomainMarker`:**

```java
drawMarker(g2, plot, domainAxis, marker, dataArea, true);
```

**For `drawRangeMarker`:**

```java
drawMarker(g2, plot, rangeAxis, marker, dataArea, false);
```",Type-3
13-1-2,src,org.jfree.chart.renderer.category,StatisticalBarRenderer,drawHorizontalItem,233,373,src,org.jfree.chart.renderer.category,StatisticalBarRenderer,drawVerticalItem,391,532,Type 2,"**Code Snippet 1: Method: drawHorizontalItem (Lines: 233-373)**

```java
protected void drawHorizontalItem(Graphics2D g2,
                                  CategoryItemRendererState state,
                                  Rectangle2D dataArea,
                                  CategoryPlot plot,
                                  CategoryAxis domainAxis,
                                  ValueAxis rangeAxis,
                                  StatisticalCategoryDataset dataset,
                                  int row,
                                  int column) {

    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();

    // BAR Y
    double rectY = domainAxis.getCategoryStart(column, getColumnCount(),
            dataArea, xAxisLocation);

    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getHeight() * getItemMargin()
                           / (categoryCount * (seriesCount - 1));
        rectY = rectY + row * (state.getBarWidth() + seriesGap);
    }
    else {
        rectY = rectY + row * state.getBarWidth();
    }

    // BAR X
    Number meanValue = dataset.getMeanValue(row, column);
    if (meanValue == null) {
        return;
    }
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();

    if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
        if (value >= uclip) {
            return; // bar is not visible
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    }
    else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        }
        else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    }
    else { // cases 9, 10, 11 and 12
        if (value <= lclip) {
            return; // bar is not visible
        }
        base = getLowerClip();
        if (value >= uclip) {
           value = uclip;
        }
    }

    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea,
            yAxisLocation);
    double rectX = Math.min(transY2, transY1);

    double rectHeight = state.getBarWidth();
    double rectWidth = Math.abs(transY2 - transY1);

    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,
            rectHeight);
    Paint itemPaint = getItemPaint(row, column);
    GradientPaintTransformer t = getGradientPaintTransformer();
    if (t != null && itemPaint instanceof GradientPaint) {
        itemPaint = t.transform((GradientPaint) itemPaint, bar);
    }
    g2.setPaint(itemPaint);
    g2.fill(bar);

    // draw the outline...
    if (isDrawBarOutline()
            && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
        Stroke stroke = getItemOutlineStroke(row, column);
        Paint paint = getItemOutlinePaint(row, column);
        if (stroke != null && paint != null) {
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(bar);
        }
    }

    // standard deviation lines
    Number n = dataset.getStdDevValue(row, column);
    if (n != null) {
        double valueDelta = n.doubleValue();
        double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                + valueDelta, dataArea, yAxisLocation);
        double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                - valueDelta, dataArea, yAxisLocation);

        if (this.errorIndicatorPaint != null) {
            g2.setPaint(this.errorIndicatorPaint);
        }
        else {
            g2.setPaint(getItemOutlinePaint(row, column));
        }
        if (this.errorIndicatorStroke != null) {
            g2.setStroke(this.errorIndicatorStroke);
        }
        else {
            g2.setStroke(getItemOutlineStroke(row, column));
        }
        Line2D line = null;
        line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d,
                                 highVal, rectY + rectHeight / 2.0d);
        g2.draw(line);
        line = new Line2D.Double(highVal, rectY + rectHeight * 0.25,
                                 highVal, rectY + rectHeight * 0.75);
        g2.draw(line);
        line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25,
                                 lowVal, rectY + rectHeight * 0.75);
        g2.draw(line);
    }

    CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
            column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                (value < 0.0));
    }

    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }

}
```

---

**Code Snippet 2: Method: drawVerticalItem (Lines: 391-532)**

```java
protected void drawVerticalItem(Graphics2D g2,
                                CategoryItemRendererState state,
                                Rectangle2D dataArea,
                                CategoryPlot plot,
                                CategoryAxis domainAxis,
                                ValueAxis rangeAxis,
                                StatisticalCategoryDataset dataset,
                                int row,
                                int column) {

    RectangleEdge xAxisLocation = plot.getDomainAxisEdge();

    // BAR X
    double rectX = domainAxis.getCategoryStart(column, getColumnCount(),
            dataArea, xAxisLocation);

    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = dataArea.getWidth() * getItemMargin()
                           / (categoryCount * (seriesCount - 1));
        rectX = rectX + row * (state.getBarWidth() + seriesGap);
    }
    else {
        rectX = rectX + row * state.getBarWidth();
    }

    // BAR Y
    Number meanValue = dataset.getMeanValue(row, column);
    if (meanValue == null) {
        return;
    }

    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();

    if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
        if (value >= uclip) {
            return; // bar is not visible
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    }
    else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
        if (value >= uclip) {
            value = uclip;
        }
        else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    }
    else { // cases 9, 10, 11 and 12
        if (value <= lclip) {
            return; // bar is not visible
        }
        base = getLowerClip();
        if (value >= uclip) {
           value = uclip;
        }
    }

    RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
    double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
    double transY2 = rangeAxis.valueToJava2D(value, dataArea,
            yAxisLocation);
    double rectY = Math.min(transY2, transY1);

    double rectWidth = state.getBarWidth();
    double rectHeight = Math.abs(transY2 - transY1);

    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,
            rectHeight);
    Paint itemPaint = getItemPaint(row, column);
    GradientPaintTransformer t = getGradientPaintTransformer();
    if (t != null && itemPaint instanceof GradientPaint) {
        itemPaint = t.transform((GradientPaint) itemPaint, bar);
    }
    g2.setPaint(itemPaint);
    g2.fill(bar);
    // draw the outline...
    if (isDrawBarOutline()
            && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
        Stroke stroke = getItemOutlineStroke(row, column);
        Paint paint = getItemOutlinePaint(row, column);
        if (stroke != null && paint != null) {
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(bar);
        }
    }

    // standard deviation lines
    Number n = dataset.getStdDevValue(row, column);
    if (n != null) {
        double valueDelta = n.doubleValue();
        double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                + valueDelta, dataArea, yAxisLocation);
        double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                - valueDelta, dataArea, yAxisLocation);

        if (this.errorIndicatorPaint != null) {
            g2.setPaint(this.errorIndicatorPaint);
        }
        else {
            g2.setPaint(getItemOutlinePaint(row, column));
        }
        if (this.errorIndicatorStroke != null) {
            g2.setStroke(this.errorIndicatorStroke);
        }
        else {
            g2.setStroke(getItemOutlineStroke(row, column));
        }

        Line2D line = null;
        line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal,
                                 rectX + rectWidth / 2.0d, highVal);
        g2.draw(line);
        line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal,
                                 rectX + rectWidth / 2.0d + 5.0d, highVal);
        g2.draw(line);
        line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,
                                 rectX + rectWidth / 2.0d + 5.0d, lowVal);
        g2.draw(line);
    }

    CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
            column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                (value < 0.0));
    }

    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}
```

---

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., handling horizontal vs. vertical orientation).","**1. Extracted Method:**

```java
private void drawBar(Graphics2D g2,
                     CategoryItemRendererState state,
                     Rectangle2D dataArea,
                     CategoryPlot plot,
                     CategoryAxis domainAxis,
                     ValueAxis rangeAxis,
                     StatisticalCategoryDataset dataset,
                     int row,
                     int column,
                     boolean isHorizontal) {

    RectangleEdge axisLocation = isHorizontal ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge();

    // BAR Position
    double rectPos = isHorizontal
            ? domainAxis.getCategoryStart(column, getColumnCount(), dataArea, axisLocation)
            : domainAxis.getCategoryStart(column, getColumnCount(), dataArea, axisLocation);

    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = (isHorizontal ? dataArea.getHeight() : dataArea.getWidth()) * getItemMargin()
                           / (categoryCount * (seriesCount - 1));
        rectPos = rectPos + row * (state.getBarWidth() + seriesGap);
    } else {
        rectPos = rectPos + row * state.getBarWidth();
    }

    // BAR Value
    Number meanValue = dataset.getMeanValue(row, column);
    if (meanValue == null) {
        return;
    }
    double value = meanValue.doubleValue();
    double base = 0.0;
    double lclip = getLowerClip();
    double uclip = getUpperClip();

    if (uclip <= 0.0) {
        if (value >= uclip) {
            return;
        }
        base = uclip;
        if (value <= lclip) {
            value = lclip;
        }
    } else if (lclip <= 0.0) {
        if (value >= uclip) {
            value = uclip;
        } else {
            if (value <= lclip) {
                value = lclip;
            }
        }
    } else {
        if (value <= lclip) {
            return;
        }
        base = getLowerClip();
        if (value >= uclip) {
           value = uclip;
        }
    }

    RectangleEdge valueAxisLocation = isHorizontal ? plot.getRangeAxisEdge() : plot.getDomainAxisEdge();
    double transBase = rangeAxis.valueToJava2D(base, dataArea, valueAxisLocation);
    double transValue = rangeAxis.valueToJava2D(value, dataArea, valueAxisLocation);

    double rectStart = Math.min(transBase, transValue);
    double rectLength = Math.abs(transValue - transBase);

    double rectWidth = isHorizontal ? rectLength : state.getBarWidth();
    double rectHeight = isHorizontal ? state.getBarWidth() : rectLength;

    double rectX = isHorizontal ? rectStart : rectPos;
    double rectY = isHorizontal ? rectPos : rectStart;

    Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
    Paint itemPaint = getItemPaint(row, column);
    GradientPaintTransformer t = getGradientPaintTransformer();
    if (t != null && itemPaint instanceof GradientPaint) {
        itemPaint = t.transform((GradientPaint) itemPaint, bar);
    }
    g2.setPaint(itemPaint);
    g2.fill(bar);

    // draw the outline...
    if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
        Stroke stroke = getItemOutlineStroke(row, column);
        Paint paint = getItemOutlinePaint(row, column);
        if (stroke != null && paint != null) {
            g2.setStroke(stroke);
            g2.setPaint(paint);
            g2.draw(bar);
        }
    }

    // standard deviation lines
    Number n = dataset.getStdDevValue(row, column);
    if (n != null) {
        double valueDelta = n.doubleValue();
        double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, valueAxisLocation);
        double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, valueAxisLocation);

        if (this.errorIndicatorPaint != null) {
            g2.setPaint(this.errorIndicatorPaint);
        } else {
            g2.setPaint(getItemOutlinePaint(row, column));
        }
        if (this.errorIndicatorStroke != null) {
            g2.setStroke(this.errorIndicatorStroke);
        } else {
            g2.setStroke(getItemOutlineStroke(row, column));
        }

        Line2D line = isHorizontal
                ? new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d)
                : new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
        g2.draw(line);

        line = isHorizontal
                ? new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75)
                : new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
        g2.draw(line);

        line = isHorizontal
                ? new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75)
                : new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
        g2.draw(line);
    }

    CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
    }

    // add an item entity, if this information is being collected
    EntityCollection entities = state.getEntityCollection();
    if (entities != null) {
        addItemEntity(entities, dataset, row, column, bar);
    }
}
```

---

**2. Method Calls to Replace the Clones:**

**For `drawHorizontalItem`:**
```java
protected void drawHorizontalItem(Graphics2D g2,
                                  CategoryItemRendererState state,
                                  Rectangle2D dataArea,
                                  CategoryPlot plot,
                                  CategoryAxis domainAxis,
                                  ValueAxis rangeAxis,
                                  StatisticalCategoryDataset dataset,
                                  int row,
                                  int column) {
    drawBar(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, true);
}
```

**For `drawVerticalItem`:**
```java
protected void drawVerticalItem(Graphics2D g2,
                                CategoryItemRendererState state,
                                Rectangle2D dataArea,
                                CategoryPlot plot,
                                CategoryAxis domainAxis,
                                ValueAxis rangeAxis,
                                StatisticalCategoryDataset dataset,
                                int row,
                                int column) {
    drawBar(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, false);
}
```",Type-3
41-1-2,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,drawStackHorizontal,399,488,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,drawStackVertical,595,685,Type 2,"**Code Snippet 1: Method: drawStackHorizontal (Lines: 399-488)**

```java
protected void drawStackHorizontal(List values, Comparable category,
        Graphics2D g2, CategoryItemRendererState state,
        Rectangle2D dataArea, CategoryPlot plot,
        CategoryAxis domainAxis, ValueAxis rangeAxis,
        CategoryDataset dataset) {

    int column = dataset.getColumnIndex(category);
    double barX0 = domainAxis.getCategoryMiddle(column,
            dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge())
            - state.getBarWidth() / 2.0;
    double barW = state.getBarWidth();

    // a list to store the series index and bar region, so we can draw
    // all the labels at the end...
    List itemLabelList = new ArrayList();

    // draw the blocks
    boolean inverted = rangeAxis.isInverted();
    int blockCount = values.size() - 1;
    for (int k = 0; k < blockCount; k++) {
        int index = (inverted ? blockCount - k - 1 : k);
        Object[] prev = (Object[]) values.get(index);
        Object[] curr = (Object[]) values.get(index + 1);
        int series = 0;
        if (curr[0] == null) {
            series = -((Integer) prev[0]).intValue();
        }
        else {
            series = ((Integer) curr[0]).intValue();
            if (series < 0) {
                series = -((Integer) prev[0]).intValue();
            }
        }
        double v0 = ((Double) prev[1]).doubleValue();
        double vv0 = rangeAxis.valueToJava2D(v0, dataArea,
                plot.getRangeAxisEdge());

        double v1 = ((Double) curr[1]).doubleValue();
        double vv1 = rangeAxis.valueToJava2D(v1, dataArea,
                plot.getRangeAxisEdge());

        Shape[] faces = createHorizontalBlock(barX0, barW, vv0, vv1,
                inverted);
        Paint fillPaint = getItemPaint(series, column);
        Paint fillPaintDark = fillPaint;
        if (fillPaintDark instanceof Color) {
            fillPaintDark = ((Color) fillPaint).darker();
        }
        boolean drawOutlines = isDrawBarOutline();
        Paint outlinePaint = fillPaint;
        if (drawOutlines) {
            outlinePaint = getItemOutlinePaint(series, column);
            g2.setStroke(getItemOutlineStroke(series, column));
        }
        for (int f = 0; f < 6; f++) {
            if (f == 5) {
                g2.setPaint(fillPaint);
            }
            else {
                g2.setPaint(fillPaintDark);
            }
            g2.fill(faces[f]);
            if (drawOutlines) {
                g2.setPaint(outlinePaint);
                g2.draw(faces[f]);
            }
        }

        itemLabelList.add(new Object[] {new Integer(series),
                faces[5].getBounds2D(),
                BooleanUtilities.valueOf(v0 < getBase())});

        // add an item entity, if this information is being collected
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, series, column, faces[5]);
        }

    }

    for (int i = 0; i < itemLabelList.size(); i++) {
        Object[] record = (Object[]) itemLabelList.get(i);
        int series = ((Integer) record[0]).intValue();
        Rectangle2D bar = (Rectangle2D) record[1];
        boolean neg = ((Boolean) record[2]).booleanValue();
        CategoryItemLabelGenerator generator
                = getItemLabelGenerator(series, column);
        if (generator != null && isItemLabelVisible(series, column)) {
            drawItemLabel(g2, dataset, series, column, plot, generator,
                    bar, neg);
        }

    }
}
```

---

**Code Snippet 2: Method: drawStackVertical (Lines: 595-685)**

```java
protected void drawStackVertical(List values, Comparable category,
        Graphics2D g2, CategoryItemRendererState state,
        Rectangle2D dataArea, CategoryPlot plot,
        CategoryAxis domainAxis, ValueAxis rangeAxis,
        CategoryDataset dataset) {

    int column = dataset.getColumnIndex(category);
    double barX0 = domainAxis.getCategoryMiddle(column,
            dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge())
            - state.getBarWidth() / 2.0;
    double barW = state.getBarWidth();

    // a list to store the series index and bar region, so we can draw
    // all the labels at the end...
    List itemLabelList = new ArrayList();

    // draw the blocks
    boolean inverted = rangeAxis.isInverted();
    int blockCount = values.size() - 1;
    for (int k = 0; k < blockCount; k++) {
        int index = (inverted ? blockCount - k - 1 : k);
        Object[] prev = (Object[]) values.get(index);
        Object[] curr = (Object[]) values.get(index + 1);
        int series = 0;
        if (curr[0] == null) {
            series = -((Integer) prev[0]).intValue();
        }
        else {
            series = ((Integer) curr[0]).intValue();
            if (series < 0) {
                series = -((Integer) prev[0]).intValue();
            }
        }
        double v0 = ((Double) prev[1]).doubleValue();
        double vv0 = rangeAxis.valueToJava2D(v0, dataArea,
                plot.getRangeAxisEdge());

        double v1 = ((Double) curr[1]).doubleValue();
        double vv1 = rangeAxis.valueToJava2D(v1, dataArea,
                plot.getRangeAxisEdge());

        Shape[] faces = createVerticalBlock(barX0, barW, vv0, vv1,
                inverted);
        Paint fillPaint = getItemPaint(series, column);
        Paint fillPaintDark = fillPaint;
        if (fillPaintDark instanceof Color) {
            fillPaintDark = ((Color) fillPaint).darker();
        }
        boolean drawOutlines = isDrawBarOutline();
        Paint outlinePaint = fillPaint;
        if (drawOutlines) {
            outlinePaint = getItemOutlinePaint(series, column);
            g2.setStroke(getItemOutlineStroke(series, column));
        }

        for (int f = 0; f < 6; f++) {
            if (f == 5) {
                g2.setPaint(fillPaint);
            }
            else {
                g2.setPaint(fillPaintDark);
            }
            g2.fill(faces[f]);
            if (drawOutlines) {
                g2.setPaint(outlinePaint);
                g2.draw(faces[f]);
            }
        }

        itemLabelList.add(new Object[] {new Integer(series),
                faces[5].getBounds2D(),
                BooleanUtilities.valueOf(v0 < getBase())});

        // add an item entity, if this information is being collected
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, series, column, faces[5]);
        }

    }

    for (int i = 0; i < itemLabelList.size(); i++) {
        Object[] record = (Object[]) itemLabelList.get(i);
        int series = ((Integer) record[0]).intValue();
        Rectangle2D bar = (Rectangle2D) record[1];
        boolean neg = ((Boolean) record[2]).booleanValue();
        CategoryItemLabelGenerator generator
                = getItemLabelGenerator(series, column);
        if (generator != null && isItemLabelVisible(series, column)) {
            drawItemLabel(g2, dataset, series, column, plot, generator,
                    bar, neg);
        }

    }
}
```

---

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `createHorizontalBlock` vs. `createVerticalBlock`).","**1. Extracted Method:**

```java
private void drawStack(List values, Comparable category,
        Graphics2D g2, CategoryItemRendererState state,
        Rectangle2D dataArea, CategoryPlot plot,
        CategoryAxis domainAxis, ValueAxis rangeAxis,
        CategoryDataset dataset, boolean isHorizontal) {

    int column = dataset.getColumnIndex(category);
    double barX0 = domainAxis.getCategoryMiddle(column,
            dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge())
            - state.getBarWidth() / 2.0;
    double barW = state.getBarWidth();

    List itemLabelList = new ArrayList();

    boolean inverted = rangeAxis.isInverted();
    int blockCount = values.size() - 1;
    for (int k = 0; k < blockCount; k++) {
        int index = (inverted ? blockCount - k - 1 : k);
        Object[] prev = (Object[]) values.get(index);
        Object[] curr = (Object[]) values.get(index + 1);
        int series = 0;
        if (curr[0] == null) {
            series = -((Integer) prev[0]).intValue();
        } else {
            series = ((Integer) curr[0]).intValue();
            if (series < 0) {
                series = -((Integer) prev[0]).intValue();
            }
        }
        double v0 = ((Double) prev[1]).doubleValue();
        double vv0 = rangeAxis.valueToJava2D(v0, dataArea,
                plot.getRangeAxisEdge());

        double v1 = ((Double) curr[1]).doubleValue();
        double vv1 = rangeAxis.valueToJava2D(v1, dataArea,
                plot.getRangeAxisEdge());

        Shape[] faces = isHorizontal
                ? createHorizontalBlock(barX0, barW, vv0, vv1, inverted)
                : createVerticalBlock(barX0, barW, vv0, vv1, inverted);

        Paint fillPaint = getItemPaint(series, column);
        Paint fillPaintDark = fillPaint;
        if (fillPaintDark instanceof Color) {
            fillPaintDark = ((Color) fillPaint).darker();
        }
        boolean drawOutlines = isDrawBarOutline();
        Paint outlinePaint = fillPaint;
        if (drawOutlines) {
            outlinePaint = getItemOutlinePaint(series, column);
            g2.setStroke(getItemOutlineStroke(series, column));
        }

        for (int f = 0; f < 6; f++) {
            if (f == 5) {
                g2.setPaint(fillPaint);
            } else {
                g2.setPaint(fillPaintDark);
            }
            g2.fill(faces[f]);
            if (drawOutlines) {
                g2.setPaint(outlinePaint);
                g2.draw(faces[f]);
            }
        }

        itemLabelList.add(new Object[]{new Integer(series),
                faces[5].getBounds2D(),
                BooleanUtilities.valueOf(v0 < getBase())});

        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, series, column, faces[5]);
        }
    }

    for (int i = 0; i < itemLabelList.size(); i++) {
        Object[] record = (Object[]) itemLabelList.get(i);
        int series = ((Integer) record[0]).intValue();
        Rectangle2D bar = (Rectangle2D) record[1];
        boolean neg = ((Boolean) record[2]).booleanValue();
        CategoryItemLabelGenerator generator
                = getItemLabelGenerator(series, column);
        if (generator != null && isItemLabelVisible(series, column)) {
            drawItemLabel(g2, dataset, series, column, plot, generator,
                    bar, neg);
        }
    }
}
```

---

**2. Method Calls Replacing the Clones:**

**For `drawStackHorizontal`:**

```java
protected void drawStackHorizontal(List values, Comparable category,
        Graphics2D g2, CategoryItemRendererState state,
        Rectangle2D dataArea, CategoryPlot plot,
        CategoryAxis domainAxis, ValueAxis rangeAxis,
        CategoryDataset dataset) {
    drawStack(values, category, g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, true);
}
```

**For `drawStackVertical`:**

```java
protected void drawStackVertical(List values, Comparable category,
        Graphics2D g2, CategoryItemRendererState state,
        Rectangle2D dataArea, CategoryPlot plot,
        CategoryAxis domainAxis, ValueAxis rangeAxis,
        CategoryDataset dataset) {
    drawStack(values, category, g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, false);
}
```",Type-3
48-1-2,src,org.jfree.chart.axis,SymbolAxis,refreshTicksHorizontal,565,645,src,org.jfree.chart.axis,SymbolAxis,refreshTicksVertical,659,739,Type 2,"**Code Snippet 1 - Method: refreshTicksHorizontal (Lines: 565-645)**  
```java
protected List refreshTicksHorizontal(Graphics2D g2,
                                          Rectangle2D dataArea,
                                          RectangleEdge edge) {

        List ticks = new java.util.ArrayList();

        Font tickLabelFont = getTickLabelFont();
        g2.setFont(tickLabelFont);

        double size = getTickUnit().getSize();
        int count = calculateVisibleTickCount();
        double lowestTickValue = calculateLowestVisibleTickValue();

        double previousDrawnTickLabelPos = 0.0;         
        double previousDrawnTickLabelLength = 0.0;              

        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
            for (int i = 0; i < count; i++) {
                double currentTickValue = lowestTickValue + (i * size);
                double xx = valueToJava2D(currentTickValue, dataArea, edge);
                String tickLabel;
                NumberFormat formatter = getNumberFormatOverride();
                if (formatter != null) {
                    tickLabel = formatter.format(currentTickValue);
                }
                else {
                    tickLabel = valueToString(currentTickValue);
                }
                
                // avoid to draw overlapping tick labels
                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2, 
                        g2.getFontMetrics());
                double tickLabelLength = isVerticalTickLabels() 
                        ? bounds.getHeight() : bounds.getWidth();
                boolean tickLabelsOverlapping = false;
                if (i > 0) {
                    double avgTickLabelLength = (previousDrawnTickLabelLength 
                            + tickLabelLength) / 2.0;
                    if (Math.abs(xx - previousDrawnTickLabelPos) 
                            < avgTickLabelLength) {
                        tickLabelsOverlapping = true;
                    }
                }
                if (tickLabelsOverlapping) {
                    tickLabel = """"; // don't draw this tick label
                }
                else {
                    // remember these values for next comparison
                    previousDrawnTickLabelPos = xx;
                    previousDrawnTickLabelLength = tickLabelLength;         
                } 
                
                TextAnchor anchor = null;
                TextAnchor rotationAnchor = null;
                double angle = 0.0;
                if (isVerticalTickLabels()) {
                    anchor = TextAnchor.CENTER_RIGHT;
                    rotationAnchor = TextAnchor.CENTER_RIGHT;
                    if (edge == RectangleEdge.TOP) {
                        angle = Math.PI / 2.0;
                    }
                    else {
                        angle = -Math.PI / 2.0;
                    }
                }
                else {
                    if (edge == RectangleEdge.TOP) {
                        anchor = TextAnchor.BOTTOM_CENTER;
                        rotationAnchor = TextAnchor.BOTTOM_CENTER;
                    }
                    else {
                        anchor = TextAnchor.TOP_CENTER;
                        rotationAnchor = TextAnchor.TOP_CENTER;
                    }
                }
                Tick tick = new NumberTick(new Double(currentTickValue), 
                        tickLabel, anchor, rotationAnchor, angle);
                ticks.add(tick);
            }
        }
        return ticks;

    }
```

**Code Snippet 2 - Method: refreshTicksVertical (Lines: 659-739)**  
```java
protected List refreshTicksVertical(Graphics2D g2,
                                        Rectangle2D dataArea,
                                        RectangleEdge edge) {

        List ticks = new java.util.ArrayList();

        Font tickLabelFont = getTickLabelFont();
        g2.setFont(tickLabelFont);

        double size = getTickUnit().getSize();
        int count = calculateVisibleTickCount();
        double lowestTickValue = calculateLowestVisibleTickValue();

        double previousDrawnTickLabelPos = 0.0;         
        double previousDrawnTickLabelLength = 0.0;              

        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
            for (int i = 0; i < count; i++) {
                double currentTickValue = lowestTickValue + (i * size);
                double yy = valueToJava2D(currentTickValue, dataArea, edge);
                String tickLabel;
                NumberFormat formatter = getNumberFormatOverride();
                if (formatter != null) {
                    tickLabel = formatter.format(currentTickValue);
                }
                else {
                    tickLabel = valueToString(currentTickValue);
                }

                // avoid to draw overlapping tick labels
                Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2,
                        g2.getFontMetrics());
                double tickLabelLength = isVerticalTickLabels() 
                    ? bounds.getWidth() : bounds.getHeight();
                boolean tickLabelsOverlapping = false;
                if (i > 0) {
                    double avgTickLabelLength = (previousDrawnTickLabelLength 
                            + tickLabelLength) / 2.0;
                    if (Math.abs(yy - previousDrawnTickLabelPos) 
                            < avgTickLabelLength) {
                        tickLabelsOverlapping = true;    
                    }
                }
                if (tickLabelsOverlapping) {
                    tickLabel = """"; // don't draw this tick label
                }
                else {
                    // remember these values for next comparison
                    previousDrawnTickLabelPos = yy;
                    previousDrawnTickLabelLength = tickLabelLength;         
                }
                
                TextAnchor anchor = null;
                TextAnchor rotationAnchor = null;
                double angle = 0.0;
                if (isVerticalTickLabels()) {
                    anchor = TextAnchor.BOTTOM_CENTER;
                    rotationAnchor = TextAnchor.BOTTOM_CENTER;
                    if (edge == RectangleEdge.LEFT) {
                        angle = -Math.PI / 2.0;
                    }
                    else {
                        angle = Math.PI / 2.0;
                    }                    
                }
                else {
                    if (edge == RectangleEdge.LEFT) {
                        anchor = TextAnchor.CENTER_RIGHT;
                        rotationAnchor = TextAnchor.CENTER_RIGHT;
                    }
                    else {
                        anchor = TextAnchor.CENTER_LEFT;
                        rotationAnchor = TextAnchor.CENTER_LEFT;
                    }
                }
                Tick tick = new NumberTick(new Double(currentTickValue), 
                        tickLabel, anchor, rotationAnchor, angle);
                ticks.add(tick);
            }
        }
        return ticks;
        
    }
```

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `xx` vs. `yy`, horizontal vs. vertical logic, and edge-specific conditions).","**1. Extracted Method:**  
```java
private List refreshTicks(Graphics2D g2, 
                          Rectangle2D dataArea, 
                          RectangleEdge edge, 
                          boolean isHorizontal) {

    List ticks = new java.util.ArrayList();

    Font tickLabelFont = getTickLabelFont();
    g2.setFont(tickLabelFont);

    double size = getTickUnit().getSize();
    int count = calculateVisibleTickCount();
    double lowestTickValue = calculateLowestVisibleTickValue();

    double previousDrawnTickLabelPos = 0.0;         
    double previousDrawnTickLabelLength = 0.0;              

    if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
        for (int i = 0; i < count; i++) {
            double currentTickValue = lowestTickValue + (i * size);
            double position = valueToJava2D(currentTickValue, dataArea, edge);
            String tickLabel;
            NumberFormat formatter = getNumberFormatOverride();
            if (formatter != null) {
                tickLabel = formatter.format(currentTickValue);
            } else {
                tickLabel = valueToString(currentTickValue);
            }

            // avoid to draw overlapping tick labels
            Rectangle2D bounds = TextUtilities.getTextBounds(tickLabel, g2, 
                    g2.getFontMetrics());
            double tickLabelLength = isVerticalTickLabels() 
                    ? (isHorizontal ? bounds.getHeight() : bounds.getWidth()) 
                    : (isHorizontal ? bounds.getWidth() : bounds.getHeight());
            boolean tickLabelsOverlapping = false;
            if (i > 0) {
                double avgTickLabelLength = (previousDrawnTickLabelLength 
                        + tickLabelLength) / 2.0;
                if (Math.abs(position - previousDrawnTickLabelPos) 
                        < avgTickLabelLength) {
                    tickLabelsOverlapping = true;
                }
            }
            if (tickLabelsOverlapping) {
                tickLabel = """"; // don't draw this tick label
            } else {
                // remember these values for next comparison
                previousDrawnTickLabelPos = position;
                previousDrawnTickLabelLength = tickLabelLength;         
            } 

            TextAnchor anchor = null;
            TextAnchor rotationAnchor = null;
            double angle = 0.0;
            if (isVerticalTickLabels()) {
                if (isHorizontal) {
                    anchor = TextAnchor.CENTER_RIGHT;
                    rotationAnchor = TextAnchor.CENTER_RIGHT;
                    angle = (edge == RectangleEdge.TOP) ? Math.PI / 2.0 : -Math.PI / 2.0;
                } else {
                    anchor = TextAnchor.BOTTOM_CENTER;
                    rotationAnchor = TextAnchor.BOTTOM_CENTER;
                    angle = (edge == RectangleEdge.LEFT) ? -Math.PI / 2.0 : Math.PI / 2.0;
                }
            } else {
                if (isHorizontal) {
                    anchor = (edge == RectangleEdge.TOP) 
                            ? TextAnchor.BOTTOM_CENTER : TextAnchor.TOP_CENTER;
                    rotationAnchor = anchor;
                } else {
                    anchor = (edge == RectangleEdge.LEFT) 
                            ? TextAnchor.CENTER_RIGHT : TextAnchor.CENTER_LEFT;
                    rotationAnchor = anchor;
                }
            }
            Tick tick = new NumberTick(new Double(currentTickValue), 
                    tickLabel, anchor, rotationAnchor, angle);
            ticks.add(tick);
        }
    }
    return ticks;
}
```

**2. Method Calls to Replace the Clones:**  

**For `refreshTicksHorizontal`:**  
```java
protected List refreshTicksHorizontal(Graphics2D g2,
                                      Rectangle2D dataArea,
                                      RectangleEdge edge) {
    return refreshTicks(g2, dataArea, edge, true);
}
```

**For `refreshTicksVertical`:**  
```java
protected List refreshTicksVertical(Graphics2D g2,
                                    Rectangle2D dataArea,
                                    RectangleEdge edge) {
    return refreshTicks(g2, dataArea, edge, false);
}
```",Type-3
113-1-2,src,org.jfree.chart.plot,Plot,resolveDomainAxisLocation,1310,1358,src,org.jfree.chart.plot,Plot,resolveRangeAxisLocation,1370,1419,Type 2,"**Code Snippet 1: Method: resolveDomainAxisLocation (Lines: 1310-1358)**

```java
public static RectangleEdge resolveDomainAxisLocation(
        AxisLocation location, PlotOrientation orientation) {

    if (location == null) {
        throw new IllegalArgumentException(""Null 'location' argument."");
    }
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    RectangleEdge result = null;

    if (location == AxisLocation.TOP_OR_RIGHT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.RIGHT;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.TOP;
        }
    }
    else if (location == AxisLocation.TOP_OR_LEFT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.LEFT;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.TOP;
        }
    }
    else if (location == AxisLocation.BOTTOM_OR_RIGHT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.RIGHT;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.BOTTOM;
        }
    }
    else if (location == AxisLocation.BOTTOM_OR_LEFT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.LEFT;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.BOTTOM;
        }
    }
    // the above should cover all the options...
    if (result == null) {
        throw new IllegalStateException(""resolveDomainAxisLocation()"");
    }
    return result;

}
```

---

**Code Snippet 2: Method: resolveRangeAxisLocation (Lines: 1370-1419)**

```java
public static RectangleEdge resolveRangeAxisLocation(
        AxisLocation location, PlotOrientation orientation) {

    if (location == null) {
        throw new IllegalArgumentException(""Null 'location' argument."");
    }
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    RectangleEdge result = null;

    if (location == AxisLocation.TOP_OR_RIGHT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.TOP;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.RIGHT;
        }
    }
    else if (location == AxisLocation.TOP_OR_LEFT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.TOP;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.LEFT;
        }
    }
    else if (location == AxisLocation.BOTTOM_OR_RIGHT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.BOTTOM;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.RIGHT;
        }
    }
    else if (location == AxisLocation.BOTTOM_OR_LEFT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = RectangleEdge.BOTTOM;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = RectangleEdge.LEFT;
        }
    }

    // the above should cover all the options...
    if (result == null) {
        throw new IllegalStateException(""resolveRangeAxisLocation()"");
    }
    return result;

}
```

---

**Clone Type:**  
The two code snippets are **Type-1 clones** because they are structurally identical with only minor differences in variable names and string literals.","**1. Extracted Method:**

```java
private static RectangleEdge resolveAxisLocation(
        AxisLocation location, PlotOrientation orientation, 
        boolean isDomain) {

    if (location == null) {
        throw new IllegalArgumentException(""Null 'location' argument."");
    }
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    RectangleEdge result = null;

    if (location == AxisLocation.TOP_OR_RIGHT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = isDomain ? RectangleEdge.RIGHT : RectangleEdge.TOP;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = isDomain ? RectangleEdge.TOP : RectangleEdge.RIGHT;
        }
    }
    else if (location == AxisLocation.TOP_OR_LEFT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = isDomain ? RectangleEdge.LEFT : RectangleEdge.TOP;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = isDomain ? RectangleEdge.TOP : RectangleEdge.LEFT;
        }
    }
    else if (location == AxisLocation.BOTTOM_OR_RIGHT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = isDomain ? RectangleEdge.RIGHT : RectangleEdge.BOTTOM;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = isDomain ? RectangleEdge.BOTTOM : RectangleEdge.RIGHT;
        }
    }
    else if (location == AxisLocation.BOTTOM_OR_LEFT) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            result = isDomain ? RectangleEdge.LEFT : RectangleEdge.BOTTOM;
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            result = isDomain ? RectangleEdge.BOTTOM : RectangleEdge.LEFT;
        }
    }

    if (result == null) {
        throw new IllegalStateException(""resolveAxisLocation()"");
    }
    return result;
}
```

---

**2. Method Calls Replacing the Clones:**

**For `resolveDomainAxisLocation`:**

```java
public static RectangleEdge resolveDomainAxisLocation(
        AxisLocation location, PlotOrientation orientation) {
    return resolveAxisLocation(location, orientation, true);
}
```

**For `resolveRangeAxisLocation`:**

```java
public static RectangleEdge resolveRangeAxisLocation(
        AxisLocation location, PlotOrientation orientation) {
    return resolveAxisLocation(location, orientation, false);
}
```",Type-1
135-1-2,src,org.jfree.data.general,DatasetUtilities,findMinimumRangeValue,1163,1206,src,org.jfree.data.general,DatasetUtilities,findMaximumRangeValue,1280,1322,Type 2,"**Code Snippet 1: findMinimumRangeValue (Lines: 1163-1206)**

```java
/**
 * Returns the minimum range value for the specified dataset.  This is
 * easy if the dataset implements the {@link RangeInfo} interface (a good
 * idea if there is an efficient way to determine the minimum value).
 * Otherwise, it involves iterating over the entire data-set.  Returns
 * <code>null</code> if all the data values in the dataset are
 * <code>null</code>.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The minimum value (possibly <code>null</code>).
 */
public static Number findMinimumRangeValue(CategoryDataset dataset) {

    // check parameters...
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }

    // work out the minimum value...
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(info.getRangeLowerBound(true));
    }

    // hasn't implemented RangeInfo, so we'll have to iterate...
    else {
        double minimum = Double.POSITIVE_INFINITY;
        int seriesCount = dataset.getRowCount();
        int itemCount = dataset.getColumnCount();
        for (int series = 0; series < seriesCount; series++) {
            for (int item = 0; item < itemCount; item++) {
                Number value;
                if (dataset instanceof IntervalCategoryDataset) {
                    IntervalCategoryDataset icd
                        = (IntervalCategoryDataset) dataset;
                    value = icd.getStartValue(series, item);
                }
                else {
                    value = dataset.getValue(series, item);
                }
                if (value != null) {
                    minimum = Math.min(minimum, value.doubleValue());
                }
            }
        }
        if (minimum == Double.POSITIVE_INFINITY) {
            return null;
        }
        else {
            return new Double(minimum);
        }

    }

}
```

---

**Code Snippet 2: findMaximumRangeValue (Lines: 1280-1322)**

```java
/**
 * Returns the maximum range value for the specified dataset.  This is easy
 * if the dataset implements the {@link RangeInfo} interface (a good idea
 * if there is an efficient way to determine the maximum value).
 * Otherwise, it involves iterating over the entire data-set.  Returns
 * <code>null</code> if all the data values are <code>null</code>.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The maximum value (possibly <code>null</code>).
 */
public static Number findMaximumRangeValue(CategoryDataset dataset) {

    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }

    // work out the minimum value...
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(info.getRangeUpperBound(true));
    }

    // hasn't implemented RangeInfo, so we'll have to iterate...
    else {

        double maximum = Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getRowCount();
        int itemCount = dataset.getColumnCount();
        for (int series = 0; series < seriesCount; series++) {
            for (int item = 0; item < itemCount; item++) {
                Number value;
                if (dataset instanceof IntervalCategoryDataset) {
                    IntervalCategoryDataset icd
                        = (IntervalCategoryDataset) dataset;
                    value = icd.getEndValue(series, item);
                }
                else {
                    value = dataset.getValue(series, item);
                }
                if (value != null) {
                    maximum = Math.max(maximum, value.doubleValue());
                }
            }
        }
        if (maximum == Double.NEGATIVE_INFINITY) {
            return null;
        }
        else {
            return new Double(maximum);
        }

    }

}
```

---

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `Math.min` vs. `Math.max`, `getStartValue` vs. `getEndValue`, and variable names like `minimum` vs. `maximum`).","**1. Extracted Method:**

```java
/**
 * Finds the extreme range value (minimum or maximum) for the specified dataset.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param findMinimum  flag to determine whether to find minimum (true) or maximum (false).
 *
 * @return The extreme value (possibly <code>null</code>).
 */
private static Number findExtremeRangeValue(CategoryDataset dataset, boolean findMinimum) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }

    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(findMinimum ? info.getRangeLowerBound(true) : info.getRangeUpperBound(true));
    }

    double extremeValue = findMinimum ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    int seriesCount = dataset.getRowCount();
    int itemCount = dataset.getColumnCount();
    for (int series = 0; series < seriesCount; series++) {
        for (int item = 0; item < itemCount; item++) {
            Number value;
            if (dataset instanceof IntervalCategoryDataset) {
                IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;
                value = findMinimum ? icd.getStartValue(series, item) : icd.getEndValue(series, item);
            } else {
                value = dataset.getValue(series, item);
            }
            if (value != null) {
                extremeValue = findMinimum ? Math.min(extremeValue, value.doubleValue()) : Math.max(extremeValue, value.doubleValue());
            }
        }
    }
    if ((findMinimum && extremeValue == Double.POSITIVE_INFINITY) || (!findMinimum && extremeValue == Double.NEGATIVE_INFINITY)) {
        return null;
    } else {
        return new Double(extremeValue);
    }
}
```

---

**2. Method Calls:**

**For `findMinimumRangeValue`:**

```java
public static Number findMinimumRangeValue(CategoryDataset dataset) {
    return findExtremeRangeValue(dataset, true);
}
```

**For `findMaximumRangeValue`:**

```java
public static Number findMaximumRangeValue(CategoryDataset dataset) {
    return findExtremeRangeValue(dataset, false);
}
```",Type-3
139-1-2,src,org.jfree.chart.renderer.xy,VectorRenderer,findDomainBounds,95,138,src,org.jfree.chart.renderer.xy,VectorRenderer,findRangeBounds,151,194,Type 2,"**Code Snippet 1: Method: findDomainBounds (Lines: 95-138)**

```java
public Range findDomainBounds(XYDataset dataset) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    double minimum = Double.POSITIVE_INFINITY;
    double maximum = Double.NEGATIVE_INFINITY;
    int seriesCount = dataset.getSeriesCount();
    double lvalue;
    double uvalue;
    if (dataset instanceof VectorXYDataset) {
        VectorXYDataset vdataset = (VectorXYDataset) dataset;
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                double delta = vdataset.getVectorXValue(series, item);
                if (delta < 0.0) {
                    uvalue = vdataset.getXValue(series, item);
                    lvalue = uvalue + delta;
                }
                else {
                    lvalue = vdataset.getXValue(series, item);
                    uvalue = lvalue + delta;
                }
                minimum = Math.min(minimum, lvalue);
                maximum = Math.max(maximum, uvalue);
            }
        }
    }
    else {
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                lvalue = dataset.getXValue(series, item);
                uvalue = lvalue;
                minimum = Math.min(minimum, lvalue);
                maximum = Math.max(maximum, uvalue);
            }
        }
    }
    if (minimum > maximum) {
        return null;
    }
    else {
        return new Range(minimum, maximum);
    }
}
```

**Code Snippet 2: Method: findRangeBounds (Lines: 151-194)**

```java
public Range findRangeBounds(XYDataset dataset) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    double minimum = Double.POSITIVE_INFINITY;
    double maximum = Double.NEGATIVE_INFINITY;
    int seriesCount = dataset.getSeriesCount();
    double lvalue;
    double uvalue;
    if (dataset instanceof VectorXYDataset) {
        VectorXYDataset vdataset = (VectorXYDataset) dataset;
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                double delta = vdataset.getVectorYValue(series, item);
                if (delta < 0.0) {
                    uvalue = vdataset.getYValue(series, item);
                    lvalue = uvalue + delta;
                }
                else {
                    lvalue = vdataset.getYValue(series, item);
                    uvalue = lvalue + delta;
                }
                minimum = Math.min(minimum, lvalue);
                maximum = Math.max(maximum, uvalue);
            }
        }
    }
    else {
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                lvalue = dataset.getYValue(series, item);
                uvalue = lvalue;
                minimum = Math.min(minimum, lvalue);
                maximum = Math.max(maximum, uvalue);
            }
        }
    }
    if (minimum > maximum) {
        return null;
    }
    else {
        return new Range(minimum, maximum);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and types).","**1. Extracted Method:**

```java
private Range findBounds(XYDataset dataset, boolean isDomain) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    double minimum = Double.POSITIVE_INFINITY;
    double maximum = Double.NEGATIVE_INFINITY;
    int seriesCount = dataset.getSeriesCount();
    double lvalue;
    double uvalue;
    if (dataset instanceof VectorXYDataset) {
        VectorXYDataset vdataset = (VectorXYDataset) dataset;
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                double delta = isDomain ? vdataset.getVectorXValue(series, item) : vdataset.getVectorYValue(series, item);
                if (delta < 0.0) {
                    uvalue = isDomain ? vdataset.getXValue(series, item) : vdataset.getYValue(series, item);
                    lvalue = uvalue + delta;
                } else {
                    lvalue = isDomain ? vdataset.getXValue(series, item) : vdataset.getYValue(series, item);
                    uvalue = lvalue + delta;
                }
                minimum = Math.min(minimum, lvalue);
                maximum = Math.max(maximum, uvalue);
            }
        }
    } else {
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                lvalue = isDomain ? dataset.getXValue(series, item) : dataset.getYValue(series, item);
                uvalue = lvalue;
                minimum = Math.min(minimum, lvalue);
                maximum = Math.max(maximum, uvalue);
            }
        }
    }
    if (minimum > maximum) {
        return null;
    } else {
        return new Range(minimum, maximum);
    }
}
```

**2. Method Calls:**

**For `findDomainBounds`:**

```java
public Range findDomainBounds(XYDataset dataset) {
    return findBounds(dataset, true);
}
```

**For `findRangeBounds`:**

```java
public Range findRangeBounds(XYDataset dataset) {
    return findBounds(dataset, false);
}
```",Type-2
143-1-2,src,org.jfree.data.general,DatasetUtilities,findMinimumDomainValue,994,1034,src,org.jfree.data.general,DatasetUtilities,findMaximumDomainValue,1049,1091,Type 2,"### Code Snippet 1: Method `findMinimumDomainValue` (Lines 994-1034)
```java
public static Number findMinimumDomainValue(XYDataset dataset) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    Number result = null;
    // if the dataset implements DomainInfo, life is easy
    if (dataset instanceof DomainInfo) {
        DomainInfo info = (DomainInfo) dataset;
        return new Double(info.getDomainLowerBound(true));
    }
    else {
        double minimum = Double.POSITIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {

                double value;
                if (dataset instanceof IntervalXYDataset) {
                    IntervalXYDataset intervalXYData
                        = (IntervalXYDataset) dataset;
                    value = intervalXYData.getStartXValue(series, item);
                }
                else {
                    value = dataset.getXValue(series, item);
                }
                if (!Double.isNaN(value)) {
                    minimum = Math.min(minimum, value);
                }

            }
        }
        if (minimum == Double.POSITIVE_INFINITY) {
            result = null;
        }
        else {
            result = new Double(minimum);
        }
    }

    return result;
}
```

---

### Code Snippet 2: Method `findMaximumDomainValue` (Lines 1049-1091)
```java
public static Number findMaximumDomainValue(XYDataset dataset) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    Number result = null;
    // if the dataset implements DomainInfo, life is easy
    if (dataset instanceof DomainInfo) {
        DomainInfo info = (DomainInfo) dataset;
        return new Double(info.getDomainUpperBound(true));
    }

    // hasn't implemented DomainInfo, so iterate...
    else {
        double maximum = Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {

                double value;
                if (dataset instanceof IntervalXYDataset) {
                    IntervalXYDataset intervalXYData
                        = (IntervalXYDataset) dataset;
                    value = intervalXYData.getEndXValue(series, item);
                }
                else {
                    value = dataset.getXValue(series, item);
                }
                if (!Double.isNaN(value)) {
                    maximum = Math.max(maximum, value);
                }
            }
        }
        if (maximum == Double.NEGATIVE_INFINITY) {
            result = null;
        }
        else {
            result = new Double(maximum);
        }

    }

    return result;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `Math.min` vs. `Math.max`, `getStartXValue` vs. `getEndXValue`, and `Double.POSITIVE_INFINITY` vs. `Double.NEGATIVE_INFINITY`).","### 1. Extracted Method
```java
private static Number findDomainValue(XYDataset dataset, boolean findMinimum) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    Number result = null;
    if (dataset instanceof DomainInfo) {
        DomainInfo info = (DomainInfo) dataset;
        return new Double(findMinimum ? info.getDomainLowerBound(true) : info.getDomainUpperBound(true));
    } else {
        double extremeValue = findMinimum ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                double value;
                if (dataset instanceof IntervalXYDataset) {
                    IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;
                    value = findMinimum ? intervalXYData.getStartXValue(series, item) : intervalXYData.getEndXValue(series, item);
                } else {
                    value = dataset.getXValue(series, item);
                }
                if (!Double.isNaN(value)) {
                    extremeValue = findMinimum ? Math.min(extremeValue, value) : Math.max(extremeValue, value);
                }
            }
        }
        if ((findMinimum && extremeValue == Double.POSITIVE_INFINITY) || (!findMinimum && extremeValue == Double.NEGATIVE_INFINITY)) {
            result = null;
        } else {
            result = new Double(extremeValue);
        }
    }
    return result;
}
```

---

### 2. Method Calls Replacing the Clones

#### Refactored `findMinimumDomainValue`
```java
public static Number findMinimumDomainValue(XYDataset dataset) {
    return findDomainValue(dataset, true);
}
```

#### Refactored `findMaximumDomainValue`
```java
public static Number findMaximumDomainValue(XYDataset dataset) {
    return findDomainValue(dataset, false);
}
```",Type-3
144-1-2,src,org.jfree.chart.plot,PiePlot,drawLeftLabel,2921,2961,src,org.jfree.chart.plot,PiePlot,drawRightLabel,2972,3013,Type 2,"**Code Snippet 1 - Method: drawLeftLabel (Lines: 2921-2961)**

```java
protected void drawLeftLabel(Graphics2D g2, PiePlotState state, 
                             PieLabelRecord record) {

    double anchorX = state.getLinkArea().getMinX();
    double targetX = anchorX - record.getGap();
    double targetY = record.getAllocatedY();
    
    if (this.labelLinksVisible) {
        double theta = record.getAngle();
        double linkX = state.getPieCenterX() + Math.cos(theta) 
                * state.getPieWRadius() * record.getLinkPercent();
        double linkY = state.getPieCenterY() - Math.sin(theta) 
                * state.getPieHRadius() * record.getLinkPercent();
        double elbowX = state.getPieCenterX() + Math.cos(theta) 
                * state.getLinkArea().getWidth() / 2.0;
        double elbowY = state.getPieCenterY() - Math.sin(theta) 
                * state.getLinkArea().getHeight() / 2.0;
        double anchorY = elbowY;
        g2.setPaint(this.labelLinkPaint);
        g2.setStroke(this.labelLinkStroke);
        PieLabelLinkStyle style = getLabelLinkStyle();
        if (style.equals(PieLabelLinkStyle.STANDARD)) {
            g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));
            g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));
            g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));
        }
        else if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {
            QuadCurve2D q = new QuadCurve2D.Float();
            q.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY);
            g2.draw(q);
            g2.draw(new Line2D.Double(elbowX, elbowY, linkX, linkY));               
        }
        else if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {
            CubicCurve2D c = new CubicCurve2D .Float();
            c.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY, 
                    linkX, linkY);
            g2.draw(c);
        }
    }
    TextBox tb = record.getLabel();
    tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.RIGHT);
    
}
```

**Code Snippet 2 - Method: drawRightLabel (Lines: 2972-3013)**

```java
protected void drawRightLabel(Graphics2D g2, PiePlotState state, 
                              PieLabelRecord record) {
    
    double anchorX = state.getLinkArea().getMaxX();
    double targetX = anchorX + record.getGap();
    double targetY = record.getAllocatedY();
    
    if (this.labelLinksVisible) {
        double theta = record.getAngle();
        double linkX = state.getPieCenterX() + Math.cos(theta) 
                * state.getPieWRadius() * record.getLinkPercent();
        double linkY = state.getPieCenterY() - Math.sin(theta) 
                * state.getPieHRadius() * record.getLinkPercent();
        double elbowX = state.getPieCenterX() + Math.cos(theta) 
                * state.getLinkArea().getWidth() / 2.0;
        double elbowY = state.getPieCenterY() - Math.sin(theta) 
                * state.getLinkArea().getHeight() / 2.0;
        double anchorY = elbowY;
        g2.setPaint(this.labelLinkPaint);
        g2.setStroke(this.labelLinkStroke);
        PieLabelLinkStyle style = getLabelLinkStyle();
        if (style.equals(PieLabelLinkStyle.STANDARD)) {
            g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));
            g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));
            g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));
        }
        else if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {
            QuadCurve2D q = new QuadCurve2D.Float();
            q.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY);
            g2.draw(q);
            g2.draw(new Line2D.Double(elbowX, elbowY, linkX, linkY));               
        }
        else if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {
            CubicCurve2D c = new CubicCurve2D .Float();
            c.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY, 
                    linkX, linkY);
            g2.draw(c);
        }
    }
    
    TextBox tb = record.getLabel();
    tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.LEFT);
    
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method**

```java
private void drawLabel(Graphics2D g2, PiePlotState state, PieLabelRecord record, 
                       boolean isLeft) {

    double anchorX = isLeft ? state.getLinkArea().getMinX() : state.getLinkArea().getMaxX();
    double targetX = isLeft ? anchorX - record.getGap() : anchorX + record.getGap();
    double targetY = record.getAllocatedY();

    if (this.labelLinksVisible) {
        double theta = record.getAngle();
        double linkX = state.getPieCenterX() + Math.cos(theta) 
                * state.getPieWRadius() * record.getLinkPercent();
        double linkY = state.getPieCenterY() - Math.sin(theta) 
                * state.getPieHRadius() * record.getLinkPercent();
        double elbowX = state.getPieCenterX() + Math.cos(theta) 
                * state.getLinkArea().getWidth() / 2.0;
        double elbowY = state.getPieCenterY() - Math.sin(theta) 
                * state.getLinkArea().getHeight() / 2.0;
        double anchorY = elbowY;
        g2.setPaint(this.labelLinkPaint);
        g2.setStroke(this.labelLinkStroke);
        PieLabelLinkStyle style = getLabelLinkStyle();
        if (style.equals(PieLabelLinkStyle.STANDARD)) {
            g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));
            g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));
            g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));
        }
        else if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {
            QuadCurve2D q = new QuadCurve2D.Float();
            q.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY);
            g2.draw(q);
            g2.draw(new Line2D.Double(elbowX, elbowY, linkX, linkY));               
        }
        else if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {
            CubicCurve2D c = new CubicCurve2D.Float();
            c.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY, 
                    linkX, linkY);
            g2.draw(c);
        }
    }

    TextBox tb = record.getLabel();
    tb.draw(g2, (float) targetX, (float) targetY, 
            isLeft ? RectangleAnchor.RIGHT : RectangleAnchor.LEFT);
}
```

**2. Method Calls Replacing the Clones**

**For `drawLeftLabel`**

```java
protected void drawLeftLabel(Graphics2D g2, PiePlotState state, PieLabelRecord record) {
    drawLabel(g2, state, record, true);
}
```

**For `drawRightLabel`**

```java
protected void drawRightLabel(Graphics2D g2, PiePlotState state, PieLabelRecord record) {
    drawLabel(g2, state, record, false);
}
```",Type-3
160-1-2,src,org.jfree.chart.plot,PiePlot,drawLeftLabels,2706,2744,src,org.jfree.chart.plot,PiePlot,drawRightLabels,2758,2797,Type 2,"**Code Snippet 1 - Method: drawLeftLabels (Lines: 2706-2744)**

```java
protected void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2, 
                              Rectangle2D plotArea, Rectangle2D linkArea, 
                              float maxLabelWidth, PiePlotState state) {
        
    this.labelDistributor.clear();
    double lGap = plotArea.getWidth() * this.labelGap;
    double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;
    for (int i = 0; i < leftKeys.getItemCount(); i++) {   
        String label = this.labelGenerator.generateSectionLabel(
                this.dataset, leftKeys.getKey(i));
        if (label != null) {
            TextBlock block = TextUtilities.createTextBlock(label, 
                    this.labelFont, this.labelPaint, maxLabelWidth, 
                    new G2TextMeasurer(g2));
            TextBox labelBox = new TextBox(block);
            labelBox.setBackgroundPaint(this.labelBackgroundPaint);
            labelBox.setOutlinePaint(this.labelOutlinePaint);
            labelBox.setOutlineStroke(this.labelOutlineStroke);
            labelBox.setShadowPaint(this.labelShadowPaint);
            labelBox.setInteriorGap(this.labelPadding);
            double theta = Math.toRadians(
                    leftKeys.getValue(i).doubleValue());
            double baseY = state.getPieCenterY() - Math.sin(theta) 
                           * verticalLinkRadius;
            double hh = labelBox.getHeight(g2);

            this.labelDistributor.addPieLabelRecord(new PieLabelRecord(
                    leftKeys.getKey(i), theta, baseY, labelBox, hh,
                    lGap / 2.0 + lGap / 2.0 * -Math.cos(theta), 0.9 
                    + getExplodePercent(leftKeys.getKey(i))));
        }
    }
    double hh = plotArea.getHeight();
    double gap = hh * getInteriorGap();
    this.labelDistributor.distributeLabels(plotArea.getMinY() + gap, 
            hh - 2 * gap);
    for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {
        drawLeftLabel(g2, state, 
                this.labelDistributor.getPieLabelRecord(i));
    }
}
```

**Code Snippet 2 - Method: drawRightLabels (Lines: 2758-2797)**

```java
protected void drawRightLabels(KeyedValues keys, Graphics2D g2,
                               Rectangle2D plotArea, Rectangle2D linkArea,
                               float maxLabelWidth, PiePlotState state) {

    // draw the right labels...
    this.labelDistributor.clear();
    double lGap = plotArea.getWidth() * this.labelGap;
    double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;

    for (int i = 0; i < keys.getItemCount(); i++) {
        String label = this.labelGenerator.generateSectionLabel(
                this.dataset, keys.getKey(i));

        if (label != null) {
            TextBlock block = TextUtilities.createTextBlock(label,
                    this.labelFont, this.labelPaint, maxLabelWidth,
                    new G2TextMeasurer(g2));
            TextBox labelBox = new TextBox(block);
            labelBox.setBackgroundPaint(this.labelBackgroundPaint);
            labelBox.setOutlinePaint(this.labelOutlinePaint);
            labelBox.setOutlineStroke(this.labelOutlineStroke);
            labelBox.setShadowPaint(this.labelShadowPaint);
            labelBox.setInteriorGap(this.labelPadding);
            double theta = Math.toRadians(keys.getValue(i).doubleValue());
            double baseY = state.getPieCenterY()
                          - Math.sin(theta) * verticalLinkRadius;
            double hh = labelBox.getHeight(g2);
            this.labelDistributor.addPieLabelRecord(new PieLabelRecord(
                    keys.getKey(i), theta, baseY, labelBox, hh,
                    lGap / 2.0 + lGap / 2.0 * Math.cos(theta),
                    0.9 + getExplodePercent(keys.getKey(i))));
        }
    }
    double hh = plotArea.getHeight();
    double gap = hh * getInteriorGap();
    this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,
            hh - 2 * gap);
    for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {
        drawRightLabel(g2, state,
                this.labelDistributor.getPieLabelRecord(i));
    }

}
```

**Clone Type:**  
The two code snippets are **Type-3 clones** (mostly similar but with some different statements).","**1. Extracted Method**

```java
private void drawLabelsHelper(KeyedValues keys, Graphics2D g2, 
                              Rectangle2D plotArea, float maxLabelWidth, 
                              PiePlotState state, boolean isLeft) {
    this.labelDistributor.clear();
    double lGap = plotArea.getWidth() * this.labelGap;
    double verticalLinkRadius = state.getLinkArea().getHeight() / 2.0;

    for (int i = 0; i < keys.getItemCount(); i++) {
        String label = this.labelGenerator.generateSectionLabel(
                this.dataset, keys.getKey(i));
        if (label != null) {
            TextBlock block = TextUtilities.createTextBlock(label,
                    this.labelFont, this.labelPaint, maxLabelWidth,
                    new G2TextMeasurer(g2));
            TextBox labelBox = new TextBox(block);
            labelBox.setBackgroundPaint(this.labelBackgroundPaint);
            labelBox.setOutlinePaint(this.labelOutlinePaint);
            labelBox.setOutlineStroke(this.labelOutlineStroke);
            labelBox.setShadowPaint(this.labelShadowPaint);
            labelBox.setInteriorGap(this.labelPadding);
            double theta = Math.toRadians(keys.getValue(i).doubleValue());
            double baseY = state.getPieCenterY() - Math.sin(theta) 
                           * verticalLinkRadius;
            double hh = labelBox.getHeight(g2);
            double gapFactor = isLeft ? -Math.cos(theta) : Math.cos(theta);
            this.labelDistributor.addPieLabelRecord(new PieLabelRecord(
                    keys.getKey(i), theta, baseY, labelBox, hh,
                    lGap / 2.0 + lGap / 2.0 * gapFactor,
                    0.9 + getExplodePercent(keys.getKey(i))));
        }
    }
    double hh = plotArea.getHeight();
    double gap = hh * getInteriorGap();
    this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,
            hh - 2 * gap);
    for (int i = 0; i < this.labelDistributor.getItemCount(); i++) {
        if (isLeft) {
            drawLeftLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));
        } else {
            drawRightLabel(g2, state, this.labelDistributor.getPieLabelRecord(i));
        }
    }
}
```

**2. Method Calls Replacing the Clones**

**For `drawLeftLabels`**

```java
protected void drawLeftLabels(KeyedValues leftKeys, Graphics2D g2, 
                              Rectangle2D plotArea, Rectangle2D linkArea, 
                              float maxLabelWidth, PiePlotState state) {
    drawLabelsHelper(leftKeys, g2, plotArea, maxLabelWidth, state, true);
}
```

**For `drawRightLabels`**

```java
protected void drawRightLabels(KeyedValues keys, Graphics2D g2,
                               Rectangle2D plotArea, Rectangle2D linkArea,
                               float maxLabelWidth, PiePlotState state) {
    drawLabelsHelper(keys, g2, plotArea, maxLabelWidth, state, false);
}
```",Type-3
161-1-2,src,org.jfree.data.general,DatasetUtilities,findMinimumRangeValue,1106,1144,src,org.jfree.data.general,DatasetUtilities,findMaximumRangeValue,1224,1262,Type 2,"**Code Snippet 1: Method: findMinimumRangeValue (Lines: 1106-1144)**  
```java
/**
 * Returns the minimum range value for the specified dataset.  This is
 * easy if the dataset implements the {@link RangeInfo} interface (a good
 * idea if there is an efficient way to determine the minimum value).
 * Otherwise, it involves iterating over the entire data-set.  Returns
 * <code>null</code> if all the data values in the dataset are
 * <code>null</code>.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The minimum value (possibly <code>null</code>).
 */
public static Number findMinimumRangeValue(XYDataset dataset) {

    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }

    // work out the minimum value...
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(info.getRangeLowerBound(true));
    }

    // hasn't implemented RangeInfo, so we'll have to iterate...
    else {
        double minimum = Double.POSITIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {

                double value;
                if (dataset instanceof IntervalXYDataset) {
                    IntervalXYDataset intervalXYData
                        = (IntervalXYDataset) dataset;
                    value = intervalXYData.getStartYValue(series, item);
                }
                else if (dataset instanceof OHLCDataset) {
                    OHLCDataset highLowData = (OHLCDataset) dataset;
                    value = highLowData.getLowValue(series, item);
                }
                else {
                    value = dataset.getYValue(series, item);
                }
                if (!Double.isNaN(value)) {
                    minimum = Math.min(minimum, value);
                }

            }
        }
        if (minimum == Double.POSITIVE_INFINITY) {
            return null;
        }
        else {
            return new Double(minimum);
        }

    }

}
```

**Code Snippet 2: Method: findMaximumRangeValue (Lines: 1224-1262)**  
```java
/**
 * Returns the maximum range value for the specified dataset.  This is
 * easy if the dataset implements the {@link RangeInfo} interface (a good
 * idea if there is an efficient way to determine the maximum value).
 * Otherwise, it involves iterating over the entire data-set.  Returns
 * <code>null</code> if all the data values are <code>null</code>.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The maximum value (possibly <code>null</code>).
 */
public static Number findMaximumRangeValue(XYDataset dataset) {

    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }

    // work out the minimum value...
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(info.getRangeUpperBound(true));
    }

    // hasn't implemented RangeInfo, so we'll have to iterate...
    else  {

        double maximum = Double.NEGATIVE_INFINITY;
        int seriesCount = dataset.getSeriesCount();
        for (int series = 0; series < seriesCount; series++) {
            int itemCount = dataset.getItemCount(series);
            for (int item = 0; item < itemCount; item++) {
                double value;
                if (dataset instanceof IntervalXYDataset) {
                    IntervalXYDataset intervalXYData
                        = (IntervalXYDataset) dataset;
                    value = intervalXYData.getEndYValue(series, item);
                }
                else if (dataset instanceof OHLCDataset) {
                    OHLCDataset highLowData = (OHLCDataset) dataset;
                    value = highLowData.getHighValue(series, item);
                }
                else {
                    value = dataset.getYValue(series, item);
                }
                if (!Double.isNaN(value)) {
                    maximum = Math.max(maximum, value);
                }
            }
        }
        if (maximum == Double.NEGATIVE_INFINITY) {
            return null;
        }
        else {
            return new Double(maximum);
        }

    }

}
```

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `minimum` vs. `maximum`, `getStartYValue` vs. `getEndYValue`, `Math.min` vs. `Math.max`).","**1. Extracted Method:**  
```java
private static double findRangeValue(XYDataset dataset, boolean findMinimum) {
    double extremeValue = findMinimum ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    int seriesCount = dataset.getSeriesCount();
    for (int series = 0; series < seriesCount; series++) {
        int itemCount = dataset.getItemCount(series);
        for (int item = 0; item < itemCount; item++) {
            double value;
            if (dataset instanceof IntervalXYDataset) {
                IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;
                value = findMinimum ? intervalXYData.getStartYValue(series, item)
                                    : intervalXYData.getEndYValue(series, item);
            } else if (dataset instanceof OHLCDataset) {
                OHLCDataset highLowData = (OHLCDataset) dataset;
                value = findMinimum ? highLowData.getLowValue(series, item)
                                    : highLowData.getHighValue(series, item);
            } else {
                value = dataset.getYValue(series, item);
            }
            if (!Double.isNaN(value)) {
                extremeValue = findMinimum ? Math.min(extremeValue, value)
                                           : Math.max(extremeValue, value);
            }
        }
    }
    return extremeValue;
}
```

**2. Method Calls:**  

**For `findMinimumRangeValue`:**  
```java
public static Number findMinimumRangeValue(XYDataset dataset) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(info.getRangeLowerBound(true));
    } else {
        double minimum = findRangeValue(dataset, true);
        return minimum == Double.POSITIVE_INFINITY ? null : new Double(minimum);
    }
}
```

**For `findMaximumRangeValue`:**  
```java
public static Number findMaximumRangeValue(XYDataset dataset) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        return new Double(info.getRangeUpperBound(true));
    } else {
        double maximum = findRangeValue(dataset, false);
        return maximum == Double.NEGATIVE_INFINITY ? null : new Double(maximum);
    }
}
```",Type-3
169-1-2,src,org.jfree.chart.title,TextTitle,arrangeFN,549,585,src,org.jfree.chart.title,TextTitle,arrangeRR,622,659,Type 2,"**Code Snippet 1 - Method: arrangeFN (Lines: 549-585)**  
```java
protected Size2D arrangeFN(Graphics2D g2, double w) {
    RectangleEdge position = getPosition();
    if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {
        float maxWidth = (float) w;
        g2.setFont(this.font);
        this.content = TextUtilities.createTextBlock(this.text, this.font,
                this.paint, maxWidth, this.maximumLinesToDisplay,
                new G2TextMeasurer(g2));
        this.content.setLineAlignment(this.textAlignment);
        Size2D contentSize = this.content.calculateDimensions(g2);
        if (this.expandToFitSpace) {
            return new Size2D(maxWidth, contentSize.getHeight());
        }
        else {
            return contentSize;
        }
    }
    else if (position == RectangleEdge.LEFT || position
            == RectangleEdge.RIGHT) {
        float maxWidth = Float.MAX_VALUE;
        g2.setFont(this.font);
        this.content = TextUtilities.createTextBlock(this.text, this.font,
                this.paint, maxWidth, this.maximumLinesToDisplay,
                new G2TextMeasurer(g2));
        this.content.setLineAlignment(this.textAlignment);
        Size2D contentSize = this.content.calculateDimensions(g2);

        // transpose the dimensions, because the title is rotated
        if (this.expandToFitSpace) {
            return new Size2D(contentSize.getHeight(), maxWidth);
        }
        else {
            return new Size2D(contentSize.height, contentSize.width);
        }
    }
    else {
        throw new RuntimeException(""Unrecognised exception."");
    }
}
```

**Code Snippet 2 - Method: arrangeRR (Lines: 622-659)**  
```java
protected Size2D arrangeRR(Graphics2D g2, Range widthRange,
        Range heightRange) {
    RectangleEdge position = getPosition();
    if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {
        float maxWidth = (float) widthRange.getUpperBound();
        g2.setFont(this.font);
        this.content = TextUtilities.createTextBlock(this.text, this.font,
                this.paint, maxWidth, this.maximumLinesToDisplay,
                new G2TextMeasurer(g2));
        this.content.setLineAlignment(this.textAlignment);
        Size2D contentSize = this.content.calculateDimensions(g2);
        if (this.expandToFitSpace) {
            return new Size2D(maxWidth, contentSize.getHeight());
        }
        else {
            return contentSize;
        }
    }
    else if (position == RectangleEdge.LEFT || position
            == RectangleEdge.RIGHT) {
        float maxWidth = (float) heightRange.getUpperBound();
        g2.setFont(this.font);
        this.content = TextUtilities.createTextBlock(this.text, this.font,
                this.paint, maxWidth, this.maximumLinesToDisplay,
                new G2TextMeasurer(g2));
        this.content.setLineAlignment(this.textAlignment);
        Size2D contentSize = this.content.calculateDimensions(g2);

        // transpose the dimensions, because the title is rotated
        if (this.expandToFitSpace) {
            return new Size2D(contentSize.getHeight(), maxWidth);
        }
        else {
            return new Size2D(contentSize.height, contentSize.width);
        }
    }
    else {
        throw new RuntimeException(""Unrecognised exception."");
    }
}
```

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `w` vs. `widthRange.getUpperBound()` and `heightRange.getUpperBound()`).","**1. The Extracted Method:**  
```java
private Size2D arrangeContent(Graphics2D g2, float maxWidth, boolean isHorizontal) {
    g2.setFont(this.font);
    this.content = TextUtilities.createTextBlock(this.text, this.font,
            this.paint, maxWidth, this.maximumLinesToDisplay,
            new G2TextMeasurer(g2));
    this.content.setLineAlignment(this.textAlignment);
    Size2D contentSize = this.content.calculateDimensions(g2);

    if (isHorizontal) {
        if (this.expandToFitSpace) {
            return new Size2D(maxWidth, contentSize.getHeight());
        } else {
            return contentSize;
        }
    } else {
        // transpose the dimensions, because the title is rotated
        if (this.expandToFitSpace) {
            return new Size2D(contentSize.getHeight(), maxWidth);
        } else {
            return new Size2D(contentSize.height, contentSize.width);
        }
    }
}
```

**2. The Method Calls That Replace the Clones:**  

**For `arrangeFN`:**  
```java
protected Size2D arrangeFN(Graphics2D g2, double w) {
    RectangleEdge position = getPosition();
    if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {
        return arrangeContent(g2, (float) w, true);
    } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {
        return arrangeContent(g2, Float.MAX_VALUE, false);
    } else {
        throw new RuntimeException(""Unrecognised exception."");
    }
}
```

**For `arrangeRR`:**  
```java
protected Size2D arrangeRR(Graphics2D g2, Range widthRange, Range heightRange) {
    RectangleEdge position = getPosition();
    if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {
        return arrangeContent(g2, (float) widthRange.getUpperBound(), true);
    } else if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {
        return arrangeContent(g2, (float) heightRange.getUpperBound(), false);
    } else {
        throw new RuntimeException(""Unrecognised exception."");
    }
}
```",Type-3
178-1-2,src,org.jfree.chart.axis,DateAxis,estimateMaximumTickLabelWidth,1370,1406,src,org.jfree.chart.axis,DateAxis,estimateMaximumTickLabelHeight,1423,1459,Type 2,"**Code Snippet 1: Method: estimateMaximumTickLabelWidth (Lines: 1370-1406)**  
```java
private double estimateMaximumTickLabelWidth(Graphics2D g2,
                                             DateTickUnit unit) {

    return estimateMaximumTickLabel(g2, unit,
                                    (RectangleInsets tickLabelInsets) -> tickLabelInsets
                                            .getLeft(),
                                    (RectangleInsets tickLabelInsets) -> tickLabelInsets
                                            .getRight(),
                                    isVerticalTickLabels());

}
```

**Code Snippet 2: Method: estimateMaximumTickLabelHeight (Lines: 1423-1459)**  
```java
private double estimateMaximumTickLabelHeight(Graphics2D g2,
                                              DateTickUnit unit) {

    return estimateMaximumTickLabel(g2, unit,
                                    (RectangleInsets tickLabelInsets) -> tickLabelInsets
                                            .getTop(),
                                    (RectangleInsets tickLabelInsets) -> tickLabelInsets
                                            .getBottom(),
                                    !isVerticalTickLabels());

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private double estimateMaximumTickLabelDimension(Graphics2D g2,
                                                 DateTickUnit unit,
                                                 Function<RectangleInsets, Double> primaryFunction,
                                                 Function<RectangleInsets, Double> secondaryFunction,
                                                 boolean isVertical) {

    RectangleInsets tickLabelInsets = getTickLabelInsets();
    double result = primaryFunction.apply(tickLabelInsets) + secondaryFunction.apply(tickLabelInsets);
    Font tickLabelFont = getTickLabelFont();
    FontRenderContext frc = g2.getFontRenderContext();
    LineMetrics lm = tickLabelFont.getLineMetrics(""ABCxyz"", frc);
    if (isVertical) {
        result += lm.getHeight();
    } else {
        DateRange range = (DateRange) getRange();
        Date lower = range.getLowerDate();
        Date upper = range.getUpperDate();
        String lowerStr = null;
        String upperStr = null;
        DateFormat formatter = getDateFormatOverride();
        if (formatter != null) {
            lowerStr = formatter.format(lower);
            upperStr = formatter.format(upper);
        } else {
            lowerStr = unit.dateToString(lower);
            upperStr = unit.dateToString(upper);
        }
        FontMetrics fm = g2.getFontMetrics(tickLabelFont);
        double w1 = fm.stringWidth(lowerStr);
        double w2 = fm.stringWidth(upperStr);
        result += Math.max(w1, w2);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `estimateMaximumTickLabelWidth`:**  
```java
private double estimateMaximumTickLabelWidth(Graphics2D g2,
                                             DateTickUnit unit) {
    return estimateMaximumTickLabelDimension(g2, unit,
                                             (RectangleInsets tickLabelInsets) -> tickLabelInsets.getLeft(),
                                             (RectangleInsets tickLabelInsets) -> tickLabelInsets.getRight(),
                                             isVerticalTickLabels());
}
```

**For `estimateMaximumTickLabelHeight`:**  
```java
private double estimateMaximumTickLabelHeight(Graphics2D g2,
                                              DateTickUnit unit) {
    return estimateMaximumTickLabelDimension(g2, unit,
                                             (RectangleInsets tickLabelInsets) -> tickLabelInsets.getTop(),
                                             (RectangleInsets tickLabelInsets) -> tickLabelInsets.getBottom(),
                                             !isVerticalTickLabels());
}
```",Type-2
182-1-2,src,org.jfree.chart,ChartFactory,createScatterPlot,1419,1450,src,org.jfree.chart,ChartFactory,createStackedXYAreaChart,1601,1637,Type 2,"**Code Snippet 1: Method: createScatterPlot (Lines: 1419-1450)**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setAutoRangeIncludesZero(false);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createStackedXYAreaChart (Lines: 1601-1637)**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                String xAxisLabel,
                                                String yAxisLabel,
                                                TableXYDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    xAxis.setLowerMargin(0.0);
    xAxis.setUpperMargin(0.0);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2(
            toolTipGenerator, urlGenerator);
    renderer.setOutline(true);
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    plot.setRangeAxis(yAxis);  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**. They are mostly similar but contain some different statements, such as the renderer type (`XYLineAndShapeRenderer` vs. `StackedXYAreaRenderer2`) and additional configurations (e.g., `xAxis.setLowerMargin(0.0)` and `renderer.setOutline(true)` in the second snippet).","**1. Extracted Method:**

```java
private static XYPlot createXYPlot(String xAxisLabel, String yAxisLabel, 
                                   XYDataset dataset, PlotOrientation orientation, 
                                   boolean tooltips, boolean urls, 
                                   XYItemRenderer renderer) {
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    if (renderer instanceof StackedXYAreaRenderer2) {
        ((StackedXYAreaRenderer2) renderer).setToolTipGenerator(toolTipGenerator);
        ((StackedXYAreaRenderer2) renderer).setURLGenerator(urlGenerator);
    } else {
        renderer.setBaseToolTipGenerator(toolTipGenerator);
        renderer.setURLGenerator(urlGenerator);
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    return plot;
}
```

---

**2. Method Calls Replacing Clones:**

**For `createScatterPlot`:**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```

---

**For `createStackedXYAreaChart`:**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                String xAxisLabel,
                                                String yAxisLabel,
                                                TableXYDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2();
    renderer.setOutline(true);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    plot.setRangeAxis(plot.getRangeAxis());  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```",Type-3
188-1-2,src,org.jfree.chart,ChartFactory,createScatterPlot,1419,1450,src,org.jfree.chart,ChartFactory,createStackedXYAreaChart,1601,1637,Type 2,"**Code Snippet 1: Method: createScatterPlot (Lines: 1419-1450)**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setAutoRangeIncludesZero(false);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createStackedXYAreaChart (Lines: 1601-1637)**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                String xAxisLabel,
                                                String yAxisLabel,
                                                TableXYDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    xAxis.setLowerMargin(0.0);
    xAxis.setUpperMargin(0.0);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2(
            toolTipGenerator, urlGenerator);
    renderer.setOutline(true);
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    plot.setRangeAxis(yAxis);  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Mostly similar but with some different statements)** clones.","**1. Extracted Method:**

```java
private static XYPlot createXYPlot(String xAxisLabel, String yAxisLabel, 
                                   XYDataset dataset, PlotOrientation orientation, 
                                   boolean tooltips, boolean urls, 
                                   XYItemRenderer renderer) {
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    if (renderer instanceof XYLineAndShapeRenderer) {
        ((XYLineAndShapeRenderer) renderer).setBaseToolTipGenerator(toolTipGenerator);
        ((XYLineAndShapeRenderer) renderer).setURLGenerator(urlGenerator);
    } else if (renderer instanceof StackedXYAreaRenderer2) {
        ((StackedXYAreaRenderer2) renderer).setBaseToolTipGenerator(toolTipGenerator);
        ((StackedXYAreaRenderer2) renderer).setURLGenerator(urlGenerator);
        ((StackedXYAreaRenderer2) renderer).setOutline(true);
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    return plot;
}
```

---

**2. Method Calls Replacing Clones:**

**For `createScatterPlot`:**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```

**For `createStackedXYAreaChart`:**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                String xAxisLabel,
                                                String yAxisLabel,
                                                TableXYDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2();
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    plot.setRangeAxis(plot.getRangeAxis());  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```",Type-3
188-3-4,src,org.jfree.chart,ChartFactory,createXYStepChart,1704,1739,src,org.jfree.chart,ChartFactory,createXYStepAreaChart,1758,1794,Type 2,"**Code Snippet 1: Method: createXYStepChart (Lines: 1704-1739)**

```java
public static JFreeChart createXYStepChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    DateAxis xAxis = new DateAxis(xAxisLabel);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer 
        = new XYStepRenderer(toolTipGenerator, urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

**Code Snippet 2: Method: createXYStepAreaChart (Lines: 1758-1794)**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator, 
            urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**

```java
private static XYPlot createXYPlot(String xAxisLabel, String yAxisLabel, XYDataset dataset, 
                                   PlotOrientation orientation, boolean tooltips, boolean urls, 
                                   XYItemRenderer renderer) {
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    ValueAxis xAxis = renderer instanceof XYStepRenderer ? new DateAxis(xAxisLabel) : new NumberAxis(xAxisLabel);
    if (xAxis instanceof NumberAxis) {
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    if (renderer instanceof XYStepRenderer) {
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    }

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    return plot;
}
```

**2. Method Calls:**

**For `createXYStepChart`:**

```java
public static JFreeChart createXYStepChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    XYItemRenderer renderer = new XYStepRenderer(null, null);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**For `createXYStepAreaChart`:**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    XYItemRenderer renderer = new XYStepAreaRenderer(XYStepAreaRenderer.AREA_AND_SHAPES, null, null);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```",Type-3
195-2-3,src,org.jfree.chart.plot,XYPlot,calculateDomainAxisSpace,2662,2696,src,org.jfree.chart.plot,XYPlot,calculateRangeAxisSpace,2709,2742,Type 2,"```java
// Code snippet 1 - Method: calculateDomainAxisSpace
protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,
                                             Rectangle2D plotArea,
                                             AxisSpace space) {

    if (space == null) {
        space = new AxisSpace();
    }

    // reserve some space for the domain axis...
    if (this.fixedDomainAxisSpace != null) {
        if (this.orientation == PlotOrientation.HORIZONTAL) {
            space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),
                    RectangleEdge.LEFT);
            space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),
                    RectangleEdge.RIGHT);
        }
        else if (this.orientation == PlotOrientation.VERTICAL) {
            space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),
                    RectangleEdge.TOP);
            space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),
                    RectangleEdge.BOTTOM);
        }
    }
    else {
        // reserve space for the domain axes...
        for (int i = 0; i < this.domainAxes.size(); i++) {
            Axis axis = (Axis) this.domainAxes.get(i);
            if (axis != null) {
                RectangleEdge edge = getDomainAxisEdge(i);
                space = axis.reserveSpace(g2, this, plotArea, edge, space);
            }
        }
    }

    return space;

}
```

```java
// Code snippet 2 - Method: calculateRangeAxisSpace
protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,
                                            Rectangle2D plotArea,
                                            AxisSpace space) {

    if (space == null) {
        space = new AxisSpace();
    }

    // reserve some space for the range axis...
    if (this.fixedRangeAxisSpace != null) {
        if (this.orientation == PlotOrientation.HORIZONTAL) {
            space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),
                    RectangleEdge.TOP);
            space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),
                    RectangleEdge.BOTTOM);
        }
        else if (this.orientation == PlotOrientation.VERTICAL) {
            space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),
                    RectangleEdge.LEFT);
            space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),
                    RectangleEdge.RIGHT);
        }
    }
    else {
        // reserve space for the range axes...
        for (int i = 0; i < this.rangeAxes.size(); i++) {
            Axis axis = (Axis) this.rangeAxes.get(i);
            if (axis != null) {
                RectangleEdge edge = getRangeAxisEdge(i);
                space = axis.reserveSpace(g2, this, plotArea, edge, space);
            }
        }
    }
    return space;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. The extracted method
private AxisSpace calculateAxisSpaceHelper(Graphics2D g2, Rectangle2D plotArea, 
                                           AxisSpace space, ObjectList axes, 
                                           AxisSpace fixedAxisSpace, 
                                           PlotOrientation orientation, 
                                           boolean isDomain) {
    if (space == null) {
        space = new AxisSpace();
    }

    if (fixedAxisSpace != null) {
        if (orientation == PlotOrientation.HORIZONTAL) {
            space.ensureAtLeast(isDomain ? fixedAxisSpace.getLeft() : fixedAxisSpace.getTop(),
                    isDomain ? RectangleEdge.LEFT : RectangleEdge.TOP);
            space.ensureAtLeast(isDomain ? fixedAxisSpace.getRight() : fixedAxisSpace.getBottom(),
                    isDomain ? RectangleEdge.RIGHT : RectangleEdge.BOTTOM);
        } else if (orientation == PlotOrientation.VERTICAL) {
            space.ensureAtLeast(isDomain ? fixedAxisSpace.getTop() : fixedAxisSpace.getLeft(),
                    isDomain ? RectangleEdge.TOP : RectangleEdge.LEFT);
            space.ensureAtLeast(isDomain ? fixedAxisSpace.getBottom() : fixedAxisSpace.getRight(),
                    isDomain ? RectangleEdge.BOTTOM : RectangleEdge.RIGHT);
        }
    } else {
        for (int i = 0; i < axes.size(); i++) {
            Axis axis = (Axis) axes.get(i);
            if (axis != null) {
                RectangleEdge edge = isDomain ? getDomainAxisEdge(i) : getRangeAxisEdge(i);
                space = axis.reserveSpace(g2, this, plotArea, edge, space);
            }
        }
    }

    return space;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// For calculateDomainAxisSpace
protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,
                                             Rectangle2D plotArea,
                                             AxisSpace space) {
    return calculateAxisSpaceHelper(g2, plotArea, space, this.domainAxes, 
                                    this.fixedDomainAxisSpace, this.orientation, true);
}

// For calculateRangeAxisSpace
protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,
                                            Rectangle2D plotArea,
                                            AxisSpace space) {
    return calculateAxisSpaceHelper(g2, plotArea, space, this.rangeAxes, 
                                    this.fixedRangeAxisSpace, this.orientation, false);
}
```",Type-3
210-1-3,src,org.jfree.chart,ChartFactory,createStackedBarChart,854,886,src,org.jfree.chart,ChartFactory,createStackedAreaChart,1096,1127,Type 2,"**Code Snippet 1: Method: createStackedBarChart (Lines: 854-886)**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

    StackedBarRenderer renderer = new StackedBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createStackedAreaChart (Lines: 1096-1127)**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, 
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
Type-1 Clone: The two code snippets are **identical except for variable names** (`domainAxisLabel` vs `categoryAxisLabel`, `rangeAxisLabel` vs `valueAxisLabel`, etc.) and **class names** (`StackedBarRenderer` vs `StackedAreaRenderer`).","**1. Extracted Method:**

```java
private static JFreeChart createStackedChart(String title,
                                             String axisLabel1,
                                             String axisLabel2,
                                             CategoryDataset dataset,
                                             PlotOrientation orientation,
                                             boolean legend,
                                             boolean tooltips,
                                             boolean urls,
                                             CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(axisLabel1);
    ValueAxis valueAxis = new NumberAxis(axisLabel2);

    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createStackedBarChart`:**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    StackedBarRenderer renderer = new StackedBarRenderer();
    return createStackedChart(title, domainAxisLabel, rangeAxisLabel, dataset, 
            orientation, legend, tooltips, urls, renderer);
}
```

**For `createStackedAreaChart`:**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    return createStackedChart(title, categoryAxisLabel, valueAxisLabel, dataset, 
            orientation, legend, tooltips, urls, renderer);
}
```",Type-1
210-1-4,src,org.jfree.chart,ChartFactory,createStackedBarChart,854,886,src,org.jfree.chart,ChartFactory,createLineChart3D,1205,1235,Type 2,"**Code Snippet 1: Method: createStackedBarChart (Lines: 854-886)**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

    StackedBarRenderer renderer = new StackedBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createLineChart3D (Lines: 1205-1235)**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

    LineRenderer3D renderer = new LineRenderer3D();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different axis types (`CategoryAxis` vs. `CategoryAxis3D`, `ValueAxis` vs. `NumberAxis3D`), renderer types (`StackedBarRenderer` vs. `LineRenderer3D`), and method parameters.","**1. Extracted Method:**

```java
private static JFreeChart createCategoryChart(String title,
                                              String categoryAxisLabel,
                                              String valueAxisLabel,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryAxis categoryAxis,
                                              ValueAxis valueAxis,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls:**

**For `createStackedBarChart`:**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);
    StackedBarRenderer renderer = new StackedBarRenderer();

    return createCategoryChart(title, domainAxisLabel, rangeAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```

**For `createLineChart3D`:**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);
    LineRenderer3D renderer = new LineRenderer3D();

    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```",Type-3
210-2-5,src,org.jfree.chart,ChartFactory,createAreaChart,1038,1071,src,org.jfree.chart,ChartFactory,createHistogram,2024,2052,Type 2,"**Code Snippet 1: Method: createAreaChart (Lines: 1038-1071)**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);

    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    AreaRenderer renderer = new AreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createHistogram (Lines: 2024-2052)**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    XYItemRenderer renderer = new XYBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clones)**.  
- They are mostly similar in structure and logic but differ in specific details such as the dataset type (`CategoryDataset` vs. `IntervalXYDataset`), axis types (`CategoryAxis` vs. `NumberAxis`), renderer types (`AreaRenderer` vs. `XYBarRenderer`), and some method calls.","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title,
                                      String xAxisLabel,
                                      String yAxisLabel,
                                      Object dataset,
                                      PlotOrientation orientation,
                                      boolean legend,
                                      boolean tooltips,
                                      boolean urls,
                                      ValueAxis xAxis,
                                      ValueAxis yAxis,
                                      Object renderer,
                                      Object plot) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (xAxis instanceof NumberAxis) {
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }

    if (renderer instanceof AreaRenderer && tooltips) {
        ((AreaRenderer) renderer).setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    } else if (renderer instanceof XYItemRenderer && tooltips) {
        ((XYItemRenderer) renderer).setBaseToolTipGenerator(
                new StandardXYToolTipGenerator());
    }

    if (renderer instanceof AreaRenderer && urls) {
        ((AreaRenderer) renderer).setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    } else if (renderer instanceof XYItemRenderer && urls) {
        ((XYItemRenderer) renderer).setURLGenerator(
                new StandardXYURLGenerator());
    }

    if (plot instanceof CategoryPlot) {
        ((CategoryPlot) plot).setDataset((CategoryDataset) dataset);
        ((CategoryPlot) plot).setDomainAxis((CategoryAxis) xAxis);
        ((CategoryPlot) plot).setRangeAxis(yAxis);
        ((CategoryPlot) plot).setRenderer((AreaRenderer) renderer);
        ((CategoryPlot) plot).setOrientation(orientation);
    } else if (plot instanceof XYPlot) {
        ((XYPlot) plot).setDataset((IntervalXYDataset) dataset);
        ((XYPlot) plot).setDomainAxis(xAxis);
        ((XYPlot) plot).setRangeAxis(yAxis);
        ((XYPlot) plot).setRenderer((XYItemRenderer) renderer);
        ((XYPlot) plot).setOrientation(orientation);
    }

    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, (Plot) plot, legend);
}
```

---

**2. Method Calls:**

**For `createAreaChart`:**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);
    AreaRenderer renderer = new AreaRenderer();
    CategoryPlot plot = new CategoryPlot();

    return createChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer, plot);
}
```

---

**For `createHistogram`:**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);
    XYItemRenderer renderer = new XYBarRenderer();
    XYPlot plot = new XYPlot();

    return createChart(title, xAxisLabel, yAxisLabel, dataset, orientation,
            legend, tooltips, urls, xAxis, yAxis, renderer, plot);
}
```",Type-3
210-3-4,src,org.jfree.chart,ChartFactory,createStackedAreaChart,1096,1127,src,org.jfree.chart,ChartFactory,createLineChart3D,1205,1235,Type 2,"**Code Snippet 1: Method: createStackedAreaChart (Lines: 1096-1127)**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, 
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createLineChart3D (Lines: 1205-1235)**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

    LineRenderer3D renderer = new LineRenderer3D();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable types, class names, and object instantiations (e.g., `StackedAreaRenderer` vs. `LineRenderer3D`, `CategoryAxis` vs. `CategoryAxis3D`, etc.).","**1. Extracted Method:**

```java
private static JFreeChart createCategoryPlotChart(String title,
                                                  String categoryAxisLabel,
                                                  String valueAxisLabel,
                                                  CategoryDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls,
                                                  CategoryAxis categoryAxis,
                                                  ValueAxis valueAxis,
                                                  CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createStackedAreaChart`:**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);
    StackedAreaRenderer renderer = new StackedAreaRenderer();

    return createCategoryPlotChart(title, categoryAxisLabel, valueAxisLabel, dataset,
            orientation, legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```

**For `createLineChart3D`:**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);
    LineRenderer3D renderer = new LineRenderer3D();

    return createCategoryPlotChart(title, categoryAxisLabel, valueAxisLabel, dataset,
            orientation, legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```",Type-2
211-1-3,src,org.jfree.chart,ChartFactory,createAreaChart,1038,1071,src,org.jfree.chart,ChartFactory,createHistogram,2024,2052,Type 2,"**Code Snippet 1: Method: createAreaChart (Lines: 1038-1071)**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);

    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    AreaRenderer renderer = new AreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createHistogram (Lines: 2024-2052)**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    XYItemRenderer renderer = new XYBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**.  
- They are mostly similar in structure and logic but differ in specific statements, such as the use of `CategoryPlot` vs. `XYPlot`, `AreaRenderer` vs. `XYBarRenderer`, and the dataset types (`CategoryDataset` vs. `IntervalXYDataset`).","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title,
                                      String xAxisLabel,
                                      String yAxisLabel,
                                      Object dataset,
                                      PlotOrientation orientation,
                                      boolean legend,
                                      boolean tooltips,
                                      boolean urls,
                                      boolean isCategoryPlot,
                                      RendererType rendererType) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    ValueAxis xAxis;
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    if (isCategoryPlot) {
        xAxis = new CategoryAxis(xAxisLabel);
        ((CategoryAxis) xAxis).setCategoryMargin(0.0);
    } else {
        xAxis = new NumberAxis(xAxisLabel);
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }

    Object renderer;
    if (rendererType == RendererType.AREA_RENDERER) {
        renderer = new AreaRenderer();
    } else if (rendererType == RendererType.XY_BAR_RENDERER) {
        renderer = new XYBarRenderer();
    } else {
        throw new IllegalArgumentException(""Unsupported renderer type."");
    }

    if (tooltips) {
        if (renderer instanceof AreaRenderer) {
            ((AreaRenderer) renderer).setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
        } else if (renderer instanceof XYBarRenderer) {
            ((XYBarRenderer) renderer).setBaseToolTipGenerator(new StandardXYToolTipGenerator());
        }
    }

    if (urls) {
        if (renderer instanceof AreaRenderer) {
            ((AreaRenderer) renderer).setBaseItemURLGenerator(new StandardCategoryURLGenerator());
        } else if (renderer instanceof XYBarRenderer) {
            ((XYBarRenderer) renderer).setURLGenerator(new StandardXYURLGenerator());
        }
    }

    Plot plot;
    if (isCategoryPlot) {
        plot = new CategoryPlot((CategoryDataset) dataset, (CategoryAxis) xAxis, yAxis, (AreaRenderer) renderer);
    } else {
        plot = new XYPlot((IntervalXYDataset) dataset, xAxis, yAxis, (XYBarRenderer) renderer);
    }

    plot.setOrientation(orientation);

    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}

enum RendererType {
    AREA_RENDERER,
    XY_BAR_RENDERER
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createAreaChart`:**

```java
return createChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation, legend, tooltips, urls, true, RendererType.AREA_RENDERER);
```

**For `createHistogram`:**

```java
return createChart(title, xAxisLabel, yAxisLabel, dataset, orientation, legend, tooltips, urls, false, RendererType.XY_BAR_RENDERER);
```",Type-3
228-1-2,src,org.jfree.chart,ChartFactory,createStackedBarChart,854,886,src,org.jfree.chart,ChartFactory,createStackedAreaChart,1096,1127,Type 2,"**Code Snippet 1: Method: createStackedBarChart (Lines: 854-886)**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

    StackedBarRenderer renderer = new StackedBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createStackedAreaChart (Lines: 1096-1127)**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, 
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
Type-1 Clone: The two code snippets are nearly identical except for minor differences in variable names (`domainAxisLabel` vs `categoryAxisLabel`, `rangeAxisLabel` vs `valueAxisLabel`) and the renderer type (`StackedBarRenderer` vs `StackedAreaRenderer`).","**1. Extracted Method:**

```java
private static JFreeChart createStackedChart(String title,
                                             String axisLabel1,
                                             String axisLabel2,
                                             CategoryDataset dataset,
                                             PlotOrientation orientation,
                                             boolean legend,
                                             boolean tooltips,
                                             boolean urls,
                                             CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(axisLabel1);
    ValueAxis valueAxis = new NumberAxis(axisLabel2);

    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createStackedBarChart`:**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    StackedBarRenderer renderer = new StackedBarRenderer();
    return createStackedChart(title, domainAxisLabel, rangeAxisLabel, dataset, 
            orientation, legend, tooltips, urls, renderer);
}
```

**For `createStackedAreaChart`:**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    return createStackedChart(title, categoryAxisLabel, valueAxisLabel, dataset, 
            orientation, legend, tooltips, urls, renderer);
}
```",Type-1
228-1-3,src,org.jfree.chart,ChartFactory,createStackedBarChart,854,886,src,org.jfree.chart,ChartFactory,createLineChart3D,1205,1235,Type 2,"**Code Snippet 1: Method: createStackedBarChart (Lines: 854-886)**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

    StackedBarRenderer renderer = new StackedBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createLineChart3D (Lines: 1205-1235)**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

    LineRenderer3D renderer = new LineRenderer3D();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `StackedBarRenderer` in the first snippet and `LineRenderer3D` in the second snippet, as well as the use of `CategoryAxis` vs. `CategoryAxis3D` and `NumberAxis` vs. `NumberAxis3D`.","**1. Extracted Method:**

```java
private static JFreeChart createCategoryChart(String title,
                                              String categoryAxisLabel,
                                              String valueAxisLabel,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryAxis categoryAxis,
                                              ValueAxis valueAxis,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createStackedBarChart`:**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);
    StackedBarRenderer renderer = new StackedBarRenderer();

    return createCategoryChart(title, domainAxisLabel, rangeAxisLabel, dataset,
            orientation, legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```

---

**For `createLineChart3D`:**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);
    LineRenderer3D renderer = new LineRenderer3D();

    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset,
            orientation, legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```",Type-3
228-2-3,src,org.jfree.chart,ChartFactory,createStackedAreaChart,1096,1127,src,org.jfree.chart,ChartFactory,createLineChart3D,1205,1235,Type 2,"**Code Snippet 1: Method: createStackedAreaChart (Lines: 1096-1127)**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, 
            plot, legend);

    return chart;

}
```

**Code Snippet 2: Method: createLineChart3D (Lines: 1205-1235)**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

    LineRenderer3D renderer = new LineRenderer3D();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**

```java
private static JFreeChart createCategoryChart(String title,
                                              String categoryAxisLabel,
                                              String valueAxisLabel,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryAxis categoryAxis,
                                              ValueAxis valueAxis,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**

**For `createStackedAreaChart`:**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);
    StackedAreaRenderer renderer = new StackedAreaRenderer();

    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```

**For `createLineChart3D`:**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);
    LineRenderer3D renderer = new LineRenderer3D();

    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```",Type-3
266-1-2,src,org.jfree.chart.plot,PiePlot,lookupSectionPaint,875,903,src,org.jfree.chart.plot,PiePlot,lookupSectionOutlinePaint,1101,1130,Type 2,"**Code Snippet 1: Method: lookupSectionPaint (Lines: 875-903)**

```java
protected Paint lookupSectionPaint(Comparable key, boolean autoPopulate) {
        
    // is there an override?
    Paint result = getSectionPaint();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is a paint defined for the specified key
    result = this.sectionPaintMap.getPaint(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = ds.getNextPaint();
            this.sectionPaintMap.put(key, result);
        }
        else {
            result = this.baseSectionPaint;
        }
    }
    else {
        result = this.baseSectionPaint;
    }
    return result;
}
```

**Code Snippet 2: Method: lookupSectionOutlinePaint (Lines: 1101-1130)**

```java
protected Paint lookupSectionOutlinePaint(Comparable key, boolean autoPopulate) {
        
    // is there an override?
    Paint result = getSectionOutlinePaint();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is a paint defined for the specified key
    result = this.sectionOutlinePaintMap.getPaint(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = ds.getNextOutlinePaint();
            this.sectionOutlinePaintMap.put(key, result);
        }
        else {
            result = this.baseSectionOutlinePaint;
        }
    }
    else {
        result = this.baseSectionOutlinePaint;
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**

```java
private Paint lookupPaint(Comparable key, boolean autoPopulate, Paint overridePaint, PaintMap paintMap, Paint basePaint, Supplier<Paint> nextPaintSupplier) {
    // is there an override?
    Paint result = overridePaint;
    if (result != null) {
        return result;
    }

    // if not, check if there is a paint defined for the specified key
    result = paintMap.getPaint(key);
    if (result != null) {
        return result;
    }

    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        if (nextPaintSupplier != null) {
            result = nextPaintSupplier.get();
            paintMap.put(key, result);
        } else {
            result = basePaint;
        }
    } else {
        result = basePaint;
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**

**For `lookupSectionPaint`:**

```java
protected Paint lookupSectionPaint(Comparable key, boolean autoPopulate) {
    return lookupPaint(
        key,
        autoPopulate,
        getSectionPaint(),
        this.sectionPaintMap,
        this.baseSectionPaint,
        () -> {
            DrawingSupplier ds = getDrawingSupplier();
            return (ds != null) ? ds.getNextPaint() : null;
        }
    );
}
```

**For `lookupSectionOutlinePaint`:**

```java
protected Paint lookupSectionOutlinePaint(Comparable key, boolean autoPopulate) {
    return lookupPaint(
        key,
        autoPopulate,
        getSectionOutlinePaint(),
        this.sectionOutlinePaintMap,
        this.baseSectionOutlinePaint,
        () -> {
            DrawingSupplier ds = getDrawingSupplier();
            return (ds != null) ? ds.getNextOutlinePaint() : null;
        }
    );
}
```",Type-3
266-1-3,src,org.jfree.chart.plot,PiePlot,lookupSectionPaint,875,903,src,org.jfree.chart.plot,PiePlot,lookupSectionOutlineStroke,1275,1304,Type 2,"### Code Snippet 1: Method `lookupSectionPaint` (Lines 875-903)
```java
protected Paint lookupSectionPaint(Comparable key, boolean autoPopulate) {
        
    // is there an override?
    Paint result = getSectionPaint();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is a paint defined for the specified key
    result = this.sectionPaintMap.getPaint(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = ds.getNextPaint();
            this.sectionPaintMap.put(key, result);
        }
        else {
            result = this.baseSectionPaint;
        }
    }
    else {
        result = this.baseSectionPaint;
    }
    return result;
}
```

### Code Snippet 2: Method `lookupSectionOutlineStroke` (Lines 1275-1304)
```java
protected Stroke lookupSectionOutlineStroke(Comparable key, 
        boolean autoPopulate) {
        
    // is there an override?
    Stroke result = getSectionOutlineStroke();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is a stroke defined for the specified key
    result = this.sectionOutlineStrokeMap.getStroke(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = ds.getNextOutlineStroke();
            this.sectionOutlineStrokeMap.put(key, result);
        }
        else {
            result = this.baseSectionOutlineStroke;
        }
    }
    else {
        result = this.baseSectionOutlineStroke;
    }
    return result;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., handling `Paint` vs. `Stroke`, different map and method calls).","### 1. Extracted Method
```java
private <T> T lookupSectionAttribute(Comparable key, boolean autoPopulate, 
        Supplier<T> getOverride, Function<Comparable, T> getFromMap, 
        Supplier<T> getNextFromSupplier, Supplier<T> getBase) {
    
    // is there an override?
    T result = getOverride.get();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is an attribute defined for the specified key
    result = getFromMap.apply(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = getNextFromSupplier.get();
            getFromMap.apply(key).put(key, result);
        } else {
            result = getBase.get();
        }
    } else {
        result = getBase.get();
    }
    return result;
}
```

---

### 2. Method Calls Replacing the Clones

#### For `lookupSectionPaint`:
```java
protected Paint lookupSectionPaint(Comparable key, boolean autoPopulate) {
    return lookupSectionAttribute(
        key,
        autoPopulate,
        this::getSectionPaint,
        this.sectionPaintMap::getPaint,
        () -> getDrawingSupplier().getNextPaint(),
        () -> this.baseSectionPaint
    );
}
```

#### For `lookupSectionOutlineStroke`:
```java
protected Stroke lookupSectionOutlineStroke(Comparable key, boolean autoPopulate) {
    return lookupSectionAttribute(
        key,
        autoPopulate,
        this::getSectionOutlineStroke,
        this.sectionOutlineStrokeMap::getStroke,
        () -> getDrawingSupplier().getNextOutlineStroke(),
        () -> this.baseSectionOutlineStroke
    );
}
```",Type-3
266-2-3,src,org.jfree.chart.plot,PiePlot,lookupSectionOutlinePaint,1101,1130,src,org.jfree.chart.plot,PiePlot,lookupSectionOutlineStroke,1275,1304,Type 2,"### Code Snippet 1: Method `lookupSectionOutlinePaint` (Lines 1101-1130)
```java
protected Paint lookupSectionOutlinePaint(Comparable key, 
        boolean autoPopulate) {
    
    // is there an override?
    Paint result = getSectionOutlinePaint();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is a paint defined for the specified key
    result = this.sectionOutlinePaintMap.getPaint(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = ds.getNextOutlinePaint();
            this.sectionOutlinePaintMap.put(key, result);
        }
        else {
            result = this.baseSectionOutlinePaint;
        }
    }
    else {
        result = this.baseSectionOutlinePaint;
    }
    return result;
}
```

### Code Snippet 2: Method `lookupSectionOutlineStroke` (Lines 1275-1304)
```java
protected Stroke lookupSectionOutlineStroke(Comparable key, 
        boolean autoPopulate) {
    
    // is there an override?
    Stroke result = getSectionOutlineStroke();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is a stroke defined for the specified key
    result = this.sectionOutlineStrokeMap.getStroke(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = ds.getNextOutlineStroke();
            this.sectionOutlineStrokeMap.put(key, result);
        }
        else {
            result = this.baseSectionOutlineStroke;
        }
    }
    else {
        result = this.baseSectionOutlineStroke;
    }
    return result;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., handling `Paint` vs. `Stroke` and using different maps and methods).","### 1. Extracted Method
```java
private <T> T lookupSectionAttribute(Comparable key, boolean autoPopulate, 
        Supplier<T> getOverride, Function<Comparable, T> getFromMap, 
        Supplier<T> getNextFromSupplier, Supplier<T> getBase) {
    
    // is there an override?
    T result = getOverride.get();
    if (result != null) {
        return result;
    }
    
    // if not, check if there is an attribute defined for the specified key
    result = getFromMap.apply(key);
    if (result != null) {
        return result;
    }
    
    // nothing defined - do we autoPopulate?
    if (autoPopulate) {
        DrawingSupplier ds = getDrawingSupplier();
        if (ds != null) {
            result = getNextFromSupplier.get();
            getFromMap.apply(key); // Ensure the map is updated
        } else {
            result = getBase.get();
        }
    } else {
        result = getBase.get();
    }
    return result;
}
```

### 2. Method Calls Replacing the Clones

#### Replacing `lookupSectionOutlinePaint`
```java
protected Paint lookupSectionOutlinePaint(Comparable key, boolean autoPopulate) {
    return lookupSectionAttribute(
        key,
        autoPopulate,
        this::getSectionOutlinePaint,
        this.sectionOutlinePaintMap::getPaint,
        () -> getDrawingSupplier().getNextOutlinePaint(),
        () -> this.baseSectionOutlinePaint
    );
}
```

#### Replacing `lookupSectionOutlineStroke`
```java
protected Stroke lookupSectionOutlineStroke(Comparable key, boolean autoPopulate) {
    return lookupSectionAttribute(
        key,
        autoPopulate,
        this::getSectionOutlineStroke,
        this.sectionOutlineStrokeMap::getStroke,
        () -> getDrawingSupplier().getNextOutlineStroke(),
        () -> this.baseSectionOutlineStroke
    );
}
```",Type-3
295-1-2,src,org.jfree.chart.axis,ValueAxis,findMaximumTickLabelHeight,826,854,src,org.jfree.chart.axis,ValueAxis,findMaximumTickLabelWidth,869,897,Type 2,"**Code Snippet 1: Method: findMaximumTickLabelHeight (Lines: 826-854)**  
```java
protected double findMaximumTickLabelHeight(List ticks,
                                            Graphics2D g2,
                                            Rectangle2D drawArea,
                                            boolean vertical) {

    RectangleInsets insets = getTickLabelInsets();
    Font font = getTickLabelFont();
    double maxHeight = 0.0;
    if (vertical) {
        FontMetrics fm = g2.getFontMetrics(font);
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            Tick tick = (Tick) iterator.next();
            Rectangle2D labelBounds = TextUtilities.getTextBounds(
                    tick.getText(), g2, fm);
            if (labelBounds.getWidth() + insets.getTop()
                    + insets.getBottom() > maxHeight) {
                maxHeight = labelBounds.getWidth()
                            + insets.getTop() + insets.getBottom();
            }
        }
    }
    else {
        LineMetrics metrics = font.getLineMetrics(""ABCxyz"",
                g2.getFontRenderContext());
        maxHeight = metrics.getHeight()
                    + insets.getTop() + insets.getBottom();
    }
    return maxHeight;

}
```

**Code Snippet 2: Method: findMaximumTickLabelWidth (Lines: 869-897)**  
```java
protected double findMaximumTickLabelWidth(List ticks,
                                           Graphics2D g2,
                                           Rectangle2D drawArea,
                                           boolean vertical) {

    RectangleInsets insets = getTickLabelInsets();
    Font font = getTickLabelFont();
    double maxWidth = 0.0;
    if (!vertical) {
        FontMetrics fm = g2.getFontMetrics(font);
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            Tick tick = (Tick) iterator.next();
            Rectangle2D labelBounds = TextUtilities.getTextBounds(
                    tick.getText(), g2, fm);
            if (labelBounds.getWidth() + insets.getLeft()
                    + insets.getRight() > maxWidth) {
                maxWidth = labelBounds.getWidth()
                           + insets.getLeft() + insets.getRight();
            }
        }
    }
    else {
        LineMetrics metrics = font.getLineMetrics(""ABCxyz"",
                g2.getFontRenderContext());
        maxWidth = metrics.getHeight()
                   + insets.getTop() + insets.getBottom();
    }
    return maxWidth;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private double findMaximumTickLabelDimension(List ticks,
                                             Graphics2D g2,
                                             Rectangle2D drawArea,
                                             boolean vertical,
                                             boolean isHeight) {

    RectangleInsets insets = getTickLabelInsets();
    Font font = getTickLabelFont();
    double maxDimension = 0.0;
    if ((isHeight && vertical) || (!isHeight && !vertical)) {
        FontMetrics fm = g2.getFontMetrics(font);
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            Tick tick = (Tick) iterator.next();
            Rectangle2D labelBounds = TextUtilities.getTextBounds(
                    tick.getText(), g2, fm);
            double dimension = isHeight ? labelBounds.getWidth() : labelBounds.getWidth();
            double insetsValue = isHeight ? insets.getTop() + insets.getBottom() : insets.getLeft() + insets.getRight();
            if (dimension + insetsValue > maxDimension) {
                maxDimension = dimension + insetsValue;
            }
        }
    } else {
        LineMetrics metrics = font.getLineMetrics(""ABCxyz"",
                g2.getFontRenderContext());
        maxDimension = metrics.getHeight()
                       + insets.getTop() + insets.getBottom();
    }
    return maxDimension;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `findMaximumTickLabelHeight`:**  
```java
protected double findMaximumTickLabelHeight(List ticks,
                                            Graphics2D g2,
                                            Rectangle2D drawArea,
                                            boolean vertical) {
    return findMaximumTickLabelDimension(ticks, g2, drawArea, vertical, true);
}
```

**For `findMaximumTickLabelWidth`:**  
```java
protected double findMaximumTickLabelWidth(List ticks,
                                           Graphics2D g2,
                                           Rectangle2D drawArea,
                                           boolean vertical) {
    return findMaximumTickLabelDimension(ticks, g2, drawArea, vertical, false);
}
```",Type-3
306-1-2,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawDomainLine,937,960,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawRangeLine,976,1003,Type 2,"**Code Snippet 1: Method: drawDomainLine (Lines: 937-960)**  
```java
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea,
            plot.getDomainAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(),
                v);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v,
                dataArea.getMaxY());
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);

}
```

**Code Snippet 2: Method: drawRangeLine (Lines: 976-1003)**  
```java
public void drawRangeLine(Graphics2D g2,
        XYPlot plot,
        ValueAxis axis,
        Rectangle2D dataArea,
        double value,
        Paint paint,
        Stroke stroke) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v,
                dataArea.getMaxY());
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(dataArea.getMinX(), v,
                dataArea.getMaxX(), v);
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawLine(Graphics2D g2, XYPlot plot, ValueAxis axis, 
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke, boolean isDomain) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea, 
            isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = isDomain 
            ? new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v)
            : new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
    } else if (orientation == PlotOrientation.VERTICAL) {
        line = isDomain 
            ? new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY())
            : new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);
}
```

**2. Method Calls Replacing the Clones:**  

**For `drawDomainLine`:**  
```java
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {
    drawLine(g2, plot, axis, dataArea, value, paint, stroke, true);
}
```

**For `drawRangeLine`:**  
```java
public void drawRangeLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {
    drawLine(g2, plot, axis, dataArea, value, paint, stroke, false);
}
```",Type-3
307-2-3,src,org.jfree.chart.plot,XYPlot,drawDomainCrosshair,3754,3774,src,org.jfree.chart.plot,XYPlot,drawRangeCrosshair,3820,3840,Type 2,"```java
// Code snippet 1 - Method: drawDomainCrosshair
protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if (orientation == PlotOrientation.VERTICAL) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

}
```

```java
// Code snippet 2 - Method: drawRangeCrosshair
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

}
```

Clone Type: **Type-3 (Mostly similar but with some different statements)**","```java
// 1. The extracted method
private void drawCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint, boolean isDomain) {

    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if ((isDomain && orientation == PlotOrientation.VERTICAL) || 
            (!isDomain && orientation == PlotOrientation.HORIZONTAL)) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing drawDomainCrosshair
protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {
    drawCrosshair(g2, dataArea, orientation, value, axis, stroke, paint, true);
}

// Replacing drawRangeCrosshair
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {
    drawCrosshair(g2, dataArea, orientation, value, axis, stroke, paint, false);
}
```",Type-3
307-4-5,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawDomainLine,937,960,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawRangeLine,976,1003,Type 2,"**Code Snippet 1: Method: drawDomainLine (Lines: 937-960)**  
```java
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea,
            plot.getDomainAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(),
                v);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v,
                dataArea.getMaxY());
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);

}
```

**Code Snippet 2: Method: drawRangeLine (Lines: 976-1003)**  
```java
public void drawRangeLine(Graphics2D g2,
        XYPlot plot,
        ValueAxis axis,
        Rectangle2D dataArea,
        double value,
        Paint paint,
        Stroke stroke) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v,
                dataArea.getMaxY());
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(dataArea.getMinX(), v,
                dataArea.getMaxX(), v);
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawLine(Graphics2D g2, XYPlot plot, ValueAxis axis, 
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke, boolean isDomain) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea, 
            isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = isDomain 
            ? new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v)
            : new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
    } else if (orientation == PlotOrientation.VERTICAL) {
        line = isDomain 
            ? new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY())
            : new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);
}
```

**2. Method Calls:**  

**For `drawDomainLine`:**  
```java
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {
    drawLine(g2, plot, axis, dataArea, value, paint, stroke, true);
}
```

**For `drawRangeLine`:**  
```java
public void drawRangeLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {
    drawLine(g2, plot, axis, dataArea, value, paint, stroke, false);
}
```",Type-3
321-1-2,src,org.jfree.chart.plot,CategoryPlot,clearDomainMarkers,2064,2090,src,org.jfree.chart.plot,CategoryPlot,clearRangeMarkers,2337,2363,Type 2,"```java
// Code snippet 1 - Method: clearDomainMarkers
public void clearDomainMarkers() {
    if (this.backgroundDomainMarkers != null) {
        Set keys = this.backgroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.backgroundDomainMarkers.clear();
    }
    if (this.foregroundDomainMarkers != null) {
        Set keys = this.foregroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.foregroundDomainMarkers.clear();
    }
    fireChangeEvent();
}

// Code snippet 2 - Method: clearRangeMarkers
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

Clone type: **Type-1**","```java
// 1. The extracted method
private void clearMarkers(Map<Integer, ?> markers) {
    if (markers != null) {
        Set<Integer> keys = markers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearDomainMarkers(key.intValue());
        }
        markers.clear();
    }
}

// 2. The method calls that should replace the clones in the original files

// Refactored clearDomainMarkers
public void clearDomainMarkers() {
    clearMarkers(this.backgroundDomainMarkers);
    clearMarkers(this.foregroundDomainMarkers);
    fireChangeEvent();
}

// Refactored clearRangeMarkers
public void clearRangeMarkers() {
    clearMarkers(this.backgroundRangeMarkers);
    clearMarkers(this.foregroundRangeMarkers);
    fireChangeEvent();
}
```",Type-1
321-3-4,src,org.jfree.chart.plot,XYPlot,clearDomainMarkers,2125,2151,src,org.jfree.chart.plot,XYPlot,clearRangeMarkers,2428,2454,Type 2,"```java
// Code snippet 1 - Method: clearDomainMarkers
public void clearDomainMarkers() {
    if (this.backgroundDomainMarkers != null) {
        Set keys = this.backgroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.backgroundDomainMarkers.clear();
    }
    if (this.foregroundDomainMarkers != null) {
        Set keys = this.foregroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.foregroundDomainMarkers.clear();
    }
    fireChangeEvent();
}
```

```java
// Code snippet 2 - Method: clearRangeMarkers
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, layout).","```java
// Extracted method
private void clearMarkers(Map<Integer, Collection> markers) {
    if (markers != null) {
        Set keys = markers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue()); // or clearRangeMarkers based on context
        }
        markers.clear();
    }
}
```

```java
// Refactored clearDomainMarkers method
public void clearDomainMarkers() {
    clearMarkers(this.backgroundDomainMarkers);
    clearMarkers(this.foregroundDomainMarkers);
    fireChangeEvent();
}
```

```java
// Refactored clearRangeMarkers method
public void clearRangeMarkers() {
    clearMarkers(this.backgroundRangeMarkers);
    clearMarkers(this.foregroundRangeMarkers);
    fireChangeEvent();
}
```",Type-1
336-1-2,src,org.jfree.data.general,DatasetUtilities,findMinimumStackedRangeValue,1458,1483,src,org.jfree.data.general,DatasetUtilities,findMaximumStackedRangeValue,1495,1519,Type 2,"**Code Snippet 1: Method: findMinimumStackedRangeValue (Lines: 1458-1483)**  
```java
/**
 * Returns the minimum value in the dataset range, assuming that values in
 * each category are ""stacked"".
 *
 * @param dataset  the dataset.
 *
 * @return The minimum value.
 */
public static Number findMinimumStackedRangeValue(CategoryDataset dataset) {

    Number result = null;
    if (dataset != null) {
        double minimum = 0.0;
        int categoryCount = dataset.getRowCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;

            int seriesCount = dataset.getColumnCount();
            for (int series = 0; series < seriesCount; series++) {
                Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if (value < 0.0) {
                        total = total + value;
                        // '+', remember value is negative
                    }
                }
            }
            minimum = Math.min(minimum, total);

        }
        result = new Double(minimum);
    }
    return result;

}
```

**Code Snippet 2: Method: findMaximumStackedRangeValue (Lines: 1495-1519)**  
```java
/**
 * Returns the maximum value in the dataset range, assuming that values in
 * each category are ""stacked"".
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 *
 * @return The maximum value (possibly <code>null</code>).
 */
public static Number findMaximumStackedRangeValue(CategoryDataset dataset) {

    Number result = null;

    if (dataset != null) {
        double maximum = 0.0;
        int categoryCount = dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if (value > 0.0) {
                        total = total + value;
                    }
                }
            }
            maximum = Math.max(maximum, total);
        }
        result = new Double(maximum);
    }

    return result;

}
```

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `value < 0.0` vs. `value > 0.0`, `minimum` vs. `maximum`, etc.).","**1. Extracted Method:**  
```java
/**
 * Returns the minimum or maximum value in the dataset range, assuming that
 * values in each category are ""stacked"".
 *
 * @param dataset  the dataset.
 * @param findMinimum  flag to determine whether to find minimum or maximum.
 *
 * @return The minimum or maximum value.
 */
private static Number findStackedRangeValue(CategoryDataset dataset, boolean findMinimum) {
    Number result = null;
    if (dataset != null) {
        double extremeValue = findMinimum ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
        int categoryCount = findMinimum ? dataset.getRowCount() : dataset.getColumnCount();
        for (int item = 0; item < categoryCount; item++) {
            double total = 0.0;
            int seriesCount = findMinimum ? dataset.getColumnCount() : dataset.getRowCount();
            for (int series = 0; series < seriesCount; series++) {
                Number number = dataset.getValue(series, item);
                if (number != null) {
                    double value = number.doubleValue();
                    if ((findMinimum && value < 0.0) || (!findMinimum && value > 0.0)) {
                        total = total + value;
                    }
                }
            }
            extremeValue = findMinimum ? Math.min(extremeValue, total) : Math.max(extremeValue, total);
        }
        result = new Double(extremeValue);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `findMinimumStackedRangeValue`:**  
```java
public static Number findMinimumStackedRangeValue(CategoryDataset dataset) {
    return findStackedRangeValue(dataset, true);
}
```

**For `findMaximumStackedRangeValue`:**  
```java
public static Number findMaximumStackedRangeValue(CategoryDataset dataset) {
    return findStackedRangeValue(dataset, false);
}
```",Type-3
378-1-2,src,org.jfree.chart.axis,NumberAxis,valueToJava2D,518,541,src,org.jfree.chart.axis,NumberAxis,java2DToValue,558,581,Type 2,"### Code Snippet 1: Method `valueToJava2D` (Lines 518-541)
```java
public double valueToJava2D(double value, Rectangle2D area,
                            RectangleEdge edge) {

    Range range = getRange();
    double axisMin = range.getLowerBound();
    double axisMax = range.getUpperBound();

    double min = 0.0;
    double max = 0.0;
    if (RectangleEdge.isTopOrBottom(edge)) {
        min = area.getX();
        max = area.getMaxX();
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        max = area.getMinY();
        min = area.getMaxY();
    }
    if (isInverted()) {
        return max
               - ((value - axisMin) / (axisMax - axisMin)) * (max - min);
    }
    else {
        return min
               + ((value - axisMin) / (axisMax - axisMin)) * (max - min);
    }

}
```

### Code Snippet 2: Method `java2DToValue` (Lines 558-581)
```java
public double java2DToValue(double java2DValue, Rectangle2D area,
                            RectangleEdge edge) {

    Range range = getRange();
    double axisMin = range.getLowerBound();
    double axisMax = range.getUpperBound();

    double min = 0.0;
    double max = 0.0;
    if (RectangleEdge.isTopOrBottom(edge)) {
        min = area.getX();
        max = area.getMaxX();
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        min = area.getMaxY();
        max = area.getY();
    }
    if (isInverted()) {
        return axisMax
               - (java2DValue - min) / (max - min) * (axisMax - axisMin);
    }
    else {
        return axisMin
               + (java2DValue - min) / (max - min) * (axisMax - axisMin);
    }

}
```

### Clone Type:
**Type-3 Clone**: The two methods are mostly similar but have some different statements, such as the return calculations and variable usage (`value` vs. `java2DValue`, `axisMin`/`axisMax` vs. `min`/`max`).","### 1. Extracted Method
```java
private double convertValue(double inputValue, Rectangle2D area, RectangleEdge edge, boolean isValueToJava2D) {
    Range range = getRange();
    double axisMin = range.getLowerBound();
    double axisMax = range.getUpperBound();

    double min = 0.0;
    double max = 0.0;
    if (RectangleEdge.isTopOrBottom(edge)) {
        min = area.getX();
        max = area.getMaxX();
    } else if (RectangleEdge.isLeftOrRight(edge)) {
        if (isValueToJava2D) {
            max = area.getMinY();
            min = area.getMaxY();
        } else {
            min = area.getMaxY();
            max = area.getY();
        }
    }

    if (isInverted()) {
        return isValueToJava2D
                ? max - ((inputValue - axisMin) / (axisMax - axisMin)) * (max - min)
                : axisMax - (inputValue - min) / (max - min) * (axisMax - axisMin);
    } else {
        return isValueToJava2D
                ? min + ((inputValue - axisMin) / (axisMax - axisMin)) * (max - min)
                : axisMin + (inputValue - min) / (max - min) * (axisMax - axisMin);
    }
}
```

### 2. Method Calls Replacing the Clones

#### For `valueToJava2D`:
```java
public double valueToJava2D(double value, Rectangle2D area, RectangleEdge edge) {
    return convertValue(value, area, edge, true);
}
```

#### For `java2DToValue`:
```java
public double java2DToValue(double java2DValue, Rectangle2D area, RectangleEdge edge) {
    return convertValue(java2DValue, area, edge, false);
}
```",Type-3
412-1-2,src,org.jfree.chart.plot,ContourPlot,drawDomainMarker,1594,1616,src,org.jfree.chart.plot,ContourPlot,drawRangeMarker,1630,1652,Type 2,"**Code Snippet 1: Method: drawDomainMarker (Lines: 1594-1616)**  
```java
public void drawDomainMarker(Graphics2D g2,
                             ContourPlot plot,
                             ValueAxis domainAxis,
                             Marker marker,
                             Rectangle2D dataArea) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = domainAxis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double x = domainAxis.valueToJava2D(value, dataArea, 
                RectangleEdge.BOTTOM);
        Line2D line = new Line2D.Double(x, dataArea.getMinY(), x, 
                dataArea.getMaxY());
        Paint paint = marker.getOutlinePaint();
        Stroke stroke = marker.getOutlineStroke();
        g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }

}
```

**Code Snippet 2: Method: drawRangeMarker (Lines: 1630-1652)**  
```java
public void drawRangeMarker(Graphics2D g2,
                            ContourPlot plot,
                            ValueAxis rangeAxis,
                            Marker marker,
                            Rectangle2D dataArea) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = rangeAxis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double y = rangeAxis.valueToJava2D(value, dataArea, 
                RectangleEdge.LEFT);
        Line2D line = new Line2D.Double(dataArea.getMinX(), y, 
                dataArea.getMaxX(), y);
        Paint paint = marker.getOutlinePaint();
        Stroke stroke = marker.getOutlineStroke();
        g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }

}
```

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `domainAxis` vs. `rangeAxis`, `RectangleEdge.BOTTOM` vs. `RectangleEdge.LEFT`, and `x` vs. `y` coordinates).","**1. Extracted Method:**  
```java
private void drawMarker(Graphics2D g2,
                        ContourPlot plot,
                        ValueAxis axis,
                        Marker marker,
                        Rectangle2D dataArea,
                        boolean isDomain) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double coord = axis.valueToJava2D(value, dataArea, 
                isDomain ? RectangleEdge.BOTTOM : RectangleEdge.LEFT);
        Line2D line = isDomain 
                ? new Line2D.Double(coord, dataArea.getMinY(), coord, dataArea.getMaxY())
                : new Line2D.Double(dataArea.getMinX(), coord, dataArea.getMaxX(), coord);
        Paint paint = marker.getOutlinePaint();
        Stroke stroke = marker.getOutlineStroke();
        g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }
}
```

**2. Method Calls:**  

**For `drawDomainMarker`:**  
```java
public void drawDomainMarker(Graphics2D g2,
                             ContourPlot plot,
                             ValueAxis domainAxis,
                             Marker marker,
                             Rectangle2D dataArea) {
    drawMarker(g2, plot, domainAxis, marker, dataArea, true);
}
```

**For `drawRangeMarker`:**  
```java
public void drawRangeMarker(Graphics2D g2,
                            ContourPlot plot,
                            ValueAxis rangeAxis,
                            Marker marker,
                            Rectangle2D dataArea) {
    drawMarker(g2, plot, rangeAxis, marker, dataArea, false);
}
```",Type-3
414-1-2,src,org.jfree.chart.axis,ModuloAxis,transStart,206,228,src,org.jfree.chart.axis,ModuloAxis,transEnd,245,267,Type 2,"**Code Snippet 1 - Method: transStart (Lines: 206-228)**  
```java
private double transStart(double value, Rectangle2D area, 
                          RectangleEdge edge,
                          double length1, double length2) {
    double min = 0.0;
    double max = 0.0;
    if (RectangleEdge.isTopOrBottom(edge)) {
        min = area.getX();
        max = area.getX() + area.getWidth() * length1 / (length1 + length2);
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        min = area.getMaxY();
        max = area.getMaxY() - area.getHeight() * length1 
              / (length1 + length2);
    }
    if (isInverted()) {
        return max - ((value - this.displayStart) 
            / (this.fixedRange.getUpperBound() - this.displayStart)) 
            * (max - min);
    }
    else {
        return min + ((value - this.displayStart) 
            / (this.fixedRange.getUpperBound() - this.displayStart)) 
            * (max - min);
    }
}
```

**Code Snippet 2 - Method: transEnd (Lines: 245-267)**  
```java
private double transEnd(double value, Rectangle2D area, RectangleEdge edge,
                        double length1, double length2) {
    double min = 0.0;
    double max = 0.0;
    if (RectangleEdge.isTopOrBottom(edge)) {
        max = area.getMaxX();
        min = area.getMaxX() - area.getWidth() * length2 
              / (length1 + length2);
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        max = area.getMinY();
        min = area.getMinY() + area.getHeight() * length2 
              / (length1 + length2);
    }
    if (isInverted()) {
        return max - ((value - this.fixedRange.getLowerBound()) 
                / (this.displayEnd - this.fixedRange.getLowerBound())) 
                * (max - min);
    }
    else {
        return min + ((value - this.fixedRange.getLowerBound()) 
                / (this.displayEnd - this.fixedRange.getLowerBound())) 
                * (max - min);
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private double transSection(double value, Rectangle2D area, RectangleEdge edge,
                            double length1, double length2, boolean isStart) {
    double min = 0.0;
    double max = 0.0;
    if (RectangleEdge.isTopOrBottom(edge)) {
        if (isStart) {
            min = area.getX();
            max = area.getX() + area.getWidth() * length1 / (length1 + length2);
        } else {
            max = area.getMaxX();
            min = area.getMaxX() - area.getWidth() * length2 / (length1 + length2);
        }
    } else if (RectangleEdge.isLeftOrRight(edge)) {
        if (isStart) {
            min = area.getMaxY();
            max = area.getMaxY() - area.getHeight() * length1 / (length1 + length2);
        } else {
            max = area.getMinY();
            min = area.getMinY() + area.getHeight() * length2 / (length1 + length2);
        }
    }
    if (isInverted()) {
        return max - ((value - (isStart ? this.displayStart : this.fixedRange.getLowerBound())) 
                / ((isStart ? this.fixedRange.getUpperBound() - this.displayStart 
                            : this.displayEnd - this.fixedRange.getLowerBound()))) 
                * (max - min);
    } else {
        return min + ((value - (isStart ? this.displayStart : this.fixedRange.getLowerBound())) 
                / ((isStart ? this.fixedRange.getUpperBound() - this.displayStart 
                            : this.displayEnd - this.fixedRange.getLowerBound()))) 
                * (max - min);
    }
}
```

**2. Method Calls:**  

**For `transStart`:**  
```java
private double transStart(double value, Rectangle2D area, 
                          RectangleEdge edge,
                          double length1, double length2) {
    return transSection(value, area, edge, length1, length2, true);
}
```

**For `transEnd`:**  
```java
private double transEnd(double value, Rectangle2D area, RectangleEdge edge,
                        double length1, double length2) {
    return transSection(value, area, edge, length1, length2, false);
}
```",Type-3
420-1-2,src,org.jfree.chart,HashUtilities,hashCode,250,271,src,org.jfree.chart,HashUtilities,hashCode,287,308,Type 2,"**Code Snippet 1:**
```java
/**
 * Returns a hash value based on a seed value and a string instance.
 * 
 * @param pre  the seed value.
 * @param s  the string (<code>null</code> permitted).
 * 
 * @return A hash value.
 * 
 * @since 1.0.7
 */
public static int hashCode(int pre, String s) {
    int h = (s != null ? s.hashCode() : 0);
    return 37 * pre + h;
}
```

**Code Snippet 2:**
```java
/**
 * Returns a hash value based on a seed value and a <code>Comparable</code>
 * instance.
 * 
 * @param pre  the seed value.
 * @param c  the comparable (<code>null</code> permitted).
 * 
 * @return A hash value.
 * 
 * @since 1.0.7
 */
public static int hashCode(int pre, Comparable c) {
    int h = (c != null ? c.hashCode() : 0);
    return 37 * pre + h;
}
```

**Clone Type:** Type-2 (Identical except for variable names and types).","**1. Extracted Method:**
```java
/**
 * Returns a hash value based on a seed value and an object instance.
 * 
 * @param pre  the seed value.
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A hash value.
 */
private static int hashCodeForObject(int pre, Object obj) {
    int h = (obj != null ? obj.hashCode() : 0);
    return 37 * pre + h;
}
```

**2. Method Calls Replacing the Clones:**

**For Code Snippet 1:**
```java
public static int hashCode(int pre, String s) {
    return hashCodeForObject(pre, s);
}
```

**For Code Snippet 2:**
```java
public static int hashCode(int pre, Comparable c) {
    return hashCodeForObject(pre, c);
}
```",Type-2
420-1-3,src,org.jfree.chart,HashUtilities,hashCode,250,271,src,org.jfree.chart,HashUtilities,hashCode,324,345,Type 2,"**Code Snippet 1:**
```java
/**
 * Returns a hash value based on a seed value and a <code>Comparable</code>
 * instance.
 * 
 * @param pre  the seed value.
 * @param c  the comparable (<code>null</code> permitted).
 * 
 * @return A hash value.
 * 
 * @since 1.0.7
 */
public static int hashCode(int pre, Comparable c) {
    int h = (c != null ? c.hashCode() : 0);
    return 37 * pre + h;
}
```

**Code Snippet 2:**
```java
/**
 * Returns a hash value based on a seed value and an <code>Object</code>
 * instance.
 * 
 * @param pre  the seed value.
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A hash value.
 * 
 * @since 1.0.8
 */
public static int hashCode(int pre, Object obj) {
    int h = (obj != null ? obj.hashCode() : 0);
    return 37 * pre + h;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**
```java
/**
 * Returns a hash value based on a seed value and an object instance.
 * 
 * @param pre  the seed value.
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A hash value.
 */
private static int hashCodeForObject(int pre, Object obj) {
    int h = (obj != null ? obj.hashCode() : 0);
    return 37 * pre + h;
}
```

**2. Method Calls Replacing the Clones:**

**For Code Snippet 1:**
```java
public static int hashCode(int pre, Comparable c) {
    return hashCodeForObject(pre, c);
}
```

**For Code Snippet 2:**
```java
public static int hashCode(int pre, Object obj) {
    return hashCodeForObject(pre, obj);
}
```",Type-2
420-2-3,src,org.jfree.chart,HashUtilities,hashCode,287,308,src,org.jfree.chart,HashUtilities,hashCode,324,345,Type 2,"**Code Snippet 1:**
```java
/**
 * Returns a hash value based on a seed value and a string instance.
 * 
 * @param pre  the seed value.
 * @param s  the string (<code>null</code> permitted).
 * 
 * @return A hash value.
 * 
 * @since 1.0.7
 */
public static int hashCode(int pre, String s) {
    int h = (s != null ? s.hashCode() : 0);
    return 37 * pre + h;
}
```

**Code Snippet 2:**
```java
/**
 * Returns a hash value based on a seed value and a <code>Comparable</code>
 * instance.
 * 
 * @param pre  the seed value.
 * @param c  the comparable (<code>null</code> permitted).
 * 
 * @return A hash value.
 * 
 * @since 1.0.7
 */
public static int hashCode(int pre, Comparable c) {
    int h = (c != null ? c.hashCode() : 0);
    return 37 * pre + h;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**
```java
/**
 * Returns a hash value based on a seed value and an object instance.
 * 
 * @param pre  the seed value.
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A hash value.
 */
private static int hashCodeForObject(int pre, Object obj) {
    int h = (obj != null ? obj.hashCode() : 0);
    return 37 * pre + h;
}
```

**2. Method Calls Replacing the Clones:**

**For Code Snippet 1:**
```java
public static int hashCode(int pre, String s) {
    return hashCodeForObject(pre, s);
}
```

**For Code Snippet 2:**
```java
public static int hashCode(int pre, Comparable c) {
    return hashCodeForObject(pre, c);
}
```",Type-2
425-2-3,src,org.jfree.chart.plot,XYPlot,setDomainAxis,744,758,src,org.jfree.chart.plot,XYPlot,setRangeAxis,1094,1108,Type 2,"**Code Snippet 1:**
```java
public void setDomainAxis(int index, ValueAxis axis) {
    setDomainAxis(index, axis, true);
}

public void setDomainAxis(int index, ValueAxis axis, boolean notify) {
    ValueAxis existing = getDomainAxis(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    if (axis != null) {
        axis.setPlot(this);
    }
    this.domainAxes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    if (notify) {
        fireChangeEvent();
    }
}
```

**Code Snippet 2:**
```java
public void setRangeAxis(int index, ValueAxis axis) {
    setRangeAxis(index, axis, true);
}

public void setRangeAxis(int index, ValueAxis axis, boolean notify) {
    ValueAxis existing = getRangeAxis(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    if (axis != null) {
        axis.setPlot(this);
    }
    this.rangeAxes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    if (notify) {
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names).","**1. Extracted Method:**
```java
private void setAxis(int index, ValueAxis axis, boolean notify, ObjectList axes, String axisType) {
    ValueAxis existing = axisType.equals(""domain"") ? getDomainAxis(index) : getRangeAxis(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    if (axis != null) {
        axis.setPlot(this);
    }
    axes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    if (notify) {
        fireChangeEvent();
    }
}
```

**2. Method Calls:**

**For `setDomainAxis`:**
```java
public void setDomainAxis(int index, ValueAxis axis) {
    setDomainAxis(index, axis, true);
}

public void setDomainAxis(int index, ValueAxis axis, boolean notify) {
    setAxis(index, axis, notify, this.domainAxes, ""domain"");
}
```

**For `setRangeAxis`:**
```java
public void setRangeAxis(int index, ValueAxis axis) {
    setRangeAxis(index, axis, true);
}

public void setRangeAxis(int index, ValueAxis axis, boolean notify) {
    setAxis(index, axis, notify, this.rangeAxes, ""range"");
}
```",Type-2
433-1-2,src,org.jfree.chart.plot,CategoryPlot,datasetsMappedToDomainAxis,3410,3431,src,org.jfree.chart.plot,CategoryPlot,datasetsMappedToRangeAxis,3442,3461,Type 2,"**Code Snippet 1: datasetsMappedToDomainAxis**
```java
private List datasetsMappedToDomainAxis(int axisIndex) {
    List result = new ArrayList();
    for (int datasetIndex = 0; datasetIndex < this.datasets.size();
            datasetIndex++) {
        Object dataset = this.datasets.get(datasetIndex);
        if (dataset != null) {
            Integer m = (Integer) this.datasetToDomainAxisMap.get(
                    datasetIndex);
            if (m == null) {  // a dataset with no mapping is assigned to
                              // axis 0
                if (axisIndex == 0) {
                    result.add(dataset);
                }
            }
            else {
                if (m.intValue() == axisIndex) {
                    result.add(dataset);
                }
            }
        }
    }
    return result;
}
```

**Code Snippet 2: datasetsMappedToRangeAxis**
```java
private List datasetsMappedToRangeAxis(int index) {
    List result = new ArrayList();
    for (int i = 0; i < this.datasets.size(); i++) {
        Object dataset = this.datasets.get(i);
        if (dataset != null) {
            Integer m = (Integer) this.datasetToRangeAxisMap.get(i);
            if (m == null) {  // a dataset with no mapping is assigned to
                              // axis 0
                if (index == 0) {
                    result.add(dataset);
                }
            }
            else {
                if (m.intValue() == index) {
                    result.add(dataset);
                }
            }
        }
    }
    return result;
}
```

**Clone Type:** Type-1 Clone","**1. Extracted Method:**
```java
private List datasetsMappedToAxis(int axisIndex, ObjectList axisMap) {
    List result = new ArrayList();
    for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) {
        Object dataset = this.datasets.get(datasetIndex);
        if (dataset != null) {
            Integer m = (Integer) axisMap.get(datasetIndex);
            if (m == null) {  // a dataset with no mapping is assigned to axis 0
                if (axisIndex == 0) {
                    result.add(dataset);
                }
            } else {
                if (m.intValue() == axisIndex) {
                    result.add(dataset);
                }
            }
        }
    }
    return result;
}
```

**2. Method Calls:**

**For `datasetsMappedToDomainAxis`:**
```java
private List datasetsMappedToDomainAxis(int axisIndex) {
    return datasetsMappedToAxis(axisIndex, this.datasetToDomainAxisMap);
}
```

**For `datasetsMappedToRangeAxis`:**
```java
private List datasetsMappedToRangeAxis(int index) {
    return datasetsMappedToAxis(index, this.datasetToRangeAxisMap);
}
```",Type-1
446-1-2,src,org.jfree.chart,ChartPanel,drawHorizontalAxisTrace,2137,2157,src,org.jfree.chart,ChartPanel,drawVerticalAxisTrace,2167,2188,Type 2,"**Code Snippet 1: Method: drawHorizontalAxisTrace (Lines: 2137-2157)**  
```java
private void drawHorizontalAxisTrace(Graphics2D g2, int x) {

    Rectangle2D dataArea = getScreenDataArea();

    g2.setXORMode(Color.orange);
    if (((int) dataArea.getMinX() < x) && (x < (int) dataArea.getMaxX())) {

        if (this.verticalTraceLine != null) {
            g2.draw(this.verticalTraceLine);
            this.verticalTraceLine.setLine(x, (int) dataArea.getMinY(), x,
                    (int) dataArea.getMaxY());
        }
        else {
            this.verticalTraceLine = new Line2D.Float(x,
                    (int) dataArea.getMinY(), x, (int) dataArea.getMaxY());
        }
        g2.draw(this.verticalTraceLine);
    }

    // Reset to the default 'overwrite' mode
    g2.setPaintMode();
}
```

**Code Snippet 2: Method: drawVerticalAxisTrace (Lines: 2167-2188)**  
```java
private void drawVerticalAxisTrace(Graphics2D g2, int y) {

    Rectangle2D dataArea = getScreenDataArea();

    g2.setXORMode(Color.orange);
    if (((int) dataArea.getMinY() < y) && (y < (int) dataArea.getMaxY())) {

        if (this.horizontalTraceLine != null) {
            g2.draw(this.horizontalTraceLine);
            this.horizontalTraceLine.setLine((int) dataArea.getMinX(), y,
                    (int) dataArea.getMaxX(), y);
        }
        else {
            this.horizontalTraceLine = new Line2D.Float(
                    (int) dataArea.getMinX(), y, (int) dataArea.getMaxX(),
                    y);
        }
        g2.draw(this.horizontalTraceLine);
    }

    // Reset to the default 'overwrite' mode
    g2.setPaintMode();
}
```

**Clone Type:**  
These two code snippets are **Type-2 clones** because they are structurally identical with differences in variable names (`x` vs `y`, `verticalTraceLine` vs `horizontalTraceLine`) and some literals (`dataArea.getMinX()` vs `dataArea.getMinY()`, etc.).","**1. Extracted Method:**  
```java
private void drawAxisTrace(Graphics2D g2, int coordinate, boolean isHorizontal) {

    Rectangle2D dataArea = getScreenDataArea();

    g2.setXORMode(Color.orange);
    if (isHorizontal) {
        if (((int) dataArea.getMinX() < coordinate) && (coordinate < (int) dataArea.getMaxX())) {
            if (this.verticalTraceLine != null) {
                g2.draw(this.verticalTraceLine);
                this.verticalTraceLine.setLine(coordinate, (int) dataArea.getMinY(), coordinate,
                        (int) dataArea.getMaxY());
            } else {
                this.verticalTraceLine = new Line2D.Float(coordinate,
                        (int) dataArea.getMinY(), coordinate, (int) dataArea.getMaxY());
            }
            g2.draw(this.verticalTraceLine);
        }
    } else {
        if (((int) dataArea.getMinY() < coordinate) && (coordinate < (int) dataArea.getMaxY())) {
            if (this.horizontalTraceLine != null) {
                g2.draw(this.horizontalTraceLine);
                this.horizontalTraceLine.setLine((int) dataArea.getMinX(), coordinate,
                        (int) dataArea.getMaxX(), coordinate);
            } else {
                this.horizontalTraceLine = new Line2D.Float(
                        (int) dataArea.getMinX(), coordinate, (int) dataArea.getMaxX(),
                        coordinate);
            }
            g2.draw(this.horizontalTraceLine);
        }
    }

    // Reset to the default 'overwrite' mode
    g2.setPaintMode();
}
```

**2. Method Calls:**  

**For `drawHorizontalAxisTrace`:**  
```java
drawAxisTrace(g2, x, true);
```

**For `drawVerticalAxisTrace`:**  
```java
drawAxisTrace(g2, y, false);
```",Type-2
452-1-2,src,org.jfree.chart.plot,FastScatterPlot,calculateXDataRange,695,716,src,org.jfree.chart.plot,FastScatterPlot,calculateYDataRange,727,747,Type 2,"**Code Snippet 1: Method: calculateXDataRange (Lines: 695-716)**  
```java
/**
 * Calculates the X data range.
 *
 * @param data  the data (<code>null</code> permitted).
 *
 * @return The range.
 */
private Range calculateXDataRange(float[][] data) {
    
    Range result = null;
    
    if (data != null) {
        float lowest = Float.POSITIVE_INFINITY;
        float highest = Float.NEGATIVE_INFINITY;
        for (int i = 0; i < data[0].length; i++) {
            float v = data[0][i];
            if (v < lowest) {
                lowest = v;
            }
            if (v > highest) {
                highest = v;
            }
        }
        if (lowest <= highest) {
            result = new Range(lowest, highest);
        }
    }
    
    return result;
    
}
```

**Code Snippet 2: Method: calculateYDataRange (Lines: 727-747)**  
```java
/**
 * Calculates the Y data range.
 *
 * @param data  the data (<code>null</code> permitted).
 *
 * @return The range.
 */
private Range calculateYDataRange(float[][] data) {
    
    Range result = null;
    
    if (data != null) {
        float lowest = Float.POSITIVE_INFINITY;
        float highest = Float.NEGATIVE_INFINITY;
        for (int i = 0; i < data[0].length; i++) {
            float v = data[1][i];
            if (v < lowest) {
                lowest = v;
            }
            if (v > highest) {
                highest = v;
            }
        }
        if (lowest <= highest) {
            result = new Range(lowest, highest);
        }
    }
    return result;
    
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, or types).","**1. The Extracted Method:**  
```java
/**
 * Calculates the data range for the specified dimension.
 *
 * @param data  the data (<code>null</code> permitted).
 * @param dimension  the dimension index (0 for X, 1 for Y).
 *
 * @return The range.
 */
private Range calculateDataRange(float[][] data, int dimension) {
    
    Range result = null;
    
    if (data != null) {
        float lowest = Float.POSITIVE_INFINITY;
        float highest = Float.NEGATIVE_INFINITY;
        for (int i = 0; i < data[0].length; i++) {
            float v = data[dimension][i];
            if (v < lowest) {
                lowest = v;
            }
            if (v > highest) {
                highest = v;
            }
        }
        if (lowest <= highest) {
            result = new Range(lowest, highest);
        }
    }
    
    return result;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `calculateXDataRange`:**  
```java
private Range calculateXDataRange(float[][] data) {
    return calculateDataRange(data, 0);
}
```

**For `calculateYDataRange`:**  
```java
private Range calculateYDataRange(float[][] data) {
    return calculateDataRange(data, 1);
}
```",Type-2
458-1-2,src,org.jfree.chart.plot,XYPlot,drawDomainTickBands,3148,3169,src,org.jfree.chart.plot,XYPlot,drawRangeTickBands,3183,3204,Type 2,"**Code Snippet 1 - Method: drawDomainTickBands (Lines: 3148-3169)**

```java
public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea,
                                List ticks) {
    Paint bandPaint = getDomainTickBandPaint();
    if (bandPaint != null) {
        boolean fillBand = false;
        ValueAxis xAxis = getDomainAxis();
        double previous = xAxis.getLowerBound();
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double current = tick.getValue();
            if (fillBand) {
                getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea,
                        previous, current);
            }
            previous = current;
            fillBand = !fillBand;
        }
        double end = xAxis.getUpperBound();
        if (fillBand) {
            getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea,
                    previous, end);
        }
    }
}
```

**Code Snippet 2 - Method: drawRangeTickBands (Lines: 3183-3204)**

```java
public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea,
                               List ticks) {
    Paint bandPaint = getRangeTickBandPaint();
    if (bandPaint != null) {
        boolean fillBand = false;
        ValueAxis axis = getRangeAxis();
        double previous = axis.getLowerBound();
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double current = tick.getValue();
            if (fillBand) {
                getRenderer().fillRangeGridBand(g2, this, axis, dataArea,
                        previous, current);
            }
            previous = current;
            fillBand = !fillBand;
        }
        double end = axis.getUpperBound();
        if (fillBand) {
            getRenderer().fillRangeGridBand(g2, this, axis, dataArea,
                    previous, end);
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method**

```java
private void drawTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks, 
                           Paint bandPaint, ValueAxis axis, boolean isDomain) {
    if (bandPaint != null) {
        boolean fillBand = false;
        double previous = axis.getLowerBound();
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double current = tick.getValue();
            if (fillBand) {
                if (isDomain) {
                    getRenderer().fillDomainGridBand(g2, this, axis, dataArea,
                            previous, current);
                } else {
                    getRenderer().fillRangeGridBand(g2, this, axis, dataArea,
                            previous, current);
                }
            }
            previous = current;
            fillBand = !fillBand;
        }
        double end = axis.getUpperBound();
        if (fillBand) {
            if (isDomain) {
                getRenderer().fillDomainGridBand(g2, this, axis, dataArea,
                        previous, end);
            } else {
                getRenderer().fillRangeGridBand(g2, this, axis, dataArea,
                        previous, end);
            }
        }
    }
}
```

**2. Method Calls**

**For `drawDomainTickBands`:**

```java
public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) {
    drawTickBands(g2, dataArea, ticks, getDomainTickBandPaint(), getDomainAxis(), true);
}
```

**For `drawRangeTickBands`:**

```java
public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) {
    drawTickBands(g2, dataArea, ticks, getRangeTickBandPaint(), getRangeAxis(), false);
}
```",Type-3
496-1-2,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,fillDomainGridBand,821,841,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,fillRangeGridBand,857,876,Type 2,"**Code Snippet 1: Method: fillDomainGridBand (Lines: 821-841)**  
```java
public void fillDomainGridBand(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double start, double end) {

    double x1 = axis.valueToJava2D(start, dataArea,
            plot.getDomainAxisEdge());
    double x2 = axis.valueToJava2D(end, dataArea,
            plot.getDomainAxisEdge());
    Rectangle2D band;
    if (plot.getOrientation() == PlotOrientation.VERTICAL) {
        band = new Rectangle2D.Double(Math.min(x1, x2), dataArea.getMinY(),
                Math.abs(x2 - x1), dataArea.getWidth());
    }
    else {
        band = new Rectangle2D.Double(dataArea.getMinX(), Math.min(x1, x2),
                dataArea.getWidth(), Math.abs(x2 - x1));
    }
    Paint paint = plot.getDomainTickBandPaint();

    if (paint != null) {
        g2.setPaint(paint);
        g2.fill(band);
    }

}
```

**Code Snippet 2: Method: fillRangeGridBand (Lines: 857-876)**  
```java
public void fillRangeGridBand(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double start, double end) {

    double y1 = axis.valueToJava2D(start, dataArea,
            plot.getRangeAxisEdge());
    double y2 = axis.valueToJava2D(end, dataArea, plot.getRangeAxisEdge());
    Rectangle2D band;
    if (plot.getOrientation() == PlotOrientation.VERTICAL) {
        band = new Rectangle2D.Double(dataArea.getMinX(), Math.min(y1, y2),
            dataArea.getWidth(), Math.abs(y2 - y1));
    }
    else {
        band = new Rectangle2D.Double(Math.min(y1, y2), dataArea.getMinY(),
                Math.abs(y2 - y1), dataArea.getHeight());
    }
    Paint paint = plot.getRangeTickBandPaint();

    if (paint != null) {
        g2.setPaint(paint);
        g2.fill(band);
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void fillGridBand(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double start, double end, boolean isDomain) {

    double coord1 = axis.valueToJava2D(start, dataArea,
            isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
    double coord2 = axis.valueToJava2D(end, dataArea,
            isDomain ? plot.getDomainAxisEdge() : plot.getRangeAxisEdge());
    Rectangle2D band;
    if (plot.getOrientation() == PlotOrientation.VERTICAL) {
        band = isDomain
                ? new Rectangle2D.Double(Math.min(coord1, coord2), dataArea.getMinY(),
                        Math.abs(coord2 - coord1), dataArea.getWidth())
                : new Rectangle2D.Double(dataArea.getMinX(), Math.min(coord1, coord2),
                        dataArea.getWidth(), Math.abs(coord2 - coord1));
    } else {
        band = isDomain
                ? new Rectangle2D.Double(dataArea.getMinX(), Math.min(coord1, coord2),
                        dataArea.getWidth(), Math.abs(coord2 - coord1))
                : new Rectangle2D.Double(Math.min(coord1, coord2), dataArea.getMinY(),
                        Math.abs(coord2 - coord1), dataArea.getHeight());
    }
    Paint paint = isDomain ? plot.getDomainTickBandPaint() : plot.getRangeTickBandPaint();

    if (paint != null) {
        g2.setPaint(paint);
        g2.fill(band);
    }
}
```

**2. Method Calls:**  

**For `fillDomainGridBand`:**  
```java
fillGridBand(g2, plot, axis, dataArea, start, end, true);
```

**For `fillRangeGridBand`:**  
```java
fillGridBand(g2, plot, axis, dataArea, start, end, false);
```",Type-3
508-1-2,src,org.jfree.data.category,DefaultIntervalCategoryDataset,setStartValue,506,525,src,org.jfree.data.category,DefaultIntervalCategoryDataset,setEndValue,539,558,Type 2,"**Code Snippet 1: Method: setStartValue (Lines: 506-525)**  
```java
public void setStartValue(int series, Comparable category, Number value) {

    // does the series exist?
    if ((series < 0) || (series > getSeriesCount() - 1)) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.setValue: ""
            + ""series outside valid range."");
    }

    // is the category valid?
    int categoryIndex = getCategoryIndex(category);
    if (categoryIndex < 0) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.setValue: ""
            + ""unrecognised category."");
    }

    // update the data...
    this.startData[series][categoryIndex] = value;
    fireDatasetChanged();

}
```

**Code Snippet 2: Method: setEndValue (Lines: 539-558)**  
```java
public void setEndValue(int series, Comparable category, Number value) {

    // does the series exist?
    if ((series < 0) || (series > getSeriesCount() - 1)) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.setValue: ""
            + ""series outside valid range."");
    }

    // is the category valid?
    int categoryIndex = getCategoryIndex(category);
    if (categoryIndex < 0) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.setValue: ""
            + ""unrecognised category."");
    }

    // update the data...
    this.endData[series][categoryIndex] = value;
    fireDatasetChanged();

}
```

**Clone Type:** Type-1 Clone (Identical except for variable names).","**1. Extracted Method:**  
```java
private void setValue(Number[][] data, int series, Comparable category, Number value) {

    // does the series exist?
    if ((series < 0) || (series > getSeriesCount() - 1)) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.setValue: ""
            + ""series outside valid range."");
    }

    // is the category valid?
    int categoryIndex = getCategoryIndex(category);
    if (categoryIndex < 0) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.setValue: ""
            + ""unrecognised category."");
    }

    // update the data...
    data[series][categoryIndex] = value;
    fireDatasetChanged();
}
```

**2. Method Calls Replacing the Clones:**  

**For `setStartValue`:**  
```java
public void setStartValue(int series, Comparable category, Number value) {
    setValue(this.startData, series, category, value);
}
```

**For `setEndValue`:**  
```java
public void setEndValue(int series, Comparable category, Number value) {
    setValue(this.endData, series, category, value);
}
```",Type-1
510-1-2,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesPaint,885,904,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesFillPaint,1078,1097,Type 2,"**Code Snippet 1: Method: lookupSeriesPaint (Lines: 885-904)**  
```java
public Paint lookupSeriesPaint(int series) {

    // return the override, if there is one...
    if (this.paint != null) {
        return this.paint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = getSeriesPaint(series);
    if (seriesPaint == null && this.autoPopulateSeriesPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesPaint = supplier.getNextPaint();
            setSeriesPaint(series, seriesPaint, false);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = this.basePaint;
    }
    return seriesPaint;

}
```

**Code Snippet 2: Method: lookupSeriesFillPaint (Lines: 1078-1097)**  
```java
public Paint lookupSeriesFillPaint(int series) {

    // return the override, if there is one...
    if (this.fillPaint != null) {
        return this.fillPaint;
    }

    // otherwise look up the paint table
    Paint seriesFillPaint = getSeriesFillPaint(series);
    if (seriesFillPaint == null && this.autoPopulateSeriesFillPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesFillPaint = supplier.getNextFillPaint();
            setSeriesFillPaint(series, seriesFillPaint, false);
        }
    }
    if (seriesFillPaint == null) {
        seriesFillPaint = this.baseFillPaint;
    }
    return seriesFillPaint;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Paint lookupSeriesPaintGeneric(Paint overridePaint, Paint basePaint, PaintList paintList, 
                                       boolean autoPopulate, Supplier<Paint> nextPaintSupplier, 
                                       BiConsumer<Integer, Paint> setSeriesPaint, int series) {

    // return the override, if there is one...
    if (overridePaint != null) {
        return overridePaint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = paintList.getPaint(series);
    if (seriesPaint == null && autoPopulate) {
        Paint nextPaint = nextPaintSupplier.get();
        if (nextPaint != null) {
            setSeriesPaint.accept(series, nextPaint);
            seriesPaint = nextPaint;
        }
    }
    if (seriesPaint == null) {
        seriesPaint = basePaint;
    }
    return seriesPaint;
}
```

**2. Method Calls:**  

**For `lookupSeriesPaint`:**  
```java
public Paint lookupSeriesPaint(int series) {
    return lookupSeriesPaintGeneric(
        this.paint, 
        this.basePaint, 
        this.paintList, 
        this.autoPopulateSeriesPaint, 
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextPaint() : null;
        }, 
        (s, p) -> setSeriesPaint(s, p, false), 
        series
    );
}
```

**For `lookupSeriesFillPaint`:**  
```java
public Paint lookupSeriesFillPaint(int series) {
    return lookupSeriesPaintGeneric(
        this.fillPaint, 
        this.baseFillPaint, 
        this.fillPaintList, 
        this.autoPopulateSeriesFillPaint, 
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextFillPaint() : null;
        }, 
        (s, p) -> setSeriesFillPaint(s, p, false), 
        series
    );
}
```",Type-3
510-1-3,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesPaint,885,904,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlinePaint,1275,1294,Type 2,"**Code Snippet 1: Method: lookupSeriesPaint (Lines: 885-904)**  
```java
public Paint lookupSeriesPaint(int series) {

    // return the override, if there is one...
    if (this.paint != null) {
        return this.paint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = getSeriesPaint(series);
    if (seriesPaint == null && this.autoPopulateSeriesPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesPaint = supplier.getNextPaint();
            setSeriesPaint(series, seriesPaint, false);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = this.basePaint;
    }
    return seriesPaint;

}
```

**Code Snippet 2: Method: lookupSeriesOutlinePaint (Lines: 1275-1294)**  
```java
public Paint lookupSeriesOutlinePaint(int series) {

    // return the override, if there is one...
    if (this.outlinePaint != null) {
        return this.outlinePaint;
    }

    // otherwise look up the paint table
    Paint seriesOutlinePaint = getSeriesOutlinePaint(series);
    if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesOutlinePaint = supplier.getNextOutlinePaint();
            setSeriesOutlinePaint(series, seriesOutlinePaint, false);
        }
    }
    if (seriesOutlinePaint == null) {
        seriesOutlinePaint = this.baseOutlinePaint;
    }
    return seriesOutlinePaint;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private Paint lookupSeriesPaintHelper(Paint overridePaint, PaintList paintList, boolean autoPopulate, Paint basePaint, int series, Supplier<Paint> nextPaintSupplier, BiConsumer<Integer, Paint> setSeriesPaint) {

    // return the override, if there is one...
    if (overridePaint != null) {
        return overridePaint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = paintList.getPaint(series);
    if (seriesPaint == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesPaint = nextPaintSupplier.get();
            setSeriesPaint.accept(series, seriesPaint);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = basePaint;
    }
    return seriesPaint;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `lookupSeriesPaint`:**  
```java
public Paint lookupSeriesPaint(int series) {
    return lookupSeriesPaintHelper(
        this.paint,
        this.paintList,
        this.autoPopulateSeriesPaint,
        this.basePaint,
        series,
        () -> getDrawingSupplier().getNextPaint(),
        (s, p) -> setSeriesPaint(s, p, false)
    );
}
```

**For `lookupSeriesOutlinePaint`:**  
```java
public Paint lookupSeriesOutlinePaint(int series) {
    return lookupSeriesPaintHelper(
        this.outlinePaint,
        this.outlinePaintList,
        this.autoPopulateSeriesOutlinePaint,
        this.baseOutlinePaint,
        series,
        () -> getDrawingSupplier().getNextOutlinePaint(),
        (s, p) -> setSeriesOutlinePaint(s, p, false)
    );
}
```",Type-3
510-1-4,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesPaint,885,904,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesStroke,1472,1491,Type 2,"**Code Snippet 1: Method: lookupSeriesPaint (Lines: 885-904)**  
```java
public Paint lookupSeriesPaint(int series) {

    // return the override, if there is one...
    if (this.paint != null) {
        return this.paint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = getSeriesPaint(series);
    if (seriesPaint == null && this.autoPopulateSeriesPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesPaint = supplier.getNextPaint();
            setSeriesPaint(series, seriesPaint, false);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = this.basePaint;
    }
    return seriesPaint;

}
```

**Code Snippet 2: Method: lookupSeriesStroke (Lines: 1472-1491)**  
```java
public Stroke lookupSeriesStroke(int series) {

    // return the override, if there is one...
    if (this.stroke != null) {
        return this.stroke;
    }

    // otherwise look up the paint table
    Stroke result = getSeriesStroke(series);
    if (result == null && this.autoPopulateSeriesStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextStroke();
            setSeriesStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseStroke;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(int series, T override, T base, boolean autoPopulate, 
                                    Supplier<T> getSeriesAttribute, Supplier<T> getNextAttribute, 
                                    BiConsumer<Integer, T> setSeriesAttribute) {

    // return the override, if there is one...
    if (override != null) {
        return override;
    }

    // otherwise look up the attribute list
    T seriesAttribute = getSeriesAttribute.get();
    if (seriesAttribute == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesAttribute = getNextAttribute.get();
            setSeriesAttribute.accept(series, seriesAttribute);
        }
    }
    if (seriesAttribute == null) {
        seriesAttribute = base;
    }
    return seriesAttribute;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `lookupSeriesPaint`:**  
```java
public Paint lookupSeriesPaint(int series) {
    return lookupSeriesAttribute(
        series,
        this.paint,
        this.basePaint,
        this.autoPopulateSeriesPaint,
        () -> getSeriesPaint(series),
        () -> getDrawingSupplier().getNextPaint(),
        (s, p) -> setSeriesPaint(s, p, false)
    );
}
```

**For `lookupSeriesStroke`:**  
```java
public Stroke lookupSeriesStroke(int series) {
    return lookupSeriesAttribute(
        series,
        this.stroke,
        this.baseStroke,
        this.autoPopulateSeriesStroke,
        () -> getSeriesStroke(series),
        () -> getDrawingSupplier().getNextStroke(),
        (s, st) -> setSeriesStroke(s, st, false)
    );
}
```",Type-3
510-1-5,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesPaint,885,904,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlineStroke,1667,1686,Type 2,"**Code Snippet 1: Method: lookupSeriesPaint (Lines: 885-904)**  
```java
public Paint lookupSeriesPaint(int series) {

    // return the override, if there is one...
    if (this.paint != null) {
        return this.paint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = getSeriesPaint(series);
    if (seriesPaint == null && this.autoPopulateSeriesPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesPaint = supplier.getNextPaint();
            setSeriesPaint(series, seriesPaint, false);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = this.basePaint;
    }
    return seriesPaint;

}
```

**Code Snippet 2: Method: lookupSeriesOutlineStroke (Lines: 1667-1686)**  
```java
public Stroke lookupSeriesOutlineStroke(int series) {

    // return the override, if there is one...
    if (this.outlineStroke != null) {
        return this.outlineStroke;
    }

    // otherwise look up the stroke table
    Stroke result = getSeriesOutlineStroke(series);
    if (result == null && this.autoPopulateSeriesOutlineStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextOutlineStroke();
            setSeriesOutlineStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseOutlineStroke;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(int series, T override, T base, boolean autoPopulate, Supplier<T> getSeriesAttribute, Supplier<T> getNextAttribute, BiConsumer<Integer, T> setSeriesAttribute) {

    // return the override, if there is one...
    if (override != null) {
        return override;
    }

    // otherwise look up the attribute list
    T seriesAttribute = getSeriesAttribute.get();
    if (seriesAttribute == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesAttribute = getNextAttribute.get();
            setSeriesAttribute.accept(series, seriesAttribute);
        }
    }
    if (seriesAttribute == null) {
        seriesAttribute = base;
    }
    return seriesAttribute;

}
```

**2. Method Calls Replacing the Clones:**  

**For `lookupSeriesPaint`:**  
```java
public Paint lookupSeriesPaint(int series) {
    return lookupSeriesAttribute(
        series,
        this.paint,
        this.basePaint,
        this.autoPopulateSeriesPaint,
        () -> getSeriesPaint(series),
        () -> getDrawingSupplier().getNextPaint(),
        (s, p) -> setSeriesPaint(s, p, false)
    );
}
```

**For `lookupSeriesOutlineStroke`:**  
```java
public Stroke lookupSeriesOutlineStroke(int series) {
    return lookupSeriesAttribute(
        series,
        this.outlineStroke,
        this.baseOutlineStroke,
        this.autoPopulateSeriesOutlineStroke,
        () -> getSeriesOutlineStroke(series),
        () -> getDrawingSupplier().getNextOutlineStroke(),
        (s, st) -> setSeriesOutlineStroke(s, st, false)
    );
}
```",Type-3
510-1-6,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesPaint,885,904,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesShape,1865,1884,Type 2,"**Code Snippet 1 - Method: lookupSeriesPaint (Lines: 885-904)**  
```java
public Paint lookupSeriesPaint(int series) {

    // return the override, if there is one...
    if (this.paint != null) {
        return this.paint;
    }

    // otherwise look up the paint list
    Paint seriesPaint = getSeriesPaint(series);
    if (seriesPaint == null && this.autoPopulateSeriesPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesPaint = supplier.getNextPaint();
            setSeriesPaint(series, seriesPaint, false);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = this.basePaint;
    }
    return seriesPaint;

}
```

**Code Snippet 2 - Method: lookupSeriesShape (Lines: 1865-1884)**  
```java
public Shape lookupSeriesShape(int series) {

    // return the override, if there is one...
    if (this.shape != null) {
        return this.shape;
    }

    // otherwise look up the shape list
    Shape result = getSeriesShape(series);
    if (result == null && this.autoPopulateSeriesShape) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextShape();
            setSeriesShape(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseShape;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(int series, T override, T base, boolean autoPopulate, Supplier<T> getSeriesAttribute, Supplier<T> getNextAttribute, BiConsumer<Integer, T> setSeriesAttribute) {

    // return the override, if there is one...
    if (override != null) {
        return override;
    }

    // otherwise look up the attribute list
    T result = getSeriesAttribute.get();
    if (result == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = getNextAttribute.get();
            setSeriesAttribute.accept(series, result);
        }
    }
    if (result == null) {
        result = base;
    }
    return result;

}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `lookupSeriesPaint`:**  
```java
public Paint lookupSeriesPaint(int series) {
    return lookupSeriesAttribute(
        series,
        this.paint,
        this.basePaint,
        this.autoPopulateSeriesPaint,
        () -> getSeriesPaint(series),
        () -> getDrawingSupplier().getNextPaint(),
        (s, p) -> setSeriesPaint(s, p, false)
    );
}
```

**For `lookupSeriesShape`:**  
```java
public Shape lookupSeriesShape(int series) {
    return lookupSeriesAttribute(
        series,
        this.shape,
        this.baseShape,
        this.autoPopulateSeriesShape,
        () -> getSeriesShape(series),
        () -> getDrawingSupplier().getNextShape(),
        (s, sh) -> setSeriesShape(s, sh, false)
    );
}
```",Type-3
510-2-3,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesFillPaint,1078,1097,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlinePaint,1275,1294,Type 2,"**Code Snippet 1: Method: lookupSeriesFillPaint (Lines: 1078-1097)**  
```java
public Paint lookupSeriesFillPaint(int series) {

    // return the override, if there is one...
    if (this.fillPaint != null) {
        return this.fillPaint;
    }

    // otherwise look up the paint table
    Paint seriesFillPaint = getSeriesFillPaint(series);
    if (seriesFillPaint == null && this.autoPopulateSeriesFillPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesFillPaint = supplier.getNextFillPaint();
            setSeriesFillPaint(series, seriesFillPaint, false);
        }
    }
    if (seriesFillPaint == null) {
        seriesFillPaint = this.baseFillPaint;
    }
    return seriesFillPaint;

}
```

**Code Snippet 2: Method: lookupSeriesOutlinePaint (Lines: 1275-1294)**  
```java
public Paint lookupSeriesOutlinePaint(int series) {

    // return the override, if there is one...
    if (this.outlinePaint != null) {
        return this.outlinePaint;
    }

    // otherwise look up the paint table
    Paint seriesOutlinePaint = getSeriesOutlinePaint(series);
    if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesOutlinePaint = supplier.getNextOutlinePaint();
            setSeriesOutlinePaint(series, seriesOutlinePaint, false);
        }
    }
    if (seriesOutlinePaint == null) {
        seriesOutlinePaint = this.baseOutlinePaint;
    }
    return seriesOutlinePaint;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private Paint lookupSeriesPaint(Paint overridePaint, PaintList paintList, Paint basePaint, boolean autoPopulate, int series, Supplier<Paint> supplier, BiConsumer<Integer, Paint> setter) {

    // return the override, if there is one...
    if (overridePaint != null) {
        return overridePaint;
    }

    // otherwise look up the paint table
    Paint seriesPaint = paintList.getPaint(series);
    if (seriesPaint == null && autoPopulate) {
        if (supplier != null) {
            seriesPaint = supplier.get();
            setter.accept(series, seriesPaint);
        }
    }
    if (seriesPaint == null) {
        seriesPaint = basePaint;
    }
    return seriesPaint;

}
```

**2. Method Calls:**  

**For `lookupSeriesFillPaint`:**  
```java
public Paint lookupSeriesFillPaint(int series) {
    return lookupSeriesPaint(
        this.fillPaint,
        this.fillPaintList,
        this.baseFillPaint,
        this.autoPopulateSeriesFillPaint,
        series,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextFillPaint() : null;
        },
        (s, p) -> setSeriesFillPaint(s, p, false)
    );
}
```

**For `lookupSeriesOutlinePaint`:**  
```java
public Paint lookupSeriesOutlinePaint(int series) {
    return lookupSeriesPaint(
        this.outlinePaint,
        this.outlinePaintList,
        this.baseOutlinePaint,
        this.autoPopulateSeriesOutlinePaint,
        series,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextOutlinePaint() : null;
        },
        (s, p) -> setSeriesOutlinePaint(s, p, false)
    );
}
```",Type-3
510-2-4,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesFillPaint,1078,1097,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesStroke,1472,1491,Type 2,"**Code Snippet 1: Method: lookupSeriesFillPaint (Lines: 1078-1097)**  
```java
public Paint lookupSeriesFillPaint(int series) {

    // return the override, if there is one...
    if (this.fillPaint != null) {
        return this.fillPaint;
    }

    // otherwise look up the paint table
    Paint seriesFillPaint = getSeriesFillPaint(series);
    if (seriesFillPaint == null && this.autoPopulateSeriesFillPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesFillPaint = supplier.getNextFillPaint();
            setSeriesFillPaint(series, seriesFillPaint, false);
        }
    }
    if (seriesFillPaint == null) {
        seriesFillPaint = this.baseFillPaint;
    }
    return seriesFillPaint;

}
```

**Code Snippet 2: Method: lookupSeriesStroke (Lines: 1472-1491)**  
```java
public Stroke lookupSeriesStroke(int series) {

    // return the override, if there is one...
    if (this.stroke != null) {
        return this.stroke;
    }

    // otherwise look up the paint table
    Stroke result = getSeriesStroke(series);
    if (result == null && this.autoPopulateSeriesStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextStroke();
            setSeriesStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseStroke;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(int series, T override, T base, boolean autoPopulate, Supplier<T> getSeriesAttribute, Supplier<T> getNextAttribute, BiConsumer<Integer, T> setSeriesAttribute) {

    // return the override, if there is one...
    if (override != null) {
        return override;
    }

    // otherwise look up the attribute table
    T result = getSeriesAttribute.get();
    if (result == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = getNextAttribute.get();
            setSeriesAttribute.accept(series, result);
        }
    }
    if (result == null) {
        result = base;
    }
    return result;
}
```

**2. Method Calls:**  

**For `lookupSeriesFillPaint`:**  
```java
public Paint lookupSeriesFillPaint(int series) {
    return lookupSeriesAttribute(
        series,
        this.fillPaint,
        this.baseFillPaint,
        this.autoPopulateSeriesFillPaint,
        () -> getSeriesFillPaint(series),
        () -> getDrawingSupplier().getNextFillPaint(),
        (s, p) -> setSeriesFillPaint(s, p, false)
    );
}
```

**For `lookupSeriesStroke`:**  
```java
public Stroke lookupSeriesStroke(int series) {
    return lookupSeriesAttribute(
        series,
        this.stroke,
        this.baseStroke,
        this.autoPopulateSeriesStroke,
        () -> getSeriesStroke(series),
        () -> getDrawingSupplier().getNextStroke(),
        (s, st) -> setSeriesStroke(s, st, false)
    );
}
```",Type-3
510-2-5,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesFillPaint,1078,1097,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlineStroke,1667,1686,Type 2,"```java
// Code snippet 1 - Method: lookupSeriesFillPaint
public Paint lookupSeriesFillPaint(int series) {

    // return the override, if there is one...
    if (this.fillPaint != null) {
        return this.fillPaint;
    }

    // otherwise look up the paint table
    Paint seriesFillPaint = getSeriesFillPaint(series);
    if (seriesFillPaint == null && this.autoPopulateSeriesFillPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesFillPaint = supplier.getNextFillPaint();
            setSeriesFillPaint(series, seriesFillPaint, false);
        }
    }
    if (seriesFillPaint == null) {
        seriesFillPaint = this.baseFillPaint;
    }
    return seriesFillPaint;

}
```

```java
// Code snippet 2 - Method: lookupSeriesOutlineStroke
public Stroke lookupSeriesOutlineStroke(int series) {

    // return the override, if there is one...
    if (this.outlineStroke != null) {
        return this.outlineStroke;
    }

    // otherwise look up the stroke table
    Stroke result = getSeriesOutlineStroke(series);
    if (result == null && this.autoPopulateSeriesOutlineStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextOutlineStroke();
            setSeriesOutlineStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseOutlineStroke;
    }
    return result;

}
```

Clone Type: **Type-3 (Mostly similar but with some different statements)**","```java
// 1. The extracted method
private <T> T lookupSeriesAttribute(T override, T base, boolean autoPopulate, 
                                    Supplier<T> seriesGetter, Consumer<T> seriesSetter, 
                                    Supplier<T> supplierGetter, Supplier<T> supplierNext) {
    if (override != null) {
        return override;
    }

    T seriesAttribute = seriesGetter.get();
    if (seriesAttribute == null && autoPopulate) {
        T supplier = supplierGetter.get();
        if (supplier != null) {
            seriesAttribute = supplierNext.get();
            seriesSetter.accept(seriesAttribute);
        }
    }
    if (seriesAttribute == null) {
        seriesAttribute = base;
    }
    return seriesAttribute;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// For lookupSeriesFillPaint
public Paint lookupSeriesFillPaint(int series) {
    return lookupSeriesAttribute(
        this.fillPaint,
        this.baseFillPaint,
        this.autoPopulateSeriesFillPaint,
        () -> getSeriesFillPaint(series),
        (paint) -> setSeriesFillPaint(series, paint, false),
        this::getDrawingSupplier,
        () -> getDrawingSupplier().getNextFillPaint()
    );
}

// For lookupSeriesOutlineStroke
public Stroke lookupSeriesOutlineStroke(int series) {
    return lookupSeriesAttribute(
        this.outlineStroke,
        this.baseOutlineStroke,
        this.autoPopulateSeriesOutlineStroke,
        () -> getSeriesOutlineStroke(series),
        (stroke) -> setSeriesOutlineStroke(series, stroke, false),
        this::getDrawingSupplier,
        () -> getDrawingSupplier().getNextOutlineStroke()
    );
}
```",Type-3
510-2-6,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesFillPaint,1078,1097,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesShape,1865,1884,Type 2,"### Code Snippet 1: Method `lookupSeriesFillPaint` (Lines: 1078-1097)
```java
public Paint lookupSeriesFillPaint(int series) {

    // return the override, if there is one...
    if (this.fillPaint != null) {
        return this.fillPaint;
    }

    // otherwise look up the paint table
    Paint seriesFillPaint = getSeriesFillPaint(series);
    if (seriesFillPaint == null && this.autoPopulateSeriesFillPaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesFillPaint = supplier.getNextFillPaint();
            setSeriesFillPaint(series, seriesFillPaint, false);
        }
    }
    if (seriesFillPaint == null) {
        seriesFillPaint = this.baseFillPaint;
    }
    return seriesFillPaint;

}
```

### Code Snippet 2: Method `lookupSeriesShape` (Lines: 1865-1884)
```java
public Shape lookupSeriesShape(int series) {

    // return the override, if there is one...
    if (this.shape != null) {
        return this.shape;
    }

    // otherwise look up the shape list
    Shape result = getSeriesShape(series);
    if (result == null && this.autoPopulateSeriesShape) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextShape();
            setSeriesShape(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseShape;
    }
    return result;

}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `fillPaint` vs. `shape`, `getSeriesFillPaint` vs. `getSeriesShape`, etc.).","### 1. Extracted Method
```java
private <T> T lookupSeriesAttribute(T override, T base, boolean autoPopulate, Supplier<T> seriesGetter, Supplier<T> nextSupplier, BiConsumer<Integer, T> seriesSetter, int series) {
    // return the override, if there is one...
    if (override != null) {
        return override;
    }

    // otherwise look up the series attribute
    T result = seriesGetter.get();
    if (result == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = nextSupplier.get();
            seriesSetter.accept(series, result);
        }
    }
    if (result == null) {
        result = base;
    }
    return result;
}
```

---

### 2. Method Calls Replacing the Clones

#### For `lookupSeriesFillPaint`
```java
public Paint lookupSeriesFillPaint(int series) {
    return lookupSeriesAttribute(
        this.fillPaint,
        this.baseFillPaint,
        this.autoPopulateSeriesFillPaint,
        () -> getSeriesFillPaint(series),
        () -> getDrawingSupplier().getNextFillPaint(),
        (s, p) -> setSeriesFillPaint(s, p, false),
        series
    );
}
```

#### For `lookupSeriesShape`
```java
public Shape lookupSeriesShape(int series) {
    return lookupSeriesAttribute(
        this.shape,
        this.baseShape,
        this.autoPopulateSeriesShape,
        () -> getSeriesShape(series),
        () -> getDrawingSupplier().getNextShape(),
        (s, sh) -> setSeriesShape(s, sh, false),
        series
    );
}
```",Type-3
510-3-4,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlinePaint,1275,1294,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesStroke,1472,1491,Type 2,"**Code Snippet 1: Method: lookupSeriesOutlinePaint (Lines: 1275-1294)**  
```java
public Paint lookupSeriesOutlinePaint(int series) {

    // return the override, if there is one...
    if (this.outlinePaint != null) {
        return this.outlinePaint;
    }

    // otherwise look up the paint table
    Paint seriesOutlinePaint = getSeriesOutlinePaint(series);
    if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesOutlinePaint = supplier.getNextOutlinePaint();
            setSeriesOutlinePaint(series, seriesOutlinePaint, false);
        }
    }
    if (seriesOutlinePaint == null) {
        seriesOutlinePaint = this.baseOutlinePaint;
    }
    return seriesOutlinePaint;

}
```

**Code Snippet 2: Method: lookupSeriesStroke (Lines: 1472-1491)**  
```java
public Stroke lookupSeriesStroke(int series) {

    // return the override, if there is one...
    if (this.stroke != null) {
        return this.stroke;
    }

    // otherwise look up the paint table
    Stroke result = getSeriesStroke(series);
    if (result == null && this.autoPopulateSeriesStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextStroke();
            setSeriesStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseStroke;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(T override, T seriesValue, boolean autoPopulate, Supplier<T> supplier, Consumer<T> setter, T baseValue) {
    if (override != null) {
        return override;
    }

    T result = seriesValue;
    if (result == null && autoPopulate) {
        T suppliedValue = supplier.get();
        if (suppliedValue != null) {
            setter.accept(suppliedValue);
            result = suppliedValue;
        }
    }
    if (result == null) {
        result = baseValue;
    }
    return result;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `lookupSeriesOutlinePaint`:**  
```java
public Paint lookupSeriesOutlinePaint(int series) {
    return lookupSeriesAttribute(
        this.outlinePaint,
        getSeriesOutlinePaint(series),
        this.autoPopulateSeriesOutlinePaint,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextOutlinePaint() : null;
        },
        paint -> setSeriesOutlinePaint(series, paint, false),
        this.baseOutlinePaint
    );
}
```

**For `lookupSeriesStroke`:**  
```java
public Stroke lookupSeriesStroke(int series) {
    return lookupSeriesAttribute(
        this.stroke,
        getSeriesStroke(series),
        this.autoPopulateSeriesStroke,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextStroke() : null;
        },
        stroke -> setSeriesStroke(series, stroke, false),
        this.baseStroke
    );
}
```",Type-3
510-3-5,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlinePaint,1275,1294,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlineStroke,1667,1686,Type 2,"**Code Snippet 1: Method: lookupSeriesOutlinePaint (Lines: 1275-1294)**  
```java
public Paint lookupSeriesOutlinePaint(int series) {

    // return the override, if there is one...
    if (this.outlinePaint != null) {
        return this.outlinePaint;
    }

    // otherwise look up the paint table
    Paint seriesOutlinePaint = getSeriesOutlinePaint(series);
    if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesOutlinePaint = supplier.getNextOutlinePaint();
            setSeriesOutlinePaint(series, seriesOutlinePaint, false);
        }
    }
    if (seriesOutlinePaint == null) {
        seriesOutlinePaint = this.baseOutlinePaint;
    }
    return seriesOutlinePaint;

}
```

**Code Snippet 2: Method: lookupSeriesOutlineStroke (Lines: 1667-1686)**  
```java
public Stroke lookupSeriesOutlineStroke(int series) {

    // return the override, if there is one...
    if (this.outlineStroke != null) {
        return this.outlineStroke;
    }

    // otherwise look up the stroke table
    Stroke result = getSeriesOutlineStroke(series);
    if (result == null && this.autoPopulateSeriesOutlineStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextOutlineStroke();
            setSeriesOutlineStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseOutlineStroke;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(int series, T override, T base, boolean autoPopulate, 
                                    Supplier<T> getSeriesAttribute, Supplier<T> getNextAttribute, 
                                    BiConsumer<Integer, T> setSeriesAttribute) {

    // return the override, if there is one...
    if (override != null) {
        return override;
    }

    // otherwise look up the attribute table
    T result = getSeriesAttribute.get();
    if (result == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = getNextAttribute.get();
            setSeriesAttribute.accept(series, result);
        }
    }
    if (result == null) {
        result = base;
    }
    return result;
}
```

**2. Method Calls:**  

**For `lookupSeriesOutlinePaint`:**  
```java
public Paint lookupSeriesOutlinePaint(int series) {
    return lookupSeriesAttribute(
        series,
        this.outlinePaint,
        this.baseOutlinePaint,
        this.autoPopulateSeriesOutlinePaint,
        () -> getSeriesOutlinePaint(series),
        () -> getDrawingSupplier().getNextOutlinePaint(),
        (s, p) -> setSeriesOutlinePaint(s, p, false)
    );
}
```

**For `lookupSeriesOutlineStroke`:**  
```java
public Stroke lookupSeriesOutlineStroke(int series) {
    return lookupSeriesAttribute(
        series,
        this.outlineStroke,
        this.baseOutlineStroke,
        this.autoPopulateSeriesOutlineStroke,
        () -> getSeriesOutlineStroke(series),
        () -> getDrawingSupplier().getNextOutlineStroke(),
        (s, st) -> setSeriesOutlineStroke(s, st, false)
    );
}
```",Type-3
510-3-6,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlinePaint,1275,1294,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesShape,1865,1884,Type 2,"**Code Snippet 1: Method: lookupSeriesOutlinePaint (Lines: 1275-1294)**  
```java
public Paint lookupSeriesOutlinePaint(int series) {

    // return the override, if there is one...
    if (this.outlinePaint != null) {
        return this.outlinePaint;
    }

    // otherwise look up the paint table
    Paint seriesOutlinePaint = getSeriesOutlinePaint(series);
    if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            seriesOutlinePaint = supplier.getNextOutlinePaint();
            setSeriesOutlinePaint(series, seriesOutlinePaint, false);
        }
    }
    if (seriesOutlinePaint == null) {
        seriesOutlinePaint = this.baseOutlinePaint;
    }
    return seriesOutlinePaint;

}
```

**Code Snippet 2: Method: lookupSeriesShape (Lines: 1865-1884)**  
```java
public Shape lookupSeriesShape(int series) {

    // return the override, if there is one...
    if (this.shape != null) {
        return this.shape;
    }

    // otherwise look up the shape list
    Shape result = getSeriesShape(series);
    if (result == null && this.autoPopulateSeriesShape) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextShape();
            setSeriesShape(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseShape;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private <T> T lookupSeriesAttribute(T override, T seriesAttribute, boolean autoPopulate, Supplier<T> supplier, Consumer<T> setter, T baseAttribute) {
    if (override != null) {
        return override;
    }

    T result = seriesAttribute;
    if (result == null && autoPopulate) {
        T suppliedValue = supplier.get();
        if (suppliedValue != null) {
            setter.accept(suppliedValue);
            result = suppliedValue;
        }
    }
    if (result == null) {
        result = baseAttribute;
    }
    return result;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `lookupSeriesOutlinePaint`:**  
```java
public Paint lookupSeriesOutlinePaint(int series) {
    return lookupSeriesAttribute(
        this.outlinePaint,
        getSeriesOutlinePaint(series),
        this.autoPopulateSeriesOutlinePaint,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextOutlinePaint() : null;
        },
        paint -> setSeriesOutlinePaint(series, paint, false),
        this.baseOutlinePaint
    );
}
```

**For `lookupSeriesShape`:**  
```java
public Shape lookupSeriesShape(int series) {
    return lookupSeriesAttribute(
        this.shape,
        getSeriesShape(series),
        this.autoPopulateSeriesShape,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextShape() : null;
        },
        shape -> setSeriesShape(series, shape, false),
        this.baseShape
    );
}
```",Type-3
510-4-5,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesStroke,1472,1491,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlineStroke,1667,1686,Type 2,"**Code Snippet 1: Method: lookupSeriesStroke (Lines: 1472-1491)**  
```java
public Stroke lookupSeriesStroke(int series) {

    // return the override, if there is one...
    if (this.stroke != null) {
        return this.stroke;
    }

    // otherwise look up the paint table
    Stroke result = getSeriesStroke(series);
    if (result == null && this.autoPopulateSeriesStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextStroke();
            setSeriesStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseStroke;
    }
    return result;

}
```

**Code Snippet 2: Method: lookupSeriesOutlineStroke (Lines: 1667-1686)**  
```java
public Stroke lookupSeriesOutlineStroke(int series) {

    // return the override, if there is one...
    if (this.outlineStroke != null) {
        return this.outlineStroke;
    }

    // otherwise look up the stroke table
    Stroke result = getSeriesOutlineStroke(series);
    if (result == null && this.autoPopulateSeriesOutlineStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextOutlineStroke();
            setSeriesOutlineStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseOutlineStroke;
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Stroke lookupSeriesStrokeCommon(Stroke overrideStroke, StrokeList strokeList, boolean autoPopulate, Stroke baseStroke, int series, DrawingSupplier supplier, StrokeSetter strokeSetter) {
    // return the override, if there is one...
    if (overrideStroke != null) {
        return overrideStroke;
    }

    // otherwise look up the stroke table
    Stroke result = strokeList.getStroke(series);
    if (result == null && autoPopulate) {
        if (supplier != null) {
            result = supplier.getNextStroke();
            strokeSetter.setStroke(series, result, false);
        }
    }
    if (result == null) {
        result = baseStroke;
    }
    return result;
}

@FunctionalInterface
private interface StrokeSetter {
    void setStroke(int series, Stroke stroke, boolean notify);
}
```

**2. Method Calls:**  

**For `lookupSeriesStroke`:**  
```java
public Stroke lookupSeriesStroke(int series) {
    return lookupSeriesStrokeCommon(
        this.stroke,
        this.strokeList,
        this.autoPopulateSeriesStroke,
        this.baseStroke,
        series,
        getDrawingSupplier(),
        this::setSeriesStroke
    );
}
```

**For `lookupSeriesOutlineStroke`:**  
```java
public Stroke lookupSeriesOutlineStroke(int series) {
    return lookupSeriesStrokeCommon(
        this.outlineStroke,
        this.outlineStrokeList,
        this.autoPopulateSeriesOutlineStroke,
        this.baseOutlineStroke,
        series,
        getDrawingSupplier(),
        this::setSeriesOutlineStroke
    );
}
```",Type-3
510-4-6,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesStroke,1472,1491,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesShape,1865,1884,Type 2,"```java
// Code snippet 1 - Method: lookupSeriesStroke
public Stroke lookupSeriesStroke(int series) {

    // return the override, if there is one...
    if (this.stroke != null) {
        return this.stroke;
    }

    // otherwise look up the paint table
    Stroke result = getSeriesStroke(series);
    if (result == null && this.autoPopulateSeriesStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextStroke();
            setSeriesStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseStroke;
    }
    return result;

}
```

```java
// Code snippet 2 - Method: lookupSeriesShape
public Shape lookupSeriesShape(int series) {

    // return the override, if there is one...
    if (this.shape != null) {
        return this.shape;
    }

    // otherwise look up the shape list
    Shape result = getSeriesShape(series);
    if (result == null && this.autoPopulateSeriesShape) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextShape();
            setSeriesShape(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseShape;
    }
    return result;

}
```

Clone Type: **Type-1**","```java
// 1. The extracted method
private <T> T lookupSeriesAttribute(int series, T override, T base, boolean autoPopulate, Supplier<T> getSeriesAttribute, Supplier<T> getNextAttribute, BiConsumer<Integer, T> setSeriesAttribute) {
    if (override != null) {
        return override;
    }

    T result = getSeriesAttribute.get();
    if (result == null && autoPopulate) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = getNextAttribute.get();
            setSeriesAttribute.accept(series, result);
        }
    }
    if (result == null) {
        result = base;
    }
    return result;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Refactored lookupSeriesStroke
public Stroke lookupSeriesStroke(int series) {
    return lookupSeriesAttribute(
        series,
        this.stroke,
        this.baseStroke,
        this.autoPopulateSeriesStroke,
        () -> getSeriesStroke(series),
        () -> getDrawingSupplier().getNextStroke(),
        (s, attr) -> setSeriesStroke(s, attr, false)
    );
}

// Refactored lookupSeriesShape
public Shape lookupSeriesShape(int series) {
    return lookupSeriesAttribute(
        series,
        this.shape,
        this.baseShape,
        this.autoPopulateSeriesShape,
        () -> getSeriesShape(series),
        () -> getDrawingSupplier().getNextShape(),
        (s, attr) -> setSeriesShape(s, attr, false)
    );
}
```",Type-1
510-5-6,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesOutlineStroke,1667,1686,src,org.jfree.chart.renderer,AbstractRenderer,lookupSeriesShape,1865,1884,Type 2,"```java
// Code snippet 1 - Method: lookupSeriesOutlineStroke
public Stroke lookupSeriesOutlineStroke(int series) {

    // return the override, if there is one...
    if (this.outlineStroke != null) {
        return this.outlineStroke;
    }

    // otherwise look up the stroke table
    Stroke result = getSeriesOutlineStroke(series);
    if (result == null && this.autoPopulateSeriesOutlineStroke) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextOutlineStroke();
            setSeriesOutlineStroke(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseOutlineStroke;
    }
    return result;

}
```

```java
// Code snippet 2 - Method: lookupSeriesShape
public Shape lookupSeriesShape(int series) {

    // return the override, if there is one...
    if (this.shape != null) {
        return this.shape;
    }

    // otherwise look up the shape list
    Shape result = getSeriesShape(series);
    if (result == null && this.autoPopulateSeriesShape) {
        DrawingSupplier supplier = getDrawingSupplier();
        if (supplier != null) {
            result = supplier.getNextShape();
            setSeriesShape(series, result, false);
        }
    }
    if (result == null) {
        result = this.baseShape;
    }
    return result;

}
```

Clone Type: **Type-1**","```java
// 1. The extracted method
private <T> T lookupSeriesAttribute(T override, T seriesAttribute, boolean autoPopulate, Supplier<T> supplier, Consumer<T> setter, T baseAttribute) {
    if (override != null) {
        return override;
    }

    T result = seriesAttribute;
    if (result == null && autoPopulate) {
        T suppliedValue = supplier.get();
        if (suppliedValue != null) {
            setter.accept(suppliedValue);
            result = suppliedValue;
        }
    }
    if (result == null) {
        result = baseAttribute;
    }
    return result;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Refactored lookupSeriesOutlineStroke
public Stroke lookupSeriesOutlineStroke(int series) {
    return lookupSeriesAttribute(
        this.outlineStroke,
        getSeriesOutlineStroke(series),
        this.autoPopulateSeriesOutlineStroke,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextOutlineStroke() : null;
        },
        (result) -> setSeriesOutlineStroke(series, result, false),
        this.baseOutlineStroke
    );
}

// Refactored lookupSeriesShape
public Shape lookupSeriesShape(int series) {
    return lookupSeriesAttribute(
        this.shape,
        getSeriesShape(series),
        this.autoPopulateSeriesShape,
        () -> {
            DrawingSupplier supplier = getDrawingSupplier();
            return (supplier != null) ? supplier.getNextShape() : null;
        },
        (result) -> setSeriesShape(series, result, false),
        this.baseShape
    );
}
```",Type-1
511-1-2,src,org.jfree.chart.plot,CategoryPlot,clearDomainMarkers,2000,2019,src,org.jfree.chart.plot,CategoryPlot,clearRangeMarkers,2271,2290,Type 2,"**Code Snippet 1 - Method: clearDomainMarkers (Lines: 2000-2019)**  
```java
public void clearDomainMarkers() {
    if (this.backgroundDomainMarkers != null) {
        Set keys = this.backgroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.backgroundDomainMarkers.clear();
    }
    if (this.foregroundDomainMarkers != null) {
        Set keys = this.foregroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.foregroundDomainMarkers.clear();
    }
    fireChangeEvent();
}
```

**Code Snippet 2 - Method: clearRangeMarkers (Lines: 2271-2290)**  
```java
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

**Clone Type:**  
These two code snippets are **Type-1 Clones** because they are identical except for the variable names (`Domain` vs. `Range`).","**1. Extracted Method:**  
```java
private void clearMarkers(Map<Integer, Collection> markerMap) {
    if (markerMap != null) {
        Set keys = markerMap.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearMarkersForKey(key.intValue(), markerMap);
        }
        markerMap.clear();
    }
}
```

**2. Method Calls Replacing Clones:**  

**For `clearDomainMarkers`:**  
```java
public void clearDomainMarkers() {
    clearMarkers(this.backgroundDomainMarkers);
    clearMarkers(this.foregroundDomainMarkers);
    fireChangeEvent();
}
```

**For `clearRangeMarkers`:**  
```java
public void clearRangeMarkers() {
    clearMarkers(this.backgroundRangeMarkers);
    clearMarkers(this.foregroundRangeMarkers);
    fireChangeEvent();
}
```",Type-1
511-3-4,src,org.jfree.chart.plot,XYPlot,clearDomainMarkers,2095,2114,src,org.jfree.chart.plot,XYPlot,clearRangeMarkers,2341,2360,Type 2,"```java
// Code snippet 1 - Method: clearDomainMarkers
public void clearDomainMarkers() {
    if (this.backgroundDomainMarkers != null) {
        Set keys = this.backgroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.backgroundDomainMarkers.clear();
    }
    if (this.foregroundDomainMarkers != null) {
        Set keys = this.foregroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.foregroundDomainMarkers.clear();
    }
    fireChangeEvent();
}
```

```java
// Code snippet 2 - Method: clearRangeMarkers
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

**Clone Type:** Type-1 Clone (Identical except for variable names).","```java
// 1. The extracted method
private void clearMarkers(Map<Integer, Collection> markers) {
    if (markers != null) {
        Set keys = markers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearMarkersByKey(key.intValue(), markers);
        }
        markers.clear();
    }
}

// Helper method to clear markers by key
private void clearMarkersByKey(int key, Map<Integer, Collection> markers) {
    Collection markerCollection = markers.get(key);
    if (markerCollection != null) {
        Iterator iterator = markerCollection.iterator();
        while (iterator.hasNext()) {
            Marker m = (Marker) iterator.next();
            m.removeChangeListener(this);
        }
        markerCollection.clear();
    }
}

// 2. The method calls that should replace the clones in the original files

// Refactored clearDomainMarkers
public void clearDomainMarkers() {
    clearMarkers(this.backgroundDomainMarkers);
    clearMarkers(this.foregroundDomainMarkers);
    fireChangeEvent();
}

// Refactored clearRangeMarkers
public void clearRangeMarkers() {
    clearMarkers(this.backgroundRangeMarkers);
    clearMarkers(this.foregroundRangeMarkers);
    fireChangeEvent();
}
```",Type-1
512-2-3,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4487,4506,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4564,4583,Type 2,"**Code Snippet 1: Method: zoomDomainAxes (Lines: 4487-4506)**

```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source, boolean useAnchor) {

    // perform the zoom on each domain axis
    for (int i = 0; i < this.domainAxes.size(); i++) {
        ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i);
        if (domainAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceX = source.getX();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceX = source.getY();
                }
                double anchorX = domainAxis.java2DToValue(sourceX,
                        info.getDataArea(), getDomainAxisEdge());
                domainAxis.resizeRange(factor, anchorX);
            }
            else {
                domainAxis.resizeRange(factor);
            }
        }
    }
}
```

**Code Snippet 2: Method: zoomRangeAxes (Lines: 4564-4583)**

```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**

```java
private void zoomAxes(List<ValueAxis> axes, double factor, PlotRenderingInfo info,
                      Point2D source, boolean useAnchor, boolean isHorizontal) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = axes.get(i);
        if (axis != null) {
            if (useAnchor) {
                double sourceCoord = isHorizontal ? source.getY() : source.getX();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceCoord = isHorizontal ? source.getX() : source.getY();
                }
                double anchor = axis.java2DToValue(sourceCoord,
                        info.getDataArea(), isHorizontal ? getRangeAxisEdge() : getDomainAxisEdge());
                axis.resizeRange(factor, anchor);
            } else {
                axis.resizeRange(factor);
            }
        }
    }
}
```

**2. Method Calls Replacing the Clones:**

**For `zoomDomainAxes`:**
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source, boolean useAnchor) {
    zoomAxes(this.domainAxes, factor, info, source, useAnchor, false);
}
```

**For `zoomRangeAxes`:**
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    zoomAxes(this.rangeAxes, factor, info, source, useAnchor, true);
}
```",Type-3
525-1-2,src,org.jfree.chart.plot,XYPlot,getDatasetsMappedToDomainAxis,3882,3901,src,org.jfree.chart.plot,XYPlot,getDatasetsMappedToRangeAxis,3912,3931,Type 2,"```java
// Code snippet 1 - Method: getDatasetsMappedToDomainAxis
private List getDatasetsMappedToDomainAxis(Integer axisIndex) {
    if (axisIndex == null) {
        throw new IllegalArgumentException(""Null 'axisIndex' argument."");
    }
    List result = new ArrayList();
    for (int i = 0; i < this.datasets.size(); i++) {
        Integer mappedAxis = (Integer) this.datasetToDomainAxisMap.get(
                new Integer(i));
        if (mappedAxis == null) {
            if (axisIndex.equals(ZERO)) {
                result.add(this.datasets.get(i));
            }
        }
        else {
            if (mappedAxis.equals(axisIndex)) {
                result.add(this.datasets.get(i));
            }
        }
    }
    return result;
}
```

```java
// Code snippet 2 - Method: getDatasetsMappedToRangeAxis
private List getDatasetsMappedToRangeAxis(Integer axisIndex) {
    if (axisIndex == null) {
        throw new IllegalArgumentException(""Null 'axisIndex' argument."");
    }
    List result = new ArrayList();
    for (int i = 0; i < this.datasets.size(); i++) {
        Integer mappedAxis = (Integer) this.datasetToRangeAxisMap.get(
                new Integer(i));
        if (mappedAxis == null) {
            if (axisIndex.equals(ZERO)) {
                result.add(this.datasets.get(i));
            }
        }
        else {
            if (mappedAxis.equals(axisIndex)) {
                result.add(this.datasets.get(i));
            }
        }
    }
    return result;
}
```

Clone Type: **Type-2**","```java
// 1. The extracted method
private List getDatasetsMappedToAxis(Integer axisIndex, Map datasetToAxisMap) {
    if (axisIndex == null) {
        throw new IllegalArgumentException(""Null 'axisIndex' argument."");
    }
    List result = new ArrayList();
    for (int i = 0; i < this.datasets.size(); i++) {
        Integer mappedAxis = (Integer) datasetToAxisMap.get(new Integer(i));
        if (mappedAxis == null) {
            if (axisIndex.equals(ZERO)) {
                result.add(this.datasets.get(i));
            }
        }
        else {
            if (mappedAxis.equals(axisIndex)) {
                result.add(this.datasets.get(i));
            }
        }
    }
    return result;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// For getDatasetsMappedToDomainAxis
private List getDatasetsMappedToDomainAxis(Integer axisIndex) {
    return getDatasetsMappedToAxis(axisIndex, this.datasetToDomainAxisMap);
}

// For getDatasetsMappedToRangeAxis
private List getDatasetsMappedToRangeAxis(Integer axisIndex) {
    return getDatasetsMappedToAxis(axisIndex, this.datasetToRangeAxisMap);
}
```",Type-2
526-1-2,src,org.jfree.chart.servlet,ServletUtilities,saveChartAsPNG,174,191,src,org.jfree.chart.servlet,ServletUtilities,saveChartAsJPEG,247,266,Type 2,"**Code Snippet 1 - Method: saveChartAsPNG (Lines: 174-191)**  
```java
public static String saveChartAsPNG(JFreeChart chart, int width, int height,
        HttpSession session) throws IOException {
    
    return ServletUtilities.saveChartAsPNG(chart, width, height, null, 
            session);
    
}
```

**Code Snippet 2 - Method: saveChartAsJPEG (Lines: 247-266)**  
```java
public static String saveChartAsJPEG(JFreeChart chart, int width, 
                                     int height, HttpSession session) 
        throws IOException {

    return ServletUtilities.saveChartAsJPEG(chart, width, height, null, 
            session);
    
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private static String saveChart(String format, JFreeChart chart, int width, int height, HttpSession session) throws IOException {
    if (""PNG"".equalsIgnoreCase(format)) {
        return ServletUtilities.saveChartAsPNG(chart, width, height, null, session);
    } else if (""JPEG"".equalsIgnoreCase(format)) {
        return ServletUtilities.saveChartAsJPEG(chart, width, height, null, session);
    } else {
        throw new IllegalArgumentException(""Unsupported format: "" + format);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `saveChartAsPNG`:**  
```java
public static String saveChartAsPNG(JFreeChart chart, int width, int height, HttpSession session) throws IOException {
    return saveChart(""PNG"", chart, width, height, session);
}
```

**For `saveChartAsJPEG`:**  
```java
public static String saveChartAsJPEG(JFreeChart chart, int width, int height, HttpSession session) throws IOException {
    return saveChart(""JPEG"", chart, width, height, session);
}
```",Type-2
570-1-2,src,org.jfree.data.xml,DatasetReader,readPieDatasetFromXML,85,102,src,org.jfree.data.xml,DatasetReader,readCategoryDatasetFromXML,130,148,Type 2,"**Code Snippet 1: Method: readPieDatasetFromXML (Lines: 85-102)**  
```java
public static PieDataset readPieDatasetFromXML(InputStream in) 
    throws IOException {

    PieDataset result = null;
    SAXParserFactory factory = SAXParserFactory.newInstance();
    try {
        SAXParser parser = factory.newSAXParser();
        PieDatasetHandler handler = new PieDatasetHandler();
        parser.parse(in, handler);
        result = handler.getDataset();
    }
    catch (SAXException e) {
        System.out.println(e.getMessage());
    }
    catch (ParserConfigurationException e2) {
        System.out.println(e2.getMessage());
    }
    return result;

}
```

**Code Snippet 2: Method: readCategoryDatasetFromXML (Lines: 130-148)**  
```java
public static CategoryDataset readCategoryDatasetFromXML(InputStream in) 
    throws IOException {

    CategoryDataset result = null;

    SAXParserFactory factory = SAXParserFactory.newInstance();
    try {
        SAXParser parser = factory.newSAXParser();
        CategoryDatasetHandler handler = new CategoryDatasetHandler();
        parser.parse(in, handler);
        result = handler.getDataset();
    }
    catch (SAXException e) {
        System.out.println(e.getMessage());
    }
    catch (ParserConfigurationException e2) {
        System.out.println(e2.getMessage());
    }
    return result;

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and types)","**1. Extracted Method:**  
```java
private static <T> T readDatasetFromXML(InputStream in, DatasetHandler<T> handler) 
    throws IOException {

    T result = null;
    SAXParserFactory factory = SAXParserFactory.newInstance();
    try {
        SAXParser parser = factory.newSAXParser();
        parser.parse(in, handler);
        result = handler.getDataset();
    }
    catch (SAXException e) {
        System.out.println(e.getMessage());
    }
    catch (ParserConfigurationException e2) {
        System.out.println(e2.getMessage());
    }
    return result;

}
```

**2. Method Calls Replacing the Clones:**  

**For `readPieDatasetFromXML`:**  
```java
public static PieDataset readPieDatasetFromXML(InputStream in) 
    throws IOException {
    return readDatasetFromXML(in, new PieDatasetHandler());
}
```

**For `readCategoryDatasetFromXML`:**  
```java
public static CategoryDataset readCategoryDatasetFromXML(InputStream in) 
    throws IOException {
    return readDatasetFromXML(in, new CategoryDatasetHandler());
}
```",Type-2
589-1-2,src,org.jfree.chart.plot,XYPlot,drawDomainMarkers,3578,3596,src,org.jfree.chart.plot,XYPlot,drawRangeMarkers,3611,3629,Type 2,"```java
// Code snippet 1 - Method: drawDomainMarkers
protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea,
                                 int index, Layer layer) {

    XYItemRenderer r = getRenderer(index);
    if (r == null) {
        return;
    }
    // check that the renderer has a corresponding dataset (it doesn't
    // matter if the dataset is null)
    if (index >= getDatasetCount()) {
        return;
    }
    Collection markers = getDomainMarkers(index, layer);
    ValueAxis axis = getDomainAxisForDataset(index);
    if (markers != null && axis != null) {
        Iterator iterator = markers.iterator();
        while (iterator.hasNext()) {
            Marker marker = (Marker) iterator.next();
            r.drawDomainMarker(g2, this, axis, marker, dataArea);
        }
    }

}
```

```java
// Code snippet 2 - Method: drawRangeMarkers
protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea,
                                int index, Layer layer) {

    XYItemRenderer r = getRenderer(index);
    if (r == null) {
        return;
    }
    // check that the renderer has a corresponding dataset (it doesn't
    // matter if the dataset is null)
    if (index >= getDatasetCount()) {
        return;
    }
    Collection markers = getRangeMarkers(index, layer);
    ValueAxis axis = getRangeAxisForDataset(index);
    if (markers != null && axis != null) {
        Iterator iterator = markers.iterator();
        while (iterator.hasNext()) {
            Marker marker = (Marker) iterator.next();
            r.drawRangeMarker(g2, this, axis, marker, dataArea);
        }
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. The extracted method
private void drawMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer, 
                         Collection markers, ValueAxis axis, BiConsumer<XYItemRenderer, Marker> drawMarkerFunction) {
    XYItemRenderer r = getRenderer(index);
    if (r == null) {
        return;
    }
    // check that the renderer has a corresponding dataset (it doesn't
    // matter if the dataset is null)
    if (index >= getDatasetCount()) {
        return;
    }
    if (markers != null && axis != null) {
        Iterator iterator = markers.iterator();
        while (iterator.hasNext()) {
            Marker marker = (Marker) iterator.next();
            drawMarkerFunction.accept(r, marker);
        }
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing drawDomainMarkers
protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) {
    Collection markers = getDomainMarkers(index, layer);
    ValueAxis axis = getDomainAxisForDataset(index);
    drawMarkers(g2, dataArea, index, layer, markers, axis, 
        (renderer, marker) -> renderer.drawDomainMarker(g2, this, axis, marker, dataArea));
}

// Replacing drawRangeMarkers
protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) {
    Collection markers = getRangeMarkers(index, layer);
    ValueAxis axis = getRangeAxisForDataset(index);
    drawMarkers(g2, dataArea, index, layer, markers, axis, 
        (renderer, marker) -> renderer.drawRangeMarker(g2, this, axis, marker, dataArea));
}
```",Type-3
619-1-2,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,getValue,200,217,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,getValue,228,245,Type 2,"**Code Snippet 1: Method: getValue (Lines: 200-217)**  
```java
public Number getValue(Comparable row, Comparable column) {
    List l = (List) this.data.getObject(row, column);
    double average = 0.0d;
    int count = 0;
    if (l != null && l.size() > 0) {
        for (int i = 0; i < l.size(); i++) {
            Number n = (Number) l.get(i);
            average += n.doubleValue();
            count += 1;
        }
        if (count > 0) {
            average = average / count;
        }
    }
    if (count == 0) {
        return null;
    }
    return new Double(average);
}
```

**Code Snippet 2: Method: getValue (Lines: 228-245)**  
```java
public Number getValue(int row, int column) {
    List l = (List) this.data.getObject(row, column);
    double average = 0.0d;
    int count = 0;
    if (l != null && l.size() > 0) {
        for (int i = 0; i < l.size(); i++) {
            Number n = (Number) l.get(i);
            average += n.doubleValue();
            count += 1;
        }
        if (count > 0) {
            average = average / count;
        }
    }
    if (count == 0) {
        return null;
    }
    return new Double(average);
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, layout).","**1. Extracted Method:**  
```java
private Number calculateAverage(List l) {
    double average = 0.0d;
    int count = 0;
    if (l != null && l.size() > 0) {
        for (int i = 0; i < l.size(); i++) {
            Number n = (Number) l.get(i);
            average += n.doubleValue();
            count += 1;
        }
        if (count > 0) {
            average = average / count;
        }
    }
    if (count == 0) {
        return null;
    }
    return new Double(average);
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 200-217):**  
```java
public Number getValue(Comparable row, Comparable column) {
    List l = (List) this.data.getObject(row, column);
    return calculateAverage(l);
}
```

**For Code Snippet 2 (Lines: 228-245):**  
```java
public Number getValue(int row, int column) {
    List l = (List) this.data.getObject(row, column);
    return calculateAverage(l);
}
```",Type-1
626-1-2,src,org.jfree.chart,ChartUtilities,saveChartAsPNG,330,347,src,org.jfree.chart,ChartUtilities,saveChartAsJPEG,532,549,Type 2,"**Code Snippet 1: saveChartAsPNG (Lines 330-347)**  
```java
public static void saveChartAsPNG(File file, JFreeChart chart,
        int width, int height, ChartRenderingInfo info) 
    throws IOException {

    if (file == null) {
        throw new IllegalArgumentException(""Null 'file' argument."");
    }
    OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
    try {
        ChartUtilities.writeChartAsPNG(out, chart, width, height, info);
    }
    finally {
        out.close();
    }
}
```

**Code Snippet 2: saveChartAsJPEG (Lines 532-549)**  
```java
public static void saveChartAsJPEG(File file, JFreeChart chart,
        int width, int height, ChartRenderingInfo info) throws IOException {

    if (file == null) {
        throw new IllegalArgumentException(""Null 'file' argument."");
    }
    if (chart == null) {
        throw new IllegalArgumentException(""Null 'chart' argument."");
    }
    OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
    try {
        writeChartAsJPEG(out, chart, width, height, info);
    }
    finally {
        out.close();
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private static void saveChart(File file, JFreeChart chart, int width, int height, 
        ChartRenderingInfo info, ChartWriter writer) throws IOException {

    if (file == null) {
        throw new IllegalArgumentException(""Null 'file' argument."");
    }
    if (chart == null) {
        throw new IllegalArgumentException(""Null 'chart' argument."");
    }
    OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
    try {
        writer.write(out, chart, width, height, info);
    } finally {
        out.close();
    }
}

@FunctionalInterface
private interface ChartWriter {
    void write(OutputStream out, JFreeChart chart, int width, int height, 
               ChartRenderingInfo info) throws IOException;
}
```

**2. Method Calls Replacing Clones:**  

**For `saveChartAsPNG`:**  
```java
public static void saveChartAsPNG(File file, JFreeChart chart, int width, 
        int height, ChartRenderingInfo info) throws IOException {
    saveChart(file, chart, width, height, info, 
        (out, c, w, h, i) -> ChartUtilities.writeChartAsPNG(out, c, w, h, i));
}
```

**For `saveChartAsJPEG`:**  
```java
public static void saveChartAsJPEG(File file, JFreeChart chart, int width, 
        int height, ChartRenderingInfo info) throws IOException {
    saveChart(file, chart, width, height, info, 
        (out, c, w, h, i) -> writeChartAsJPEG(out, c, w, h, i));
}
```",Type-3
627-1-2,src,org.jfree.chart.renderer.category,AbstractCategoryItemRenderer,calculateDomainMarkerTextAnchorPoint,1077,1094,src,org.jfree.chart.renderer.category,AbstractCategoryItemRenderer,calculateRangeMarkerTextAnchorPoint,1111,1128,Type 2,"**Code Snippet 1: calculateDomainMarkerTextAnchorPoint (Lines 1077-1094)**  
```java
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetType,
                                      RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                LengthAdjustmentType.CONTRACT, labelOffsetType);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                labelOffsetType, LengthAdjustmentType.CONTRACT);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);

}
```

**Code Snippet 2: calculateRangeMarkerTextAnchorPoint (Lines 1111-1128)**  
```java
protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetType,
                                      RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                labelOffsetType, LengthAdjustmentType.CONTRACT);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                LengthAdjustmentType.CONTRACT, labelOffsetType);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Point2D calculateMarkerTextAnchorPoint(Graphics2D g2,
                                               PlotOrientation orientation,
                                               Rectangle2D markerArea,
                                               RectangleInsets markerOffset,
                                               LengthAdjustmentType primaryAdjustment,
                                               LengthAdjustmentType secondaryAdjustment,
                                               RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                primaryAdjustment, secondaryAdjustment);
    } else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                secondaryAdjustment, primaryAdjustment);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);
}
```

**2. Method Calls Replacing the Clones:**  

**For `calculateDomainMarkerTextAnchorPoint`:**  
```java
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetType,
                                      RectangleAnchor anchor) {
    return calculateMarkerTextAnchorPoint(g2, orientation, markerArea, markerOffset,
            LengthAdjustmentType.CONTRACT, labelOffsetType, anchor);
}
```

**For `calculateRangeMarkerTextAnchorPoint`:**  
```java
protected Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetType,
                                      RectangleAnchor anchor) {
    return calculateMarkerTextAnchorPoint(g2, orientation, markerArea, markerOffset,
            labelOffsetType, LengthAdjustmentType.CONTRACT, anchor);
}
```",Type-3
627-3-4,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,calculateDomainMarkerTextAnchorPoint,1186,1203,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,calculateRangeMarkerTextAnchorPoint,1383,1400,Type 2,"Code snippet 1- Method: calculateDomainMarkerTextAnchorPoint  
```java
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
        PlotOrientation orientation,
        Rectangle2D dataArea,
        Rectangle2D markerArea,
        RectangleInsets markerOffset,
        LengthAdjustmentType labelOffsetType,
        RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                LengthAdjustmentType.CONTRACT, labelOffsetType);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                labelOffsetType, LengthAdjustmentType.CONTRACT);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);

}
```

Code snippet 2- Method: calculateRangeMarkerTextAnchorPoint  
```java
private Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetForRange,
                                      RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                labelOffsetForRange, LengthAdjustmentType.CONTRACT);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                LengthAdjustmentType.CONTRACT, labelOffsetForRange);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);

}
```

Clone type: **Type-2**","1. Extracted Method:
```java
private Point2D calculateMarkerTextAnchorPoint(Graphics2D g2,
        PlotOrientation orientation,
        Rectangle2D markerArea,
        RectangleInsets markerOffset,
        LengthAdjustmentType primaryAdjustment,
        LengthAdjustmentType secondaryAdjustment,
        RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                primaryAdjustment, secondaryAdjustment);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                secondaryAdjustment, primaryAdjustment);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);
}
```

2. Method Calls:

For `calculateDomainMarkerTextAnchorPoint`:
```java
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
        PlotOrientation orientation,
        Rectangle2D dataArea,
        Rectangle2D markerArea,
        RectangleInsets markerOffset,
        LengthAdjustmentType labelOffsetType,
        RectangleAnchor anchor) {

    return calculateMarkerTextAnchorPoint(g2, orientation, markerArea,
            markerOffset, LengthAdjustmentType.CONTRACT, labelOffsetType, anchor);
}
```

For `calculateRangeMarkerTextAnchorPoint`:
```java
private Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,
        PlotOrientation orientation,
        Rectangle2D dataArea,
        Rectangle2D markerArea,
        RectangleInsets markerOffset,
        LengthAdjustmentType labelOffsetForRange,
        RectangleAnchor anchor) {

    return calculateMarkerTextAnchorPoint(g2, orientation, markerArea,
            markerOffset, labelOffsetForRange, LengthAdjustmentType.CONTRACT, anchor);
}
```",Type-2
644-1-2,src,org.jfree.chart.plot,XYPlot,drawDomainCrosshair,3758,3774,src,org.jfree.chart.plot,XYPlot,drawRangeCrosshair,3824,3840,Type 2,"```java
// Code snippet 1 - Method: drawDomainCrosshair
protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if (orientation == PlotOrientation.VERTICAL) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

}
```

```java
// Code snippet 2 - Method: drawRangeCrosshair
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if (orientation == PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. The extracted method
private void drawCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint, boolean isDomain) {

    if (axis.getRange().contains(value)) {
        Line2D line = null;
        if ((isDomain && orientation == PlotOrientation.VERTICAL) || 
            (!isDomain && orientation == PlotOrientation.HORIZONTAL)) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing Code snippet 1 - Method: drawDomainCrosshair
protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {
    drawCrosshair(g2, dataArea, orientation, value, axis, stroke, paint, true);
}

// Replacing Code snippet 2 - Method: drawRangeCrosshair
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {
    drawCrosshair(g2, dataArea, orientation, value, axis, stroke, paint, false);
}
```",Type-3
645-1-2,src,org.jfree.chart.plot,ContourPlot,drawDomainMarker,1600,1616,src,org.jfree.chart.plot,ContourPlot,drawRangeMarker,1636,1652,Type 2,"**Code Snippet 1: drawDomainMarker (Lines 1600-1616)**  
```java
public void drawDomainMarker(Graphics2D g2,
                             ContourPlot plot,
                             ValueAxis domainAxis,
                             Marker marker,
                             Rectangle2D dataArea) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = domainAxis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double x = domainAxis.valueToJava2D(value, dataArea, 
                RectangleEdge.BOTTOM);
        Line2D line = new Line2D.Double(x, dataArea.getMinY(), x, 
                dataArea.getMaxY());
        Paint paint = marker.getOutlinePaint();
        Stroke stroke = marker.getOutlineStroke();
        g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }

}
```

**Code Snippet 2: drawRangeMarker (Lines 1636-1652)**  
```java
public void drawRangeMarker(Graphics2D g2,
                            ContourPlot plot,
                            ValueAxis rangeAxis,
                            Marker marker,
                            Rectangle2D dataArea) {

    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = rangeAxis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double y = rangeAxis.valueToJava2D(value, dataArea, 
                RectangleEdge.LEFT);
        Line2D line = new Line2D.Double(dataArea.getMinX(), y, 
                dataArea.getMaxX(), y);
        Paint paint = marker.getOutlinePaint();
        Stroke stroke = marker.getOutlineStroke();
        g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawMarker(Graphics2D g2, ValueAxis axis, Marker marker, Rectangle2D dataArea, boolean isDomain) {
    if (marker instanceof ValueMarker) {
        ValueMarker vm = (ValueMarker) marker;
        double value = vm.getValue();
        Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }

        double coord = axis.valueToJava2D(value, dataArea, 
                isDomain ? RectangleEdge.BOTTOM : RectangleEdge.LEFT);
        Line2D line = isDomain 
                ? new Line2D.Double(coord, dataArea.getMinY(), coord, dataArea.getMaxY())
                : new Line2D.Double(dataArea.getMinX(), coord, dataArea.getMaxX(), coord);
        Paint paint = marker.getOutlinePaint();
        Stroke stroke = marker.getOutlineStroke();
        g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);
        g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);
        g2.draw(line);
    }
}
```

**2. Method Calls:**  

**For `drawDomainMarker`:**  
```java
public void drawDomainMarker(Graphics2D g2,
                             ContourPlot plot,
                             ValueAxis domainAxis,
                             Marker marker,
                             Rectangle2D dataArea) {
    drawMarker(g2, domainAxis, marker, dataArea, true);
}
```

**For `drawRangeMarker`:**  
```java
public void drawRangeMarker(Graphics2D g2,
                            ContourPlot plot,
                            ValueAxis rangeAxis,
                            Marker marker,
                            Rectangle2D dataArea) {
    drawMarker(g2, rangeAxis, marker, dataArea, false);
}
```",Type-3
647-1-2,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getStartValue,428,444,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getEndValue,480,493,Type 2,"**Code Snippet 1 - Method: getStartValue (Lines: 428-444)**  
```java
public Number getStartValue(int series, int category) {

    // check arguments...
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""series index out of range."");
    }

    if ((category < 0) || (category >= getCategoryCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""category index out of range."");
    }

    // fetch the value...
    return this.startData[series][category];

}
```

**Code Snippet 2 - Method: getEndValue (Lines: 480-493)**  
```java
public Number getEndValue(int series, int category) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""series index out of range."");
    }

    if ((category < 0) || (category >= getCategoryCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""category index out of range."");
    }

    return this.endData[series][category];
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getValueFromData(Number[][] data, int series, int category) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""series index out of range."");
    }

    if ((category < 0) || (category >= getCategoryCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""category index out of range."");
    }

    return data[series][category];
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartValue`:**  
```java
public Number getStartValue(int series, int category) {
    return getValueFromData(this.startData, series, category);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(int series, int category) {
    return getValueFromData(this.endData, series, category);
}
```",Type-2
650-1-2,src,org.jfree.chart.plot,XYPlot,getDomainAxisForDataset,3392,3408,src,org.jfree.chart.plot,XYPlot,getRangeAxisForDataset,3419,3435,Type 2,"```java
// Code snippet 1 - Method: getDomainAxisForDataset
public ValueAxis getDomainAxisForDataset(int index) {

    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index
                + "" out of bounds."");
    }

    ValueAxis valueAxis = null;
    Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(
            new Integer(index));
    if (axisIndex != null) {
        valueAxis = getDomainAxis(axisIndex.intValue());
    }
    else {
        valueAxis = getDomainAxis(0);
    }
    return valueAxis;

}
```

```java
// Code snippet 2 - Method: getRangeAxisForDataset
public ValueAxis getRangeAxisForDataset(int index) {

    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index
                + "" out of bounds."");
    }

    ValueAxis valueAxis = null;
    Integer axisIndex
        = (Integer) this.datasetToRangeAxisMap.get(new Integer(index));
    if (axisIndex != null) {
        valueAxis = getRangeAxis(axisIndex.intValue());
    }
    else {
        valueAxis = getRangeAxis(0);
    }
    return valueAxis;

}
```

Clone Type: **Type-3 (Mostly similar but with some different statements)**","```java
// 1. The extracted method
private ValueAxis getAxisForDataset(int index, Map datasetToAxisMap, ValueAxis defaultAxis, Function<Integer, ValueAxis> axisRetriever) {

    if (index < 0 || index >= getDatasetCount()) {
        throw new IllegalArgumentException(""Index "" + index
                + "" out of bounds."");
    }

    ValueAxis valueAxis = null;
    Integer axisIndex = (Integer) datasetToAxisMap.get(new Integer(index));
    if (axisIndex != null) {
        valueAxis = axisRetriever.apply(axisIndex.intValue());
    } else {
        valueAxis = defaultAxis;
    }
    return valueAxis;

}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing getDomainAxisForDataset
public ValueAxis getDomainAxisForDataset(int index) {
    return getAxisForDataset(index, this.datasetToDomainAxisMap, getDomainAxis(0), this::getDomainAxis);
}

// Replacing getRangeAxisForDataset
public ValueAxis getRangeAxisForDataset(int index) {
    return getAxisForDataset(index, this.datasetToRangeAxisMap, getRangeAxis(0), this::getRangeAxis);
}
```",Type-3
655-1-2,src,org.jfree.chart,ChartFactory,createPieChart,264,280,src,org.jfree.chart,ChartFactory,createRingChart,573,589,Type 2,"**Code Snippet 1: Method: createPieChart (Lines: 264-280)**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createRingChart (Lines: 573-589)**  
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private static JFreeChart createChart(String title, PieDataset dataset, 
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing Clones:**  

**For `createPieChart`:**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    return createChart(title, dataset, legend, tooltips, locale, new PiePlot(dataset));
}
```

**For `createRingChart`:**  
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    return createChart(title, dataset, legend, tooltips, locale, new RingPlot(dataset));
}
```",Type-2
665-1-2,src,org.jfree.data.general,DatasetUtilities,findDomainBounds,628,644,src,org.jfree.data.general,DatasetUtilities,findRangeBounds,734,747,Type 2,"**Code Snippet 1: Method: findDomainBounds (Lines: 628-644)**  
```java
/**
 * Returns the range of values in the domain (x-values) of a dataset.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param includeInterval  determines whether or not the x-interval is taken
 *                         into account (only applies if the dataset is an
 *                         {@link IntervalXYDataset}).
 *
 * @return The range of values (possibly <code>null</code>).
 */
public static Range findDomainBounds(XYDataset dataset,
                                     boolean includeInterval) {

    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }

    Range result = null;
    // if the dataset implements DomainInfo, life is easier
    if (dataset instanceof DomainInfo) {
        DomainInfo info = (DomainInfo) dataset;
        result = info.getDomainBounds(includeInterval);
    }
    else {
        result = iterateDomainBounds(dataset, includeInterval);
    }
    return result;

}
```

**Code Snippet 2: Method: findRangeBounds (Lines: 734-747)**  
```java
/**
 * Returns the range of values in the range for the dataset.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param includeInterval  a flag that determines whether or not the
 *                         y-interval is taken into account.
 *
 * @return The range (possibly <code>null</code>).
 */
public static Range findRangeBounds(XYDataset dataset,
                                    boolean includeInterval) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    Range result = null;
    if (dataset instanceof RangeInfo) {
        RangeInfo info = (RangeInfo) dataset;
        result = info.getRangeBounds(includeInterval);
    }
    else {
        result = iterateRangeBounds(dataset, includeInterval);
    }
    return result;
}
```

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `DomainInfo` vs. `RangeInfo`, `getDomainBounds` vs. `getRangeBounds`, and the method names).","**1. Extracted Method:**  
```java
private static Range findBounds(Object dataset, boolean includeInterval, Class<?> infoClass, String methodName, java.util.function.BiFunction<Object, Boolean, Range> iteratorMethod) {
    if (dataset == null) {
        throw new IllegalArgumentException(""Null 'dataset' argument."");
    }
    Range result = null;
    if (infoClass.isInstance(dataset)) {
        try {
            Object info = infoClass.cast(dataset);
            result = (Range) infoClass.getMethod(methodName, boolean.class).invoke(info, includeInterval);
        } catch (ReflectiveOperationException e) {
            throw new RuntimeException(""Error invoking method: "" + methodName, e);
        }
    } else {
        result = iteratorMethod.apply(dataset, includeInterval);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `findDomainBounds`:**  
```java
public static Range findDomainBounds(XYDataset dataset, boolean includeInterval) {
    return findBounds(dataset, includeInterval, DomainInfo.class, ""getDomainBounds"", DatasetUtilities::iterateDomainBounds);
}
```

**For `findRangeBounds`:**  
```java
public static Range findRangeBounds(XYDataset dataset, boolean includeInterval) {
    return findBounds(dataset, includeInterval, RangeInfo.class, ""getRangeBounds"", DatasetUtilities::iterateRangeBounds);
}
```",Type-3
665-1-3,src,org.jfree.data.general,DatasetUtilities,findDomainBounds,628,644,src,org.jfree.data.general,DatasetUtilities,findRangeBounds,773,786,Type 2,"**Code Snippet 1 - Method: findDomainBounds (Lines: 628-644)**  
```java
/**
 * Returns the range of values in the domain (x-values) of a dataset.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The range of values (possibly <code>null</code>).
 */
public static Range findDomainBounds(XYDataset dataset) {
    return findDomainBounds(dataset, true);
}
```

**Code Snippet 2 - Method: findRangeBounds (Lines: 773-786)**  
```java
/**
 * Returns the range of values in the range for the dataset.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The range (possibly <code>null</code>).
 */
public static Range findRangeBounds(CategoryDataset dataset) {
    return findRangeBounds(dataset, true);
}
```

**Clone Type:**  
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`XYDataset` vs. `CategoryDataset`) and method names (`findDomainBounds` vs. `findRangeBounds`).","**1. Extracted Method:**  
```java
/**
 * Returns the range of values for the dataset.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param includeInterval  a flag that determines whether or not the interval is taken into account.
 *
 * @return The range of values (possibly <code>null</code>).
 */
public static Range findBounds(Object dataset, boolean includeInterval) {
    if (dataset instanceof XYDataset) {
        return findDomainBounds((XYDataset) dataset, includeInterval);
    } else if (dataset instanceof CategoryDataset) {
        return findRangeBounds((CategoryDataset) dataset, includeInterval);
    } else {
        throw new IllegalArgumentException(""Unsupported dataset type."");
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `findDomainBounds`:**  
```java
public static Range findDomainBounds(XYDataset dataset) {
    return findBounds(dataset, true);
}
```

**For `findRangeBounds`:**  
```java
public static Range findRangeBounds(CategoryDataset dataset) {
    return findBounds(dataset, true);
}
```",Type-2
665-2-3,src,org.jfree.data.general,DatasetUtilities,findRangeBounds,734,747,src,org.jfree.data.general,DatasetUtilities,findRangeBounds,773,786,Type 2,"**Code Snippet 1: Method: findRangeBounds (Lines: 734-747)**  
```java
public static Range findRangeBounds(CategoryDataset dataset) {
    return findRangeBounds(dataset, true);
}
```

**Code Snippet 2: Method: findRangeBounds (Lines: 773-786)**  
```java
public static Range findRangeBounds(XYDataset dataset) {
    return findRangeBounds(dataset, true);
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private static Range findRangeBoundsGeneric(Object dataset, boolean includeInterval) {
    if (dataset instanceof CategoryDataset) {
        return findRangeBounds((CategoryDataset) dataset, includeInterval);
    } else if (dataset instanceof XYDataset) {
        return findRangeBounds((XYDataset) dataset, includeInterval);
    } else {
        throw new IllegalArgumentException(""Unsupported dataset type."");
    }
}
```

**2. Method Calls to Replace the Clones:**  

**For Code Snippet 1 (Lines: 734-747):**  
```java
public static Range findRangeBounds(CategoryDataset dataset) {
    return findRangeBoundsGeneric(dataset, true);
}
```

**For Code Snippet 2 (Lines: 773-786):**  
```java
public static Range findRangeBounds(XYDataset dataset) {
    return findRangeBoundsGeneric(dataset, true);
}
```",Type-2
674-1-2,src,org.jfree.chart,ChartFactory,createPieChart,236,246,src,org.jfree.chart,ChartFactory,createPieChart,264,280,Type 2,"**Code Snippet 1:**
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2:**
```java
public static JFreeChart createPieChart(String title,
                                        PieDataset dataset,
                                        boolean legend,
                                        boolean tooltips,
                                        boolean urls) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator());
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator());
    }
    if (urls) {
        plot.setURLGenerator(new StandardPieURLGenerator());
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**
```java
private static PiePlot createPiePlot(PieDataset dataset, boolean tooltips, boolean urls, Locale locale) {
    PiePlot plot = new PiePlot(dataset);
    if (locale != null) {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    } else {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator());
    }
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        if (locale != null) {
            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        } else {
            plot.setToolTipGenerator(new StandardPieToolTipGenerator());
        }
    }
    if (urls) {
        plot.setURLGenerator(new StandardPieURLGenerator());
    }
    return plot;
}
```

**2. Method Calls Replacing Clones:**

**For Code Snippet 1:**
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = createPiePlot(dataset, tooltips, false, locale);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**For Code Snippet 2:**
```java
public static JFreeChart createPieChart(String title,
                                        PieDataset dataset,
                                        boolean legend,
                                        boolean tooltips,
                                        boolean urls) {

    PiePlot plot = createPiePlot(dataset, tooltips, urls, null);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```",Type-3
674-1-3,src,org.jfree.chart,ChartFactory,createPieChart,236,246,src,org.jfree.chart,ChartFactory,createRingChart,545,555,Type 2,"**Code Snippet 1: Method: createPieChart (Lines: 236-246)**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createRingChart (Lines: 545-555)**  
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private static JFreeChart createChart(String title, PieDataset dataset, 
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**  

**For `createPieChart`:**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```

**For `createRingChart`:**  
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```",Type-2
674-1-4,src,org.jfree.chart,ChartFactory,createPieChart,236,246,src,org.jfree.chart,ChartFactory,createRingChart,573,589,Type 2,"**Code Snippet 1: Method: createPieChart (Lines: 236-246)**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createRingChart (Lines: 573-589)**  
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private static JFreeChart createChart(String title, PieDataset dataset, 
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**  

**For `createPieChart`:**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```

**For `createRingChart`:**  
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```",Type-2
674-2-3,src,org.jfree.chart,ChartFactory,createPieChart,264,280,src,org.jfree.chart,ChartFactory,createRingChart,545,555,Type 2,"**Code Snippet 1:**
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2:**
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**
```java
private static JFreeChart createChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**2. Method Calls:**

**For `createPieChart`:**
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);

}
```

**For `createRingChart`:**
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);

}
```",Type-2
674-2-4,src,org.jfree.chart,ChartFactory,createPieChart,264,280,src,org.jfree.chart,ChartFactory,createRingChart,573,589,Type 2,"**Code Snippet 1: Method: createPieChart (Lines: 264-280)**

```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createRingChart (Lines: 573-589)**

```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title, PieDataset dataset, 
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**

**For `createPieChart`:**

```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```

**For `createRingChart`:**

```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```",Type-2
674-3-4,src,org.jfree.chart,ChartFactory,createRingChart,545,555,src,org.jfree.chart,ChartFactory,createRingChart,573,589,Type 2,"**Code Snippet 1:**
```java
/**
 * Creates a ring chart with default settings.
 * <P>
 * The chart object returned by this method uses a {@link RingPlot} 
 * instance as the plot.
 *
 * @param title  the chart title (<code>null</code> permitted).
 * @param dataset  the dataset for the chart (<code>null</code> permitted).
 * @param legend  a flag specifying whether or not a legend is required.
 * @param tooltips  configure chart to generate tool tips?
 * @param locale  the locale (<code>null</code> not permitted).
 *
 * @return A ring chart.
 * 
 * @since 1.0.7
 */
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2:**
```java
/**
 * Creates a ring chart with default settings.
 * <P>
 * The chart object returned by this method uses a {@link RingPlot} 
 * instance as the plot.
 *
 * @param title  the chart title (<code>null</code> permitted).
 * @param dataset  the dataset for the chart (<code>null</code> permitted).
 * @param legend  a flag specifying whether or not a legend is required.
 * @param tooltips  configure chart to generate tool tips?
 * @param urls  configure chart to generate URLs?
 *
 * @return A ring chart.
 */
public static JFreeChart createRingChart(String title,
                                         PieDataset dataset,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator());
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator());
    }
    if (urls) {
        plot.setURLGenerator(new StandardPieURLGenerator());
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**
```java
private static RingPlot createRingPlot(PieDataset dataset, boolean tooltips, boolean urls, Locale locale) {
    RingPlot plot = new RingPlot(dataset);
    if (locale != null) {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    } else {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator());
    }
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        if (locale != null) {
            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        } else {
            plot.setToolTipGenerator(new StandardPieToolTipGenerator());
        }
    }
    if (urls) {
        plot.setURLGenerator(new StandardPieURLGenerator());
    }
    return plot;
}
```

**2. Method Calls:**

**For Code Snippet 1:**
```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = createRingPlot(dataset, tooltips, false, locale);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**For Code Snippet 2:**
```java
public static JFreeChart createRingChart(String title,
                                         PieDataset dataset,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    RingPlot plot = createRingPlot(dataset, tooltips, urls, null);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```",Type-3
680-1-2,src,org.jfree.data,DefaultKeyedValues,sortByKeys,355,371,src,org.jfree.data,DefaultKeyedValues,sortByValues,382,397,Type 2,"**Code Snippet 1 - Method: sortByKeys (Lines: 355-371)**  
```java
public void sortByKeys(SortOrder order) {
    final int size = this.keys.size();
    final DefaultKeyedValue[] data = new DefaultKeyedValue[size];

    for (int i = 0; i < size; i++) {
        data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), 
                (Number) this.values.get(i));
    }

    Comparator comparator = new KeyedValueComparator(
            KeyedValueComparatorType.BY_KEY, order);
    Arrays.sort(data, comparator);
    clear();

    for (int i = 0; i < data.length; i++) {
        final DefaultKeyedValue value = data[i];
        addValue(value.getKey(), value.getValue());
    }
}
```

**Code Snippet 2 - Method: sortByValues (Lines: 382-397)**  
```java
public void sortByValues(SortOrder order) {
    final int size = this.keys.size();
    final DefaultKeyedValue[] data = new DefaultKeyedValue[size];
    for (int i = 0; i < size; i++) {
        data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), 
                (Number) this.values.get(i));
    }

    Comparator comparator = new KeyedValueComparator(
            KeyedValueComparatorType.BY_VALUE, order);
    Arrays.sort(data, comparator);

    clear();
    for (int i = 0; i < data.length; i++) {
        final DefaultKeyedValue value = data[i];
        addValue(value.getKey(), value.getValue());
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private void sortBy(SortOrder order, KeyedValueComparatorType comparatorType) {
    final int size = this.keys.size();
    final DefaultKeyedValue[] data = new DefaultKeyedValue[size];
    for (int i = 0; i < size; i++) {
        data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), 
                (Number) this.values.get(i));
    }

    Comparator comparator = new KeyedValueComparator(comparatorType, order);
    Arrays.sort(data, comparator);

    clear();
    for (int i = 0; i < data.length; i++) {
        final DefaultKeyedValue value = data[i];
        addValue(value.getKey(), value.getValue());
    }
}
```

**2. Method Calls Replacing Clones:**  

**For `sortByKeys`:**  
```java
public void sortByKeys(SortOrder order) {
    sortBy(order, KeyedValueComparatorType.BY_KEY);
}
```

**For `sortByValues`:**  
```java
public void sortByValues(SortOrder order) {
    sortBy(order, KeyedValueComparatorType.BY_VALUE);
}
```",Type-2
695-1-2,src,org.jfree.data.time,Hour,previous,253,268,src,org.jfree.data.time,Hour,next,277,292,Type 2,"**Code Snippet 1 - Method: previous (Lines: 253-268)**  
```java
public RegularTimePeriod previous() {

    Hour result;
    if (this.hour != FIRST_HOUR_IN_DAY) {
        result = new Hour(this.hour - 1, this.day);
    }
    else { // we are at the first hour in the day...
        Day prevDay = (Day) this.day.previous();
        if (prevDay != null) {
            result = new Hour(LAST_HOUR_IN_DAY, prevDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

**Code Snippet 2 - Method: next (Lines: 277-292)**  
```java
public RegularTimePeriod next() {

    Hour result;
    if (this.hour != LAST_HOUR_IN_DAY) {
        result = new Hour(this.hour + 1, this.day);
    }
    else { // we are at the last hour in the day...
        Day nextDay = (Day) this.day.next();
        if (nextDay != null) {
            result = new Hour(FIRST_HOUR_IN_DAY, nextDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentHour(int hour, Day day, boolean isNext) {
    Hour result;
    if ((isNext && hour != LAST_HOUR_IN_DAY) || (!isNext && hour != FIRST_HOUR_IN_DAY)) {
        result = new Hour(isNext ? hour + 1 : hour - 1, day);
    } else {
        Day adjacentDay = isNext ? (Day) day.next() : (Day) day.previous();
        if (adjacentDay != null) {
            result = new Hour(isNext ? FIRST_HOUR_IN_DAY : LAST_HOUR_IN_DAY, adjacentDay);
        } else {
            result = null;
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentHour(this.hour, this.day, false);
}
```

**For `next` method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentHour(this.hour, this.day, true);
}
```",Type-3
705-2-3,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4491,4506,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4568,4583,Type 2,"```java
// Code snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source, boolean useAnchor) {

    // perform the zoom on each domain axis
    for (int i = 0; i < this.domainAxes.size(); i++) {
        ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i);
        if (domainAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceX = source.getX();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceX = source.getY();
                }
                double anchorX = domainAxis.java2DToValue(sourceX,
                        info.getDataArea(), getDomainAxisEdge());
                domainAxis.resizeRange(factor, anchorX);
            }
            else {
                domainAxis.resizeRange(factor);
            }
        }
    }
}
```

```java
// Code snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

Clone Type: **Type-3 (Mostly similar but with some different statements)**","```java
// 1. The extracted method
private void zoomAxes(List<ValueAxis> axes, double factor, PlotRenderingInfo info,
                      Point2D source, boolean useAnchor, boolean isDomain) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = axes.get(i);
        if (axis != null) {
            if (useAnchor) {
                double sourceCoord = isDomain ? source.getX() : source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceCoord = isDomain ? source.getY() : source.getX();
                }
                double anchorCoord = axis.java2DToValue(sourceCoord,
                        info.getDataArea(), isDomain ? getDomainAxisEdge() : getRangeAxisEdge());
                axis.resizeRange(factor, anchorCoord);
            } else {
                axis.resizeRange(factor);
            }
        }
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replace the body of zoomDomainAxes with:
zoomAxes(this.domainAxes, factor, info, source, useAnchor, true);

// Replace the body of zoomRangeAxes with:
zoomAxes(this.rangeAxes, factor, info, source, useAnchor, false);
```",Type-3
711-1-2,src,org.jfree.chart.plot,Plot,setBackgroundPaint,546,561,src,org.jfree.chart.plot,Plot,setOutlineStroke,767,781,Type 2,"**Code Snippet 1: setBackgroundPaint (Lines 546-561)**  
```java
public void setBackgroundPaint(Paint paint) {

    if (paint == null) {
        if (this.backgroundPaint != null) {
            this.backgroundPaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.backgroundPaint != null) {
            if (this.backgroundPaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.backgroundPaint = paint;
        fireChangeEvent();
    }

}
```

**Code Snippet 2: setOutlineStroke (Lines 767-781)**  
```java
public void setOutlineStroke(Stroke stroke) {
    if (stroke == null) {
        if (this.outlineStroke != null) {
            this.outlineStroke = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlineStroke != null) {
            if (this.outlineStroke.equals(stroke)) {
                return;  // nothing to do
            }
        }
        this.outlineStroke = stroke;
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void updateProperty(T currentValue, T newValue, Consumer<T> updater) {
    if (newValue == null) {
        if (currentValue != null) {
            updater.accept(null);
            fireChangeEvent();
        }
    } else {
        if (currentValue != null && currentValue.equals(newValue)) {
            return; // nothing to do
        }
        updater.accept(newValue);
        fireChangeEvent();
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setBackgroundPaint`:**  
```java
public void setBackgroundPaint(Paint paint) {
    updateProperty(this.backgroundPaint, paint, value -> this.backgroundPaint = value);
}
```

**For `setOutlineStroke`:**  
```java
public void setOutlineStroke(Stroke stroke) {
    updateProperty(this.outlineStroke, stroke, value -> this.outlineStroke = value);
}
```",Type-2
711-1-3,src,org.jfree.chart.plot,Plot,setBackgroundPaint,546,561,src,org.jfree.chart.plot,Plot,setOutlinePaint,805,819,Type 2,"**Code Snippet 1: setBackgroundPaint (Lines 546-561)**  
```java
public void setBackgroundPaint(Paint paint) {

    if (paint == null) {
        if (this.backgroundPaint != null) {
            this.backgroundPaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.backgroundPaint != null) {
            if (this.backgroundPaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.backgroundPaint = paint;
        fireChangeEvent();
    }

}
```

**Code Snippet 2: setOutlinePaint (Lines 805-819)**  
```java
public void setOutlinePaint(Paint paint) {
    if (paint == null) {
        if (this.outlinePaint != null) {
            this.outlinePaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlinePaint != null) {
            if (this.outlinePaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.outlinePaint = paint;
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private void setPaint(Paint currentPaint, Paint newPaint, Consumer<Paint> paintSetter) {
    if (newPaint == null) {
        if (currentPaint != null) {
            paintSetter.accept(null);
            fireChangeEvent();
        }
    } else {
        if (currentPaint != null && currentPaint.equals(newPaint)) {
            return; // nothing to do
        }
        paintSetter.accept(newPaint);
        fireChangeEvent();
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setBackgroundPaint`:**  
```java
public void setBackgroundPaint(Paint paint) {
    setPaint(this.backgroundPaint, paint, newPaint -> this.backgroundPaint = newPaint);
}
```

**For `setOutlinePaint`:**  
```java
public void setOutlinePaint(Paint paint) {
    setPaint(this.outlinePaint, paint, newPaint -> this.outlinePaint = newPaint);
}
```",Type-2
711-2-3,src,org.jfree.chart.plot,Plot,setOutlineStroke,767,781,src,org.jfree.chart.plot,Plot,setOutlinePaint,805,819,Type 2,"**Code Snippet 1: Method: setOutlineStroke (Lines: 767-781)**  
```java
public void setOutlineStroke(Stroke stroke) {
    if (stroke == null) {
        if (this.outlineStroke != null) {
            this.outlineStroke = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlineStroke != null) {
            if (this.outlineStroke.equals(stroke)) {
                return;  // nothing to do
            }
        }
        this.outlineStroke = stroke;
        fireChangeEvent();
    }
}
```

**Code Snippet 2: Method: setOutlinePaint (Lines: 805-819)**  
```java
public void setOutlinePaint(Paint paint) {
    if (paint == null) {
        if (this.outlinePaint != null) {
            this.outlinePaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlinePaint != null) {
            if (this.outlinePaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.outlinePaint = paint;
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setOutlineAttribute(T attribute, T newValue, Consumer<T> setter, Runnable changeNotifier) {
    if (newValue == null) {
        if (attribute != null) {
            setter.accept(null);
            changeNotifier.run();
        }
    } else {
        if (attribute != null && attribute.equals(newValue)) {
            return; // nothing to do
        }
        setter.accept(newValue);
        changeNotifier.run();
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setOutlineStroke`:**  
```java
public void setOutlineStroke(Stroke stroke) {
    setOutlineAttribute(this.outlineStroke, stroke, value -> this.outlineStroke = value, this::fireChangeEvent);
}
```

**For `setOutlinePaint`:**  
```java
public void setOutlinePaint(Paint paint) {
    setOutlineAttribute(this.outlinePaint, paint, value -> this.outlinePaint = value, this::fireChangeEvent);
}
```",Type-2
718-1-2,src,org.jfree.data.time,Hour,previous,253,268,src,org.jfree.data.time,Hour,next,277,292,Type 2,"**Code Snippet 1 - Method: previous (Lines: 253-268)**  
```java
public RegularTimePeriod previous() {

    Hour result;
    if (this.hour != FIRST_HOUR_IN_DAY) {
        result = new Hour(this.hour - 1, this.day);
    }
    else { // we are at the first hour in the day...
        Day prevDay = (Day) this.day.previous();
        if (prevDay != null) {
            result = new Hour(LAST_HOUR_IN_DAY, prevDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

**Code Snippet 2 - Method: next (Lines: 277-292)**  
```java
public RegularTimePeriod next() {

    Hour result;
    if (this.hour != LAST_HOUR_IN_DAY) {
        result = new Hour(this.hour + 1, this.day);
    }
    else { // we are at the last hour in the day...
        Day nextDay = (Day) this.day.next();
        if (nextDay != null) {
            result = new Hour(FIRST_HOUR_IN_DAY, nextDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentHour(int hourBoundary, int hourIncrement, Day adjacentDay) {
    if (this.hour != hourBoundary) {
        return new Hour(this.hour + hourIncrement, this.day);
    } else {
        if (adjacentDay != null) {
            return new Hour(hourBoundary == FIRST_HOUR_IN_DAY ? LAST_HOUR_IN_DAY : FIRST_HOUR_IN_DAY, adjacentDay);
        } else {
            return null;
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentHour(FIRST_HOUR_IN_DAY, -1, (Day) this.day.previous());
}
```

**For `next` method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentHour(LAST_HOUR_IN_DAY, 1, (Day) this.day.next());
}
```",Type-3
718-3-4,src,org.jfree.data.time,Millisecond,previous,231,244,src,org.jfree.data.time,Millisecond,next,253,265,Type 2,"**Code Snippet 1 - Method: previous (Lines: 231-244)**  
```java
public RegularTimePeriod previous() {

    RegularTimePeriod result = null;

    if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond - 1, getSecond());
    }
    else {
        Second previous = (Second) getSecond().previous();
        if (previous != null) {
            result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);
        }
    }
    return result;

}
```

**Code Snippet 2 - Method: next (Lines: 253-265)**  
```java
public RegularTimePeriod next() {

    RegularTimePeriod result = null;
    if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond + 1, getSecond());
    }
    else {
        Second next = (Second) getSecond().next();
        if (next != null) {
            result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next);
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentMillisecond(int millisecondBoundary, int millisecondDelta, boolean isNext) {
    RegularTimePeriod result = null;

    if (this.millisecond != millisecondBoundary) {
        result = new Millisecond(this.millisecond + millisecondDelta, getSecond());
    } else {
        Second adjacent = isNext ? (Second) getSecond().next() : (Second) getSecond().previous();
        if (adjacent != null) {
            result = new Millisecond(millisecondBoundary, adjacent);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `previous` method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentMillisecond(FIRST_MILLISECOND_IN_SECOND, -1, false);
}
```

**For `next` method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentMillisecond(LAST_MILLISECOND_IN_SECOND, 1, true);
}
```",Type-3
718-5-6,src,org.jfree.data.time,Minute,previous,259,273,src,org.jfree.data.time,Minute,next,281,296,Type 2,"**Code Snippet 1 - Method: previous (Lines: 259-273)**  
```java
public RegularTimePeriod previous() {
    Minute result;
    if (this.minute != FIRST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute - 1, getHour());
    }
    else {
        Hour h = (Hour) getHour().previous();
        if (h != null) {
            result = new Minute(LAST_MINUTE_IN_HOUR, h);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: next (Lines: 281-296)**  
```java
public RegularTimePeriod next() {

    Minute result;
    if (this.minute != LAST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute + 1, getHour());
    }
    else { // we are at the last minute in the hour...
        Hour nextHour = (Hour) getHour().next();
        if (nextHour != null) {
            result = new Minute(FIRST_MINUTE_IN_HOUR, nextHour);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentMinute(boolean isNext) {
    Minute result;
    if (isNext) {
        if (this.minute != LAST_MINUTE_IN_HOUR) {
            result = new Minute(this.minute + 1, getHour());
        } else {
            Hour nextHour = (Hour) getHour().next();
            result = (nextHour != null) ? new Minute(FIRST_MINUTE_IN_HOUR, nextHour) : null;
        }
    } else {
        if (this.minute != FIRST_MINUTE_IN_HOUR) {
            result = new Minute(this.minute - 1, getHour());
        } else {
            Hour previousHour = (Hour) getHour().previous();
            result = (previousHour != null) ? new Minute(LAST_MINUTE_IN_HOUR, previousHour) : null;
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` Method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentMinute(false);
}
```

**For `next` Method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentMinute(true);
}
```",Type-3
718-7-8,src,org.jfree.data.time,Second,previous,226,238,src,org.jfree.data.time,Second,next,247,259,Type 2,"**Code Snippet 1 - Method: previous**  
```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    
    Second result = null;
    if (this.second != FIRST_SECOND_IN_MINUTE) {
        result = new Second(this.second - 1, getMinute());
    }
    else {
        Minute previous = (Minute) getMinute().previous();
        if (previous != null) {
            result = new Second(LAST_SECOND_IN_MINUTE, previous);
        }
    }
    return result;
    
}
```

**Code Snippet 2 - Method: next**  
```java
/**
 * Returns the second following this one.
 *
 * @return The second following this one.
 */
public RegularTimePeriod next() {
    
    Second result = null;
    if (this.second != LAST_SECOND_IN_MINUTE) {
        result = new Second(this.second + 1, getMinute());
    }
    else {
        Minute next = (Minute) getMinute().next();
        if (next != null) {
            result = new Second(FIRST_SECOND_IN_MINUTE, next);
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentSecond(boolean isNext) {
    Second result = null;
    if (isNext) {
        if (this.second != LAST_SECOND_IN_MINUTE) {
            result = new Second(this.second + 1, getMinute());
        } else {
            Minute next = (Minute) getMinute().next();
            if (next != null) {
                result = new Second(FIRST_SECOND_IN_MINUTE, next);
            }
        }
    } else {
        if (this.second != FIRST_SECOND_IN_MINUTE) {
            result = new Second(this.second - 1, getMinute());
        } else {
            Minute previous = (Minute) getMinute().previous();
            if (previous != null) {
                result = new Second(LAST_SECOND_IN_MINUTE, previous);
            }
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `previous`:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentSecond(false);
}
```

**For `next`:**  
```java
public RegularTimePeriod next() {
    return getAdjacentSecond(true);
}
```",Type-3
762-1-2,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,zoomRangeAxes,285,298,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,zoomRangeAxes,311,324,Type 2,"**Code Snippet 1: Method: zoomRangeAxes (Lines: 285-298)**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomRangeAxes(factor, info, source, false);
}
```

**Code Snippet 2: Method: zoomRangeAxes (Lines: 311-324)**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    // delegate 'info' and 'source' argument checks...
    CategoryPlot subplot = findSubplot(info, source);
    if (subplot != null) {
        subplot.zoomRangeAxes(factor, info, source, useAnchor);
    }
    else {
        // if the source point doesn't fall within a subplot, we do the
        // zoom on all subplots...
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (CategoryPlot) iterator.next();
            subplot.zoomRangeAxes(factor, info, source, useAnchor);
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void performZoomRangeAxes(double factor, PlotRenderingInfo info,
                                  Point2D source, boolean useAnchor) {
    CategoryPlot subplot = findSubplot(info, source);
    if (subplot != null) {
        subplot.zoomRangeAxes(factor, info, source, useAnchor);
    } else {
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (CategoryPlot) iterator.next();
            subplot.zoomRangeAxes(factor, info, source, useAnchor);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 285-298):**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    performZoomRangeAxes(factor, info, source, false);
}
```

**For Code Snippet 2 (Lines: 311-324):**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(factor, info, source, useAnchor);
}
```",Type-3
762-3-4,src,org.jfree.chart.plot,CombinedDomainXYPlot,zoomRangeAxes,518,531,src,org.jfree.chart.plot,CombinedDomainXYPlot,zoomRangeAxes,544,557,Type 2,"**Code Snippet 1: Method: zoomRangeAxes (Lines: 518-531)**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomRangeAxes(factor, info, source, false);
}
```

**Code Snippet 2: Method: zoomRangeAxes (Lines: 544-557)**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo state,
                          Point2D source, boolean useAnchor) {
    // delegate 'state' and 'source' argument checks...
    XYPlot subplot = findSubplot(state, source);
    if (subplot != null) {
        subplot.zoomRangeAxes(factor, state, source, useAnchor);
    }
    else {
        // if the source point doesn't fall within a subplot, we do the
        // zoom on all subplots...
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (XYPlot) iterator.next();
            subplot.zoomRangeAxes(factor, state, source, useAnchor);
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void performZoomRangeAxes(double factor, PlotRenderingInfo info,
                                  Point2D source, boolean useAnchor) {
    XYPlot subplot = findSubplot(info, source);
    if (subplot != null) {
        subplot.zoomRangeAxes(factor, info, source, useAnchor);
    } else {
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (XYPlot) iterator.next();
            subplot.zoomRangeAxes(factor, info, source, useAnchor);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 518-531):**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    performZoomRangeAxes(factor, info, source, false);
}
```

**For Code Snippet 2 (Lines: 544-557):**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo state,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(factor, state, source, useAnchor);
}
```",Type-3
762-5-6,src,org.jfree.chart.plot,CombinedRangeXYPlot,zoomDomainAxes,465,478,src,org.jfree.chart.plot,CombinedRangeXYPlot,zoomDomainAxes,491,505,Type 2,"**Code Snippet 1: Method: zoomDomainAxes (Lines: 465-478)**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate 'info' and 'source' argument checks...
    XYPlot subplot = findSubplot(info, source);
    if (subplot != null) {
        subplot.zoomDomainAxes(factor, info, source);
    }
    else {
        // if the source point doesn't fall within a subplot, we do the
        // zoom on all subplots...
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (XYPlot) iterator.next();
            subplot.zoomDomainAxes(factor, info, source);
        }
    }
}
```

**Code Snippet 2: Method: zoomDomainAxes (Lines: 491-505)**  
```java
public void zoomDomainAxes(double lowerPercent, double upperPercent,
                           PlotRenderingInfo info, Point2D source) {
    // delegate 'info' and 'source' argument checks...
    XYPlot subplot = findSubplot(info, source);
    if (subplot != null) {
        subplot.zoomDomainAxes(lowerPercent, upperPercent, info, source);
    }
    else {
        // if the source point doesn't fall within a subplot, we do the
        // zoom on all subplots...
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (XYPlot) iterator.next();
            subplot.zoomDomainAxes(lowerPercent, upperPercent, info,
                    source);
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void zoomDomainAxesInternal(XYPlot subplot, PlotRenderingInfo info, Point2D source, boolean usePercent, double... zoomParams) {
    if (subplot != null) {
        if (usePercent) {
            subplot.zoomDomainAxes(zoomParams[0], zoomParams[1], info, source);
        } else {
            subplot.zoomDomainAxes(zoomParams[0], info, source);
        }
    } else {
        Iterator iterator = getSubplots().iterator();
        while (iterator.hasNext()) {
            subplot = (XYPlot) iterator.next();
            if (usePercent) {
                subplot.zoomDomainAxes(zoomParams[0], zoomParams[1], info, source);
            } else {
                subplot.zoomDomainAxes(zoomParams[0], info, source);
            }
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1:**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source) {
    XYPlot subplot = findSubplot(info, source);
    zoomDomainAxesInternal(subplot, info, source, false, factor);
}
```

**For Code Snippet 2:**  
```java
public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) {
    XYPlot subplot = findSubplot(info, source);
    zoomDomainAxesInternal(subplot, info, source, true, lowerPercent, upperPercent);
}
```",Type-3
766-1-2,src,org.jfree.chart,ChartFactory,createHighLowChart,1898,1911,src,org.jfree.chart,ChartFactory,createBoxAndWhiskerChart,2072,2086,Type 2,"**Code Snippet 1: Method: createHighLowChart (Lines: 1898-1911)**

```java
public static JFreeChart createHighLowChart(String title,
                                            String timeAxisLabel,
                                            String valueAxisLabel,
                                            OHLCDataset dataset,
                                            boolean legend) {

    ValueAxis timeAxis = new DateAxis(timeAxisLabel);
    NumberAxis valueAxis = new NumberAxis(valueAxisLabel);
    HighLowRenderer renderer = new HighLowRenderer();
    renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());
    XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

**Code Snippet 2: Method: createBoxAndWhiskerChart (Lines: 2072-2086)**

```java
public static JFreeChart createBoxAndWhiskerChart(String title,
                                                 String timeAxisLabel,
                                                 String valueAxisLabel,
                                                 BoxAndWhiskerXYDataset dataset,
                                                 boolean legend) {

    ValueAxis timeAxis = new DateAxis(timeAxisLabel);
    NumberAxis valueAxis = new NumberAxis(valueAxisLabel);
    valueAxis.setAutoRangeIncludesZero(false);
    XYBoxAndWhiskerRenderer renderer = new XYBoxAndWhiskerRenderer(10.0);
    XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**

```java
private static JFreeChart createXYPlotChart(String title,
                                            String timeAxisLabel,
                                            String valueAxisLabel,
                                            XYDataset dataset,
                                            XYItemRenderer renderer,
                                            boolean legend) {

    ValueAxis timeAxis = new DateAxis(timeAxisLabel);
    NumberAxis valueAxis = new NumberAxis(valueAxisLabel);
    if (renderer instanceof XYBoxAndWhiskerRenderer) {
        valueAxis.setAutoRangeIncludesZero(false);
    }
    XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**

**For `createHighLowChart`:**

```java
public static JFreeChart createHighLowChart(String title,
                                            String timeAxisLabel,
                                            String valueAxisLabel,
                                            OHLCDataset dataset,
                                            boolean legend) {

    HighLowRenderer renderer = new HighLowRenderer();
    renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());
    return createXYPlotChart(title, timeAxisLabel, valueAxisLabel, dataset, renderer, legend);
}
```

**For `createBoxAndWhiskerChart`:**

```java
public static JFreeChart createBoxAndWhiskerChart(String title,
                                                 String timeAxisLabel,
                                                 String valueAxisLabel,
                                                 BoxAndWhiskerXYDataset dataset,
                                                 boolean legend) {

    XYBoxAndWhiskerRenderer renderer = new XYBoxAndWhiskerRenderer(10.0);
    return createXYPlotChart(title, timeAxisLabel, valueAxisLabel, dataset, renderer, legend);
}
```",Type-3
772-1-2,src,org.jfree.chart.plot,CategoryPlot,drawDomainMarkers,3244,3258,src,org.jfree.chart.plot,CategoryPlot,drawRangeMarkers,3275,3289,Type 2,"**Code Snippet 1 - Method: drawDomainMarkers (Lines: 3244-3258)**  
```java
protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea,
                                 int index, Layer layer) {

    CategoryItemRenderer r = getRenderer(index);
    if (r == null) {
        return;
    }

    Collection markers = getDomainMarkers(index, layer);
    CategoryAxis axis = getDomainAxisForDataset(index);
    if (markers != null && axis != null) {
        Iterator iterator = markers.iterator();
        while (iterator.hasNext()) {
            CategoryMarker marker = (CategoryMarker) iterator.next();
            r.drawDomainMarker(g2, this, axis, marker, dataArea);
        }
    }

}
```

**Code Snippet 2 - Method: drawRangeMarkers (Lines: 3275-3289)**  
```java
protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea,
                                int index, Layer layer) {

    CategoryItemRenderer r = getRenderer(index);
    if (r == null) {
        return;
    }

    Collection markers = getRangeMarkers(index, layer);
    ValueAxis axis = getRangeAxisForDataset(index);
    if (markers != null && axis != null) {
        Iterator iterator = markers.iterator();
        while (iterator.hasNext()) {
            Marker marker = (Marker) iterator.next();
            r.drawRangeMarker(g2, this, axis, marker, dataArea);
        }
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer, 
                         Collection markers, Axis axis, BiConsumer<CategoryItemRenderer, Marker> drawMarkerFunction) {

    CategoryItemRenderer r = getRenderer(index);
    if (r == null) {
        return;
    }

    if (markers != null && axis != null) {
        Iterator iterator = markers.iterator();
        while (iterator.hasNext()) {
            Marker marker = (Marker) iterator.next();
            drawMarkerFunction.accept(r, marker);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `drawDomainMarkers`:**  
```java
protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) {
    Collection markers = getDomainMarkers(index, layer);
    CategoryAxis axis = getDomainAxisForDataset(index);
    drawMarkers(g2, dataArea, index, layer, markers, axis, 
        (renderer, marker) -> renderer.drawDomainMarker(g2, this, (CategoryAxis) axis, (CategoryMarker) marker, dataArea));
}
```

**For `drawRangeMarkers`:**  
```java
protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) {
    Collection markers = getRangeMarkers(index, layer);
    ValueAxis axis = getRangeAxisForDataset(index);
    drawMarkers(g2, dataArea, index, layer, markers, axis, 
        (renderer, marker) -> renderer.drawRangeMarker(g2, this, (ValueAxis) axis, marker, dataArea));
}
```",Type-3
780-1-2,src,org.jfree.chart.plot,XYPlot,drawHorizontalLine,3722,3736,src,org.jfree.chart.plot,XYPlot,drawVerticalLine,3788,3802,Type 2,"**Code Snippet 1: drawHorizontalLine (Lines: 3722-3736)**  
```java
protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea,
                                  double value, Stroke stroke,
                                  Paint paint) {

    ValueAxis axis = getRangeAxis();
    if (getOrientation() == PlotOrientation.HORIZONTAL) {
        axis = getDomainAxis();
    }
    if (axis.getRange().contains(value)) {
        double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);
        Line2D line = new Line2D.Double(dataArea.getMinX(), yy,
                dataArea.getMaxX(), yy);
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

}
```

**Code Snippet 2: drawVerticalLine (Lines: 3788-3802)**  
```java
protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea,
                                double value, Stroke stroke, Paint paint) {

    ValueAxis axis = getDomainAxis();
    if (getOrientation() == PlotOrientation.HORIZONTAL) {
        axis = getRangeAxis();
    }
    if (axis.getRange().contains(value)) {
        double xx = axis.valueToJava2D(value, dataArea,
                RectangleEdge.BOTTOM);
        Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                dataArea.getMaxY());
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint, boolean isHorizontal) {
    ValueAxis axis = isHorizontal ? getRangeAxis() : getDomainAxis();
    if (getOrientation() == PlotOrientation.HORIZONTAL) {
        axis = isHorizontal ? getDomainAxis() : getRangeAxis();
    }
    if (axis.getRange().contains(value)) {
        double coord = axis.valueToJava2D(value, dataArea, isHorizontal ? RectangleEdge.LEFT : RectangleEdge.BOTTOM);
        Line2D line = isHorizontal
                ? new Line2D.Double(dataArea.getMinX(), coord, dataArea.getMaxX(), coord)
                : new Line2D.Double(coord, dataArea.getMinY(), coord, dataArea.getMaxY());
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `drawHorizontalLine`:**  
```java
protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) {
    drawLine(g2, dataArea, value, stroke, paint, true);
}
```

**For `drawVerticalLine`:**  
```java
protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) {
    drawLine(g2, dataArea, value, stroke, paint, false);
}
```",Type-3
781-1-2,src,org.jfree.chart.plot,FastScatterPlot,drawDomainGridlines,622,636,src,org.jfree.chart.plot,FastScatterPlot,drawRangeGridlines,648,662,Type 2,"**Code Snippet 1: Method: drawDomainGridlines (Lines: 622-636)**  
```java
protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, 
                                   List ticks) {

    // draw the domain grid lines, if the flag says they're visible...
    if (isDomainGridlinesVisible()) {
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double v = this.domainAxis.valueToJava2D(tick.getValue(), 
                    dataArea, RectangleEdge.BOTTOM);
            Line2D line = new Line2D.Double(v, dataArea.getMinY(), v, 
                    dataArea.getMaxY());
            g2.setPaint(getDomainGridlinePaint());
            g2.setStroke(getDomainGridlineStroke());
            g2.draw(line);                
        }
    }
}
```

**Code Snippet 2: Method: drawRangeGridlines (Lines: 648-662)**  
```java
protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, 
                                  List ticks) {

    // draw the range grid lines, if the flag says they're visible...
    if (isRangeGridlinesVisible()) {
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double v = this.rangeAxis.valueToJava2D(tick.getValue(), 
                    dataArea, RectangleEdge.LEFT);
            Line2D line = new Line2D.Double(dataArea.getMinX(), v, 
                    dataArea.getMaxX(), v);
            g2.setPaint(getRangeGridlinePaint());
            g2.setStroke(getRangeGridlineStroke());
            g2.draw(line);                
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks, 
                           boolean gridlinesVisible, ValueAxis axis, 
                           RectangleEdge edge, boolean isDomain) {

    if (gridlinesVisible) {
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double v = axis.valueToJava2D(tick.getValue(), dataArea, edge);
            Line2D line = isDomain 
                    ? new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY())
                    : new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
            g2.setPaint(isDomain ? getDomainGridlinePaint() : getRangeGridlinePaint());
            g2.setStroke(isDomain ? getDomainGridlineStroke() : getRangeGridlineStroke());
            g2.draw(line);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `drawDomainGridlines`:**  
```java
protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) {
    drawGridlines(g2, dataArea, ticks, isDomainGridlinesVisible(), this.domainAxis, 
                  RectangleEdge.BOTTOM, true);
}
```

**For `drawRangeGridlines`:**  
```java
protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) {
    drawGridlines(g2, dataArea, ticks, isRangeGridlinesVisible(), this.rangeAxis, 
                  RectangleEdge.LEFT, false);
}
```",Type-3
783-1-2,src,org.jfree.chart.axis,DateAxis,setMinimumDate,575,589,src,org.jfree.chart.axis,DateAxis,setMaximumDate,625,639,Type 2,"**Code Snippet 1 - Method: setMinimumDate (Lines: 575-589)**  
```java
public void setMinimumDate(Date date) {
    if (date == null) {
        throw new IllegalArgumentException(""Null 'date' argument."");
    }
    // check the new minimum date relative to the current maximum date
    Date maxDate = getMaximumDate();
    long maxMillis = maxDate.getTime();
    long newMinMillis = date.getTime();
    if (maxMillis <= newMinMillis) {
        Date oldMin = getMinimumDate();
        long length = maxMillis - oldMin.getTime();
        maxDate = new Date(newMinMillis + length);
    }
    setRange(new DateRange(date, maxDate), true, false);
    notifyListeners(new AxisChangeEvent(this));
}
```

**Code Snippet 2 - Method: setMaximumDate (Lines: 625-639)**  
```java
public void setMaximumDate(Date maximumDate) {
    if (maximumDate == null) {
        throw new IllegalArgumentException(""Null 'maximumDate' argument."");
    }
    // check the new maximum date relative to the current minimum date
    Date minDate = getMinimumDate();
    long minMillis = minDate.getTime();
    long newMaxMillis = maximumDate.getTime();
    if (minMillis >= newMaxMillis) {
        Date oldMax = getMaximumDate();
        long length = oldMax.getTime() - minMillis;
        minDate = new Date(newMaxMillis - length);
    }
    setRange(new DateRange(minDate, maximumDate), true, false);
    notifyListeners(new AxisChangeEvent(this));
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void updateDateRange(Date date, boolean isMinimum) {
    if (date == null) {
        throw new IllegalArgumentException(""Null 'date' argument."");
    }
    Date otherDate = isMinimum ? getMaximumDate() : getMinimumDate();
    long otherMillis = otherDate.getTime();
    long newMillis = date.getTime();
    if ((isMinimum && otherMillis <= newMillis) || (!isMinimum && otherMillis >= newMillis)) {
        Date oldDate = isMinimum ? getMinimumDate() : getMaximumDate();
        long length = isMinimum ? otherMillis - oldDate.getTime() : oldDate.getTime() - otherMillis;
        otherDate = new Date(isMinimum ? newMillis + length : newMillis - length);
    }
    setRange(isMinimum ? new DateRange(date, otherDate) : new DateRange(otherDate, date), true, false);
    notifyListeners(new AxisChangeEvent(this));
}
```

**2. Method Calls:**  

**For `setMinimumDate`:**  
```java
public void setMinimumDate(Date date) {
    updateDateRange(date, true);
}
```

**For `setMaximumDate`:**  
```java
public void setMaximumDate(Date maximumDate) {
    updateDateRange(maximumDate, false);
}
```",Type-3
789-1-2,src,org.jfree.chart.axis,CategoryLabelPositions,replaceTopPosition,311,325,src,org.jfree.chart.axis,CategoryLabelPositions,replaceBottomPosition,338,352,Type 2,"**Code Snippet 1: Method: replaceTopPosition (Lines: 311-325)**  
```java
public static CategoryLabelPositions replaceTopPosition(
        CategoryLabelPositions base, CategoryLabelPosition top) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (top == null) {
        throw new IllegalArgumentException(""Null 'top' argument."");
    }
    
    return new CategoryLabelPositions(
        top, 
        base.getLabelPosition(RectangleEdge.BOTTOM),
        base.getLabelPosition(RectangleEdge.LEFT),
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Code Snippet 2: Method: replaceBottomPosition (Lines: 338-352)**  
```java
public static CategoryLabelPositions replaceBottomPosition(
        CategoryLabelPositions base, CategoryLabelPosition bottom) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (bottom == null) {
        throw new IllegalArgumentException(""Null 'bottom' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        bottom,
        base.getLabelPosition(RectangleEdge.LEFT),
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static CategoryLabelPositions replacePosition(
        CategoryLabelPositions base, CategoryLabelPosition position, RectangleEdge edge) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (position == null) {
        throw new IllegalArgumentException(""Null 'position' argument."");
    }
    
    return new CategoryLabelPositions(
        edge == RectangleEdge.TOP ? position : base.getLabelPosition(RectangleEdge.TOP),
        edge == RectangleEdge.BOTTOM ? position : base.getLabelPosition(RectangleEdge.BOTTOM),
        edge == RectangleEdge.LEFT ? position : base.getLabelPosition(RectangleEdge.LEFT),
        edge == RectangleEdge.RIGHT ? position : base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**2. Method Calls:**  

**For `replaceTopPosition`:**  
```java
public static CategoryLabelPositions replaceTopPosition(
        CategoryLabelPositions base, CategoryLabelPosition top) {
    return replacePosition(base, top, RectangleEdge.TOP);
}
```

**For `replaceBottomPosition`:**  
```java
public static CategoryLabelPositions replaceBottomPosition(
        CategoryLabelPositions base, CategoryLabelPosition bottom) {
    return replacePosition(base, bottom, RectangleEdge.BOTTOM);
}
```",Type-2
789-1-3,src,org.jfree.chart.axis,CategoryLabelPositions,replaceTopPosition,311,325,src,org.jfree.chart.axis,CategoryLabelPositions,replaceLeftPosition,365,379,Type 2,"**Code Snippet 1: Method: replaceTopPosition (Lines: 311-325)**  
```java
public static CategoryLabelPositions replaceTopPosition(
        CategoryLabelPositions base, CategoryLabelPosition top) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (top == null) {
        throw new IllegalArgumentException(""Null 'top' argument."");
    }
    
    return new CategoryLabelPositions(
        top, 
        base.getLabelPosition(RectangleEdge.BOTTOM),
        base.getLabelPosition(RectangleEdge.LEFT),
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Code Snippet 2: Method: replaceLeftPosition (Lines: 365-379)**  
```java
public static CategoryLabelPositions replaceLeftPosition(
        CategoryLabelPositions base, CategoryLabelPosition left) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (left == null) {
        throw new IllegalArgumentException(""Null 'left' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        left,
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static CategoryLabelPositions replacePosition(
        CategoryLabelPositions base, CategoryLabelPosition position, RectangleEdge edgeToReplace) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (position == null) {
        throw new IllegalArgumentException(""Null 'position' argument."");
    }
    
    return new CategoryLabelPositions(
        edgeToReplace == RectangleEdge.TOP ? position : base.getLabelPosition(RectangleEdge.TOP),
        edgeToReplace == RectangleEdge.BOTTOM ? position : base.getLabelPosition(RectangleEdge.BOTTOM),
        edgeToReplace == RectangleEdge.LEFT ? position : base.getLabelPosition(RectangleEdge.LEFT),
        edgeToReplace == RectangleEdge.RIGHT ? position : base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**2. Method Calls Replacing the Clones:**  

**For `replaceTopPosition`:**  
```java
public static CategoryLabelPositions replaceTopPosition(
        CategoryLabelPositions base, CategoryLabelPosition top) {
    return replacePosition(base, top, RectangleEdge.TOP);
}
```

**For `replaceLeftPosition`:**  
```java
public static CategoryLabelPositions replaceLeftPosition(
        CategoryLabelPositions base, CategoryLabelPosition left) {
    return replacePosition(base, left, RectangleEdge.LEFT);
}
```",Type-2
789-2-3,src,org.jfree.chart.axis,CategoryLabelPositions,replaceBottomPosition,338,352,src,org.jfree.chart.axis,CategoryLabelPositions,replaceLeftPosition,365,379,Type 2,"**Code Snippet 1: Method: replaceBottomPosition (Lines: 338-352)**  
```java
public static CategoryLabelPositions replaceBottomPosition(
        CategoryLabelPositions base, CategoryLabelPosition bottom) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (bottom == null) {
        throw new IllegalArgumentException(""Null 'bottom' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        bottom,
        base.getLabelPosition(RectangleEdge.LEFT),
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Code Snippet 2: Method: replaceLeftPosition (Lines: 365-379)**  
```java
public static CategoryLabelPositions replaceLeftPosition(
        CategoryLabelPositions base, CategoryLabelPosition left) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (left == null) {
        throw new IllegalArgumentException(""Null 'left' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        left,
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static CategoryLabelPositions replacePosition(
        CategoryLabelPositions base, CategoryLabelPosition position, RectangleEdge edgeToReplace) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (position == null) {
        throw new IllegalArgumentException(""Null 'position' argument."");
    }
    
    return new CategoryLabelPositions(
        edgeToReplace == RectangleEdge.TOP ? position : base.getLabelPosition(RectangleEdge.TOP),
        edgeToReplace == RectangleEdge.BOTTOM ? position : base.getLabelPosition(RectangleEdge.BOTTOM),
        edgeToReplace == RectangleEdge.LEFT ? position : base.getLabelPosition(RectangleEdge.LEFT),
        edgeToReplace == RectangleEdge.RIGHT ? position : base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**2. Method Calls:**  

**For `replaceBottomPosition`:**  
```java
public static CategoryLabelPositions replaceBottomPosition(
        CategoryLabelPositions base, CategoryLabelPosition bottom) {
    return replacePosition(base, bottom, RectangleEdge.BOTTOM);
}
```

**For `replaceLeftPosition`:**  
```java
public static CategoryLabelPositions replaceLeftPosition(
        CategoryLabelPositions base, CategoryLabelPosition left) {
    return replacePosition(base, left, RectangleEdge.LEFT);
}
```",Type-2
793-1-2,src,org.jfree.chart.axis,CyclicNumberAxis,selectHorizontalAutoTickUnit,310,324,src,org.jfree.chart.axis,CyclicNumberAxis,selectVerticalAutoTickUnit,337,351,Type 2,"**Code Snippet 1: Method: selectHorizontalAutoTickUnit (Lines: 310-324)**  
```java
protected void selectHorizontalAutoTickUnit(Graphics2D g2,
                                            Rectangle2D drawArea, 
                                            Rectangle2D dataArea,
                                            RectangleEdge edge) {

    double tickLabelWidth 
        = estimateMaximumTickLabelWidth(g2, getTickUnit());
    
    // Compute number of labels
    double n = getRange().getLength() 
               * tickLabelWidth / dataArea.getWidth();

    setTickUnit(
        (NumberTickUnit) getStandardTickUnits().getCeilingTickUnit(n), 
        false, false
    );
    
 }
```

**Code Snippet 2: Method: selectVerticalAutoTickUnit (Lines: 337-351)**  
```java
protected void selectVerticalAutoTickUnit(Graphics2D g2,
                                            Rectangle2D drawArea, 
                                            Rectangle2D dataArea,
                                            RectangleEdge edge) {

    double tickLabelWidth 
        = estimateMaximumTickLabelWidth(g2, getTickUnit());

    // Compute number of labels
    double n = getRange().getLength() 
               * tickLabelWidth / dataArea.getHeight();

    setTickUnit(
        (NumberTickUnit) getStandardTickUnits().getCeilingTickUnit(n), 
        false, false
    );
    
 }
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private void selectAutoTickUnitHelper(Graphics2D g2, Rectangle2D dataArea, boolean isHorizontal) {
    double tickLabelWidth = estimateMaximumTickLabelWidth(g2, getTickUnit());
    
    // Compute number of labels
    double n = isHorizontal 
               ? getRange().getLength() * tickLabelWidth / dataArea.getWidth()
               : getRange().getLength() * tickLabelWidth / dataArea.getHeight();

    setTickUnit(
        (NumberTickUnit) getStandardTickUnits().getCeilingTickUnit(n), 
        false, false
    );
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `selectHorizontalAutoTickUnit`:**  
```java
protected void selectHorizontalAutoTickUnit(Graphics2D g2,
                                            Rectangle2D drawArea, 
                                            Rectangle2D dataArea,
                                            RectangleEdge edge) {
    selectAutoTickUnitHelper(g2, dataArea, true);
}
```

**For `selectVerticalAutoTickUnit`:**  
```java
protected void selectVerticalAutoTickUnit(Graphics2D g2,
                                            Rectangle2D drawArea, 
                                            Rectangle2D dataArea,
                                            RectangleEdge edge) {
    selectAutoTickUnitHelper(g2, dataArea, false);
}
```",Type-3
807-1-2,src,org.jfree.chart.plot,CategoryPlot,setDomainAxis,659,673,src,org.jfree.chart.plot,CategoryPlot,setRangeAxis,936,950,Type 2,"**Code Snippet 1:**
```java
/**
 * Sets the domain axis for the plot and sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param axis  the axis (<code>null</code> permitted).
 *
 * @see #getDomainAxis()
 */
public void setDomainAxis(CategoryAxis axis) {
    setDomainAxis(0, axis);
}
```

**Code Snippet 2:**
```java
/**
 * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param axis  the axis (<code>null</code> permitted).
 */
public void setRangeAxis(ValueAxis axis) {
    setRangeAxis(0, axis);
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**
```java
private void setAxis(int index, Axis axis, boolean isDomainAxis) {
    if (isDomainAxis) {
        setDomainAxis(index, (CategoryAxis) axis);
    } else {
        setRangeAxis(index, (ValueAxis) axis);
    }
}
```

**2. Method Calls Replacing the Clones:**

**For `setDomainAxis`:**
```java
public void setDomainAxis(CategoryAxis axis) {
    setAxis(0, axis, true);
}
```

**For `setRangeAxis`:**
```java
public void setRangeAxis(ValueAxis axis) {
    setAxis(0, axis, false);
}
```",Type-2
821-1-2,src,org.jfree.data.time,Quarter,previous,246,259,src,org.jfree.data.time,Quarter,next,267,280,Type 2,"**Code Snippet 1 - Method: previous (Lines: 246-259)**  
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
public RegularTimePeriod previous() {
    Quarter result;
    if (this.quarter > FIRST_QUARTER) {
        result = new Quarter(this.quarter - 1, this.year);
    }
    else {
        if (this.year > 1900) {
            result = new Quarter(LAST_QUARTER, this.year - 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: next (Lines: 267-280)**  
```java
/**
 * Returns the quarter following this one.
 *
 * @return The quarter following this one (or null if this is Q4 9999).
 */
public RegularTimePeriod next() {
    Quarter result;
    if (this.quarter < LAST_QUARTER) {
        result = new Quarter(this.quarter + 1, this.year);
    }
    else {
        if (this.year < 9999) {
            result = new Quarter(FIRST_QUARTER, this.year + 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns the quarter relative to this one based on the offset.
 *
 * @param offset  the offset (-1 for previous, +1 for next).
 * @param boundaryYear  the boundary year (1900 for previous, 9999 for next).
 * @param boundaryQuarter  the boundary quarter (LAST_QUARTER for previous, FIRST_QUARTER for next).
 * @return The quarter relative to this one (or null if the boundary is reached).
 */
private RegularTimePeriod getRelativeQuarter(int offset, int boundaryYear, int boundaryQuarter) {
    Quarter result;
    if ((offset == -1 && this.quarter > FIRST_QUARTER) || (offset == 1 && this.quarter < LAST_QUARTER)) {
        result = new Quarter(this.quarter + offset, this.year);
    } else {
        if ((offset == -1 && this.year > boundaryYear) || (offset == 1 && this.year < boundaryYear)) {
            result = new Quarter(boundaryQuarter, this.year + offset);
        } else {
            result = null;
        }
    }
    return result;
}
```

**2. Method Calls Replacing Clones:**  

**For `previous` Method:**  
```java
public RegularTimePeriod previous() {
    return getRelativeQuarter(-1, 1900, LAST_QUARTER);
}
```

**For `next` Method:**  
```java
public RegularTimePeriod next() {
    return getRelativeQuarter(1, 9999, FIRST_QUARTER);
}
```",Type-3
824-1-2,src,org.jfree.chart.block,CenterArrangement,arrangeRR,207,219,src,org.jfree.chart.block,CenterArrangement,arrangeRN,257,268,Type 2,"**Code Snippet 1 - Method: arrangeRR (Lines: 207-219)**  
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    // first arrange without constraints, and see if this fits within
    // the required ranges...
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;  // TODO: we didn't check the height yet
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().getUpperBound());
        return arrangeFR(container, g2, c);
    }
}
```

**Code Snippet 2 - Method: arrangeRN (Lines: 257-268)**  
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    // first arrange without constraints, then see if the width fits
    // within the required range...if not, call arrangeFN() at max width
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().getUpperBound());
        return arrangeFN(container, g2, c);
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Size2D arrangeWithWidthRange(BlockContainer container, Graphics2D g2,
                                     RectangleConstraint constraint, 
                                     boolean useArrangeFR) {
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().getUpperBound());
        return useArrangeFR ? arrangeFR(container, g2, c) : arrangeFN(container, g2, c);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `arrangeRR`:**  
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithWidthRange(container, g2, constraint, true);
}
```

**For `arrangeRN`:**  
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithWidthRange(container, g2, constraint, false);
}
```",Type-3
824-4-5,src,org.jfree.chart.block,FlowArrangement,arrangeRR,278,291,src,org.jfree.chart.block,FlowArrangement,arrangeRN,330,342,Type 2,"**Code Snippet 1: Method: arrangeRR (Lines: 278-291)**  
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    // first arrange without constraints, and see if this fits within
    // the required ranges...
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;  // TODO: we didn't check the height yet
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return arrangeFR(container, g2, c);
    }
}
```

**Code Snippet 2: Method: arrangeRN (Lines: 330-342)**  
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    // first arrange without constraints, then see if the width fits
    // within the required range...if not, call arrangeFN() at max width
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return arrangeFN(container, g2, c);
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Size2D arrangeWithWidthConstraint(BlockContainer container, Graphics2D g2,
                                          RectangleConstraint constraint, 
                                          boolean useArrangeFR) {
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return useArrangeFR ? arrangeFR(container, g2, c) : arrangeFN(container, g2, c);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `arrangeRR`:**  
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithWidthConstraint(container, g2, constraint, true);
}
```

**For `arrangeRN`:**  
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithWidthConstraint(container, g2, constraint, false);
}
```",Type-3
849-1-2,src,org.jfree.data.gantt,TaskSeriesCollection,getStartValue,517,530,src,org.jfree.data.gantt,TaskSeriesCollection,getEndValue,557,570,Type 2,"**Code Snippet 1 - Method: getStartValue (Lines: 517-530)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = new Long(duration.getStart().getTime());
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: getEndValue (Lines: 557-570)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = new Long(duration.getEnd().getTime());
        }
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getTaskValue(Comparable rowKey, Comparable columnKey, boolean isStart) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = isStart ? new Long(duration.getStart().getTime()) : new Long(duration.getEnd().getTime());
        }
    }
    return result;
}
```

**2. Method Calls Replacing Clones:**  

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    return getTaskValue(rowKey, columnKey, true);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    return getTaskValue(rowKey, columnKey, false);
}
```",Type-2
858-1-2,src,org.jfree.chart.renderer,AbstractRenderer,getSeriesPositiveItemLabelPosition,2620,2633,src,org.jfree.chart.renderer,AbstractRenderer,getSeriesNegativeItemLabelPosition,2800,2813,Type 2,"**Code Snippet 1:**
```java
public ItemLabelPosition getSeriesPositiveItemLabelPosition(int series) {

    // return the override, if there is one...
    if (this.positiveItemLabelPosition != null) {
        return this.positiveItemLabelPosition;
    }

    // otherwise look up the position table
    ItemLabelPosition position = (ItemLabelPosition)
        this.positiveItemLabelPositionList.get(series);
    if (position == null) {
        position = this.basePositiveItemLabelPosition;
    }
    return position;

}
```

**Code Snippet 2:**
```java
public ItemLabelPosition getSeriesNegativeItemLabelPosition(int series) {

    // return the override, if there is one...
    if (this.negativeItemLabelPosition != null) {
        return this.negativeItemLabelPosition;
    }

    // otherwise look up the position list
    ItemLabelPosition position = (ItemLabelPosition)
        this.negativeItemLabelPositionList.get(series);
    if (position == null) {
        position = this.baseNegativeItemLabelPosition;
    }
    return position;

}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**
```java
private ItemLabelPosition getSeriesItemLabelPosition(int series, 
        ItemLabelPosition overridePosition, ObjectList positionList, 
        ItemLabelPosition basePosition) {

    // return the override, if there is one...
    if (overridePosition != null) {
        return overridePosition;
    }

    // otherwise look up the position list
    ItemLabelPosition position = (ItemLabelPosition) positionList.get(series);
    if (position == null) {
        position = basePosition;
    }
    return position;
}
```

**2. Method Calls Replacing the Clones:**

**For `getSeriesPositiveItemLabelPosition`:**
```java
public ItemLabelPosition getSeriesPositiveItemLabelPosition(int series) {
    return getSeriesItemLabelPosition(series, this.positiveItemLabelPosition, 
            this.positiveItemLabelPositionList, this.basePositiveItemLabelPosition);
}
```

**For `getSeriesNegativeItemLabelPosition`:**
```java
public ItemLabelPosition getSeriesNegativeItemLabelPosition(int series) {
    return getSeriesItemLabelPosition(series, this.negativeItemLabelPosition, 
            this.negativeItemLabelPositionList, this.baseNegativeItemLabelPosition);
}
```",Type-2
858-3-4,src,org.jfree.chart.renderer.category,AbstractCategoryItemRenderer,getSeriesItemLabelGenerator,303,316,src,org.jfree.chart.renderer.category,AbstractCategoryItemRenderer,getSeriesItemURLGenerator,518,531,Type 2,"**Code Snippet 1: Method: getSeriesItemLabelGenerator (Lines: 303-316)**  
```java
public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {

    // return the generator for ALL series, if there is one...
    if (this.itemLabelGenerator != null) {
        return this.itemLabelGenerator;
    }

    // otherwise look up the generator table
    CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)
        this.itemLabelGeneratorList.get(series);
    if (generator == null) {
        generator = this.baseItemLabelGenerator;
    }
    return generator;

}
```

**Code Snippet 2: Method: getSeriesItemURLGenerator (Lines: 518-531)**  
```java
public CategoryURLGenerator getSeriesItemURLGenerator(int series) {

    // return the generator for ALL series, if there is one...
    if (this.itemURLGenerator != null) {
        return this.itemURLGenerator;
    }

    // otherwise look up the generator table
    CategoryURLGenerator generator
        = (CategoryURLGenerator) this.itemURLGeneratorList.get(series);
    if (generator == null) {
        generator = this.baseItemURLGenerator;
    }
    return generator;

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getSeriesGenerator(int series, T globalGenerator, ObjectList generatorList, T baseGenerator) {
    // return the generator for ALL series, if there is one...
    if (globalGenerator != null) {
        return globalGenerator;
    }

    // otherwise look up the generator table
    T generator = (T) generatorList.get(series);
    if (generator == null) {
        generator = baseGenerator;
    }
    return generator;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getSeriesItemLabelGenerator`:**  
```java
public CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series) {
    return getSeriesGenerator(series, this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator);
}
```

**For `getSeriesItemURLGenerator`:**  
```java
public CategoryURLGenerator getSeriesItemURLGenerator(int series) {
    return getSeriesGenerator(series, this.itemURLGenerator, this.itemURLGeneratorList, this.baseItemURLGenerator);
}
```",Type-2
858-5-6,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,getItemLabelGenerator,320,332,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,getToolTipGenerator,425,437,Type 2,"**Code Snippet 1: Method: getItemLabelGenerator (Lines: 320-332)**  
```java
public XYItemLabelGenerator getItemLabelGenerator(int series, int item) {
    // return the generator for ALL series, if there is one...
    if (this.itemLabelGenerator != null) {
        return this.itemLabelGenerator;
    }

    // otherwise look up the generator table
    XYItemLabelGenerator generator
        = (XYItemLabelGenerator) this.itemLabelGeneratorList.get(series);
    if (generator == null) {
        generator = this.baseItemLabelGenerator;
    }
    return generator;
}
```

**Code Snippet 2: Method: getToolTipGenerator (Lines: 425-437)**  
```java
public XYToolTipGenerator getToolTipGenerator(int series, int item) {
    // return the generator for ALL series, if there is one...
    if (this.toolTipGenerator != null) {
        return this.toolTipGenerator;
    }

    // otherwise look up the generator table
    XYToolTipGenerator generator
            = (XYToolTipGenerator) this.toolTipGeneratorList.get(series);
    if (generator == null) {
        generator = this.baseToolTipGenerator;
    }
    return generator;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private <T> T getGenerator(T overrideGenerator, ObjectList generatorList, T baseGenerator, int series) {
    // return the generator for ALL series, if there is one...
    if (overrideGenerator != null) {
        return overrideGenerator;
    }

    // otherwise look up the generator table
    T generator = (T) generatorList.get(series);
    if (generator == null) {
        generator = baseGenerator;
    }
    return generator;
}
```

**2. Method Calls:**  

**For `getItemLabelGenerator`:**  
```java
public XYItemLabelGenerator getItemLabelGenerator(int series, int item) {
    return getGenerator(this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator, series);
}
```

**For `getToolTipGenerator`:**  
```java
public XYToolTipGenerator getToolTipGenerator(int series, int item) {
    return getGenerator(this.toolTipGenerator, this.toolTipGeneratorList, this.baseToolTipGenerator, series);
}
```",Type-2
862-1-2,src,org.jfree.chart.plot,Plot,setBackgroundPaint,548,561,src,org.jfree.chart.plot,Plot,setOutlineStroke,768,781,Type 2,"**Code Snippet 1: setBackgroundPaint (Lines 548-561)**  
```java
public void setBackgroundPaint(Paint paint) {

    if (paint == null) {
        if (this.backgroundPaint != null) {
            this.backgroundPaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.backgroundPaint != null) {
            if (this.backgroundPaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.backgroundPaint = paint;
        fireChangeEvent();
    }

}
```

**Code Snippet 2: setOutlineStroke (Lines 768-781)**  
```java
public void setOutlineStroke(Stroke stroke) {
    if (stroke == null) {
        if (this.outlineStroke != null) {
            this.outlineStroke = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlineStroke != null) {
            if (this.outlineStroke.equals(stroke)) {
                return;  // nothing to do
            }
        }
        this.outlineStroke = stroke;
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setProperty(T newValue, T currentValue, Consumer<T> setter, Runnable changeNotifier) {
    if (newValue == null) {
        if (currentValue != null) {
            setter.accept(null);
            changeNotifier.run();
        }
    } else {
        if (currentValue != null && currentValue.equals(newValue)) {
            return; // nothing to do
        }
        setter.accept(newValue);
        changeNotifier.run();
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setBackgroundPaint`:**  
```java
public void setBackgroundPaint(Paint paint) {
    setProperty(paint, this.backgroundPaint, value -> this.backgroundPaint = value, this::fireChangeEvent);
}
```

**For `setOutlineStroke`:**  
```java
public void setOutlineStroke(Stroke stroke) {
    setProperty(stroke, this.outlineStroke, value -> this.outlineStroke = value, this::fireChangeEvent);
}
```",Type-2
862-1-3,src,org.jfree.chart.plot,Plot,setBackgroundPaint,548,561,src,org.jfree.chart.plot,Plot,setOutlinePaint,806,819,Type 2,"**Code Snippet 1: setBackgroundPaint (Lines 548-561)**  
```java
public void setBackgroundPaint(Paint paint) {

    if (paint == null) {
        if (this.backgroundPaint != null) {
            this.backgroundPaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.backgroundPaint != null) {
            if (this.backgroundPaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.backgroundPaint = paint;
        fireChangeEvent();
    }

}
```

**Code Snippet 2: setOutlinePaint (Lines 806-819)**  
```java
public void setOutlinePaint(Paint paint) {
    if (paint == null) {
        if (this.outlinePaint != null) {
            this.outlinePaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlinePaint != null) {
            if (this.outlinePaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.outlinePaint = paint;
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for variable names).","**1. Extracted Method:**  
```java
private void setPaint(Paint newPaint, Paint currentPaint, Consumer<Paint> paintSetter) {
    if (newPaint == null) {
        if (currentPaint != null) {
            paintSetter.accept(null);
            fireChangeEvent();
        }
    } else {
        if (currentPaint != null && currentPaint.equals(newPaint)) {
            return;  // nothing to do
        }
        paintSetter.accept(newPaint);
        fireChangeEvent();
    }
}
```

**2. Method Calls:**  

**For `setBackgroundPaint`:**  
```java
public void setBackgroundPaint(Paint paint) {
    setPaint(paint, this.backgroundPaint, newPaint -> this.backgroundPaint = newPaint);
}
```

**For `setOutlinePaint`:**  
```java
public void setOutlinePaint(Paint paint) {
    setPaint(paint, this.outlinePaint, newPaint -> this.outlinePaint = newPaint);
}
```",Type-1
862-2-3,src,org.jfree.chart.plot,Plot,setOutlineStroke,768,781,src,org.jfree.chart.plot,Plot,setOutlinePaint,806,819,Type 2,"**Code Snippet 1: Method: setOutlineStroke (Lines: 768-781)**  
```java
public void setOutlineStroke(Stroke stroke) {
    if (stroke == null) {
        if (this.outlineStroke != null) {
            this.outlineStroke = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlineStroke != null) {
            if (this.outlineStroke.equals(stroke)) {
                return;  // nothing to do
            }
        }
        this.outlineStroke = stroke;
        fireChangeEvent();
    }
}
```

**Code Snippet 2: Method: setOutlinePaint (Lines: 806-819)**  
```java
public void setOutlinePaint(Paint paint) {
    if (paint == null) {
        if (this.outlinePaint != null) {
            this.outlinePaint = null;
            fireChangeEvent();
        }
    }
    else {
        if (this.outlinePaint != null) {
            if (this.outlinePaint.equals(paint)) {
                return;  // nothing to do
            }
        }
        this.outlinePaint = paint;
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setOutlineAttribute(T attribute, T newValue, Consumer<T> setter) {
    if (newValue == null) {
        if (attribute != null) {
            setter.accept(null);
            fireChangeEvent();
        }
    } else {
        if (attribute != null && attribute.equals(newValue)) {
            return; // nothing to do
        }
        setter.accept(newValue);
        fireChangeEvent();
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setOutlineStroke`:**  
```java
public void setOutlineStroke(Stroke stroke) {
    setOutlineAttribute(this.outlineStroke, stroke, value -> this.outlineStroke = value);
}
```

**For `setOutlinePaint`:**  
```java
public void setOutlinePaint(Paint paint) {
    setOutlineAttribute(this.outlinePaint, paint, value -> this.outlinePaint = value);
}
```",Type-2
874-1-2,src,org.jfree.data.time,Month,previous,228,241,src,org.jfree.data.time,Month,next,249,262,Type 2,"**Code Snippet 1 - Method: previous (Lines: 228-241)**  
```java
public RegularTimePeriod previous() {
    Month result;
    if (this.month != MonthConstants.JANUARY) {
        result = new Month(this.month - 1, this.year);
    }
    else {
        if (this.year > 1900) {
            result = new Month(MonthConstants.DECEMBER, this.year - 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: next (Lines: 249-262)**  
```java
public RegularTimePeriod next() {
    Month result;
    if (this.month != MonthConstants.DECEMBER) {
        result = new Month(this.month + 1, this.year);
    }
    else {
        if (this.year < 9999) {
            result = new Month(MonthConstants.JANUARY, this.year + 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentMonth(int month, int year, boolean isNext) {
    Month result;
    if (isNext) {
        if (month != MonthConstants.DECEMBER) {
            result = new Month(month + 1, year);
        } else {
            if (year < 9999) {
                result = new Month(MonthConstants.JANUARY, year + 1);
            } else {
                result = null;
            }
        }
    } else {
        if (month != MonthConstants.JANUARY) {
            result = new Month(month - 1, year);
        } else {
            if (year > 1900) {
                result = new Month(MonthConstants.DECEMBER, year - 1);
            } else {
                result = null;
            }
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentMonth(this.month, this.year, false);
}
```

**For `next` method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentMonth(this.month, this.year, true);
}
```",Type-3
875-1-2,src,org.jfree.data.time,Millisecond,previous,231,244,src,org.jfree.data.time,Millisecond,next,253,265,Type 2,"**Code Snippet 1 - Method: previous (Lines: 231-244)**  
```java
public RegularTimePeriod previous() {

    RegularTimePeriod result = null;

    if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond - 1, getSecond());
    }
    else {
        Second previous = (Second) getSecond().previous();
        if (previous != null) {
            result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);
        }
    }
    return result;

}
```

**Code Snippet 2 - Method: next (Lines: 253-265)**  
```java
public RegularTimePeriod next() {

    RegularTimePeriod result = null;
    if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond + 1, getSecond());
    }
    else {
        Second next = (Second) getSecond().next();
        if (next != null) {
            result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next);
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentMillisecond(int millisecondBoundary, int millisecondDelta, boolean isNext) {
    RegularTimePeriod result = null;

    if (this.millisecond != millisecondBoundary) {
        result = new Millisecond(this.millisecond + millisecondDelta, getSecond());
    } else {
        Second adjacent = isNext ? (Second) getSecond().next() : (Second) getSecond().previous();
        if (adjacent != null) {
            result = new Millisecond(isNext ? FIRST_MILLISECOND_IN_SECOND : LAST_MILLISECOND_IN_SECOND, adjacent);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `previous` Method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentMillisecond(FIRST_MILLISECOND_IN_SECOND, -1, false);
}
```

**For `next` Method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentMillisecond(LAST_MILLISECOND_IN_SECOND, 1, true);
}
```",Type-3
875-3-4,src,org.jfree.data.time,Second,previous,226,238,src,org.jfree.data.time,Second,next,247,259,Type 2,"**Code Snippet 1 - Method: previous (Lines: 226-238)**  
```java
public RegularTimePeriod previous() {
        
    Second result = null;
    if (this.second != FIRST_SECOND_IN_MINUTE) {
        result = new Second(this.second - 1, getMinute());
    }
    else {
        Minute previous = (Minute) getMinute().previous();
        if (previous != null) {
            result = new Second(LAST_SECOND_IN_MINUTE, previous);
        }
    }
    return result;
        
}
```

**Code Snippet 2 - Method: next (Lines: 247-259)**  
```java
public RegularTimePeriod next() {
        
    Second result = null;
    if (this.second != LAST_SECOND_IN_MINUTE) {
        result = new Second(this.second + 1, getMinute());
    }
    else {
        Minute next = (Minute) getMinute().next();
        if (next != null) {
            result = new Second(FIRST_SECOND_IN_MINUTE, next);
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private RegularTimePeriod calculateAdjacentSecond(int boundarySecond, int increment, Minute adjacentMinute) {
    Second result = null;
    if (this.second != boundarySecond) {
        result = new Second(this.second + increment, getMinute());
    } else {
        if (adjacentMinute != null) {
            result = new Second(boundarySecond, adjacentMinute);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` method:**  
```java
public RegularTimePeriod previous() {
    return calculateAdjacentSecond(FIRST_SECOND_IN_MINUTE, -1, (Minute) getMinute().previous());
}
```

**For `next` method:**  
```java
public RegularTimePeriod next() {
    return calculateAdjacentSecond(LAST_SECOND_IN_MINUTE, 1, (Minute) getMinute().next());
}
```",Type-3
876-2-3,src,org.jfree.data.time,Quarter,previous,246,259,src,org.jfree.data.time,Quarter,next,267,280,Type 2,"**Code Snippet 1 - Method: previous (Lines: 246-259)**  
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
public RegularTimePeriod previous() {
    Quarter result;
    if (this.quarter > FIRST_QUARTER) {
        result = new Quarter(this.quarter - 1, this.year);
    }
    else {
        if (this.year > 1900) {
            result = new Quarter(LAST_QUARTER, this.year - 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: next (Lines: 267-280)**  
```java
/**
 * Returns the quarter following this one.
 *
 * @return The quarter following this one (or null if this is Q4 9999).
 */
public RegularTimePeriod next() {
    Quarter result;
    if (this.quarter < LAST_QUARTER) {
        result = new Quarter(this.quarter + 1, this.year);
    }
    else {
        if (this.year < 9999) {
            result = new Quarter(FIRST_QUARTER, this.year + 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns the quarter relative to this one based on the offset.
 *
 * @param offset  the offset (-1 for previous, +1 for next).
 * @param boundaryYear  the boundary year (1900 for previous, 9999 for next).
 * @param boundaryQuarter  the boundary quarter (LAST_QUARTER for previous, FIRST_QUARTER for next).
 * @return The quarter relative to this one (or null if it exceeds the boundary).
 */
private RegularTimePeriod getRelativeQuarter(int offset, int boundaryYear, int boundaryQuarter) {
    Quarter result;
    if ((offset == -1 && this.quarter > FIRST_QUARTER) || (offset == 1 && this.quarter < LAST_QUARTER)) {
        result = new Quarter(this.quarter + offset, this.year);
    } else {
        if ((offset == -1 && this.year > boundaryYear) || (offset == 1 && this.year < boundaryYear)) {
            result = new Quarter(boundaryQuarter, this.year + offset);
        } else {
            result = null;
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` Method:**  
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
public RegularTimePeriod previous() {
    return getRelativeQuarter(-1, 1900, LAST_QUARTER);
}
```

**For `next` Method:**  
```java
/**
 * Returns the quarter following this one.
 *
 * @return The quarter following this one (or null if this is Q4 9999).
 */
public RegularTimePeriod next() {
    return getRelativeQuarter(1, 9999, FIRST_QUARTER);
}
```",Type-3
891-1-2,src,org.jfree.chart.plot,CategoryPlot,getDomainAxis,611,623,src,org.jfree.chart.plot,CategoryPlot,getRangeAxis,892,904,Type 2,"```java
// Code snippet 1 - Method: getDomainAxis
public CategoryAxis getDomainAxis() {
    return getDomainAxis(0);
}

public CategoryAxis getDomainAxis(int index) {
    CategoryAxis result = null;
    if (index < this.domainAxes.size()) {
        result = (CategoryAxis) this.domainAxes.get(index);
    }
    if (result == null) {
        Plot parent = getParent();
        if (parent instanceof CategoryPlot) {
            CategoryPlot cp = (CategoryPlot) parent;
            result = cp.getDomainAxis(index);
        }
    }
    return result;
}
```

```java
// Code snippet 2 - Method: getRangeAxis
public ValueAxis getRangeAxis() {
    return getRangeAxis(0);
}

public ValueAxis getRangeAxis(int index) {
    ValueAxis result = null;
    if (index < this.rangeAxes.size()) {
        result = (ValueAxis) this.rangeAxes.get(index);
    }
    if (result == null) {
        Plot parent = getParent();
        if (parent instanceof CategoryPlot) {
            CategoryPlot cp = (CategoryPlot) parent;
            result = cp.getRangeAxis(index);
        }
    }
    return result;
}
```

Clone type: **Type-3 (Mostly similar but with some different statements)**","```java
// 1. The extracted method
private <T> T getAxis(int index, List<T> axes, Function<Plot, T> parentAxisGetter) {
    T result = null;
    if (index < axes.size()) {
        result = axes.get(index);
    }
    if (result == null) {
        Plot parent = getParent();
        if (parent instanceof CategoryPlot) {
            result = parentAxisGetter.apply(parent);
        }
    }
    return result;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// For getDomainAxis
public CategoryAxis getDomainAxis() {
    return getDomainAxis(0);
}

public CategoryAxis getDomainAxis(int index) {
    return getAxis(index, this.domainAxes, p -> ((CategoryPlot) p).getDomainAxis(index));
}

// For getRangeAxis
public ValueAxis getRangeAxis() {
    return getRangeAxis(0);
}

public ValueAxis getRangeAxis(int index) {
    return getAxis(index, this.rangeAxes, p -> ((CategoryPlot) p).getRangeAxis(index));
}
```",Type-3
891-3-4,src,org.jfree.chart.plot,XYPlot,getDomainAxis,692,704,src,org.jfree.chart.plot,XYPlot,getRangeAxis,1056,1068,Type 2,"```java
// Code snippet 1 - Method: getDomainAxis
public ValueAxis getDomainAxis() {
    return getDomainAxis(0);
}
```

```java
// Code snippet 2 - Method: getRangeAxis
public ValueAxis getRangeAxis() {
    return getRangeAxis(0);
}
```

Clone Type: **Type-1** (Identical except for whitespace, comments, layout)","```java
// 1. The extracted method
private ValueAxis getAxis(int index, boolean isDomain) {
    return isDomain ? getDomainAxis(index) : getRangeAxis(index);
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Refactored Code snippet 1 - Method: getDomainAxis
public ValueAxis getDomainAxis() {
    return getAxis(0, true);
}

// Refactored Code snippet 2 - Method: getRangeAxis
public ValueAxis getRangeAxis() {
    return getAxis(0, false);
}
```",Type-1
894-1-2,src,org.jfree.chart.editor,DefaultAxisEditor,attemptLabelFontSelection,411,421,src,org.jfree.chart.editor,DefaultAxisEditor,attemptTickLabelFontSelection,443,454,Type 2,"**Code Snippet 1: Method: attemptLabelFontSelection (Lines: 411-421)**  
```java
private void attemptLabelFontSelection() {

    FontChooserPanel panel = new FontChooserPanel(this.labelFont);
    int result = JOptionPane.showConfirmDialog(this, panel,
        localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        this.labelFont = panel.getSelectedFont();
        this.labelFontField.setText(
            this.labelFont.getFontName() + "" "" + this.labelFont.getSize()
        );
    }

}
```

**Code Snippet 2: Method: attemptTickLabelFontSelection (Lines: 443-454)**  
```java
public void attemptTickLabelFontSelection() {

    FontChooserPanel panel = new FontChooserPanel(this.tickLabelFont);
    int result = JOptionPane.showConfirmDialog(this, panel,
        localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        this.tickLabelFont = panel.getSelectedFont();
        this.tickLabelFontField.setText(
            this.tickLabelFont.getFontName() + "" ""
            + this.tickLabelFont.getSize()
        );
    }

}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private Font handleFontSelection(Font currentFont, JTextField fontField) {
    FontChooserPanel panel = new FontChooserPanel(currentFont);
    int result = JOptionPane.showConfirmDialog(this, panel,
        localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        Font selectedFont = panel.getSelectedFont();
        fontField.setText(selectedFont.getFontName() + "" "" + selectedFont.getSize());
        return selectedFont;
    }
    return currentFont;
}
```

**2. Method Calls Replacing the Clones:**  

**For `attemptLabelFontSelection`:**  
```java
private void attemptLabelFontSelection() {
    this.labelFont = handleFontSelection(this.labelFont, this.labelFontField);
}
```

**For `attemptTickLabelFontSelection`:**  
```java
public void attemptTickLabelFontSelection() {
    this.tickLabelFont = handleFontSelection(this.tickLabelFont, this.tickLabelFontField);
}
```",Type-2
894-1-3,src,org.jfree.chart.editor,DefaultAxisEditor,attemptLabelFontSelection,411,421,src,org.jfree.chart.editor,DefaultTitleEditor,attemptFontSelection,223,235,Type 2,"### Code Snippet 1: `attemptLabelFontSelection` (from `DefaultAxisEditor.java`)

```java
/**
 * Presents a font selection dialog to the user.
 */
private void attemptLabelFontSelection() {

    FontChooserPanel panel = new FontChooserPanel(this.labelFont);
    int result = JOptionPane.showConfirmDialog(this, panel,
        localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        this.labelFont = panel.getSelectedFont();
        this.labelFontField.setText(
            this.labelFont.getFontName() + "" "" + this.labelFont.getSize()
        );
    }

}
```

---

### Code Snippet 2: `attemptFontSelection` (from `DefaultTitleEditor.java`)

```java
/**
 * Presents a font selection dialog to the user.
 */
public void attemptFontSelection() {

    FontChooserPanel panel = new FontChooserPanel(this.titleFont);
    int result = 
        JOptionPane.showConfirmDialog(
            this, panel, localizationResources.getString(""Font_Selection""),
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE
        );

    if (result == JOptionPane.OK_OPTION) {
        this.titleFont = panel.getSelectedFont();
        this.fontfield.setText(
            this.titleFont.getFontName() + "" "" + this.titleFont.getSize()
        );
    }
}
```

---

### Clone Type:
These two code snippets are **Type-2 Clones** because they are structurally identical but differ in variable names (`labelFont` vs. `titleFont`, `labelFontField` vs. `fontfield`) and minor contextual differences (e.g., access modifiers: `private` vs. `public`).","### 1. Extracted Method (to be placed in the common superclass)

```java
/**
 * Presents a font selection dialog to the user and updates the font and its display field.
 *
 * @param currentFont  the current font to display in the dialog.
 * @param fontField    the text field to update with the selected font.
 * @return The selected font, or the original font if no selection was made.
 */
protected Font presentFontSelectionDialog(Font currentFont, JTextField fontField) {
    FontChooserPanel panel = new FontChooserPanel(currentFont);
    int result = JOptionPane.showConfirmDialog(
        this, panel, localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE
    );

    if (result == JOptionPane.OK_OPTION) {
        Font selectedFont = panel.getSelectedFont();
        fontField.setText(selectedFont.getFontName() + "" "" + selectedFont.getSize());
        return selectedFont;
    }
    return currentFont;
}
```

---

### 2. Refactored Method Calls

#### In `DefaultAxisEditor.java`

```java
/**
 * Presents a font selection dialog to the user.
 */
private void attemptLabelFontSelection() {
    this.labelFont = presentFontSelectionDialog(this.labelFont, this.labelFontField);
}
```

---

#### In `DefaultTitleEditor.java`

```java
/**
 * Presents a font selection dialog to the user.
 */
public void attemptFontSelection() {
    this.titleFont = presentFontSelectionDialog(this.titleFont, this.fontfield);
}
```",Type-2
894-2-3,src,org.jfree.chart.editor,DefaultAxisEditor,attemptTickLabelFontSelection,443,454,src,org.jfree.chart.editor,DefaultTitleEditor,attemptFontSelection,223,235,Type 2,"### Code Snippet 1: `attemptTickLabelFontSelection` (from `DefaultAxisEditor.java`)

```java
/**
 * Presents a tick label font selection dialog to the user.
 */
public void attemptTickLabelFontSelection() {

    FontChooserPanel panel = new FontChooserPanel(this.tickLabelFont);
    int result = JOptionPane.showConfirmDialog(this, panel,
        localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

    if (result == JOptionPane.OK_OPTION) {
        this.tickLabelFont = panel.getSelectedFont();
        this.tickLabelFontField.setText(
            this.tickLabelFont.getFontName() + "" ""
            + this.tickLabelFont.getSize()
        );
    }

}
```

---

### Code Snippet 2: `attemptFontSelection` (from `DefaultTitleEditor.java`)

```java
/**
 * Presents a font selection dialog to the user.
 */
public void attemptFontSelection() {

    FontChooserPanel panel = new FontChooserPanel(this.titleFont);
    int result = 
        JOptionPane.showConfirmDialog(
            this, panel, localizationResources.getString(""Font_Selection""),
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE
        );

    if (result == JOptionPane.OK_OPTION) {
        this.titleFont = panel.getSelectedFont();
        this.fontfield.setText(
            this.titleFont.getFontName() + "" "" + this.titleFont.getSize()
        );
    }
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`tickLabelFont` vs. `titleFont`, `tickLabelFontField` vs. `fontfield`) and the context in which they are used.","### 1. Extracted Method (to be placed in the superclass)

```java
/**
 * Presents a font selection dialog to the user.
 *
 * @param currentFont The current font to display in the dialog.
 * @param fontField The text field to update with the selected font.
 */
protected void presentFontSelectionDialog(Font currentFont, JTextField fontField) {
    FontChooserPanel panel = new FontChooserPanel(currentFont);
    int result = JOptionPane.showConfirmDialog(
        this, panel, localizationResources.getString(""Font_Selection""),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE
    );

    if (result == JOptionPane.OK_OPTION) {
        Font selectedFont = panel.getSelectedFont();
        fontField.setText(selectedFont.getFontName() + "" "" + selectedFont.getSize());
        updateFontReference(selectedFont);
    }
}

/**
 * Updates the font reference in the subclass.
 *
 * @param selectedFont The font selected by the user.
 */
protected abstract void updateFontReference(Font selectedFont);
```

---

### 2. Refactored Method Calls

#### In `DefaultAxisEditor.java`

```java
@Override
protected void updateFontReference(Font selectedFont) {
    this.tickLabelFont = selectedFont;
}

/**
 * Presents a tick label font selection dialog to the user.
 */
public void attemptTickLabelFontSelection() {
    presentFontSelectionDialog(this.tickLabelFont, this.tickLabelFontField);
}
```

---

#### In `DefaultTitleEditor.java`

```java
@Override
protected void updateFontReference(Font selectedFont) {
    this.titleFont = selectedFont;
}

/**
 * Presents a font selection dialog to the user.
 */
public void attemptFontSelection() {
    presentFontSelectionDialog(this.titleFont, this.fontfield);
}
```",Type-2
896-1-2,src,org.jfree.chart.block,AbstractBlock,trimToContentWidth,477,489,src,org.jfree.chart.block,AbstractBlock,trimToContentHeight,492,504,Type 2,"**Code Snippet 1 - Method: trimToContentWidth (Lines: 477-489)**  
```java
protected double trimToContentWidth(double fixedWidth) {
    double result = this.margin.trimWidth(fixedWidth);
    result = this.frame.getInsets().trimWidth(result);
    result = this.padding.trimWidth(result);
    return Math.max(result, 0.0);
}
```

**Code Snippet 2 - Method: trimToContentHeight (Lines: 492-504)**  
```java
protected double trimToContentHeight(double fixedHeight) {
    double result = this.margin.trimHeight(fixedHeight);
    result = this.frame.getInsets().trimHeight(result);
    result = this.padding.trimHeight(result);
    return Math.max(result, 0.0);
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
protected double trimToContentDimension(double fixedDimension, String dimensionType) {
    double result;
    if (""width"".equals(dimensionType)) {
        result = this.margin.trimWidth(fixedDimension);
        result = this.frame.getInsets().trimWidth(result);
        result = this.padding.trimWidth(result);
    } else if (""height"".equals(dimensionType)) {
        result = this.margin.trimHeight(fixedDimension);
        result = this.frame.getInsets().trimHeight(result);
        result = this.padding.trimHeight(result);
    } else {
        throw new IllegalArgumentException(""Invalid dimension type: "" + dimensionType);
    }
    return Math.max(result, 0.0);
}
```

**2. Method Calls Replacing the Clones:**  

**For `trimToContentWidth`:**  
```java
protected double trimToContentWidth(double fixedWidth) {
    return trimToContentDimension(fixedWidth, ""width"");
}
```

**For `trimToContentHeight`:**  
```java
protected double trimToContentHeight(double fixedHeight) {
    return trimToContentDimension(fixedHeight, ""height"");
}
```",Type-2
898-1-2,src,org.jfree.chart.plot,SpiderWebPlot,getSeriesOutlinePaint,781,791,src,org.jfree.chart.plot,SpiderWebPlot,getSeriesOutlineStroke,859,871,Type 2,"**Code Snippet 1: Method: getSeriesOutlinePaint (Lines: 781-791)**  
```java
public Paint getSeriesOutlinePaint(int series) {
    // return the override, if there is one...
    if (this.seriesOutlinePaint != null) {
        return this.seriesOutlinePaint;
    }
    // otherwise look up the paint list
    Paint result = this.seriesOutlinePaintList.getPaint(series);
    if (result == null) {
        result = this.baseSeriesOutlinePaint;
    }
    return result;
}
```

**Code Snippet 2: Method: getSeriesOutlineStroke (Lines: 859-871)**  
```java
public Stroke getSeriesOutlineStroke(int series) {
    // return the override, if there is one...
    if (this.seriesOutlineStroke != null) {
        return this.seriesOutlineStroke;
    }
    // otherwise look up the paint list
    Stroke result = this.seriesOutlineStrokeList.getStroke(series);
    if (result == null) {
        result = this.baseSeriesOutlineStroke;
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getSeriesAttribute(T override, AttributeList<T> attributeList, T baseAttribute, int series) {
    // return the override, if there is one...
    if (override != null) {
        return override;
    }
    // otherwise look up the attribute list
    T result = attributeList.getAttribute(series);
    if (result == null) {
        result = baseAttribute;
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getSeriesOutlinePaint`:**  
```java
public Paint getSeriesOutlinePaint(int series) {
    return getSeriesAttribute(this.seriesOutlinePaint, this.seriesOutlinePaintList, this.baseSeriesOutlinePaint, series);
}
```

**For `getSeriesOutlineStroke`:**  
```java
public Stroke getSeriesOutlineStroke(int series) {
    return getSeriesAttribute(this.seriesOutlineStroke, this.seriesOutlineStrokeList, this.baseSeriesOutlineStroke, series);
}
```",Type-2
899-1-2,src,org.jfree.data.gantt,TaskSeriesCollection,getStartValue,362,373,src,org.jfree.data.gantt,TaskSeriesCollection,getEndValue,399,410,Type 2,"**Code Snippet 1 - Method: getStartValue (Lines: 362-373)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = new Long(duration.getStart().getTime());
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: getEndValue (Lines: 399-410)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = new Long(duration.getEnd().getTime());
        }
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getTaskValue(Comparable rowKey, Comparable columnKey, boolean isStart) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = isStart ? new Long(duration.getStart().getTime()) : new Long(duration.getEnd().getTime());
        }
    }
    return result;
}
```

**2. Method Calls Replacing Clones:**  

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    return getTaskValue(rowKey, columnKey, true);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    return getTaskValue(rowKey, columnKey, false);
}
```",Type-2
899-1-3,src,org.jfree.data.gantt,TaskSeriesCollection,getStartValue,362,373,src,org.jfree.data.gantt,TaskSeriesCollection,getPercentComplete,597,609,Type 2,"**Code Snippet 1: Method: getStartValue (Lines: 362-373)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = new Long(duration.getStart().getTime());
        }
    }
    return result;
}
```

**Code Snippet 2: Method: getPercentComplete (Lines: 597-609)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        result = task.getPercentComplete();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getTaskProperty(Comparable rowKey, Comparable columnKey, String property) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        if (""start"".equals(property)) {
            TimePeriod duration = task.getDuration();
            if (duration != null) {
                result = new Long(duration.getStart().getTime());
            }
        } else if (""percentComplete"".equals(property)) {
            result = task.getPercentComplete();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    return getTaskProperty(rowKey, columnKey, ""start"");
}
```

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getTaskProperty(rowKey, columnKey, ""percentComplete"");
}
```",Type-3
899-2-3,src,org.jfree.data.gantt,TaskSeriesCollection,getEndValue,399,410,src,org.jfree.data.gantt,TaskSeriesCollection,getPercentComplete,597,609,Type 2,"**Code Snippet 1 - Method: getEndValue (Lines: 399-410)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        TimePeriod duration = task.getDuration();
        if (duration != null) {
            result = new Long(duration.getEnd().getTime());
        }
    }
    return result;
}
```

**Code Snippet 2 - Method: getPercentComplete (Lines: 597-609)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        result = task.getPercentComplete();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getTaskProperty(Comparable rowKey, Comparable columnKey, String property) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        if (""endValue"".equals(property)) {
            TimePeriod duration = task.getDuration();
            if (duration != null) {
                result = new Long(duration.getEnd().getTime());
            }
        } else if (""percentComplete"".equals(property)) {
            result = task.getPercentComplete();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    return getTaskProperty(rowKey, columnKey, ""endValue"");
}
```

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getTaskProperty(rowKey, columnKey, ""percentComplete"");
}
```",Type-3
900-1-2,src,org.jfree.chart.plot,CategoryPlot,getDomainMarkers,2042,2054,src,org.jfree.chart.plot,CategoryPlot,getRangeMarkers,2315,2327,Type 2,"**Code Snippet 1: getDomainMarkers (Lines: 2042-2054)**  
```java
public Collection getDomainMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundDomainMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundDomainMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

**Code Snippet 2: getRangeMarkers (Lines: 2315-2327)**  
```java
public Collection getRangeMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundRangeMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundRangeMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for variable names, literals, or comments).","**1. Extracted Method:**  
```java
private Collection getMarkers(Map markerMap, int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) markerMap.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) markerMap.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getDomainMarkers`:**  
```java
public Collection getDomainMarkers(int index, Layer layer) {
    return getMarkers(this.foregroundDomainMarkers, index, layer);
}
```

**For `getRangeMarkers`:**  
```java
public Collection getRangeMarkers(int index, Layer layer) {
    return getMarkers(this.foregroundRangeMarkers, index, layer);
}
```",Type-1
900-3-4,src,org.jfree.chart.plot,XYPlot,getDomainMarkers,3671,3683,src,org.jfree.chart.plot,XYPlot,getRangeMarkers,3697,3709,Type 2,"```java
// Code snippet 1 - Method: getDomainMarkers
public Collection getDomainMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundDomainMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundDomainMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

```java
// Code snippet 2 - Method: getRangeMarkers
public Collection getRangeMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundRangeMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundRangeMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

Clone Type: **Type-2 (Identical except for variable names, literals, types)**","```java
// 1. The extracted method
private Collection getMarkers(Map markerMap, int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) markerMap.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) markerMap.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}

// 2. The method calls that should replace the clones in the original files

// Refactored getDomainMarkers method
public Collection getDomainMarkers(int index, Layer layer) {
    return getMarkers(this.foregroundDomainMarkers, index, layer);
}

// Refactored getRangeMarkers method
public Collection getRangeMarkers(int index, Layer layer) {
    return getMarkers(this.foregroundRangeMarkers, index, layer);
}
```",Type-2
902-1-2,src,org.jfree.chart.axis,CategoryAxis,calculateTextBlockWidth,1121,1132,src,org.jfree.chart.axis,CategoryAxis,calculateTextBlockHeight,1145,1157,Type 2,"**Code Snippet 1: Method: calculateTextBlockWidth (Lines: 1121-1132)**  
```java
protected double calculateTextBlockWidth(TextBlock block,
        CategoryLabelPosition position, Graphics2D g2) {

    RectangleInsets insets = getTickLabelInsets();
    Size2D size = block.calculateDimensions(g2);
    Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(),
            size.getHeight());
    Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),
            0.0f, 0.0f);
    double w = rotatedBox.getBounds2D().getWidth() + insets.getLeft()
            + insets.getRight();
    return w;

}
```

**Code Snippet 2: Method: calculateTextBlockHeight (Lines: 1145-1157)**  
```java
protected double calculateTextBlockHeight(TextBlock block,
                                          CategoryLabelPosition position,
                                          Graphics2D g2) {

    RectangleInsets insets = getTickLabelInsets();
    Size2D size = block.calculateDimensions(g2);
    Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(),
            size.getHeight());
    Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),
            0.0f, 0.0f);
    double h = rotatedBox.getBounds2D().getHeight()
               + insets.getTop() + insets.getBottom();
    return h;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private double calculateTextBlockDimension(TextBlock block,
                                           CategoryLabelPosition position,
                                           Graphics2D g2,
                                           boolean isWidth) {

    RectangleInsets insets = getTickLabelInsets();
    Size2D size = block.calculateDimensions(g2);
    Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(),
            size.getHeight());
    Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),
            0.0f, 0.0f);
    double dimension = isWidth
            ? rotatedBox.getBounds2D().getWidth() + insets.getLeft() + insets.getRight()
            : rotatedBox.getBounds2D().getHeight() + insets.getTop() + insets.getBottom();
    return dimension;
}
```

**2. Method Calls Replacing the Clones:**  

**For `calculateTextBlockWidth`:**  
```java
protected double calculateTextBlockWidth(TextBlock block,
                                         CategoryLabelPosition position,
                                         Graphics2D g2) {
    return calculateTextBlockDimension(block, position, g2, true);
}
```

**For `calculateTextBlockHeight`:**  
```java
protected double calculateTextBlockHeight(TextBlock block,
                                          CategoryLabelPosition position,
                                          Graphics2D g2) {
    return calculateTextBlockDimension(block, position, g2, false);
}
```",Type-3
907-1-2,src,org.jfree.chart.plot,FastScatterPlot,zoomDomainAxes,775,787,src,org.jfree.chart.plot,FastScatterPlot,zoomRangeAxes,831,843,Type 2,"**Code Snippet 1: Method: zoomDomainAxes (Lines: 775-787)**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info, 
                           Point2D source) {
    this.domainAxis.resizeRange(factor);
}
```

**Code Snippet 2: Method: zoomRangeAxes (Lines: 831-843)**  
```java
public void zoomRangeAxes(double factor,
                          PlotRenderingInfo info, Point2D source) {
    this.rangeAxis.resizeRange(factor);
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. The Extracted Method:**  
```java
private void zoomAxes(ValueAxis axis, double factor) {
    axis.resizeRange(factor);
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `zoomDomainAxes`:**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info, 
                           Point2D source) {
    zoomAxes(this.domainAxis, factor);
}
```

**For `zoomRangeAxes`:**  
```java
public void zoomRangeAxes(double factor,
                          PlotRenderingInfo info, Point2D source) {
    zoomAxes(this.rangeAxis, factor);
}
```",Type-2
911-1-2,src,org.jfree.data.general,DatasetUtilities,createCategoryDataset,350,362,src,org.jfree.data.general,DatasetUtilities,createCategoryDataset,379,391,Type 2,"**Code Snippet 1:**
```java
public static CategoryDataset createCategoryDataset(String rowKeyPrefix,
                                                    String columnKeyPrefix,
                                                    double[][] data) {

    DefaultCategoryDataset result = new DefaultCategoryDataset();
    for (int r = 0; r < data.length; r++) {
        String rowKey = rowKeyPrefix + (r + 1);
        for (int c = 0; c < data[r].length; c++) {
            String columnKey = columnKeyPrefix + (c + 1);
            result.addValue(new Double(data[r][c]), rowKey, columnKey);
        }
    }
    return result;

}
```

**Code Snippet 2:**
```java
public static CategoryDataset createCategoryDataset(String rowKeyPrefix,
                                                    String columnKeyPrefix,
                                                    Number[][] data) {

    DefaultCategoryDataset result = new DefaultCategoryDataset();
    for (int r = 0; r < data.length; r++) {
        String rowKey = rowKeyPrefix + (r + 1);
        for (int c = 0; c < data[r].length; c++) {
            String columnKey = columnKeyPrefix + (c + 1);
            result.addValue(data[r][c], rowKey, columnKey);
        }
    }
    return result;

}
```

**Clone Type:** Type-2 (Identical except for variable types).","**1. Extracted Method:**
```java
private static <T> CategoryDataset createCategoryDatasetInternal(String rowKeyPrefix,
                                                                 String columnKeyPrefix,
                                                                 T[][] data) {

    DefaultCategoryDataset result = new DefaultCategoryDataset();
    for (int r = 0; r < data.length; r++) {
        String rowKey = rowKeyPrefix + (r + 1);
        for (int c = 0; c < data[r].length; c++) {
            String columnKey = columnKeyPrefix + (c + 1);
            if (data[r][c] instanceof Number) {
                result.addValue((Number) data[r][c], rowKey, columnKey);
            } else if (data[r][c] instanceof Double) {
                result.addValue(new Double((Double) data[r][c]), rowKey, columnKey);
            }
        }
    }
    return result;
}
```

**2. Method Calls:**

**For Code Snippet 1:**
```java
public static CategoryDataset createCategoryDataset(String rowKeyPrefix,
                                                    String columnKeyPrefix,
                                                    double[][] data) {
    return createCategoryDatasetInternal(rowKeyPrefix, columnKeyPrefix, data);
}
```

**For Code Snippet 2:**
```java
public static CategoryDataset createCategoryDataset(String rowKeyPrefix,
                                                    String columnKeyPrefix,
                                                    Number[][] data) {
    return createCategoryDatasetInternal(rowKeyPrefix, columnKeyPrefix, data);
}
```",Type-2
919-1-2,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,getItemLabelGenerator,320,332,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,getToolTipGenerator,425,437,Type 2,"**Code Snippet 1: getItemLabelGenerator (Lines 320-332)**  
```java
public XYItemLabelGenerator getItemLabelGenerator(int series, int item) {
    // return the generator for ALL series, if there is one...
    if (this.itemLabelGenerator != null) {
        return this.itemLabelGenerator;
    }

    // otherwise look up the generator table
    XYItemLabelGenerator generator
        = (XYItemLabelGenerator) this.itemLabelGeneratorList.get(series);
    if (generator == null) {
        generator = this.baseItemLabelGenerator;
    }
    return generator;
}
```

**Code Snippet 2: getToolTipGenerator (Lines 425-437)**  
```java
public XYToolTipGenerator getToolTipGenerator(int series, int item) {
    // return the generator for ALL series, if there is one...
    if (this.toolTipGenerator != null) {
        return this.toolTipGenerator;
    }

    // otherwise look up the generator table
    XYToolTipGenerator generator
            = (XYToolTipGenerator) this.toolTipGeneratorList.get(series);
    if (generator == null) {
        generator = this.baseToolTipGenerator;
    }
    return generator;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getGenerator(T overrideGenerator, ObjectList generatorList, T baseGenerator, int series) {
    if (overrideGenerator != null) {
        return overrideGenerator;
    }
    T generator = (T) generatorList.get(series);
    if (generator == null) {
        generator = baseGenerator;
    }
    return generator;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getItemLabelGenerator`:**  
```java
public XYItemLabelGenerator getItemLabelGenerator(int series, int item) {
    return getGenerator(this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator, series);
}
```

**For `getToolTipGenerator`:**  
```java
public XYToolTipGenerator getToolTipGenerator(int series, int item) {
    return getGenerator(this.toolTipGenerator, this.toolTipGeneratorList, this.baseToolTipGenerator, series);
}
```",Type-2
930-1-2,src,org.jfree.chart,ChartFactory,createCandlestickChart,1869,1881,src,org.jfree.chart,ChartFactory,createBoxAndWhiskerChart,2102,2114,Type 2,"**Code Snippet 1: Method: createCandlestickChart (Lines: 1869-1881)**  
```java
public static JFreeChart createCandlestickChart(String title,
                                                String timeAxisLabel,
                                                String valueAxisLabel,
                                                OHLCDataset dataset,
                                                boolean legend) {

    ValueAxis timeAxis = new DateAxis(timeAxisLabel);
    NumberAxis valueAxis = new NumberAxis(valueAxisLabel);
    XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);
    plot.setRenderer(new CandlestickRenderer());
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

**Code Snippet 2: Method: createBoxAndWhiskerChart (Lines: 2102-2114)**  
```java
public static JFreeChart createBoxAndWhiskerChart(String title,
                                                 String timeAxisLabel,
                                                 String valueAxisLabel,
                                                 BoxAndWhiskerXYDataset dataset,
                                                 boolean legend) {

    ValueAxis timeAxis = new DateAxis(timeAxisLabel);
    NumberAxis valueAxis = new NumberAxis(valueAxisLabel);
    valueAxis.setAutoRangeIncludesZero(false);
    XYBoxAndWhiskerRenderer renderer = new XYBoxAndWhiskerRenderer(10.0);
    XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private static JFreeChart createXYPlotChart(String title,
                                            String timeAxisLabel,
                                            String valueAxisLabel,
                                            XYDataset dataset,
                                            XYItemRenderer renderer,
                                            boolean legend) {

    ValueAxis timeAxis = new DateAxis(timeAxisLabel);
    NumberAxis valueAxis = new NumberAxis(valueAxisLabel);
    if (renderer instanceof XYBoxAndWhiskerRenderer) {
        valueAxis.setAutoRangeIncludesZero(false);
    }
    XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, renderer);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**  

**For `createCandlestickChart`:**  
```java
public static JFreeChart createCandlestickChart(String title,
                                                String timeAxisLabel,
                                                String valueAxisLabel,
                                                OHLCDataset dataset,
                                                boolean legend) {

    return createXYPlotChart(title, timeAxisLabel, valueAxisLabel, dataset, 
            new CandlestickRenderer(), legend);
}
```

**For `createBoxAndWhiskerChart`:**  
```java
public static JFreeChart createBoxAndWhiskerChart(String title,
                                                 String timeAxisLabel,
                                                 String valueAxisLabel,
                                                 BoxAndWhiskerXYDataset dataset,
                                                 boolean legend) {

    return createXYPlotChart(title, timeAxisLabel, valueAxisLabel, dataset, 
            new XYBoxAndWhiskerRenderer(10.0), legend);
}
```",Type-3
940-1-2,src,org.jfree.chart.renderer.xy,XYBlockRenderer,findDomainBounds,287,299,src,org.jfree.chart.renderer.xy,XYBlockRenderer,findRangeBounds,314,326,Type 2,"**Code Snippet 1: Method: findDomainBounds (Lines: 287-299)**  
```java
public Range findDomainBounds(XYDataset dataset) {
    if (dataset != null) {
        Range r = DatasetUtilities.findDomainBounds(dataset, false);
        if (r == null) {
            return null;
        }
        else {
            return new Range(r.getLowerBound() + this.xOffset,
                    r.getUpperBound() + this.blockWidth + this.xOffset);
        }
    }
    else {
        return null;
    }
}
```

**Code Snippet 2: Method: findRangeBounds (Lines: 314-326)**  
```java
public Range findRangeBounds(XYDataset dataset) {
    if (dataset != null) {
        Range r = DatasetUtilities.findRangeBounds(dataset, false);
        if (r == null) {
            return null;
        }
        else {
            return new Range(r.getLowerBound() + this.yOffset,
                    r.getUpperBound() + this.blockHeight + this.yOffset);
        }
    }
    else {
        return null;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Range findBounds(XYDataset dataset, boolean isDomain, double offset, double blockSize) {
    if (dataset != null) {
        Range r = isDomain 
                ? DatasetUtilities.findDomainBounds(dataset, false) 
                : DatasetUtilities.findRangeBounds(dataset, false);
        if (r == null) {
            return null;
        } else {
            return new Range(r.getLowerBound() + offset, r.getUpperBound() + blockSize + offset);
        }
    } else {
        return null;
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `findDomainBounds`:**  
```java
public Range findDomainBounds(XYDataset dataset) {
    return findBounds(dataset, true, this.xOffset, this.blockWidth);
}
```

**For `findRangeBounds`:**  
```java
public Range findRangeBounds(XYDataset dataset) {
    return findBounds(dataset, false, this.yOffset, this.blockHeight);
}
```",Type-2
944-1-2,src,org.jfree.chart.renderer.xy,XYBlockRenderer,findDomainBounds,288,299,src,org.jfree.chart.renderer.xy,XYBlockRenderer,findRangeBounds,315,326,Type 2,"**Code Snippet 1: Method: findDomainBounds (Lines: 288-299)**  
```java
public Range findDomainBounds(XYDataset dataset) {
    if (dataset != null) {
        Range r = DatasetUtilities.findDomainBounds(dataset, false);
        if (r == null) {
            return null;
        }
        else {
            return new Range(r.getLowerBound() + this.xOffset,
                    r.getUpperBound() + this.blockWidth + this.xOffset);
        }
    }
    else {
        return null;
    }
}
```

**Code Snippet 2: Method: findRangeBounds (Lines: 315-326)**  
```java
public Range findRangeBounds(XYDataset dataset) {
    if (dataset != null) {
        Range r = DatasetUtilities.findRangeBounds(dataset, false);
        if (r == null) {
            return null;
        }
        else {
            return new Range(r.getLowerBound() + this.yOffset,
                    r.getUpperBound() + this.blockHeight + this.yOffset);
        }
    }
    else {
        return null;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private Range findBounds(XYDataset dataset, boolean isDomain) {
    if (dataset != null) {
        Range r = isDomain 
                ? DatasetUtilities.findDomainBounds(dataset, false) 
                : DatasetUtilities.findRangeBounds(dataset, false);
        if (r == null) {
            return null;
        } else {
            double offset = isDomain ? this.xOffset : this.yOffset;
            double blockSize = isDomain ? this.blockWidth : this.blockHeight;
            return new Range(r.getLowerBound() + offset, 
                    r.getUpperBound() + blockSize + offset);
        }
    } else {
        return null;
    }
}
```

**2. Method Calls:**  

**For `findDomainBounds`:**  
```java
public Range findDomainBounds(XYDataset dataset) {
    return findBounds(dataset, true);
}
```

**For `findRangeBounds`:**  
```java
public Range findRangeBounds(XYDataset dataset) {
    return findBounds(dataset, false);
}
```",Type-2
951-1-2,src,org.jfree.data.time,Minute,getFirstMillisecond,321,332,src,org.jfree.data.time,Minute,getLastMillisecond,347,358,Type 2,"**Code Snippet 1 - Method: getFirstMillisecond (Lines: 321-332)**  
```java
public long getFirstMillisecond(Calendar calendar) {

    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int day = this.day.getDayOfMonth();

    calendar.clear();
    calendar.set(year, month, day, this.hour, this.minute, 0);
    calendar.set(Calendar.MILLISECOND, 0);

    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();

}
```

**Code Snippet 2 - Method: getLastMillisecond (Lines: 347-358)**  
```java
public long getLastMillisecond(Calendar calendar) {

    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int day = this.day.getDayOfMonth();

    calendar.clear();
    calendar.set(year, month, day, this.hour, this.minute, 59);
    calendar.set(Calendar.MILLISECOND, 999);

    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private long calculateMillisecond(Calendar calendar, int second, int millisecond) {

    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int day = this.day.getDayOfMonth();

    calendar.clear();
    calendar.set(year, month, day, this.hour, this.minute, second);
    calendar.set(Calendar.MILLISECOND, millisecond);

    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();

}
```

**2. Method Calls Replacing the Clones:**  

**For `getFirstMillisecond`:**  
```java
public long getFirstMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, 0, 0);
}
```

**For `getLastMillisecond`:**  
```java
public long getLastMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, 59, 999);
}
```",Type-2
962-1-2,src,org.jfree.chart,JFreeChart,setBackgroundPaint,962,973,src,org.jfree.chart,JFreeChart,setBackgroundImage,999,1010,Type 2,"**Code Snippet 1: Method: setBackgroundPaint (Lines: 962-973)**  
```java
public void setBackgroundPaint(Paint paint) {

    if (this.backgroundPaint != null) {
        if (!this.backgroundPaint.equals(paint)) {
            this.backgroundPaint = paint;
            fireChartChanged();
        }
    }
    else {
        if (paint != null) {
            this.backgroundPaint = paint;
            fireChartChanged();
        }
    }

}
```

**Code Snippet 2: Method: setBackgroundImage (Lines: 999-1010)**  
```java
public void setBackgroundImage(Image image) {

    if (this.backgroundImage != null) {
        if (!this.backgroundImage.equals(image)) {
            this.backgroundImage = image;
            fireChartChanged();
        }
    }
    else {
        if (image != null) {
            this.backgroundImage = image;
            fireChartChanged();
        }
    }

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setBackgroundProperty(T currentProperty, T newProperty, Consumer<T> setter) {
    if (currentProperty != null) {
        if (!currentProperty.equals(newProperty)) {
            setter.accept(newProperty);
            fireChartChanged();
        }
    } else {
        if (newProperty != null) {
            setter.accept(newProperty);
            fireChartChanged();
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setBackgroundPaint`:**  
```java
public void setBackgroundPaint(Paint paint) {
    setBackgroundProperty(this.backgroundPaint, paint, newValue -> this.backgroundPaint = newValue);
}
```

**For `setBackgroundImage`:**  
```java
public void setBackgroundImage(Image image) {
    setBackgroundProperty(this.backgroundImage, image, newValue -> this.backgroundImage = newValue);
}
```",Type-2
970-1-2,src,org.jfree.chart.renderer,AbstractRenderer,isSeriesVisible,532,543,src,org.jfree.chart.renderer,AbstractRenderer,isSeriesVisibleInLegend,697,708,Type 2,"**Code Snippet 1: Method: isSeriesVisible (Lines: 532-543)**  
```java
public boolean isSeriesVisible(int series) {
    boolean result = this.baseSeriesVisible;
    if (this.seriesVisible != null) {
        result = this.seriesVisible.booleanValue();
    }
    else {
        Boolean b = this.seriesVisibleList.getBoolean(series);
        if (b != null) {
            result = b.booleanValue();
        }
    }
    return result;
}
```

**Code Snippet 2: Method: isSeriesVisibleInLegend (Lines: 697-708)**  
```java
public boolean isSeriesVisibleInLegend(int series) {
    boolean result = this.baseSeriesVisibleInLegend;
    if (this.seriesVisibleInLegend != null) {
        result = this.seriesVisibleInLegend.booleanValue();
    }
    else {
        Boolean b = this.seriesVisibleInLegendList.getBoolean(series);
        if (b != null) {
            result = b.booleanValue();
        }
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. The Extracted Method:**  
```java
private boolean isSeriesVisibleHelper(Boolean globalFlag, BooleanList seriesList, boolean baseFlag, int series) {
    boolean result = baseFlag;
    if (globalFlag != null) {
        result = globalFlag.booleanValue();
    } else {
        Boolean b = seriesList.getBoolean(series);
        if (b != null) {
            result = b.booleanValue();
        }
    }
    return result;
}
```

**2. The Method Calls:**  

**For `isSeriesVisible`:**  
```java
public boolean isSeriesVisible(int series) {
    return isSeriesVisibleHelper(this.seriesVisible, this.seriesVisibleList, this.baseSeriesVisible, series);
}
```

**For `isSeriesVisibleInLegend`:**  
```java
public boolean isSeriesVisibleInLegend(int series) {
    return isSeriesVisibleHelper(this.seriesVisibleInLegend, this.seriesVisibleInLegendList, this.baseSeriesVisibleInLegend, series);
}
```",Type-2
976-1-2,src,org.jfree.data.statistics,HistogramDataset,getMinimum,221,232,src,org.jfree.data.statistics,HistogramDataset,getMaximum,243,254,Type 2,"**Code Snippet 1 - Method: getMinimum**  
```java
/**
 * Returns the minimum value in an array of values.
 *
 * @param values  the values (<code>null</code> not permitted and
 *                zero-length array not permitted).
 *
 * @return The minimum value.
 */
private double getMinimum(double[] values) {
    if (values == null || values.length < 1) {
        throw new IllegalArgumentException(
                ""Null or zero length 'values' argument."");
    }
    double min = Double.MAX_VALUE;
    for (int i = 0; i < values.length; i++) {
        if (values[i] < min) {
            min = values[i];
        }
    }
    return min;
}
```

**Code Snippet 2 - Method: getMaximum**  
```java
/**
 * Returns the maximum value in an array of values.
 *
 * @param values  the values (<code>null</code> not permitted and
 *                zero-length array not permitted).
 *
 * @return The maximum value.
 */
private double getMaximum(double[] values) {
    if (values == null || values.length < 1) {
        throw new IllegalArgumentException(
                ""Null or zero length 'values' argument."");
    }
    double max = -Double.MAX_VALUE;
    for (int i = 0; i < values.length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    return max;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and minor differences in logic).","**1. Extracted Method:**  
```java
/**
 * Returns the extreme value (minimum or maximum) in an array of values.
 *
 * @param values  the values (<code>null</code> not permitted and
 *                zero-length array not permitted).
 * @param findMin  if true, find the minimum; otherwise, find the maximum.
 *
 * @return The extreme value (minimum or maximum).
 */
private double getExtremeValue(double[] values, boolean findMin) {
    if (values == null || values.length < 1) {
        throw new IllegalArgumentException(
                ""Null or zero length 'values' argument."");
    }
    double extreme = findMin ? Double.MAX_VALUE : -Double.MAX_VALUE;
    for (int i = 0; i < values.length; i++) {
        if (findMin) {
            if (values[i] < extreme) {
                extreme = values[i];
            }
        } else {
            if (values[i] > extreme) {
                extreme = values[i];
            }
        }
    }
    return extreme;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinimum`:**  
```java
private double getMinimum(double[] values) {
    return getExtremeValue(values, true);
}
```

**For `getMaximum`:**  
```java
private double getMaximum(double[] values) {
    return getExtremeValue(values, false);
}
```",Type-2
981-1-2,src,org.jfree.chart.block,CenterArrangement,arrangeFR,166,176,src,org.jfree.chart.block,CenterArrangement,arrangeRF,233,243,Type 2,"**Code Snippet 1 - Method: arrangeFR (Lines: 166-176)**  
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeFN(container, g2, constraint);
    if (constraint.getHeightRange().contains(s.height)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedHeight(
                constraint.getHeightRange().constrain(s.getHeight()));
        return arrangeFF(container, g2, c);
    }
}
```

**Code Snippet 2 - Method: arrangeRF (Lines: 233-243)**  
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().constrain(s.getWidth()));
        return arrangeFF(container, g2, c);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Size2D arrangeWithRange(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint, boolean isWidth) {

    Size2D s = isWidth ? arrangeNF(container, g2, constraint) : arrangeFN(container, g2, constraint);
    if ((isWidth ? constraint.getWidthRange() : constraint.getHeightRange()).contains(isWidth ? s.width : s.height)) {
        return s;   
    } else {
        RectangleConstraint c = isWidth 
                ? constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth())) 
                : constraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight()));
        return arrangeFF(container, g2, c);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `arrangeFR`:**  
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithRange(container, g2, constraint, false);
}
```

**For `arrangeRF`:**  
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithRange(container, g2, constraint, true);
}
```",Type-2
981-4-5,src,org.jfree.chart.block,FlowArrangement,arrangeFR,236,247,src,org.jfree.chart.block,FlowArrangement,arrangeRF,305,316,Type 2,"**Code Snippet 1: Method: arrangeFR (Lines: 236-247)**  
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeFN(container, g2, constraint);
    if (constraint.getHeightRange().contains(s.height)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedHeight(
            constraint.getHeightRange().constrain(s.getHeight())
        );
        return arrangeFF(container, g2, c);
    }
}
```

**Code Snippet 2: Method: arrangeRF (Lines: 305-316)**  
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangeFF(container, g2, c);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Size2D arrangeWithRangeCheck(BlockContainer container, Graphics2D g2,
                                     RectangleConstraint constraint,
                                     boolean isHeightConstraint) {

    Size2D s = isHeightConstraint ? arrangeFN(container, g2, constraint) : arrangeNF(container, g2, constraint);
    if ((isHeightConstraint && constraint.getHeightRange().contains(s.height)) ||
        (!isHeightConstraint && constraint.getWidthRange().contains(s.width))) {
        return s;   
    } else {
        RectangleConstraint c = isHeightConstraint
            ? constraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight()))
            : constraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth()));
        return arrangeFF(container, g2, c);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `arrangeFR`:**  
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithRangeCheck(container, g2, constraint, true);
}
```

**For `arrangeRF`:**  
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeWithRangeCheck(container, g2, constraint, false);
}
```",Type-2
989-1-2,src,org.jfree.data.time,Day,previous,261,272,src,org.jfree.data.time,Day,next,283,294,Type 2,"**Code Snippet 1 - Method: previous (Lines: 261-272)**  
```java
public RegularTimePeriod previous() {

    Day result;
    int serial = this.serialDate.toSerial();
    if (serial > SerialDate.SERIAL_LOWER_BOUND) {
        SerialDate yesterday = SerialDate.createInstance(serial - 1);
        return new Day(yesterday);
    }
    else {
        result = null;
    }
    return result;

}
```

**Code Snippet 2 - Method: next (Lines: 283-294)**  
```java
public RegularTimePeriod next() {

    Day result;
    int serial = this.serialDate.toSerial();
    if (serial < SerialDate.SERIAL_UPPER_BOUND) {
        SerialDate tomorrow = SerialDate.createInstance(serial + 1);
        return new Day(tomorrow);
    }
    else {
        result = null;
    }
    return result;

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and conditions).","**1. Extracted Method:**  
```java
private RegularTimePeriod getAdjacentDay(int offset, int bound, boolean isLowerBound) {
    Day result;
    int serial = this.serialDate.toSerial();
    if ((isLowerBound && serial > bound) || (!isLowerBound && serial < bound)) {
        SerialDate adjacentDate = SerialDate.createInstance(serial + offset);
        return new Day(adjacentDate);
    } else {
        result = null;
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `previous` method:**  
```java
public RegularTimePeriod previous() {
    return getAdjacentDay(-1, SerialDate.SERIAL_LOWER_BOUND, true);
}
```

**For `next` method:**  
```java
public RegularTimePeriod next() {
    return getAdjacentDay(1, SerialDate.SERIAL_UPPER_BOUND, false);
}
```",Type-2
1011-1-2,src,org.jfree.chart.axis,AxisSpace,shrink,239,249,src,org.jfree.chart.axis,AxisSpace,expand,260,270,Type 2,"**Code Snippet 1 - Method: shrink**  
```java
public Rectangle2D shrink(Rectangle2D area, Rectangle2D result) {
    if (result == null) {
        result = new Rectangle2D.Double();
    }
    result.setRect(
        area.getX() + this.left, 
        area.getY() + this.top,
        area.getWidth() - this.left - this.right,
        area.getHeight() - this.top - this.bottom
    );
    return result;
}
```

**Code Snippet 2 - Method: expand**  
```java
public Rectangle2D expand(Rectangle2D area, Rectangle2D result) {
    if (result == null) {
        result = new Rectangle2D.Double();
    }
    result.setRect(
        area.getX() - this.left, 
        area.getY() - this.top,
        area.getWidth() + this.left + this.right,
        area.getHeight() + this.top + this.bottom
    );
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Rectangle2D adjustRectangle(Rectangle2D area, Rectangle2D result, double xFactor, double yFactor, double widthFactor, double heightFactor) {
    if (result == null) {
        result = new Rectangle2D.Double();
    }
    result.setRect(
        area.getX() + xFactor * this.left, 
        area.getY() + yFactor * this.top,
        area.getWidth() + widthFactor * (this.left + this.right),
        area.getHeight() + heightFactor * (this.top + this.bottom)
    );
    return result;
}
```

**2. Method Calls:**  

**For `shrink`:**  
```java
public Rectangle2D shrink(Rectangle2D area, Rectangle2D result) {
    return adjustRectangle(area, result, 1, 1, -1, -1);
}
```

**For `expand`:**  
```java
public Rectangle2D expand(Rectangle2D area, Rectangle2D result) {
    return adjustRectangle(area, result, -1, -1, 1, 1);
}
```",Type-3
1032-1-2,src,org.jfree.chart.plot,Plot,getRectX,1139,1149,src,org.jfree.chart.plot,Plot,getRectY,1163,1173,Type 2,"**Code Snippet 1: Method: getRectX**
```java
protected double getRectX(double x, double w1, double w2,
                          RectangleEdge edge) {

    double result = x;
    if (edge == RectangleEdge.LEFT) {
        result = result + w1;
    }
    else if (edge == RectangleEdge.RIGHT) {
        result = result + w2;
    }
    return result;

}
```

**Code Snippet 2: Method: getRectY**
```java
protected double getRectY(double y, double h1, double h2,
                          RectangleEdge edge) {

    double result = y;
    if (edge == RectangleEdge.TOP) {
        result = result + h1;
    }
    else if (edge == RectangleEdge.BOTTOM) {
        result = result + h2;
    }
    return result;

}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**
```java
protected double getRectValue(double value, double v1, double v2,
                              RectangleEdge edge, RectangleEdge edge1, RectangleEdge edge2) {

    double result = value;
    if (edge == edge1) {
        result = result + v1;
    }
    else if (edge == edge2) {
        result = result + v2;
    }
    return result;

}
```

**2. Method Calls:**

**For `getRectX`:**
```java
protected double getRectX(double x, double w1, double w2,
                          RectangleEdge edge) {
    return getRectValue(x, w1, w2, edge, RectangleEdge.LEFT, RectangleEdge.RIGHT);
}
```

**For `getRectY`:**
```java
protected double getRectY(double y, double h1, double h2,
                          RectangleEdge edge) {
    return getRectValue(y, h1, h2, edge, RectangleEdge.TOP, RectangleEdge.BOTTOM);
}
```",Type-2
1046-1-2,src,org.jfree.chart.plot,XYPlot,getDomainAxisIndex,3943,3953,src,org.jfree.chart.plot,XYPlot,getRangeAxisIndex,3965,3975,Type 2,"```java
// Code snippet 1 - Method: getDomainAxisIndex
public int getDomainAxisIndex(ValueAxis axis) {
    int result = this.domainAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getDomainAxisIndex(axis);
        }
    }
    return result;
}
```

```java
// Code snippet 2 - Method: getRangeAxisIndex
public int getRangeAxisIndex(ValueAxis axis) {
    int result = this.rangeAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getRangeAxisIndex(axis);
        }
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","```java
// 1. The extracted method
private int getAxisIndex(ValueAxis axis, List<ValueAxis> axes, String methodName) {
    int result = axes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            if (""getDomainAxisIndex"".equals(methodName)) {
                result = p.getDomainAxisIndex(axis);
            } else if (""getRangeAxisIndex"".equals(methodName)) {
                result = p.getRangeAxisIndex(axis);
            }
        }
    }
    return result;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing Code snippet 1
public int getDomainAxisIndex(ValueAxis axis) {
    return getAxisIndex(axis, this.domainAxes, ""getDomainAxisIndex"");
}

// Replacing Code snippet 2
public int getRangeAxisIndex(ValueAxis axis) {
    return getAxisIndex(axis, this.rangeAxes, ""getRangeAxisIndex"");
}
```",Type-2
1053-1-2,src,org.jfree.chart.renderer,WaferMapRenderer,getMinPaintValue,351,361,src,org.jfree.chart.renderer,WaferMapRenderer,getMaxPaintValue,372,382,Type 2,"**Code Snippet 1 - Method: getMinPaintValue (Lines: 351-361)**  
```java
private Number getMinPaintValue(Integer index) {
    double minValue = Double.POSITIVE_INFINITY;
    for (Iterator i = this.paintIndex.entrySet().iterator(); i.hasNext();) {
        Map.Entry entry = (Map.Entry) i.next();
        if (((Integer) entry.getValue()).equals(index)) {
            if (((Number) entry.getKey()).doubleValue() < minValue) {
                minValue = ((Number) entry.getKey()).doubleValue();
            }
        }
    }               
    return new Double(minValue);
}
```

**Code Snippet 2 - Method: getMaxPaintValue (Lines: 372-382)**  
```java
private Number getMaxPaintValue(Integer index) {
    double maxValue = Double.NEGATIVE_INFINITY;
    for (Iterator i = this.paintIndex.entrySet().iterator(); i.hasNext();) {
        Map.Entry entry = (Map.Entry) i.next();
        if (((Integer) entry.getValue()).equals(index)) {
            if (((Number) entry.getKey()).doubleValue() > maxValue) {
                maxValue = ((Number) entry.getKey()).doubleValue();
            }
        }
    }               
    return new Double(maxValue);
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private Number getExtremePaintValue(Integer index, boolean findMin) {
    double extremeValue = findMin ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
    for (Iterator i = this.paintIndex.entrySet().iterator(); i.hasNext();) {
        Map.Entry entry = (Map.Entry) i.next();
        if (((Integer) entry.getValue()).equals(index)) {
            double currentValue = ((Number) entry.getKey()).doubleValue();
            if (findMin ? currentValue < extremeValue : currentValue > extremeValue) {
                extremeValue = currentValue;
            }
        }
    }
    return new Double(extremeValue);
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinPaintValue`:**  
```java
private Number getMinPaintValue(Integer index) {
    return getExtremePaintValue(index, true);
}
```

**For `getMaxPaintValue`:**  
```java
private Number getMaxPaintValue(Integer index) {
    return getExtremePaintValue(index, false);
}
```",Type-2
1068-1-2,src,org.jfree.chart.axis,DateAxis,getMinimumDate,550,560,src,org.jfree.chart.axis,DateAxis,getMaximumDate,600,610,Type 2,"**Code Snippet 1: Method: getMinimumDate (Lines: 550-560)**  
```java
public Date getMinimumDate() {
    Date result = null;
    Range range = getRange();
    if (range instanceof DateRange) {
        DateRange r = (DateRange) range;
        result = r.getLowerDate();
    }
    else {
        result = new Date((long) range.getLowerBound());
    }
    return result;
}
```

**Code Snippet 2: Method: getMaximumDate (Lines: 600-610)**  
```java
public Date getMaximumDate() {
    Date result = null;
    Range range = getRange();
    if (range instanceof DateRange) {
        DateRange r = (DateRange) range;
        result = r.getUpperDate();
    }
    else {
        result = new Date((long) range.getUpperBound());
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Date getBoundaryDate(Function<DateRange, Date> dateRangeFunction, Function<Range, Double> rangeFunction) {
    Date result = null;
    Range range = getRange();
    if (range instanceof DateRange) {
        DateRange r = (DateRange) range;
        result = dateRangeFunction.apply(r);
    } else {
        result = new Date((long) rangeFunction.apply(range));
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMinimumDate`:**  
```java
public Date getMinimumDate() {
    return getBoundaryDate(DateRange::getLowerDate, Range::getLowerBound);
}
```

**For `getMaximumDate`:**  
```java
public Date getMaximumDate() {
    return getBoundaryDate(DateRange::getUpperDate, Range::getUpperBound);
}
```",Type-2
1075-1-2,src,org.jfree.chart.axis,CategoryAxis,setTickLabelFont,425,435,src,org.jfree.chart.axis,CategoryAxis,setTickLabelPaint,468,478,Type 2,"**Code Snippet 1: Method: setTickLabelFont (Lines: 425-435)**  
```java
public void setTickLabelFont(Comparable category, Font font) {
    if (category == null) {
        throw new IllegalArgumentException(""Null 'category' argument."");
    }
    if (font == null) {
        this.tickLabelFontMap.remove(category);
    }
    else {
        this.tickLabelFontMap.put(category, font);
    }
    notifyListeners(new AxisChangeEvent(this));
}
```

**Code Snippet 2: Method: setTickLabelPaint (Lines: 468-478)**  
```java
public void setTickLabelPaint(Comparable category, Paint paint) {
    if (category == null) {
        throw new IllegalArgumentException(""Null 'category' argument."");
    }
    if (paint == null) {
        this.tickLabelPaintMap.remove(category);
    }
    else {
        this.tickLabelPaintMap.put(category, paint);
    }
    notifyListeners(new AxisChangeEvent(this));
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setTickLabelProperty(Map<Comparable, T> map, Comparable category, T property) {
    if (category == null) {
        throw new IllegalArgumentException(""Null 'category' argument."");
    }
    if (property == null) {
        map.remove(category);
    } else {
        map.put(category, property);
    }
    notifyListeners(new AxisChangeEvent(this));
}
```

**2. Method Calls to Replace the Clones:**  

**For `setTickLabelFont`:**  
```java
public void setTickLabelFont(Comparable category, Font font) {
    setTickLabelProperty(this.tickLabelFontMap, category, font);
}
```

**For `setTickLabelPaint`:**  
```java
public void setTickLabelPaint(Comparable category, Paint paint) {
    setTickLabelProperty(this.tickLabelPaintMap, category, paint);
}
```",Type-2
1084-1-2,src,org.jfree.chart.plot,FastScatterPlot,drawDomainGridlines,626,636,src,org.jfree.chart.plot,FastScatterPlot,drawRangeGridlines,652,662,Type 2,"**Code Snippet 1: Method: drawDomainGridlines (Lines: 626-636)**  
```java
protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, 
                                   List ticks) {

    // draw the domain grid lines, if the flag says they're visible...
    if (isDomainGridlinesVisible()) {
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double v = this.domainAxis.valueToJava2D(tick.getValue(), 
                    dataArea, RectangleEdge.BOTTOM);
            Line2D line = new Line2D.Double(v, dataArea.getMinY(), v, 
                    dataArea.getMaxY());
            g2.setPaint(getDomainGridlinePaint());
            g2.setStroke(getDomainGridlineStroke());
            g2.draw(line);                
        }
    }
}
```

**Code Snippet 2: Method: drawRangeGridlines (Lines: 652-662)**  
```java
protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, 
                                  List ticks) {

    // draw the range grid lines, if the flag says they're visible...
    if (isRangeGridlinesVisible()) {
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double v = this.rangeAxis.valueToJava2D(tick.getValue(), 
                    dataArea, RectangleEdge.LEFT);
            Line2D line = new Line2D.Double(dataArea.getMinX(), v, 
                    dataArea.getMaxX(), v);
            g2.setPaint(getRangeGridlinePaint());
            g2.setStroke(getRangeGridlineStroke());
            g2.draw(line);                
        }
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void drawGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks, 
                           boolean gridlinesVisible, ValueAxis axis, 
                           Paint gridlinePaint, Stroke gridlineStroke, 
                           RectangleEdge edge, boolean isDomain) {

    if (gridlinesVisible) {
        Iterator iterator = ticks.iterator();
        while (iterator.hasNext()) {
            ValueTick tick = (ValueTick) iterator.next();
            double v = axis.valueToJava2D(tick.getValue(), dataArea, edge);
            Line2D line = isDomain 
                    ? new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY())
                    : new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
            g2.setPaint(gridlinePaint);
            g2.setStroke(gridlineStroke);
            g2.draw(line);
        }
    }
}
```

**2. Method Calls to Replace the Clones:**  

**For `drawDomainGridlines`:**  
```java
protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) {
    drawGridlines(g2, dataArea, ticks, isDomainGridlinesVisible(), this.domainAxis, 
                  getDomainGridlinePaint(), getDomainGridlineStroke(), 
                  RectangleEdge.BOTTOM, true);
}
```

**For `drawRangeGridlines`:**  
```java
protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) {
    drawGridlines(g2, dataArea, ticks, isRangeGridlinesVisible(), this.rangeAxis, 
                  getRangeGridlinePaint(), getRangeGridlineStroke(), 
                  RectangleEdge.LEFT, false);
}
```",Type-3
1098-1-2,src,org.jfree.data.gantt,TaskSeriesCollection,getPercentComplete,449,457,src,org.jfree.data.gantt,TaskSeriesCollection,getSubIntervalCount,482,490,Type 2,"**Code Snippet 1: Method: getPercentComplete (Lines: 449-457)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        result = task.getPercentComplete();
    }
    return result;
}
```

**Code Snippet 2: Method: getSubIntervalCount (Lines: 482-490)**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    int result = 0;
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        result = task.getSubtaskCount();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getTaskProperty(Comparable rowKey, Comparable columnKey, java.util.function.Function<Task, T> propertyExtractor, T defaultValue) {
    int row = getRowIndex(rowKey);
    TaskSeries series = (TaskSeries) this.data.get(row);
    Task task = series.get(columnKey.toString());
    if (task != null) {
        return propertyExtractor.apply(task);
    }
    return defaultValue;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getTaskProperty(rowKey, columnKey, Task::getPercentComplete, null);
}
```

**For `getSubIntervalCount`:**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    return getTaskProperty(rowKey, columnKey, Task::getSubtaskCount, 0);
}
```",Type-3
1099-1-2,src,org.jfree.data.general,DatasetUtilities,createPieDatasetForRow,205,213,src,org.jfree.data.general,DatasetUtilities,createPieDatasetForColumn,240,248,Type 2,"**Code Snippet 1: Method: createPieDatasetForRow (Lines: 205-213)**  
```java
/**
 * Creates a pie dataset from a table dataset by taking all the values
 * for a single row.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param row  the row (zero-based index).
 *
 * @return A pie dataset.
 */
public static PieDataset createPieDatasetForRow(CategoryDataset dataset,
                                                int row) {
    DefaultPieDataset result = new DefaultPieDataset();
    int columnCount = dataset.getColumnCount();
    for (int current = 0; current < columnCount; current++) {
        Comparable columnKey = dataset.getColumnKey(current);
        result.setValue(columnKey, dataset.getValue(row, current));
    }
    return result;
}
```

**Code Snippet 2: Method: createPieDatasetForColumn (Lines: 240-248)**  
```java
/**
 * Creates a pie dataset from a {@link CategoryDataset} by taking all the
 * values for a single column.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param column  the column (zero-based index).
 *
 * @return A pie dataset.
 */
public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,
                                                   int column) {
    DefaultPieDataset result = new DefaultPieDataset();
    int rowCount = dataset.getRowCount();
    for (int i = 0; i < rowCount; i++) {
        Comparable rowKey = dataset.getRowKey(i);
        result.setValue(rowKey, dataset.getValue(i, column));
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Creates a pie dataset from a {@link CategoryDataset} by taking all the
 * values for a single row or column.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 * @param isRow  flag indicating whether to process a row (true) or column (false).
 * @param index  the row or column index (zero-based).
 *
 * @return A pie dataset.
 */
private static PieDataset createPieDataset(CategoryDataset dataset, boolean isRow, int index) {
    DefaultPieDataset result = new DefaultPieDataset();
    int count = isRow ? dataset.getColumnCount() : dataset.getRowCount();
    for (int i = 0; i < count; i++) {
        Comparable key = isRow ? dataset.getColumnKey(i) : dataset.getRowKey(i);
        Number value = isRow ? dataset.getValue(index, i) : dataset.getValue(i, index);
        result.setValue(key, value);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `createPieDatasetForRow`:**  
```java
public static PieDataset createPieDatasetForRow(CategoryDataset dataset, int row) {
    return createPieDataset(dataset, true, row);
}
```

**For `createPieDatasetForColumn`:**  
```java
public static PieDataset createPieDatasetForColumn(CategoryDataset dataset, int column) {
    return createPieDataset(dataset, false, column);
}
```",Type-3
1102-1-2,src,org.jfree.chart.plot,ContourPlot,drawVerticalLine,1114,1123,src,org.jfree.chart.plot,ContourPlot,drawHorizontalLine,1136,1146,Type 2,"**Code Snippet 1: Method: drawVerticalLine (Lines: 1114-1123)**  
```java
protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea,
                                double value, Stroke stroke, Paint paint) {

    double xx = getDomainAxis().valueToJava2D(value, dataArea, 
            RectangleEdge.BOTTOM);
    Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, 
            dataArea.getMaxY());
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);

}
```

**Code Snippet 2: Method: drawHorizontalLine (Lines: 1136-1146)**  
```java
protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea,
                                  double value, Stroke stroke, 
                                  Paint paint) {

    double yy = getRangeAxis().valueToJava2D(value, dataArea, 
            RectangleEdge.LEFT);
    Line2D line = new Line2D.Double(dataArea.getMinX(), yy, 
            dataArea.getMaxX(), yy);
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
protected void drawLine(Graphics2D g2, Rectangle2D dataArea, double value, 
                        Stroke stroke, Paint paint, boolean isVertical) {

    Line2D line;
    if (isVertical) {
        double xx = getDomainAxis().valueToJava2D(value, dataArea, 
                RectangleEdge.BOTTOM);
        line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());
    } else {
        double yy = getRangeAxis().valueToJava2D(value, dataArea, 
                RectangleEdge.LEFT);
        line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `drawVerticalLine`:**  
```java
drawLine(g2, dataArea, value, stroke, paint, true);
```

**For `drawHorizontalLine`:**  
```java
drawLine(g2, dataArea, value, stroke, paint, false);
```",Type-3
1113-1-2,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getPercentComplete,329,338,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getEndValue,353,362,Type 2,"**Code Snippet 1: Method: getPercentComplete (Lines: 329-338)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getPercentComplete(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2: Method: getEndValue (Lines: 353-362)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getEndValue(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for method names).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(String methodName, Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        switch (methodName) {
            case ""getPercentComplete"":
                return this.underlying.getPercentComplete(r, c + this.firstCategoryIndex);
            case ""getEndValue"":
                return this.underlying.getEndValue(r, c + this.firstCategoryIndex);
            default:
                throw new IllegalArgumentException(""Invalid method name: "" + methodName);
        }
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(""getPercentComplete"", rowKey, columnKey);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(""getEndValue"", rowKey, columnKey);
}
```",Type-1
1113-1-3,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getPercentComplete,329,338,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getStartValue,422,431,Type 2,"**Code Snippet 1: Method: getPercentComplete (Lines: 329-338)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getPercentComplete(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2: Method: getStartValue (Lines: 422-431)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getStartValue(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for method names).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(String methodName, Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        switch (methodName) {
            case ""getPercentComplete"":
                return this.underlying.getPercentComplete(r, c + this.firstCategoryIndex);
            case ""getStartValue"":
                return this.underlying.getStartValue(r, c + this.firstCategoryIndex);
            default:
                throw new IllegalArgumentException(""Invalid method name: "" + methodName);
        }
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(""getPercentComplete"", rowKey, columnKey);
}
```

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(""getStartValue"", rowKey, columnKey);
}
```",Type-1
1113-2-3,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getEndValue,353,362,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getStartValue,422,431,Type 2,"**Code Snippet 1 - Method: getEndValue (Lines: 353-362)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey,
        int subinterval) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getEndValue(r,
                c + this.firstCategoryIndex, subinterval);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2 - Method: getStartValue (Lines: 422-431)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey,
        int subinterval) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getStartValue(r,
                c + this.firstCategoryIndex, subinterval);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-2 (Identical except for method names and minor differences in literals).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(String methodType, Comparable rowKey, Comparable columnKey, int subinterval) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        if (""start"".equals(methodType)) {
            return this.underlying.getStartValue(r, c + this.firstCategoryIndex, subinterval);
        } else if (""end"".equals(methodType)) {
            return this.underlying.getEndValue(r, c + this.firstCategoryIndex, subinterval);
        }
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
    return null; // This line is unreachable but added to satisfy compilation.
}
```

**2. Method Calls Replacing the Clones:**  

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey, int subinterval) {
    return getValueFromUnderlying(""end"", rowKey, columnKey, subinterval);
}
```

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey, int subinterval) {
    return getValueFromUnderlying(""start"", rowKey, columnKey, subinterval);
}
```",Type-2
1116-1-2,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getValue,365,374,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getStartValue,405,414,Type 2,"**Code Snippet 1 - Method: getValue (Lines: 365-374)**  
```java
public Number getValue(Comparable series, Comparable category) {
    int seriesIndex = getSeriesIndex(series);
    if (seriesIndex < 0) {
        throw new UnknownKeyException(""Unknown 'series' key."");
    }
    int itemIndex = getColumnIndex(category);
    if (itemIndex < 0) {
        throw new UnknownKeyException(""Unknown 'category' key."");
    }
    return getValue(seriesIndex, itemIndex);
}
```

**Code Snippet 2 - Method: getStartValue (Lines: 405-414)**  
```java
public Number getStartValue(Comparable series, Comparable category) {
    int seriesIndex = getSeriesIndex(series);
    if (seriesIndex < 0) {
        throw new UnknownKeyException(""Unknown 'series' key."");
    }
    int itemIndex = getColumnIndex(category);
    if (itemIndex < 0) {
        throw new UnknownKeyException(""Unknown 'category' key."");
    }
    return getStartValue(seriesIndex, itemIndex);
}
```

**Clone Type:** Type-2 (Identical except for method names and called methods).","**1. Extracted Method:**  
```java
private Number getValueInternal(Comparable series, Comparable category, boolean isStartValue) {
    int seriesIndex = getSeriesIndex(series);
    if (seriesIndex < 0) {
        throw new UnknownKeyException(""Unknown 'series' key."");
    }
    int itemIndex = getColumnIndex(category);
    if (itemIndex < 0) {
        throw new UnknownKeyException(""Unknown 'category' key."");
    }
    return isStartValue ? getStartValue(seriesIndex, itemIndex) : getValue(seriesIndex, itemIndex);
}
```

**2. Method Calls Replacing the Clones:**  

**For `getValue`:**  
```java
public Number getValue(Comparable series, Comparable category) {
    return getValueInternal(series, category, false);
}
```

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable series, Comparable category) {
    return getValueInternal(series, category, true);
}
```",Type-2
1116-1-3,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getValue,365,374,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getEndValue,458,467,Type 2,"**Code Snippet 1: Method: getValue (Lines: 365-374)**  
```java
public Number getValue(Comparable series, Comparable category) {
    int seriesIndex = getSeriesIndex(series);
    if (seriesIndex < 0) {
        throw new UnknownKeyException(""Unknown 'series' key."");
    }
    int itemIndex = getColumnIndex(category);
    if (itemIndex < 0) {
        throw new UnknownKeyException(""Unknown 'category' key."");
    }
    return getValue(seriesIndex, itemIndex);
}
```

**Code Snippet 2: Method: getEndValue (Lines: 458-467)**  
```java
public Number getEndValue(Comparable series, Comparable category) {
    int seriesIndex = getSeriesIndex(series);
    if (seriesIndex < 0) {
        throw new UnknownKeyException(""Unknown 'series' key."");
    }
    int itemIndex = getColumnIndex(category);
    if (itemIndex < 0) {
        throw new UnknownKeyException(""Unknown 'category' key."");
    }
    return getEndValue(seriesIndex, itemIndex);
}
```

**Clone Type:** Type-2 (Identical except for method names and called methods).","**1. Extracted Method:**  
```java
private Number getValueInternal(Comparable series, Comparable category, boolean isEndValue) {
    int seriesIndex = getSeriesIndex(series);
    if (seriesIndex < 0) {
        throw new UnknownKeyException(""Unknown 'series' key."");
    }
    int itemIndex = getColumnIndex(category);
    if (itemIndex < 0) {
        throw new UnknownKeyException(""Unknown 'category' key."");
    }
    return isEndValue ? getEndValue(seriesIndex, itemIndex) : getValue(seriesIndex, itemIndex);
}
```

**2. Method Calls Replacing the Clones:**  

**For `getValue`:**  
```java
public Number getValue(Comparable series, Comparable category) {
    return getValueInternal(series, category, false);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable series, Comparable category) {
    return getValueInternal(series, category, true);
}
```",Type-2
1116-2-3,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getStartValue,405,414,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getEndValue,458,467,Type 2,"**Code Snippet 1: Method: getStartValue (Lines: 405-414)**  
```java
public Number getStartValue(int series, int category) {

    // check arguments...
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""series index out of range."");
    }

    if ((category < 0) || (category >= getCategoryCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""category index out of range."");
    }

    // fetch the value...
    return this.startData[series][category];

}
```

**Code Snippet 2: Method: getEndValue (Lines: 458-467)**  
```java
public Number getEndValue(int series, int category) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""series index out of range."");
    }

    if ((category < 0) || (category >= getCategoryCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""category index out of range."");
    }

    return this.endData[series][category];
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getValueFromData(Number[][] data, int series, int category) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""series index out of range."");
    }

    if ((category < 0) || (category >= getCategoryCount())) {
        throw new IllegalArgumentException(
            ""DefaultIntervalCategoryDataset.getValue(): ""
            + ""category index out of range."");
    }

    return data[series][category];
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartValue`:**  
```java
public Number getStartValue(int series, int category) {
    return getValueFromData(this.startData, series, category);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(int series, int category) {
    return getValueFromData(this.endData, series, category);
}
```",Type-2
1118-1-2,src,org.jfree.data,DataUtilities,calculateColumnTotal,64,73,src,org.jfree.data,DataUtilities,calculateRowTotal,85,94,Type 2,"**Code Snippet 1: Method: calculateColumnTotal (Lines: 64-73)**  
```java
public static double calculateColumnTotal(Values2D data, int column) {
    double total = 0.0;
    int rowCount = data.getRowCount();
    for (int r = 0; r < rowCount; r++) {
        Number n = data.getValue(r, column);
        if (n != null) {
            total += n.doubleValue();   
        }
    }
    return total;
}
```

**Code Snippet 2: Method: calculateRowTotal (Lines: 85-94)**  
```java
public static double calculateRowTotal(Values2D data, int row) {
    double total = 0.0;
    int columnCount = data.getColumnCount();
    for (int c = 0; c < columnCount; c++) {
        Number n = data.getValue(row, c);
        if (n != null) {
            total += n.doubleValue();   
        }
    }
    return total;
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static double calculateTotal(Values2D data, int index, boolean isColumn) {
    double total = 0.0;
    int count = isColumn ? data.getRowCount() : data.getColumnCount();
    for (int i = 0; i < count; i++) {
        Number n = isColumn ? data.getValue(i, index) : data.getValue(index, i);
        if (n != null) {
            total += n.doubleValue();
        }
    }
    return total;
}
```

**2. Method Calls Replacing the Clones:**  

**For `calculateColumnTotal`:**  
```java
public static double calculateColumnTotal(Values2D data, int column) {
    return calculateTotal(data, column, true);
}
```

**For `calculateRowTotal`:**  
```java
public static double calculateRowTotal(Values2D data, int row) {
    return calculateTotal(data, row, false);
}
```",Type-2
1120-1-2,src,org.jfree.chart,ChartUtilities,writeChartAsJPEG,406,415,src,org.jfree.chart,ChartUtilities,writeChartAsJPEG,434,443,Type 2,"**Code Snippet 1: Method: writeChartAsJPEG (Lines: 406-415)**  
```java
/**
 * Writes a chart to an output stream in JPEG format.  Please note that
 * JPEG is a poor format for chart images, use PNG if possible.
 * 
 * @param out  the output stream (<code>null</code> not permitted).
 * @param chart  the chart (<code>null</code> not permitted).
 * @param width  the image width.
 * @param height  the image height.
 *
 * @throws IOException if there are any I/O errors.
 */
public static void writeChartAsJPEG(OutputStream out,
        JFreeChart chart, int width, int height) throws IOException {

    // defer argument checking...
    writeChartAsJPEG(out, chart, width, height, null);

}
```

**Code Snippet 2: Method: writeChartAsJPEG (Lines: 434-443)**  
```java
/**
 * Writes a chart to an output stream in JPEG format.  Please note that
 * JPEG is a poor format for chart images, use PNG if possible.
 *
 * @param out  the output stream (<code>null</code> not permitted).
 * @param quality  the quality setting.
 * @param chart  the chart (<code>null</code> not permitted).
 * @param width  the image width.
 * @param height  the image height.
 *
 * @throws IOException if there are any I/O errors.
 */
public static void writeChartAsJPEG(OutputStream out, float quality,
        JFreeChart chart, int width, int height) throws IOException {

    // defer argument checking...
    ChartUtilities.writeChartAsJPEG(out, quality, chart, width, height, 
            null);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private static void writeChartAsJPEGInternal(OutputStream out, Float quality,
        JFreeChart chart, int width, int height, ChartRenderingInfo info) 
        throws IOException {

    if (quality == null) {
        writeChartAsJPEG(out, chart, width, height, info);
    } else {
        ChartUtilities.writeChartAsJPEG(out, quality, chart, width, height, info);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 406-415):**  
```java
public static void writeChartAsJPEG(OutputStream out,
        JFreeChart chart, int width, int height) throws IOException {

    writeChartAsJPEGInternal(out, null, chart, width, height, null);
}
```

**For Code Snippet 2 (Lines: 434-443):**  
```java
public static void writeChartAsJPEG(OutputStream out, float quality,
        JFreeChart chart, int width, int height) throws IOException {

    writeChartAsJPEGInternal(out, quality, chart, width, height, null);
}
```",Type-3
1138-1-2,src,org.jfree.chart.renderer.category,LineAndShapeRenderer,getItemLineVisible,249,258,src,org.jfree.chart.renderer.category,LineAndShapeRenderer,getItemShapeVisible,388,397,Type 2,"**Code Snippet 1: Method: getItemLineVisible (Lines: 249-258)**  
```java
public boolean getItemLineVisible(int series, int item) {
    Boolean flag = this.linesVisible;
    if (flag == null) {
        flag = getSeriesLinesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseLinesVisible;
    }
}
```

**Code Snippet 2: Method: getItemShapeVisible (Lines: 388-397)**  
```java
public boolean getItemShapeVisible(int series, int item) {
    Boolean flag = this.shapesVisible;
    if (flag == null) {
        flag = getSeriesShapesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesVisible;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private boolean getItemVisibility(Boolean globalFlag, BooleanList seriesFlagList, boolean baseFlag, int series) {
    Boolean flag = globalFlag;
    if (flag == null) {
        flag = seriesFlagList.getBoolean(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseFlag;
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getItemLineVisible`:**  
```java
public boolean getItemLineVisible(int series, int item) {
    return getItemVisibility(this.linesVisible, this.seriesLinesVisible, this.baseLinesVisible, series);
}
```

**For `getItemShapeVisible`:**  
```java
public boolean getItemShapeVisible(int series, int item) {
    return getItemVisibility(this.shapesVisible, this.seriesShapesVisible, this.baseShapesVisible, series);
}
```",Type-2
1138-3-4,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemLineVisible,267,276,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemShapeVisible,435,444,Type 2,"**Code Snippet 1: Method: getItemLineVisible (Lines: 267-276)**  
```java
public boolean getItemLineVisible(int series, int item) {
    Boolean flag = this.linesVisible;
    if (flag == null) {
        flag = getSeriesLinesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseLinesVisible;
    }
}
```

**Code Snippet 2: Method: getItemShapeVisible (Lines: 435-444)**  
```java
public boolean getItemShapeVisible(int series, int item) {
    Boolean flag = this.shapesVisible;
    if (flag == null) {
        flag = getSeriesShapesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesVisible;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private boolean getItemVisibility(Boolean globalFlag, BooleanList seriesFlags, boolean baseFlag, int series) {
    Boolean flag = globalFlag;
    if (flag == null) {
        flag = seriesFlags.getBoolean(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseFlag;
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getItemLineVisible`:**  
```java
public boolean getItemLineVisible(int series, int item) {
    return getItemVisibility(this.linesVisible, this.seriesLinesVisible, this.baseLinesVisible, series);
}
```

**For `getItemShapeVisible`:**  
```java
public boolean getItemShapeVisible(int series, int item) {
    return getItemVisibility(this.shapesVisible, this.seriesShapesVisible, this.baseShapesVisible, series);
}
```",Type-2
1138-3-5,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemLineVisible,267,276,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemShapeFilled,571,580,Type 2,"**Code Snippet 1: Method: getItemLineVisible (Lines: 267-276)**  
```java
public boolean getItemLineVisible(int series, int item) {
    Boolean flag = this.linesVisible;
    if (flag == null) {
        flag = getSeriesLinesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseLinesVisible;
    }
}
```

**Code Snippet 2: Method: getItemShapeFilled (Lines: 571-580)**  
```java
public boolean getItemShapeFilled(int series, int item) {
    Boolean flag = this.shapesFilled;
    if (flag == null) {
        flag = getSeriesShapesFilled(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesFilled;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private boolean getItemAttribute(Boolean globalFlag, BooleanList seriesFlagList, int series, boolean baseFlag) {
    Boolean flag = globalFlag;
    if (flag == null) {
        flag = seriesFlagList.getBoolean(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseFlag;
    }
}
```

**2. Method Calls to Replace the Clones:**  

**For `getItemLineVisible`:**  
```java
public boolean getItemLineVisible(int series, int item) {
    return getItemAttribute(this.linesVisible, this.seriesLinesVisible, series, this.baseLinesVisible);
}
```

**For `getItemShapeFilled`:**  
```java
public boolean getItemShapeFilled(int series, int item) {
    return getItemAttribute(this.shapesFilled, this.seriesShapesFilled, series, this.baseShapesFilled);
}
```",Type-2
1138-4-5,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemShapeVisible,435,444,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemShapeFilled,571,580,Type 2,"**Code Snippet 1: Method: getItemShapeVisible (Lines: 435-444)**  
```java
public boolean getItemShapeVisible(int series, int item) {
    Boolean flag = this.shapesVisible;
    if (flag == null) {
        flag = getSeriesShapesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesVisible;
    }
}
```

**Code Snippet 2: Method: getItemShapeFilled (Lines: 571-580)**  
```java
public boolean getItemShapeFilled(int series, int item) {
    Boolean flag = this.shapesFilled;
    if (flag == null) {
        flag = getSeriesShapesFilled(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesFilled;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private boolean getItemAttribute(Boolean attribute, int series, BooleanList seriesAttribute, boolean baseAttribute) {
    Boolean flag = attribute;
    if (flag == null) {
        flag = seriesAttribute.getBoolean(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseAttribute;
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getItemShapeVisible`:**  
```java
public boolean getItemShapeVisible(int series, int item) {
    return getItemAttribute(this.shapesVisible, series, this.seriesShapesVisible, this.baseShapesVisible);
}
```

**For `getItemShapeFilled`:**  
```java
public boolean getItemShapeFilled(int series, int item) {
    return getItemAttribute(this.shapesFilled, series, this.seriesShapesFilled, this.baseShapesFilled);
}
```",Type-2
1161-3-5,src,org.jfree.chart.plot,CombinedDomainXYPlot,setOrientation,182,188,src,org.jfree.chart.plot,CombinedDomainXYPlot,setRenderer,595,604,Type 2,"**Code Snippet 1: Method: setOrientation (Lines: 182-188)**  
```java
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

**Code Snippet 2: Method: setRenderer (Lines: 595-604)**  
```java
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private void applyToSubplots(Consumer<XYPlot> action) {
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        action.accept(plot);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setOrientation`:**  
```java
public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    applyToSubplots(plot -> plot.setOrientation(orientation));
}
```

**For `setRenderer`:**  
```java
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    applyToSubplots(plot -> plot.setRenderer(renderer));
}
```",Type-2
1161-9-10,src,org.jfree.chart.plot,CombinedRangeXYPlot,setRenderer,543,552,src,org.jfree.chart.plot,CombinedRangeXYPlot,setOrientation,562,569,Type 2,"**Code Snippet 1: Method: setRenderer (Lines: 543-552)**  
```java
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

**Code Snippet 2: Method: setOrientation (Lines: 562-569)**  
```java
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private void applyToSubplots(Consumer<XYPlot> action) {
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        action.accept(plot);
    }
}
```

**2. Refactored Method Calls:**  

**For `setRenderer`:**  
```java
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    applyToSubplots(plot -> plot.setRenderer(renderer));
}
```

**For `setOrientation`:**  
```java
public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    applyToSubplots(plot -> plot.setOrientation(orientation));
}
```",Type-2
1163-1-2,src,org.jfree.chart.plot,FastScatterPlot,zoomDomainAxes,778,787,src,org.jfree.chart.plot,FastScatterPlot,zoomRangeAxes,834,843,Type 2,"**Code Snippet 1: Method: zoomDomainAxes (Lines: 778-787)**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info, 
                           Point2D source) {
    this.domainAxis.resizeRange(factor);
}
```

**Code Snippet 2: Method: zoomRangeAxes (Lines: 834-843)**  
```java
public void zoomRangeAxes(double factor,
                          PlotRenderingInfo info, Point2D source) {
    this.rangeAxis.resizeRange(factor);
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private void zoomAxis(ValueAxis axis, double factor) {
    axis.resizeRange(factor);
}
```

**2. Method Calls Replacing the Clones:**  

**For `zoomDomainAxes`:**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info, 
                           Point2D source) {
    zoomAxis(this.domainAxis, factor);
}
```

**For `zoomRangeAxes`:**  
```java
public void zoomRangeAxes(double factor,
                          PlotRenderingInfo info, Point2D source) {
    zoomAxis(this.rangeAxis, factor);
}
```",Type-2
1164-1-2,src,org.jfree.chart.axis,CategoryAxis,getTickLabelFont,404,413,src,org.jfree.chart.axis,CategoryAxis,getTickLabelPaint,447,456,Type 2,"**Code Snippet 1: Method: getTickLabelFont (Lines: 404-413)**  
```java
public Font getTickLabelFont(Comparable category) {
    if (category == null) {
        throw new IllegalArgumentException(""Null 'category' argument."");
    }
    Font result = (Font) this.tickLabelFontMap.get(category);
    // if there is no specific font, use the general one...
    if (result == null) {
        result = getTickLabelFont();
    }
    return result;
}
```

**Code Snippet 2: Method: getTickLabelPaint (Lines: 447-456)**  
```java
public Paint getTickLabelPaint(Comparable category) {
    if (category == null) {
        throw new IllegalArgumentException(""Null 'category' argument."");
    }
    Paint result = (Paint) this.tickLabelPaintMap.get(category);
    // if there is no specific paint, use the general one...
    if (result == null) {
        result = getTickLabelPaint();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getTickLabelAttribute(Map<Comparable, T> attributeMap, Comparable category, Supplier<T> defaultSupplier) {
    if (category == null) {
        throw new IllegalArgumentException(""Null 'category' argument."");
    }
    T result = attributeMap.get(category);
    if (result == null) {
        result = defaultSupplier.get();
    }
    return result;
}
```

**2. Method Calls to Replace the Clones:**  

**For `getTickLabelFont`:**  
```java
public Font getTickLabelFont(Comparable category) {
    return getTickLabelAttribute(this.tickLabelFontMap, category, this::getTickLabelFont);
}
```

**For `getTickLabelPaint`:**  
```java
public Paint getTickLabelPaint(Comparable category) {
    return getTickLabelAttribute(this.tickLabelPaintMap, category, this::getTickLabelPaint);
}
```",Type-2
1166-1-2,src,org.jfree.chart,ChartPanel,setDomainZoomable,865,874,src,org.jfree.chart,ChartPanel,setRangeZoomable,893,902,Type 2,"**Code Snippet 1: Method: setDomainZoomable (Lines: 865-874)**  
```java
public void setDomainZoomable(boolean flag) {
    if (flag) {
        Plot plot = this.chart.getPlot();
        if (plot instanceof Zoomable) {
            Zoomable z = (Zoomable) plot;
            this.domainZoomable = flag && (z.isDomainZoomable());
        }
    }
    else {
        this.domainZoomable = false;
    }
}
```

**Code Snippet 2: Method: setRangeZoomable (Lines: 893-902)**  
```java
public void setRangeZoomable(boolean flag) {
    if (flag) {
        Plot plot = this.chart.getPlot();
        if (plot instanceof Zoomable) {
            Zoomable z = (Zoomable) plot;
            this.rangeZoomable = flag && (z.isRangeZoomable());
        }
    }
    else {
        this.rangeZoomable = false;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names: `domainZoomable` vs `rangeZoomable`, and method calls: `isDomainZoomable()` vs `isRangeZoomable()`).","**1. Extracted Method:**  
```java
private void setZoomable(boolean flag, boolean isDomain) {
    if (flag) {
        Plot plot = this.chart.getPlot();
        if (plot instanceof Zoomable) {
            Zoomable z = (Zoomable) plot;
            if (isDomain) {
                this.domainZoomable = flag && (z.isDomainZoomable());
            } else {
                this.rangeZoomable = flag && (z.isRangeZoomable());
            }
        }
    } else {
        if (isDomain) {
            this.domainZoomable = false;
        } else {
            this.rangeZoomable = false;
        }
    }
}
```

**2. Method Calls:**  

**For `setDomainZoomable`:**  
```java
public void setDomainZoomable(boolean flag) {
    setZoomable(flag, true);
}
```

**For `setRangeZoomable`:**  
```java
public void setRangeZoomable(boolean flag) {
    setZoomable(flag, false);
}
```",Type-2
1172-1-2,src,org.jfree.chart.plot,CategoryPlot,setDomainAxisLocation,797,805,src,org.jfree.chart.plot,CategoryPlot,setRangeAxisLocation,1078,1086,Type 2,"**Code Snippet 1:**
```java
public void setDomainAxisLocation(int index, AxisLocation location,
        boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.domainAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

**Code Snippet 2:**
```java
public void setRangeAxisLocation(int index, AxisLocation location,
        boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.rangeAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

**Clone Type:** Type-1 Clone","**1. Extracted Method:**
```java
private void setAxisLocation(ObjectList axisLocations, int index, AxisLocation location, boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    axisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

**2. Method Calls Replacing the Clones:**

**For `setDomainAxisLocation`:**
```java
public void setDomainAxisLocation(int index, AxisLocation location,
        boolean notify) {
    setAxisLocation(this.domainAxisLocations, index, location, notify);
}
```

**For `setRangeAxisLocation`:**
```java
public void setRangeAxisLocation(int index, AxisLocation location,
        boolean notify) {
    setAxisLocation(this.rangeAxisLocations, index, location, notify);
}
```",Type-1
1172-3-4,src,org.jfree.chart.plot,XYPlot,setDomainAxisLocation,920,929,src,org.jfree.chart.plot,XYPlot,setRangeAxisLocation,1219,1228,Type 2,"```java
// Code snippet 1: setDomainAxisLocation
public void setDomainAxisLocation(int index, AxisLocation location,
        boolean notify) {

    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.domainAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

```java
// Code snippet 2: setRangeAxisLocation
public void setRangeAxisLocation(int index, AxisLocation location,
        boolean notify) {

    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.rangeAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

Clone Type: **Type-2**","```java
// 1. Extracted method
private void setAxisLocation(ObjectList axisLocations, int index, AxisLocation location, boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    axisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

```java
// 2. Method calls replacing the clones

// For setDomainAxisLocation
public void setDomainAxisLocation(int index, AxisLocation location,
        boolean notify) {
    setAxisLocation(this.domainAxisLocations, index, location, notify);
}

// For setRangeAxisLocation
public void setRangeAxisLocation(int index, AxisLocation location,
        boolean notify) {
    setAxisLocation(this.rangeAxisLocations, index, location, notify);
}
```",Type-2
1173-2-3,src,org.jfree.chart.plot,CombinedDomainXYPlot,setOrientation,182,188,src,org.jfree.chart.plot,CombinedDomainXYPlot,setRenderer,595,604,Type 2,"**Code Snippet 1: Method: setOrientation (Lines: 182-188)**  
```java
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

**Code Snippet 2: Method: setRenderer (Lines: 595-604)**  
```java
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private void applyToSubplots(Consumer<XYPlot> action) {
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        action.accept(plot);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setOrientation`:**  
```java
public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    applyToSubplots(plot -> plot.setOrientation(orientation));
}
```

**For `setRenderer`:**  
```java
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    applyToSubplots(plot -> plot.setRenderer(renderer));
}
```",Type-3
1173-5-6,src,org.jfree.chart.plot,CombinedRangeXYPlot,setRenderer,543,552,src,org.jfree.chart.plot,CombinedRangeXYPlot,setOrientation,562,569,Type 2,"**Code Snippet 1: Method: setRenderer (Lines: 543-552)**  
```java
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

**Code Snippet 2: Method: setOrientation (Lines: 562-569)**  
```java
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private void applyToSubplots(Consumer<XYPlot> action) {
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        action.accept(plot);
    }
}
```

**2. Refactored Method Calls:**  

**Refactored `setRenderer` Method:**  
```java
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    applyToSubplots(plot -> plot.setRenderer(renderer));
}
```

**Refactored `setOrientation` Method:**  
```java
public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    applyToSubplots(plot -> plot.setOrientation(orientation));
}
```",Type-2
1204-1-2,src,org.jfree.chart,JFreeChart,setBackgroundPaint,964,973,src,org.jfree.chart,JFreeChart,setBackgroundImage,1001,1010,Type 2,"**Code Snippet 1: Method: setBackgroundPaint (Lines: 964-973)**  
```java
public void setBackgroundPaint(Paint paint) {

    if (this.backgroundPaint != null) {
        if (!this.backgroundPaint.equals(paint)) {
            this.backgroundPaint = paint;
            fireChartChanged();
        }
    }
    else {
        if (paint != null) {
            this.backgroundPaint = paint;
            fireChartChanged();
        }
    }

}
```

**Code Snippet 2: Method: setBackgroundImage (Lines: 1001-1010)**  
```java
public void setBackgroundImage(Image image) {

    if (this.backgroundImage != null) {
        if (!this.backgroundImage.equals(image)) {
            this.backgroundImage = image;
            fireChartChanged();
        }
    }
    else {
        if (image != null) {
            this.backgroundImage = image;
            fireChartChanged();
        }
    }

}
```

**Clone Type:** Type-2 (Identical except for variable names and types).","**1. Extracted Method:**  
```java
private <T> void setBackgroundProperty(T currentProperty, T newProperty, Consumer<T> setter) {
    if (currentProperty != null) {
        if (!currentProperty.equals(newProperty)) {
            setter.accept(newProperty);
            fireChartChanged();
        }
    } else {
        if (newProperty != null) {
            setter.accept(newProperty);
            fireChartChanged();
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setBackgroundPaint`:**  
```java
public void setBackgroundPaint(Paint paint) {
    setBackgroundProperty(this.backgroundPaint, paint, p -> this.backgroundPaint = p);
}
```

**For `setBackgroundImage`:**  
```java
public void setBackgroundImage(Image image) {
    setBackgroundProperty(this.backgroundImage, image, i -> this.backgroundImage = i);
}
```",Type-2
1225-1-2,src,org.jfree.data.gantt,TaskSeriesCollection,getPercentComplete,449,457,src,org.jfree.data.gantt,TaskSeriesCollection,getSubIntervalCount,482,490,Type 2,"**Code Snippet 1 - Method: getPercentComplete**  
```java
public Number getPercentComplete(int row, int column) {
    Comparable rowKey = getRowKey(row);
    Comparable columnKey = getColumnKey(column);
    return getPercentComplete(rowKey, columnKey);
}
```

**Code Snippet 2 - Method: getSubIntervalCount**  
```java
public int getSubIntervalCount(int row, int column) {
    Comparable rowKey = getRowKey(row);
    Comparable columnKey = getColumnKey(column);
    return getSubIntervalCount(rowKey, columnKey);
}
```

**Clone Type:** Type-1 Clone (Identical except for method names and return types).","**1. Extracted Method:**  
```java
private <T> T getRowColumnResult(int row, int column, BiFunction<Comparable, Comparable, T> function) {
    Comparable rowKey = getRowKey(row);
    Comparable columnKey = getColumnKey(column);
    return function.apply(rowKey, columnKey);
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(int row, int column) {
    return getRowColumnResult(row, column, this::getPercentComplete);
}
```

**For `getSubIntervalCount`:**  
```java
public int getSubIntervalCount(int row, int column) {
    return getRowColumnResult(row, column, this::getSubIntervalCount);
}
```",Type-1
1226-1-2,src,org.jfree.data.general,DatasetUtilities,createPieDatasetForRow,205,213,src,org.jfree.data.general,DatasetUtilities,createPieDatasetForColumn,240,248,Type 2,"**Code Snippet 1: Method: createPieDatasetForRow (Lines: 205-213)**  
```java
public static PieDataset createPieDatasetForRow(CategoryDataset dataset,
                                                int row) {
    DefaultPieDataset result = new DefaultPieDataset();
    int columnCount = dataset.getColumnCount();
    for (int current = 0; current < columnCount; current++) {
        Comparable columnKey = dataset.getColumnKey(current);
        result.setValue(columnKey, dataset.getValue(row, current));
    }
    return result;
}
```

**Code Snippet 2: Method: createPieDatasetForColumn (Lines: 240-248)**  
```java
public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,
                                                   int column) {
    DefaultPieDataset result = new DefaultPieDataset();
    int rowCount = dataset.getRowCount();
    for (int i = 0; i < rowCount; i++) {
        Comparable rowKey = dataset.getRowKey(i);
        result.setValue(rowKey, dataset.getValue(i, column));
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private static PieDataset createPieDataset(CategoryDataset dataset, boolean isRow, int index) {
    DefaultPieDataset result = new DefaultPieDataset();
    int count = isRow ? dataset.getColumnCount() : dataset.getRowCount();
    for (int i = 0; i < count; i++) {
        Comparable key = isRow ? dataset.getColumnKey(i) : dataset.getRowKey(i);
        Number value = isRow ? dataset.getValue(index, i) : dataset.getValue(i, index);
        result.setValue(key, value);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `createPieDatasetForRow`:**  
```java
public static PieDataset createPieDatasetForRow(CategoryDataset dataset, int row) {
    return createPieDataset(dataset, true, row);
}
```

**For `createPieDatasetForColumn`:**  
```java
public static PieDataset createPieDatasetForColumn(CategoryDataset dataset, int column) {
    return createPieDataset(dataset, false, column);
}
```",Type-3
1230-1-2,src,org.jfree.chart.plot,CategoryPlot,getDomainAxisLocation,732,740,src,org.jfree.chart.plot,CategoryPlot,getRangeAxisLocation,1015,1023,Type 2,"**Code Snippet 1: Method: getDomainAxisLocation (Lines: 732-740)**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.domainAxisLocations.size()) {
        result = (AxisLocation) this.domainAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getDomainAxisLocation(0));
    }
    return result;
}
```

**Code Snippet 2: Method: getRangeAxisLocation (Lines: 1015-1023)**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.rangeAxisLocations.size()) {
        result = (AxisLocation) this.rangeAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getRangeAxisLocation(0));
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private AxisLocation getAxisLocation(int index, List<AxisLocation> axisLocations, Supplier<AxisLocation> defaultLocationSupplier) {
    AxisLocation result = null;
    if (index < axisLocations.size()) {
        result = axisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(defaultLocationSupplier.get());
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getDomainAxisLocation`:**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    return getAxisLocation(index, this.domainAxisLocations, () -> getDomainAxisLocation(0));
}
```

**For `getRangeAxisLocation`:**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    return getAxisLocation(index, this.rangeAxisLocations, () -> getRangeAxisLocation(0));
}
```",Type-1
1250-1-2,src,org.jfree.chart.plot,CategoryPlot,getDomainAxisForDataset,1255,1261,src,org.jfree.chart.plot,CategoryPlot,getRangeAxisForDataset,1288,1294,Type 2,"```java
// Code snippet 1 - Method: getDomainAxisForDataset
public CategoryAxis getDomainAxisForDataset(int index) {
    CategoryAxis result = getDomainAxis();
    Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(index);
    if (axisIndex != null) {
        result = getDomainAxis(axisIndex.intValue());
    }
    return result;
}

// Code snippet 2 - Method: getRangeAxisForDataset
public ValueAxis getRangeAxisForDataset(int index) {
    ValueAxis result = getRangeAxis();
    Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(index);
    if (axisIndex != null) {
        result = getRangeAxis(axisIndex.intValue());
    }
    return result;
}

// Clone type: Type-2
```","```java
// 1. The extracted method
private <T> T getAxisForDataset(int index, T defaultAxis, ObjectList axisMap, Function<Integer, T> axisGetter) {
    T result = defaultAxis;
    Integer axisIndex = (Integer) axisMap.get(index);
    if (axisIndex != null) {
        result = axisGetter.apply(axisIndex.intValue());
    }
    return result;
}

// 2. The method calls that should replace the clones in the original files

// Replacing getDomainAxisForDataset
public CategoryAxis getDomainAxisForDataset(int index) {
    return getAxisForDataset(index, getDomainAxis(), this.datasetToDomainAxisMap, this::getDomainAxis);
}

// Replacing getRangeAxisForDataset
public ValueAxis getRangeAxisForDataset(int index) {
    return getAxisForDataset(index, getRangeAxis(), this.datasetToRangeAxisMap, this::getRangeAxis);
}
```",Type-2
1250-3-4,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getMeanValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 348-356):**  
```java
public Number getMeanValue(int row, int column) {
    return getMeanValueInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 370-377):**  
```java
public Number getMeanValue(Comparable rowKey, Comparable columnKey) {
    return getMeanValueInternal(rowKey, columnKey);
}
```",Type-2
1250-3-5,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""median"":
                result = item.getMedian();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""median"");
}
```",Type-2
1250-3-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""median"":
                result = item.getMedian();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""median"");
}
```",Type-2
1250-3-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q1"");
}
```",Type-2
1250-3-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q1"");
}
```",Type-2
1250-3-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 470-477)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q3"");
}
```",Type-2
1250-3-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q3"");
}
```",Type-2
1250-3-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minRegular"");
}
```",Type-2
1250-3-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minRegular"");
}
```",Type-2
1250-3-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxRegular"");
}
```",Type-2
1250-3-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxRegular"");
}
```",Type-2
1250-3-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minOutlier"");
}
```",Type-2
1250-3-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minOutlier"");
}
```",Type-2
1250-3-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxOutlier"");
}
```",Type-3
1250-3-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxOutlier"");
}
```",Type-2
1250-3-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMean);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-3-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,348,356,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 348-356)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getMean);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-4-5,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""median"":
                result = item.getMedian();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""median"");
}
```",Type-2
1250-4-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""median"":
                result = item.getMedian();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""median"");
}
```",Type-2
1250-4-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q1"");
}
```",Type-2
1250-4-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q1"");
}
```",Type-2
1250-4-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ3Value (Lines: 470-477)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q3"");
}
```",Type-2
1250-4-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""q3"");
}
```",Type-2
1250-4-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minRegular"");
}
```",Type-2
1250-4-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minRegular"");
}
```",Type-2
1250-4-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getMeanValue**  
```java
/**
 * Returns the mean value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The mean value.
 * 
 * @see #getItem(int, int)
 */
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value for an item based on the provided extractor function.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the item.
 * 
 * @return The extracted value.
 */
private Number getValueFromItem(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getValueFromItem(row, column, BoxAndWhiskerItem::getMean);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getValueFromItem(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1250-4-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxRegular"");
}
```",Type-2
1250-4-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minOutlier"");
}
```",Type-2
1250-4-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""minOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""minOutlier"");
}
```",Type-3
1250-4-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxOutlier"");
}
```",Type-2
1250-4-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""mean"":
                result = item.getMean();
                break;
            case ""maxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""mean"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""maxOutlier"");
}
```",Type-2
1250-4-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
/**
 * Returns the mean value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The mean value.
 * 
 * @see #getItem(int, int)
 */
public Number getMeanValue(int row, int column) {

    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;

}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but differ in the return type (`Number` vs. `List`) and the specific method called on the `BoxAndWhiskerItem` object (`getMean()` vs. `getOutliers()`).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private <T> T getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMean);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-4-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMeanValue,370,377,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 370-377)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMean);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-5-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getMedianValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 390-397):**  
```java
public Number getMedianValue(int row, int column) {
    return getMedianValueInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 410-417):**  
```java
public Number getMedianValue(Comparable rowKey, Comparable columnKey) {
    return getMedianValueInternal(rowKey, columnKey);
}
```",Type-2
1250-5-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```",Type-2
1250-5-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```",Type-2
1250-5-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 470-477)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```",Type-2
1250-5-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```",Type-2
1250-5-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-5-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-5-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-5-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-5-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-5-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-5-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-5-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-3
1250-5-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getMedian);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-5-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,390,397,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 390-397)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getMedian);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-6-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```",Type-2
1250-6-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q1"":
                result = item.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```",Type-2
1250-6-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 470-477)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""Q3"":
                result = item.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```",Type-2
1250-6-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1 - Method: getMedianValue**  
```java
/**
 * Returns the median value for an item.
 *
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 *
 * @return The median value.
 * 
 * @see #getItem(int, int)
 */
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value (e.g., median, Q3) for an item based on the provided extractor.
 *
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from a BoxAndWhiskerItem.
 *
 * @return The extracted value.
 */
private Number getValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getValue(row, column, BoxAndWhiskerItem::getMedian);
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getValue(row, column, BoxAndWhiskerItem::getQ3);
}
```",Type-2
1250-6-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-6-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getValueFromItem(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = valueExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getValueFromItem(row, column, BoxAndWhiskerItem::getMedian);
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getValueFromItem(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```",Type-2
1250-6-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-6-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-6-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-6-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-6-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-3
1250-6-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Median"":
                result = item.getMedian();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Median"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-3
1250-6-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getMedian);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-6-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMedianValue,410,417,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 410-417)**  
```java
public Number getMedianValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, 
            column);
    if (item != null) {
        result = item.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getMedian);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-7-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 430-437)**  
```java
/**
 * Returns the first quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The first quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ1Value (Lines: 450-457)**  
```java
/**
 * Returns the first quartile value.
 * 
 * @param rowKey  the row key.
 * @param columnKey  the column key.
 * 
 * @return The first quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ1Value(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getQ1ValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 430-437):**  
```java
public Number getQ1Value(int row, int column) {
    return getQ1ValueInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 450-457):**  
```java
public Number getQ1Value(Comparable rowKey, Comparable columnKey) {
    return getQ1ValueInternal(rowKey, columnKey);
}
```",Type-2
1250-7-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,Type 2,"**Code Snippet 1 - Method: getQ1Value**  
```java
/**
 * Returns the first quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The first quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
/**
 * Returns the specified quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param quartile  the quartile to retrieve (""Q1"" or ""Q3"").
 * 
 * @return The specified quartile value.
 */
private Number getQuartileValue(int row, int column, String quartile) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""Q1"".equals(quartile)) {
            result = item.getQ1();
        } else if (""Q3"".equals(quartile)) {
            result = item.getQ3();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getQuartileValue(row, column, ""Q1"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getQuartileValue(row, column, ""Q3"");
}
```",Type-2
1250-7-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getQuartileValue(int row, int column, String quartileType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""Q1"".equals(quartileType)) {
            result = item.getQ1();
        } else if (""Q3"".equals(quartileType)) {
            result = item.getQ3();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getQuartileValue(row, column, ""Q1"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getQuartileValue(row, column, ""Q3"");
}
```",Type-2
1250-7-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-7-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-7-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-7-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getValueFromItem(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getValueFromItem(row, column, ""Q1"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getValueFromItem(row, column, ""MaxRegular"");
}
```",Type-2
1250-7-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
/**
 * Returns the first quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The first quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 727-734)**  
```java
/**
 * Returns the minimum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ1);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-3
1250-7-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-7-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-7-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
/**
 * Returns the first quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The first quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ1);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-2
1250-7-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 430-437)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getQ1);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-7-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,430,437,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 430-437)**  
```java
/**
 * Returns the first quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The first quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getQ1);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-8-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ3Value (Lines: 470-477)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getQuartileValue(int row, int column, String quartileType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""Q1"".equals(quartileType)) {
            result = item.getQ1();
        } else if (""Q3"".equals(quartileType)) {
            result = item.getQ3();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getQuartileValue(row, column, ""Q1"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getQuartileValue(row, column, ""Q3"");
}
```",Type-2
1250-8-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1: getQ1Value (Lines 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: getQ3Value (Lines 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getQuartileValue(int row, int column, String quartileType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""Q1"".equals(quartileType)) {
            result = item.getQ1();
        } else if (""Q3"".equals(quartileType)) {
            result = item.getQ3();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getQuartileValue(row, column, ""Q1"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getQuartileValue(row, column, ""Q3"");
}
```",Type-2
1250-8-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-8-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-8-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-8-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-8-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method `getQ1Value` (Lines 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method `getMinOutlier` (Lines 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-8-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-8-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-8-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q1"":
                result = item.getQ1();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q1"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-8-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getQ1);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-8-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ1Value,450,457,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 450-457)**  
```java
public Number getQ1Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getQ1);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-9-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param rowKey  the row key.
 * @param columnKey  the column key.
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getQ3ValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 470-477):**  
```java
public Number getQ3Value(int row, int column) {
    return getQ3ValueInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 490-497):**  
```java
public Number getQ3Value(Comparable rowKey, Comparable columnKey) {
    return getQ3ValueInternal(rowKey, columnKey);
}
```",Type-2
1250-9-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
/**
 * Returns the minimum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```",Type-2
1250-9-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
/**
 * Returns the minimum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from a BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```",Type-2
1250-9-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 687-694)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-3
1250-9-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getValueFromItem(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getValueFromItem(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getValueFromItem(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1250-9-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 727-734)**  
```java
/**
 * Returns the minimum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q3"":
                result = item.getQ3();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-3
1250-9-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
/**
 * Returns the minimum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-3
1250-9-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 767-774)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. The Method Calls That Replace the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-3
1250-9-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-2
1250-9-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value or list from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param <T>  the return type (Number or List).
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value or list.
 */
private <T> T getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-9-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,470,477,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 470-477)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Retrieves a specific property from a BoxAndWhiskerItem for a given row and column.
 *
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param propertyExtractor  a function to extract the desired property from the BoxAndWhiskerItem.
 * @param <T>  the type of the property to be returned.
 *
 * @return The extracted property, or null if the item is null.
 */
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-10-11,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q3"":
                result = item.getQ3();
                break;
            case ""MinRegularValue"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegularValue"");
}
```",Type-2
1250-10-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q3"":
                result = item.getQ3();
                break;
            case ""MinRegular"":
                result = item.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegular"");
}
```",Type-2
1250-10-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1250-10-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 490-497)**  
```java
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q3"":
                result = item.getQ3();
                break;
            case ""MaxRegular"":
                result = item.getMaxRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegular"");
}
```",Type-2
1250-10-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 727-734)**  
```java
/**
 * Returns the minimum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-2
1250-10-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 747-754)**  
```java
/**
 * Returns the minimum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-2
1250-10-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 767-774)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value.
 */
private Number getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, Number> extractor) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-3
1250-10-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""Q3"":
                result = item.getQ3();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""Q3"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-10-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value or list from a BoxAndWhiskerItem based on the provided extractor.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param extractor  a function to extract the desired value from the BoxAndWhiskerItem.
 * 
 * @return The extracted value or list.
 */
private <T> T getBoxAndWhiskerValue(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerValue(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-10-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getQ3Value,490,497,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getQ3Value (Lines: 490-497)**  
```java
/**
 * Returns the third quartile value.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The third quartile value.
 * 
 * @see #getItem(int, int)
 */
public Number getQ3Value(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getQ3();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Retrieves a specific property from a BoxAndWhiskerItem for a given row and column.
 *
 * @param <T>       the return type of the property.
 * @param row       the row index (zero-based).
 * @param column    the column index (zero-based).
 * @param extractor a function to extract the desired property from the BoxAndWhiskerItem.
 * @return The extracted property, or null if the item is null.
 */
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = extractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getQ3);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-11-12,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getMinRegularValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getMinRegularValueInternal(row, column);
}
```

**For Code Snippet 2:**  
```java
public Number getMinRegularValue(Comparable rowKey, Comparable columnKey) {
    return getMinRegularValueInternal(rowKey, columnKey);
}
```",Type-2
1250-11-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getRegularValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinRegularValue() : item.getMaxRegularValue();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getRegularValue(row, column, true);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getRegularValue(row, column, false);
}
```",Type-2
1250-11-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getRegularValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinRegularValue() : item.getMaxRegularValue();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getRegularValue(row, column, true);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getRegularValue(row, column, false);
}
```",Type-2
1250-11-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getMinValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""MinRegularValue"".equals(valueType)) {
            result = item.getMinRegularValue();
        } else if (""MinOutlier"".equals(valueType)) {
            result = item.getMinOutlier();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getMinValue(row, column, ""MinRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getMinValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-11-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getMinValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""MinRegularValue"".equals(valueType)) {
            result = item.getMinRegularValue();
        } else if (""MinOutlier"".equals(valueType)) {
            result = item.getMinOutlier();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getMinValue(row, column, ""MinRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getMinValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-11-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MinRegularValue"":
                result = item.getMinRegularValue();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-11-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MinRegularValue"":
                result = item.getMinRegularValue();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-11-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-11-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,647,654,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 647-654)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-12-13,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getRegularValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinRegularValue() : item.getMaxRegularValue();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getRegularValue(row, column, true);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getRegularValue(row, column, false);
}
```",Type-2
1250-12-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getRegularValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinRegularValue() : item.getMaxRegularValue();
    }
    return result;
}
```

**2. Method Calls to Replace the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getRegularValue(row, column, true);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getRegularValue(row, column, false);
}
```",Type-2
1250-12-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getMinValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""MinRegularValue"".equals(valueType)) {
            result = item.getMinRegularValue();
        } else if (""MinOutlier"".equals(valueType)) {
            result = item.getMinOutlier();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getMinValue(row, column, ""MinRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getMinValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-12-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getMinValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""MinRegularValue"".equals(valueType)) {
            result = item.getMinRegularValue();
        } else if (""MinOutlier"".equals(valueType)) {
            result = item.getMinOutlier();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getMinValue(row, column, ""MinRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getMinValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-12-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MinRegularValue"":
                result = item.getMinRegularValue();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-12-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MinRegularValue"":
                result = item.getMinRegularValue();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-12-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-12-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinRegularValue,667,674,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 667-674)**  
```java
public Number getMinRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-13-14,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 687-694)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxRegularValue (Lines: 707-714)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param rowKey  the row key.
 * @param columnKey  the column key.
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. The Extracted Method:**  
```java
private Number getMaxRegularValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For Code Snippet 1 (Lines: 687-694):**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getMaxRegularValueInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 707-714):**  
```java
public Number getMaxRegularValue(Comparable rowKey, Comparable columnKey) {
    return getMaxRegularValueInternal(rowKey, columnKey);
}
```",Type-2
1250-13-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = item.getMaxRegularValue();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-13-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = item.getMaxRegularValue();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-13-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = item.getMaxRegularValue();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-13-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerItemProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-13-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-14-15,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = item.getMaxRegularValue();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-14-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = item.getMaxRegularValue();
                break;
            case ""MinOutlier"":
                result = item.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MinOutlier"");
}
```",Type-2
1250-14-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 707-714)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 767-774)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 Clone  
Explanation: The two methods are structurally identical except for the method names (`getMaxRegularValue` vs. `getMaxOutlier`) and the specific method called on the `BoxAndWhiskerItem` object (`getMaxRegularValue()` vs. `getMaxOutlier()`).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value for an item based on the provided value type.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param valueType  the type of value to retrieve (""MaxRegularValue"" or ""MaxOutlier"").
 * 
 * @return The requested value.
 */
private Number getSpecificValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        if (""MaxRegularValue"".equals(valueType)) {
            result = item.getMaxRegularValue();
        } else if (""MaxOutlier"".equals(valueType)) {
            result = item.getMaxOutlier();
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getSpecificValue(row, column, ""MaxRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getSpecificValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-14-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 707-714)**  
```java
/**
 * Returns the maximum regular (non outlier) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum regular value.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getMaxValue(int row, int column, boolean isRegular) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isRegular ? item.getMaxRegularValue() : item.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getMaxValue(row, column, true);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getMaxValue(row, column, false);
}
```",Type-2
1250-14-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-14-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,707,714,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getMaxRegularValue (Lines: 707-714)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-15-16,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,Type 2,"**Code Snippet 1: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getMinOutlierInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1:**  
```java
public Number getMinOutlier(int row, int column) {
    return getMinOutlierInternal(row, column);
}
```

**For Code Snippet 2:**  
```java
public Number getMinOutlier(Comparable rowKey, Comparable columnKey) {
    return getMinOutlierInternal(rowKey, columnKey);
}
```",Type-2
1250-15-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getOutlierValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinOutlier() : item.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls to Replace the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getOutlierValue(row, column, true);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getOutlierValue(row, column, false);
}
```",Type-2
1250-15-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMinOutlier (Lines: 727-734)**  
```java
/**
 * Returns the minimum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The minimum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
/**
 * Returns the outlier value (minimum or maximum) for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * @param isMin  flag to determine whether to fetch minimum or maximum outlier.
 * 
 * @return The outlier value.
 * 
 * @see #getItem(int, int)
 */
private Number getOutlier(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinOutlier() : item.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getOutlier(row, column, true);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getOutlier(row, column, false);
}
```",Type-2
1250-15-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and return types).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-15-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,727,734,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getMinOutlier (Lines: 727-734)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-16-17,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,Type 2,"**Code Snippet 1 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for method names and the specific method calls `getMinOutlier` vs. `getMaxOutlier`).","**1. Extracted Method:**  
```java
private Number getOutlierValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinOutlier() : item.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls to Replace the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getOutlierValue(row, column, true);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getOutlierValue(row, column, false);
}
```",Type-2
1250-16-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getOutlierValue(int row, int column, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = isMin ? item.getMinOutlier() : item.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getOutlierValue(row, column, true);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getOutlierValue(row, column, false);
}
```",Type-2
1250-16-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-17-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1: Method: getMaxOutlier (Lines: 767-774)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param rowKey  the row key.
 * @param columnKey  the column key.
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getMaxOutlierInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getMaxOutlierInternal(row, column);
}
```

**For Code Snippet 2:**  
```java
public Number getMaxOutlier(Comparable rowKey, Comparable columnKey) {
    return getMaxOutlierInternal(rowKey, columnKey);
}
```",Type-2
1250-17-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-17-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,767,774,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getMaxOutlier (Lines: 767-774)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1250-18-19,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,Type 2,"**Code Snippet 1: Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 807-814)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-18-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getMaxOutlier (Lines: 787-794)**  
```java
/**
 * Returns the maximum outlier (non farout) value for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return The maximum outlier.
 * 
 * @see #getItem(int, int)
 */
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
/**
 * Returns a list of outlier values for an item.
 * 
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 * 
 * @return A list of outlier values.
 * 
 * @see #getItem(int, int)
 */
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMaxOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1250-19-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,807,814,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1: Method: getOutliers (Lines: 807-814)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(Comparable rowKey, Comparable columnKey) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKey, columnKey);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private List getOutliersInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            rowKeyOrIndex, columnKeyOrIndex);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 807-814):**  
```java
public List getOutliers(int row, int column) {
    return getOutliersInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 827-834):**  
```java
public List getOutliers(Comparable rowKey, Comparable columnKey) {
    return getOutliersInternal(rowKey, columnKey);
}
```",Type-2
1250-21-22,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getMeanValue,152,159,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getMeanValue,196,203,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 152-159)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getMeanValue (Lines: 196-203)**  
```java
public Number getMeanValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(rowKey, columnKey);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getMeanValueInternal(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(rowKeyOrIndex, columnKeyOrIndex);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 152-159):**  
```java
public Number getMeanValue(int row, int column) {
    return getMeanValueInternal(row, column);
}
```

**For Code Snippet 2 (Lines: 196-203):**  
```java
public Number getMeanValue(Comparable rowKey, Comparable columnKey) {
    return getMeanValueInternal(rowKey, columnKey);
}
```",Type-2
1250-21-23,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getMeanValue,152,159,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getStdDevValue,214,221,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 152-159)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getStdDevValue (Lines: 214-221)**  
```java
public Number getStdDevValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getStatisticValue(int row, int column, boolean isMean) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = isMean ? masd.getMean() : masd.getStandardDeviation();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getStatisticValue(row, column, true);
}
```

**For `getStdDevValue`:**  
```java
public Number getStdDevValue(int row, int column) {
    return getStatisticValue(row, column, false);
}
```",Type-2
1250-21-24,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getMeanValue,152,159,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getStdDevValue,232,239,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 152-159)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getStdDevValue (Lines: 232-239)**  
```java
public Number getStdDevValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getStatisticValue(int row, int column, boolean isMean) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = isMean ? masd.getMean() : masd.getStandardDeviation();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getStatisticValue(row, column, true);
}
```

**For `getStdDevValue`:**  
```java
public Number getStdDevValue(int row, int column) {
    return getStatisticValue(row, column, false);
}
```",Type-2
1250-22-23,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getMeanValue,196,203,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getStdDevValue,214,221,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 196-203)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getStdDevValue (Lines: 214-221)**  
```java
public Number getStdDevValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getStatisticValue(int row, int column, boolean isMean) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = isMean ? masd.getMean() : masd.getStandardDeviation();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getStatisticValue(row, column, true);
}
```

**For `getStdDevValue`:**  
```java
public Number getStdDevValue(int row, int column) {
    return getStatisticValue(row, column, false);
}
```",Type-2
1250-22-24,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getMeanValue,196,203,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getStdDevValue,232,239,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 196-203)**  
```java
public Number getMeanValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getStdDevValue (Lines: 232-239)**  
```java
public Number getStdDevValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getStatisticValue(int row, int column, boolean isMean) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = isMean ? masd.getMean() : masd.getStandardDeviation();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int row, int column) {
    return getStatisticValue(row, column, true);
}
```

**For `getStdDevValue`:**  
```java
public Number getStdDevValue(int row, int column) {
    return getStatisticValue(row, column, false);
}
```",Type-2
1250-23-24,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getStdDevValue,214,221,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,getStdDevValue,232,239,Type 2,"**Code Snippet 1: Method: getStdDevValue (Lines: 214-221)**  
```java
/**
 * Returns the standard deviation value for an item.
 *
 * @param row  the row index (zero-based).
 * @param column  the column index (zero-based).
 *
 * @return The standard deviation (possibly <code>null</code>).
 */
public Number getStdDevValue(int row, int column) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(row, column);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**Code Snippet 2: Method: getStdDevValue (Lines: 232-239)**  
```java
/**
 * Returns the standard deviation value for an item.
 *
 * @param rowKey  the row key.
 * @param columnKey  the columnKey.
 *
 * @return The standard deviation (possibly <code>null</code>).
 */
public Number getStdDevValue(Comparable rowKey, Comparable columnKey) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(rowKey, columnKey);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and parameter types).","**1. Extracted Method:**  
```java
private Number getStandardDeviationValue(Object rowKeyOrIndex, Object columnKeyOrIndex) {
    Number result = null;
    MeanAndStandardDeviation masd = (MeanAndStandardDeviation) 
            this.data.getObject(rowKeyOrIndex, columnKeyOrIndex);
    if (masd != null) {
        result = masd.getStandardDeviation();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 214-221):**  
```java
public Number getStdDevValue(int row, int column) {
    return getStandardDeviationValue(row, column);
}
```

**For Code Snippet 2 (Lines: 232-239):**  
```java
public Number getStdDevValue(Comparable rowKey, Comparable columnKey) {
    return getStandardDeviationValue(rowKey, columnKey);
}
```",Type-2
1254-1-2,src,org.jfree.chart.axis,Axis,setLabelFont,370,376,src,org.jfree.chart.axis,Axis,setTickLabelFont,610,618,Type 2,"**Code Snippet 1: Method: setLabelFont (Lines: 370-376)**  
```java
public void setLabelFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.labelFont.equals(font)) {
        this.labelFont = font;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Code Snippet 2: Method: setTickLabelFont (Lines: 610-618)**  
```java
public void setTickLabelFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.tickLabelFont.equals(font)) {
        this.tickLabelFont = font;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private void setFont(Font newFont, Font currentFont, java.util.function.Consumer<Font> fontSetter) {
    if (newFont == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!currentFont.equals(newFont)) {
        fontSetter.accept(newFont);
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**2. Method Calls:**  

**For `setLabelFont`:**  
```java
public void setLabelFont(Font font) {
    setFont(font, this.labelFont, newFont -> this.labelFont = newFont);
}
```

**For `setTickLabelFont`:**  
```java
public void setTickLabelFont(Font font) {
    setFont(font, this.tickLabelFont, newFont -> this.tickLabelFont = newFont);
}
```",Type-2
1254-1-3,src,org.jfree.chart.axis,Axis,setLabelFont,370,376,src,org.jfree.chart.axis,Axis,setTickLabelInsets,669,675,Type 2,"**Code Snippet 1: Method: setLabelFont (Lines: 370-376)**  
```java
public void setLabelFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.labelFont.equals(font)) {
        this.labelFont = font;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Code Snippet 2: Method: setTickLabelInsets (Lines: 669-675)**  
```java
public void setTickLabelInsets(RectangleInsets insets) {
    if (insets == null) {
        throw new IllegalArgumentException(""Null 'insets' argument."");
    }
    if (!this.tickLabelInsets.equals(insets)) {
        this.tickLabelInsets = insets;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setProperty(T currentValue, T newValue, String errorMessage, Consumer<T> setter) {
    if (newValue == null) {
        throw new IllegalArgumentException(errorMessage);
    }
    if (!currentValue.equals(newValue)) {
        setter.accept(newValue);
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**2. Method Calls to Replace the Clones:**  

**For `setLabelFont`:**  
```java
public void setLabelFont(Font font) {
    setProperty(this.labelFont, font, ""Null 'font' argument."", value -> this.labelFont = value);
}
```

**For `setTickLabelInsets`:**  
```java
public void setTickLabelInsets(RectangleInsets insets) {
    setProperty(this.tickLabelInsets, insets, ""Null 'insets' argument."", value -> this.tickLabelInsets = value);
}
```",Type-2
1254-1-4,src,org.jfree.chart.axis,Axis,setLabelFont,370,376,src,org.jfree.chart.axis,Axis,setTickMarkStroke,776,782,Type 2,"**Code Snippet 1: Method: setLabelFont (Lines: 370-376)**  
```java
public void setLabelFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.labelFont.equals(font)) {
        this.labelFont = font;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Code Snippet 2: Method: setTickMarkStroke (Lines: 776-782)**  
```java
public void setTickMarkStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    if (!this.tickMarkStroke.equals(stroke)) {
        this.tickMarkStroke = stroke;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setProperty(T currentProperty, T newProperty, String errorMessage, Consumer<T> propertySetter) {
    if (newProperty == null) {
        throw new IllegalArgumentException(errorMessage);
    }
    if (!currentProperty.equals(newProperty)) {
        propertySetter.accept(newProperty);
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**2. Method Calls:**  

**For `setLabelFont`:**  
```java
public void setLabelFont(Font font) {
    setProperty(this.labelFont, font, ""Null 'font' argument."", newFont -> this.labelFont = newFont);
}
```

**For `setTickMarkStroke`:**  
```java
public void setTickMarkStroke(Stroke stroke) {
    setProperty(this.tickMarkStroke, stroke, ""Null 'stroke' argument."", newStroke -> this.tickMarkStroke = newStroke);
}
```",Type-2
1254-2-3,src,org.jfree.chart.axis,Axis,setTickLabelFont,610,618,src,org.jfree.chart.axis,Axis,setTickLabelInsets,669,675,Type 2,"**Code Snippet 1: Method: setTickLabelFont (Lines: 610-618)**  
```java
public void setTickLabelFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.tickLabelFont.equals(font)) {
        this.tickLabelFont = font;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Code Snippet 2: Method: setTickLabelInsets (Lines: 669-675)**  
```java
public void setTickLabelInsets(RectangleInsets insets) {
    if (insets == null) {
        throw new IllegalArgumentException(""Null 'insets' argument."");
    }
    if (!this.tickLabelInsets.equals(insets)) {
        this.tickLabelInsets = insets;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and types).","**1. Extracted Method:**  
```java
private <T> void setProperty(T currentValue, T newValue, String errorMessage, Consumer<T> setter) {
    if (newValue == null) {
        throw new IllegalArgumentException(errorMessage);
    }
    if (!currentValue.equals(newValue)) {
        setter.accept(newValue);
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setTickLabelFont`:**  
```java
public void setTickLabelFont(Font font) {
    setProperty(this.tickLabelFont, font, ""Null 'font' argument."", value -> this.tickLabelFont = value);
}
```

**For `setTickLabelInsets`:**  
```java
public void setTickLabelInsets(RectangleInsets insets) {
    setProperty(this.tickLabelInsets, insets, ""Null 'insets' argument."", value -> this.tickLabelInsets = value);
}
```",Type-2
1254-2-4,src,org.jfree.chart.axis,Axis,setTickLabelFont,610,618,src,org.jfree.chart.axis,Axis,setTickMarkStroke,776,782,Type 2,"**Code Snippet 1: Method: setTickLabelFont (Lines: 610-618)**  
```java
public void setTickLabelFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.tickLabelFont.equals(font)) {
        this.tickLabelFont = font;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Code Snippet 2: Method: setTickMarkStroke (Lines: 776-782)**  
```java
public void setTickMarkStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    if (!this.tickMarkStroke.equals(stroke)) {
        this.tickMarkStroke = stroke;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setProperty(T currentProperty, T newProperty, String errorMessage, Consumer<T> propertySetter) {
    if (newProperty == null) {
        throw new IllegalArgumentException(errorMessage);
    }
    if (!currentProperty.equals(newProperty)) {
        propertySetter.accept(newProperty);
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setTickLabelFont`:**  
```java
public void setTickLabelFont(Font font) {
    setProperty(this.tickLabelFont, font, ""Null 'font' argument."", newValue -> this.tickLabelFont = newValue);
}
```

**For `setTickMarkStroke`:**  
```java
public void setTickMarkStroke(Stroke stroke) {
    setProperty(this.tickMarkStroke, stroke, ""Null 'stroke' argument."", newValue -> this.tickMarkStroke = newValue);
}
```",Type-2
1254-3-4,src,org.jfree.chart.axis,Axis,setTickLabelInsets,669,675,src,org.jfree.chart.axis,Axis,setTickMarkStroke,776,782,Type 2,"**Code Snippet 1: Method: setTickLabelInsets (Lines: 669-675)**  
```java
public void setTickLabelInsets(RectangleInsets insets) {
    if (insets == null) {
        throw new IllegalArgumentException(""Null 'insets' argument."");
    }
    if (!this.tickLabelInsets.equals(insets)) {
        this.tickLabelInsets = insets;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Code Snippet 2: Method: setTickMarkStroke (Lines: 776-782)**  
```java
public void setTickMarkStroke(Stroke stroke) {
    if (stroke == null) {
        throw new IllegalArgumentException(""Null 'stroke' argument."");
    }
    if (!this.tickMarkStroke.equals(stroke)) {
        this.tickMarkStroke = stroke;
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> void setProperty(T property, T newValue, String errorMessage, Consumer<T> setter) {
    if (newValue == null) {
        throw new IllegalArgumentException(errorMessage);
    }
    if (!property.equals(newValue)) {
        setter.accept(newValue);
        notifyListeners(new AxisChangeEvent(this));
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setTickLabelInsets`:**  
```java
public void setTickLabelInsets(RectangleInsets insets) {
    setProperty(this.tickLabelInsets, insets, ""Null 'insets' argument."", value -> this.tickLabelInsets = value);
}
```

**For `setTickMarkStroke`:**  
```java
public void setTickMarkStroke(Stroke stroke) {
    setProperty(this.tickMarkStroke, stroke, ""Null 'stroke' argument."", value -> this.tickMarkStroke = value);
}
```",Type-2
1254-5-6,src,org.jfree.chart.title,TextTitle,setText,262,268,src,org.jfree.chart.title,TextTitle,setFont,317,323,Type 2,"**Code Snippet 1 - Method: setText (Lines: 262-268)**  
```java
public void setText(String text) {
    if (text == null) {
        throw new IllegalArgumentException(""Null 'text' argument."");
    }
    if (!this.text.equals(text)) {
        this.text = text;
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**Code Snippet 2 - Method: setFont (Lines: 317-323)**  
```java
public void setFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.font.equals(font)) {
        this.font = font;
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private <T> void updateProperty(T currentValue, T newValue, String errorMessage, java.util.function.Consumer<T> updater) {
    if (newValue == null) {
        throw new IllegalArgumentException(errorMessage);
    }
    if (!currentValue.equals(newValue)) {
        updater.accept(newValue);
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setText`:**  
```java
public void setText(String text) {
    updateProperty(this.text, text, ""Null 'text' argument."", newValue -> this.text = newValue);
}
```

**For `setFont`:**  
```java
public void setFont(Font font) {
    updateProperty(this.font, font, ""Null 'font' argument."", newValue -> this.font = newValue);
}
```",Type-2
1254-5-7,src,org.jfree.chart.title,TextTitle,setText,262,268,src,org.jfree.chart.title,TextTitle,setPaint,346,352,Type 2,"**Code Snippet 1 - Method: setText (Lines: 262-268)**  
```java
public void setText(String text) {
    if (text == null) {
        throw new IllegalArgumentException(""Null 'text' argument."");
    }
    if (!this.text.equals(text)) {
        this.text = text;
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**Code Snippet 2 - Method: setPaint (Lines: 346-352)**  
```java
public void setPaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    if (!this.paint.equals(paint)) {
        this.paint = paint;
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and types).","**1. Extracted Method:**  
```java
private <T> void setProperty(T currentValue, T newValue, String argumentName, Consumer<T> setter) {
    if (newValue == null) {
        throw new IllegalArgumentException(""Null '"" + argumentName + ""' argument."");
    }
    if (!currentValue.equals(newValue)) {
        setter.accept(newValue);
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setText`:**  
```java
public void setText(String text) {
    setProperty(this.text, text, ""text"", newValue -> this.text = newValue);
}
```

**For `setPaint`:**  
```java
public void setPaint(Paint paint) {
    setProperty(this.paint, paint, ""paint"", newValue -> this.paint = newValue);
}
```",Type-2
1254-6-7,src,org.jfree.chart.title,TextTitle,setFont,317,323,src,org.jfree.chart.title,TextTitle,setPaint,346,352,Type 2,"**Code Snippet 1 - Method: setFont (Lines: 317-323)**  
```java
public void setFont(Font font) {
    if (font == null) {
        throw new IllegalArgumentException(""Null 'font' argument."");
    }
    if (!this.font.equals(font)) {
        this.font = font;
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**Code Snippet 2 - Method: setPaint (Lines: 346-352)**  
```java
public void setPaint(Paint paint) {
    if (paint == null) {
        throw new IllegalArgumentException(""Null 'paint' argument."");
    }
    if (!this.paint.equals(paint)) {
        this.paint = paint;
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and types).","**1. Extracted Method:**  
```java
private <T> void setProperty(T currentValue, T newValue, String argumentName, Consumer<T> setter) {
    if (newValue == null) {
        throw new IllegalArgumentException(""Null '"" + argumentName + ""' argument."");
    }
    if (!currentValue.equals(newValue)) {
        setter.accept(newValue);
        notifyListeners(new TitleChangeEvent(this));
    }
}
```

**2. Method Calls to Replace the Clones:**  

**For `setFont`:**  
```java
public void setFont(Font font) {
    setProperty(this.font, font, ""font"", value -> this.font = value);
}
```

**For `setPaint`:**  
```java
public void setPaint(Paint paint) {
    setProperty(this.paint, paint, ""paint"", value -> this.paint = value);
}
```",Type-2
1255-1-2,src,org.jfree.chart,ChartPanel,setDomainZoomable,866,874,src,org.jfree.chart,ChartPanel,setRangeZoomable,894,902,Type 2,"**Code Snippet 1: setDomainZoomable (Lines: 866-874)**  
```java
public void setDomainZoomable(boolean flag) {
    if (flag) {
        Plot plot = this.chart.getPlot();
        if (plot instanceof Zoomable) {
            Zoomable z = (Zoomable) plot;
            this.domainZoomable = flag && (z.isDomainZoomable());
        }
    }
    else {
        this.domainZoomable = false;
    }
}
```

**Code Snippet 2: setRangeZoomable (Lines: 894-902)**  
```java
public void setRangeZoomable(boolean flag) {
    if (flag) {
        Plot plot = this.chart.getPlot();
        if (plot instanceof Zoomable) {
            Zoomable z = (Zoomable) plot;
            this.rangeZoomable = flag && (z.isRangeZoomable());
        }
    }
    else {
        this.rangeZoomable = false;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private void setZoomable(boolean flag, boolean isDomain) {
    if (flag) {
        Plot plot = this.chart.getPlot();
        if (plot instanceof Zoomable) {
            Zoomable z = (Zoomable) plot;
            if (isDomain) {
                this.domainZoomable = flag && (z.isDomainZoomable());
            } else {
                this.rangeZoomable = flag && (z.isRangeZoomable());
            }
        }
    } else {
        if (isDomain) {
            this.domainZoomable = false;
        } else {
            this.rangeZoomable = false;
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `setDomainZoomable`:**  
```java
public void setDomainZoomable(boolean flag) {
    setZoomable(flag, true);
}
```

**For `setRangeZoomable`:**  
```java
public void setRangeZoomable(boolean flag) {
    setZoomable(flag, false);
}
```",Type-2
1256-1-2,src,org.jfree.chart.renderer,AbstractRenderer,getItemLabelFont,2231,2239,src,org.jfree.chart.renderer,AbstractRenderer,getItemLabelPaint,2389,2397,Type 2,"**Code Snippet 1: Method: getItemLabelFont (Lines: 2231-2239)**  
```java
public Font getItemLabelFont(int row, int column) {
    Font result = this.itemLabelFont;
    if (result == null) {
        result = getSeriesItemLabelFont(row);
        if (result == null) {
            result = this.baseItemLabelFont;
        }
    }
    return result;
}
```

**Code Snippet 2: Method: getItemLabelPaint (Lines: 2389-2397)**  
```java
public Paint getItemLabelPaint(int row, int column) {
    Paint result = this.itemLabelPaint;
    if (result == null) {
        result = getSeriesItemLabelPaint(row);
        if (result == null) {
            result = this.baseItemLabelPaint;
        }
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, types).","**1. The Extracted Method:**  
```java
private <T> T getItemLabelProperty(T property, int row, Supplier<T> seriesSupplier, T baseProperty) {
    T result = property;
    if (result == null) {
        result = seriesSupplier.get();
        if (result == null) {
            result = baseProperty;
        }
    }
    return result;
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `getItemLabelFont`:**  
```java
public Font getItemLabelFont(int row, int column) {
    return getItemLabelProperty(this.itemLabelFont, row, () -> getSeriesItemLabelFont(row), this.baseItemLabelFont);
}
```

**For `getItemLabelPaint`:**  
```java
public Paint getItemLabelPaint(int row, int column) {
    return getItemLabelProperty(this.itemLabelPaint, row, () -> getSeriesItemLabelPaint(row), this.baseItemLabelPaint);
}
```",Type-2
1267-2-5,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getValue,251,258,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getStartValue,498,505,Type 2,"**Code Snippet 1: Method: getValue (Lines: 251-258)**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getValue(r, c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Code Snippet 2: Method: getStartValue (Lines: 498-505)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getStartValue(r, c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Clone Type:** Type-2 (Identical except for method names and minor differences in method calls).","**1. Extracted Method:**  
```java
private Number getValueOrStartValue(Comparable rowKey, Comparable columnKey, boolean isStartValue) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
		return isStartValue 
			? this.underlying.getStartValue(r, c + this.firstCategoryIndex) 
			: this.underlying.getValue(r, c + this.firstCategoryIndex);
	} else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**2. Method Calls:**  

**For `getValue`:**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
	return getValueOrStartValue(rowKey, columnKey, false);
}
```

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
	return getValueOrStartValue(rowKey, columnKey, true);
}
```",Type-2
1267-2-6,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getValue,251,258,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getEndValue,534,541,Type 2,"**Code Snippet 1: Method: getValue (Lines: 251-258)**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getValue(r, c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Code Snippet 2: Method: getEndValue (Lines: 534-541)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getEndValue(r, c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Clone Type:** Type-2 (Identical except for method names and minor differences in method calls).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(String methodName, Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
		switch (methodName) {
			case ""getValue"":
				return this.underlying.getValue(r, c + this.firstCategoryIndex);
			case ""getEndValue"":
				return this.underlying.getEndValue(r, c + this.firstCategoryIndex);
			default:
				throw new IllegalArgumentException(""Invalid method name: "" + methodName);
		}
	} else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**2. Method Calls Replacing the Clones:**  

**For `getValue`:**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
	return getValueFromUnderlying(""getValue"", rowKey, columnKey);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
	return getValueFromUnderlying(""getEndValue"", rowKey, columnKey);
}
```",Type-2
1267-3-4,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getPercentComplete,306,314,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getSubIntervalCount,461,469,Type 2,"**Code Snippet 1: Method: getPercentComplete (Lines: 306-314)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getPercentComplete(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2: Method: getSubIntervalCount (Lines: 461-469)**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getSubIntervalCount(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and method calls).","**1. Extracted Method:**  
```java
private <T> T handleRowAndColumnKeys(Comparable rowKey, Comparable columnKey, BiFunction<Integer, Integer, T> function) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return function.apply(r, c + this.firstCategoryIndex);
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return handleRowAndColumnKeys(rowKey, columnKey, (r, c) -> this.underlying.getPercentComplete(r, c));
}
```

**For `getSubIntervalCount`:**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    return handleRowAndColumnKeys(rowKey, columnKey, (r, c) -> this.underlying.getSubIntervalCount(r, c));
}
```",Type-2
1267-3-5,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getPercentComplete,306,314,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getStartValue,498,505,Type 2,"**Code Snippet 1: Method: getPercentComplete (Lines: 306-314)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getPercentComplete(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2: Method: getStartValue (Lines: 498-505)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getStartValue(r, c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or method calls).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(Comparable rowKey, Comparable columnKey, String methodName) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        switch (methodName) {
            case ""getPercentComplete"":
                return this.underlying.getPercentComplete(r, c + this.firstCategoryIndex);
            case ""getStartValue"":
                return this.underlying.getStartValue(r, c + this.firstCategoryIndex);
            default:
                throw new IllegalArgumentException(""Invalid method name: "" + methodName);
        }
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(rowKey, columnKey, ""getPercentComplete"");
}
```

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(rowKey, columnKey, ""getStartValue"");
}
```",Type-2
1267-4-5,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getSubIntervalCount,461,469,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getStartValue,498,505,Type 2,"**Code Snippet 1: Method: getSubIntervalCount (Lines: 461-469)**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getSubIntervalCount(r,
        		c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Code Snippet 2: Method: getStartValue (Lines: 498-505)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getStartValue(r,
        		c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T handleRowAndColumnKeys(Comparable rowKey, Comparable columnKey, BiFunction<Integer, Integer, T> function) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return function.apply(r, c + this.firstCategoryIndex);
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getSubIntervalCount`:**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    return handleRowAndColumnKeys(rowKey, columnKey, (r, c) -> this.underlying.getSubIntervalCount(r, c));
}
```

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey) {
    return handleRowAndColumnKeys(rowKey, columnKey, (r, c) -> this.underlying.getStartValue(r, c));
}
```",Type-3
1250-13-18,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxRegularValue,687,694,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMaxOutlier,787,794,Type 2,"**Code Snippet 1 - Method: getMaxRegularValue (Lines: 687-694)**  
```java
public Number getMaxRegularValue(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 787-794)**  
```java
public Number getMaxOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int row, int column, String valueType) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = item.getMaxRegularValue();
                break;
            case ""MaxOutlier"":
                result = item.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int row, int column) {
    return getBoxAndWhiskerValue(row, column, ""MaxOutlier"");
}
```",Type-2
1250-16-20,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getMinOutlier,747,754,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,getOutliers,827,834,Type 2,"**Code Snippet 1 - Method: getMinOutlier (Lines: 747-754)**  
```java
public Number getMinOutlier(int row, int column) {
    Number result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 827-834)**  
```java
public List getOutliers(int row, int column) {
    List result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(
            row, column);
    if (item != null) {
        result = item.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerProperty(int row, int column, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem item = (BoxAndWhiskerItem) this.data.getObject(row, column);
    if (item != null) {
        result = propertyExtractor.apply(item);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getMinOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int row, int column) {
    return getBoxAndWhiskerProperty(row, column, BoxAndWhiskerItem::getOutliers);
}
```",Type-2
1267-2-3,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getValue,251,258,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getPercentComplete,306,314,Type 2,"**Code Snippet 1: Method: getValue (Lines: 251-258)**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getValue(r, c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Code Snippet 2: Method: getPercentComplete (Lines: 306-314)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getPercentComplete(r,
        		c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number getValueOrPercentComplete(Comparable rowKey, Comparable columnKey, boolean isPercentComplete) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
		return isPercentComplete 
			? this.underlying.getPercentComplete(r, c + this.firstCategoryIndex)
			: this.underlying.getValue(r, c + this.firstCategoryIndex);
	} else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**2. Method Calls Replacing the Clones:**  

**For `getValue`:**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
	return getValueOrPercentComplete(rowKey, columnKey, false);
}
```

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
	return getValueOrPercentComplete(rowKey, columnKey, true);
}
```",Type-3
1267-2-4,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getValue,251,258,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getSubIntervalCount,461,469,Type 2,"**Code Snippet 1: Method `getValue` (Lines 251-258)**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getValue(r, c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2: Method `getSubIntervalCount` (Lines 461-469)**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getSubIntervalCount(r, c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and method calls).","**1. Extracted Method:**  
```java
private <T> T getValueOrSubIntervalCount(Comparable rowKey, Comparable columnKey, BiFunction<Integer, Integer, T> function) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return function.apply(r, c + this.firstCategoryIndex);
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls:**  

**For `getValue`:**  
```java
public Number getValue(Comparable rowKey, Comparable columnKey) {
    return getValueOrSubIntervalCount(rowKey, columnKey, (r, c) -> this.underlying.getValue(r, c));
}
```

**For `getSubIntervalCount`:**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    return getValueOrSubIntervalCount(rowKey, columnKey, (r, c) -> this.underlying.getSubIntervalCount(r, c));
}
```",Type-2
1267-3-6,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getPercentComplete,306,314,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getEndValue,534,541,Type 2,"**Code Snippet 1: Method: getPercentComplete (Lines: 306-314)**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getPercentComplete(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2: Method: getEndValue (Lines: 534-541)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getEndValue(r,
                c + this.firstCategoryIndex);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-2 (Identical except for method names and minor differences in called methods).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(String methodName, Comparable rowKey, Comparable columnKey) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        switch (methodName) {
            case ""getPercentComplete"":
                return this.underlying.getPercentComplete(r, c + this.firstCategoryIndex);
            case ""getEndValue"":
                return this.underlying.getEndValue(r, c + this.firstCategoryIndex);
            default:
                throw new IllegalArgumentException(""Invalid method name: "" + methodName);
        }
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getPercentComplete`:**  
```java
public Number getPercentComplete(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(""getPercentComplete"", rowKey, columnKey);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    return getValueFromUnderlying(""getEndValue"", rowKey, columnKey);
}
```",Type-2
1267-4-6,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getSubIntervalCount,461,469,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getEndValue,534,541,Type 2,"**Code Snippet 1: Method: getSubIntervalCount (Lines: 461-469)**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getSubIntervalCount(r,
        		c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Code Snippet 2: Method: getEndValue (Lines: 534-541)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
	int r = getRowIndex(rowKey);
	int c = getColumnIndex(columnKey);
	if (c != -1) {
        return this.underlying.getEndValue(r,
        		c + this.firstCategoryIndex);
	}
	else {
		throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
	}
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T processRowAndColumn(Comparable rowKey, Comparable columnKey, BiFunction<Integer, Integer, T> function) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return function.apply(r, c + this.firstCategoryIndex);
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getSubIntervalCount`:**  
```java
public int getSubIntervalCount(Comparable rowKey, Comparable columnKey) {
    return processRowAndColumn(rowKey, columnKey, (r, c) -> this.underlying.getSubIntervalCount(r, c));
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey) {
    return processRowAndColumn(rowKey, columnKey, (r, c) -> this.underlying.getEndValue(r, c));
}
```",Type-3
1267-5-6,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getStartValue,498,505,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,getEndValue,534,541,Type 2,"**Code Snippet 1 - Method: getStartValue (Lines: 498-505)**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey,
        int subinterval) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getStartValue(r,
                c + this.firstCategoryIndex, subinterval);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Code Snippet 2 - Method: getEndValue (Lines: 534-541)**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey,
        int subinterval) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        return this.underlying.getEndValue(r,
                c + this.firstCategoryIndex, subinterval);
    }
    else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**Clone Type:** Type-2 (Identical except for method names and minor differences in literals).","**1. Extracted Method:**  
```java
private Number getValueFromUnderlying(String methodName, Comparable rowKey, Comparable columnKey, int subinterval) {
    int r = getRowIndex(rowKey);
    int c = getColumnIndex(columnKey);
    if (c != -1) {
        switch (methodName) {
            case ""getStartValue"":
                return this.underlying.getStartValue(r, c + this.firstCategoryIndex, subinterval);
            case ""getEndValue"":
                return this.underlying.getEndValue(r, c + this.firstCategoryIndex, subinterval);
            default:
                throw new IllegalArgumentException(""Invalid method name: "" + methodName);
        }
    } else {
        throw new UnknownKeyException(""Unknown columnKey: "" + columnKey);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartValue`:**  
```java
public Number getStartValue(Comparable rowKey, Comparable columnKey, int subinterval) {
    return getValueFromUnderlying(""getStartValue"", rowKey, columnKey, subinterval);
}
```

**For `getEndValue`:**  
```java
public Number getEndValue(Comparable rowKey, Comparable columnKey, int subinterval) {
    return getValueFromUnderlying(""getEndValue"", rowKey, columnKey, subinterval);
}
```",Type-2
1270-1-2,src,org.jfree.chart.plot,CategoryPlot,getDomainAxisLocation,732,740,src,org.jfree.chart.plot,CategoryPlot,getRangeAxisLocation,1015,1023,Type 2,"**Code Snippet 1: Method: getDomainAxisLocation (Lines: 732-740)**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.domainAxisLocations.size()) {
        result = (AxisLocation) this.domainAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getDomainAxisLocation(0));
    }
    return result;
}
```

**Code Snippet 2: Method: getRangeAxisLocation (Lines: 1015-1023)**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.rangeAxisLocations.size()) {
        result = (AxisLocation) this.rangeAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getRangeAxisLocation(0));
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, layout).","**1. Extracted Method:**  
```java
private AxisLocation getAxisLocation(int index, ObjectList axisLocations) {
    AxisLocation result = null;
    if (index < axisLocations.size()) {
        result = (AxisLocation) axisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getAxisLocation(0, axisLocations));
    }
    return result;
}
```

**2. Method Calls to Replace the Clones:**  

**For `getDomainAxisLocation`:**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    return getAxisLocation(index, this.domainAxisLocations);
}
```

**For `getRangeAxisLocation`:**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    return getAxisLocation(index, this.rangeAxisLocations);
}
```",Type-1
1270-3-4,src,org.jfree.chart.plot,XYPlot,getDomainAxisLocation,880,888,src,org.jfree.chart.plot,XYPlot,getRangeAxisLocation,1180,1188,Type 2,"**Code Snippet 1: getDomainAxisLocation (Lines 880-888)**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.domainAxisLocations.size()) {
        result = (AxisLocation) this.domainAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getDomainAxisLocation());
    }
    return result;
}
```

**Code Snippet 2: getRangeAxisLocation (Lines 1180-1188)**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.rangeAxisLocations.size()) {
        result = (AxisLocation) this.rangeAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getRangeAxisLocation());
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for variable names).","**1. Extracted Method:**  
```java
private AxisLocation getAxisLocation(int index, ObjectList axisLocations, AxisLocation defaultLocation) {
    AxisLocation result = null;
    if (index < axisLocations.size()) {
        result = (AxisLocation) axisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(defaultLocation);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getDomainAxisLocation`:**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    return getAxisLocation(index, this.domainAxisLocations, getDomainAxisLocation());
}
```

**For `getRangeAxisLocation`:**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    return getAxisLocation(index, this.rangeAxisLocations, getRangeAxisLocation());
}
```",Type-1
1283-1-2,src,org.jfree.data.time,Day,getFirstMillisecond,318,326,src,org.jfree.data.time,Day,getLastMillisecond,340,348,Type 2,"**Code Snippet 1: Method: getFirstMillisecond (Lines: 318-326)**  
```java
public long getFirstMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, 0, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    return calendar.getTime().getTime();
}
```

**Code Snippet 2: Method: getLastMillisecond (Lines: 340-348)**  
```java
public long getLastMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, 23, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    return calendar.getTime().getTime();
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private long calculateMillisecond(Calendar calendar, int hour, int minute, int second, int millisecond) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, hour, minute, second);
    calendar.set(Calendar.MILLISECOND, millisecond);
    return calendar.getTime().getTime();
}
```

**2. Method Calls Replacing the Clones:**  

**For `getFirstMillisecond`:**  
```java
public long getFirstMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, 0, 0, 0, 0);
}
```

**For `getLastMillisecond`:**  
```java
public long getLastMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, 23, 59, 59, 999);
}
```",Type-3
1283-3-4,src,org.jfree.data.time,Hour,getFirstMillisecond,315,322,src,org.jfree.data.time,Hour,getLastMillisecond,335,342,Type 2,"**Code Snippet 1: Method: getFirstMillisecond (Lines: 315-322)**  
```java
public long getFirstMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    return calendar.getTime().getTime();
}
```

**Code Snippet 2: Method: getLastMillisecond (Lines: 335-342)**  
```java
public long getLastMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    return calendar.getTime().getTime();
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private long calculateMillisecond(Calendar calendar, int minute, int second, int millisecond) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, minute, second);
    calendar.set(Calendar.MILLISECOND, millisecond);
    return calendar.getTime().getTime();
}
```

**2. Method Calls Replacing the Clones:**  

**For `getFirstMillisecond`:**  
```java
public long getFirstMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, 0, 0, 0);
}
```

**For `getLastMillisecond`:**  
```java
public long getLastMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, 59, 59, 999);
}
```",Type-3
1294-2-3,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getSeriesIndex,239,247,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getCategoryIndex,571,579,Type 2,"**Code Snippet 1: Method: getSeriesIndex (Lines: 239-247)**  
```java
public int getSeriesIndex(Comparable seriesKey) {
    int result = -1;
    for (int i = 0; i < this.seriesKeys.length; i++) {
        if (seriesKey.equals(this.seriesKeys[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

**Code Snippet 2: Method: getCategoryIndex (Lines: 571-579)**  
```java
public int getCategoryIndex(Comparable category) {
    int result = -1;
    for (int i = 0; i < this.categoryKeys.length; i++) {
        if (category.equals(this.categoryKeys[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private int getIndex(Comparable key, Comparable[] keys) {
    int result = -1;
    for (int i = 0; i < keys.length; i++) {
        if (key.equals(keys[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getSeriesIndex`:**  
```java
public int getSeriesIndex(Comparable seriesKey) {
    return getIndex(seriesKey, this.seriesKeys);
}
```

**For `getCategoryIndex`:**  
```java
public int getCategoryIndex(Comparable category) {
    return getIndex(category, this.categoryKeys);
}
```",Type-2
1295-1-2,src,org.jfree.chart.plot,CategoryPlot,clearDomainAxes,851,859,src,org.jfree.chart.plot,CategoryPlot,clearRangeAxes,1129,1137,Type 2,"```java
// Code snippet 1 - Method: clearDomainAxes
public void clearDomainAxes() {
    for (int i = 0; i < this.domainAxes.size(); i++) {
        CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    this.domainAxes.clear();
    fireChangeEvent();
}

// Code snippet 2 - Method: clearRangeAxes
public void clearRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    this.rangeAxes.clear();
    fireChangeEvent();
}
```

Clone type: **Type-2**","```java
// 1. The extracted method
private void clearAxes(ObjectList axes) {
    for (int i = 0; i < axes.size(); i++) {
        Object axis = axes.get(i);
        if (axis instanceof CategoryAxis) {
            ((CategoryAxis) axis).removeChangeListener(this);
        } else if (axis instanceof ValueAxis) {
            ((ValueAxis) axis).removeChangeListener(this);
        }
    }
    axes.clear();
    fireChangeEvent();
}

// 2. The method calls that should replace the clones in the original files

// Replacing clearDomainAxes
public void clearDomainAxes() {
    clearAxes(this.domainAxes);
}

// Replacing clearRangeAxes
public void clearRangeAxes() {
    clearAxes(this.rangeAxes);
}
```",Type-2
1295-3-4,src,org.jfree.chart.plot,XYPlot,clearDomainAxes,846,854,src,org.jfree.chart.plot,XYPlot,clearRangeAxes,1144,1152,Type 2,"```java
// Code snippet 1 - Method: clearDomainAxes
public void clearDomainAxes() {
    for (int i = 0; i < this.domainAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.domainAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    this.domainAxes.clear();
    fireChangeEvent();
}
```

```java
// Code snippet 2 - Method: clearRangeAxes
public void clearRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    this.rangeAxes.clear();
    fireChangeEvent();
}
```

**Clone Type:** Type-1 Clone","```java
// 1. The extracted method
private void clearAxes(ObjectList axes) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = (ValueAxis) axes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    axes.clear();
    fireChangeEvent();
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing clearDomainAxes
public void clearDomainAxes() {
    clearAxes(this.domainAxes);
}

// Replacing clearRangeAxes
public void clearRangeAxes() {
    clearAxes(this.rangeAxes);
}
```",Type-1
1299-1-2,src,org.jfree.chart.util,LogFormat,format,138,146,src,org.jfree.chart.util,LogFormat,format,159,167,Type 2,"**Code Snippet 1: Method: format (Lines: 138-146)**  
```java
public StringBuffer format(double number, StringBuffer toAppendTo,
        FieldPosition pos) {
    StringBuffer result = new StringBuffer();
    if (this.showBase) {
        result.append(this.baseLabel);
        result.append(this.powerLabel);
    }
    result.append(this.formatter.format(calculateLog(number)));
    return result;
}
```

**Code Snippet 2: Method: format (Lines: 159-167)**  
```java
public StringBuffer format(long number, StringBuffer toAppendTo, 
        FieldPosition pos) {
    StringBuffer result = new StringBuffer();
    if (this.showBase) {
        result.append(this.baseLabel);
        result.append(""^"");
    }
    result.append(this.formatter.format(calculateLog(number)));
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private StringBuffer formatLogValue(Number number, String powerLabel) {
    StringBuffer result = new StringBuffer();
    if (this.showBase) {
        result.append(this.baseLabel);
        result.append(powerLabel);
    }
    result.append(this.formatter.format(calculateLog(number.doubleValue())));
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 138-146):**  
```java
public StringBuffer format(double number, StringBuffer toAppendTo,
        FieldPosition pos) {
    return formatLogValue(number, this.powerLabel);
}
```

**For Code Snippet 2 (Lines: 159-167):**  
```java
public StringBuffer format(long number, StringBuffer toAppendTo, 
        FieldPosition pos) {
    return formatLogValue(number, ""^"");
}
```",Type-3
1301-3-4,src,org.jfree.chart.plot.dial,DialPlot,setBackground,182,190,src,org.jfree.chart.plot.dial,DialPlot,setCap,212,220,Type 2,"**Code Snippet 1: Method: setBackground (Lines: 182-190)**  
```java
public void setBackground(DialLayer background) {
    if (this.background != null) {
        this.background.removeChangeListener(this);
    }
    this.background = background;
    if (background != null) {
        background.addChangeListener(this);
    }
    fireChangeEvent();
}
```

**Code Snippet 2: Method: setCap (Lines: 212-220)**  
```java
public void setCap(DialLayer cap) {
    if (this.cap != null) {
        this.cap.removeChangeListener(this);
    }
    this.cap = cap;
    if (cap != null) {
        cap.addChangeListener(this);
    }
    fireChangeEvent();
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private void updateDialLayer(DialLayer oldLayer, DialLayer newLayer, String layerType) {
    if (oldLayer != null) {
        oldLayer.removeChangeListener(this);
    }
    if (""background"".equals(layerType)) {
        this.background = newLayer;
    } else if (""cap"".equals(layerType)) {
        this.cap = newLayer;
    }
    if (newLayer != null) {
        newLayer.addChangeListener(this);
    }
    fireChangeEvent();
}
```

**2. Method Calls:**  

**For `setBackground`:**  
```java
public void setBackground(DialLayer background) {
    updateDialLayer(this.background, background, ""background"");
}
```

**For `setCap`:**  
```java
public void setCap(DialLayer cap) {
    updateDialLayer(this.cap, cap, ""cap"");
}
```",Type-2
1302-1-2,src,org.jfree.chart.axis,DateTickUnit,addToDate,250,258,src,org.jfree.chart.axis,DateTickUnit,rollDate,286,294,Type 2,"**Code Snippet 1 - Method: addToDate (Lines: 250-258)**  
```java
public Date addToDate(Date base, TimeZone zone) {
    Calendar calendar = Calendar.getInstance(zone);
    calendar.setTime(base);
    calendar.add(getCalendarField(this.unit), this.count);
    return calendar.getTime();
}
```

**Code Snippet 2 - Method: rollDate (Lines: 286-294)**  
```java
public Date rollDate(Date base, TimeZone zone) {
    Calendar calendar = Calendar.getInstance(zone);
    calendar.setTime(base);
    calendar.add(getCalendarField(this.rollUnit), this.rollCount);
    return calendar.getTime();
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Date calculateDate(Date base, TimeZone zone, int unit, int count) {
    Calendar calendar = Calendar.getInstance(zone);
    calendar.setTime(base);
    calendar.add(getCalendarField(unit), count);
    return calendar.getTime();
}
```

**2. Method Calls Replacing the Clones:**  

**For `addToDate`:**  
```java
public Date addToDate(Date base, TimeZone zone) {
    return calculateDate(base, zone, this.unit, this.count);
}
```

**For `rollDate`:**  
```java
public Date rollDate(Date base, TimeZone zone) {
    return calculateDate(base, zone, this.rollUnit, this.rollCount);
}
```",Type-2
1303-1-2,src,org.jfree.chart.axis,SegmentedTimeline,inIncludeSegments,1693,1701,src,org.jfree.chart.axis,SegmentedTimeline,inExcludeSegments,1709,1717,Type 2,"**Code Snippet 1: Method: inIncludeSegments (Lines: 1693-1701)**  
```java
public boolean inIncludeSegments() {
    for (Segment segment = getSegment(this.segmentStart);
        segment.getSegmentStart() < this.segmentEnd;
        segment.inc()) {
        if (!segment.inIncludeSegments()) {
            return (false);
        }
    }
    return true;
}
```

**Code Snippet 2: Method: inExcludeSegments (Lines: 1709-1717)**  
```java
public boolean inExcludeSegments() {
    for (Segment segment = getSegment(this.segmentStart);
        segment.getSegmentStart() < this.segmentEnd;
        segment.inc()) {
        if (!segment.inExceptionSegments()) {
            return (false);
        }
    }
    return true;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private boolean checkSegments(long segmentStart, long segmentEnd, boolean includeCheck) {
    for (Segment segment = getSegment(segmentStart);
         segment.getSegmentStart() < segmentEnd;
         segment.inc()) {
        if (includeCheck && !segment.inIncludeSegments()) {
            return false;
        } else if (!includeCheck && !segment.inExceptionSegments()) {
            return false;
        }
    }
    return true;
}
```

**2. Method Calls Replacing the Clones:**  

**For `inIncludeSegments`:**  
```java
public boolean inIncludeSegments() {
    return checkSegments(this.segmentStart, this.segmentEnd, true);
}
```

**For `inExcludeSegments`:**  
```java
public boolean inExcludeSegments() {
    return checkSegments(this.segmentStart, this.segmentEnd, false);
}
```",Type-2
1310-1-2,src,org.jfree.chart.plot,XYPlot,getDomainAxisLocation,880,888,src,org.jfree.chart.plot,XYPlot,getRangeAxisLocation,1180,1188,Type 2,"**Code Snippet 1: getDomainAxisLocation (Lines 880-888)**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.domainAxisLocations.size()) {
        result = (AxisLocation) this.domainAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getDomainAxisLocation());
    }
    return result;
}
```

**Code Snippet 2: getRangeAxisLocation (Lines 1180-1188)**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    AxisLocation result = null;
    if (index < this.rangeAxisLocations.size()) {
        result = (AxisLocation) this.rangeAxisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(getRangeAxisLocation());
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for variable names).","**1. Extracted Method:**  
```java
private AxisLocation getAxisLocation(int index, ObjectList axisLocations, AxisLocation defaultLocation) {
    AxisLocation result = null;
    if (index < axisLocations.size()) {
        result = (AxisLocation) axisLocations.get(index);
    }
    if (result == null) {
        result = AxisLocation.getOpposite(defaultLocation);
    }
    return result;
}
```

**2. Method Calls to Replace the Clones:**  

**For `getDomainAxisLocation`:**  
```java
public AxisLocation getDomainAxisLocation(int index) {
    return getAxisLocation(index, this.domainAxisLocations, getDomainAxisLocation());
}
```

**For `getRangeAxisLocation`:**  
```java
public AxisLocation getRangeAxisLocation(int index) {
    return getAxisLocation(index, this.rangeAxisLocations, getRangeAxisLocation());
}
```",Type-1
1359-1-2,src,org.jfree.chart,ChartPanel,restoreAutoDomainBounds,1923,1930,src,org.jfree.chart,ChartPanel,restoreAutoRangeBounds,1937,1944,Type 2,"```java
// Code snippet 1 - Method: restoreAutoDomainBounds
public void restoreAutoDomainBounds() {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        // we need to guard against this.zoomPoint being null
        Point2D zp = (this.zoomPoint != null
        		? this.zoomPoint : new Point());
        z.zoomDomainAxes(0.0, this.info.getPlotInfo(), zp);
    }
}
```

```java
// Code snippet 2 - Method: restoreAutoRangeBounds
public void restoreAutoRangeBounds() {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        // we need to guard against this.zoomPoint being null
        Point2D zp = (this.zoomPoint != null
        		? this.zoomPoint : new Point());
        z.zoomRangeAxes(0.0, this.info.getPlotInfo(), zp);
    }
}
```

Clone Type: **Type-2** (Identical except for variable names: `zoomDomainAxes` vs `zoomRangeAxes`).","```java
// 1. The extracted method
private void restoreAutoBounds(Consumer<Zoomable> zoomFunction) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        // we need to guard against this.zoomPoint being null
        Point2D zp = (this.zoomPoint != null
        		? this.zoomPoint : new Point());
        zoomFunction.accept(z);
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing restoreAutoDomainBounds
public void restoreAutoDomainBounds() {
    restoreAutoBounds(z -> z.zoomDomainAxes(0.0, this.info.getPlotInfo(), this.zoomPoint != null ? this.zoomPoint : new Point()));
}

// Replacing restoreAutoRangeBounds
public void restoreAutoRangeBounds() {
    restoreAutoBounds(z -> z.zoomRangeAxes(0.0, this.info.getPlotInfo(), this.zoomPoint != null ? this.zoomPoint : new Point()));
}
```",Type-2
1383-1-2,src,org.jfree.data.contour,DefaultContourDataset,getMaxZValue,233,240,src,org.jfree.data.contour,DefaultContourDataset,getMinZValue,248,255,Type 2,"**Code Snippet 1 - Method: getMaxZValue (Lines: 233-240)**  
```java
/**
 * Returns the maximum z-value.
 *
 * @return The maximum z-value.
 */
public double getMaxZValue() {
    double zMax = -1.e20;
    for (int k = 0; k < this.zValues.length; k++) {
        if (this.zValues[k] != null) {
            zMax = Math.max(zMax, this.zValues[k].doubleValue());
        }
    }
    return zMax;
}
```

**Code Snippet 2 - Method: getMinZValue (Lines: 248-255)**  
```java
/**
 * Returns the minimum z-value.
 *
 * @return The minimum z-value.
 */
public double getMinZValue() {
    double zMin = 1.e20;
    for (int k = 0; k < this.zValues.length; k++) {
        if (this.zValues[k] != null) {
            zMin = Math.min(zMin, this.zValues[k].doubleValue());
        }
    }
    return zMin;
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
/**
 * Returns the extreme z-value (minimum or maximum) based on the comparator.
 *
 * @param initialValue The initial value for comparison (e.g., a very large or very small number).
 * @param comparator   The comparator function to determine the extreme value (e.g., Math.min or Math.max).
 * @return The extreme z-value.
 */
private double getExtremeZValue(double initialValue, java.util.function.BiFunction<Double, Double, Double> comparator) {
    double extremeValue = initialValue;
    for (int k = 0; k < this.zValues.length; k++) {
        if (this.zValues[k] != null) {
            extremeValue = comparator.apply(extremeValue, this.zValues[k].doubleValue());
        }
    }
    return extremeValue;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxZValue`:**  
```java
public double getMaxZValue() {
    return getExtremeZValue(-1.e20, Math::max);
}
```

**For `getMinZValue`:**  
```java
public double getMinZValue() {
    return getExtremeZValue(1.e20, Math::min);
}
```",Type-2
1407-1-2,src,org.jfree.data.general,SubSeriesDataset,getStartX,351,358,src,org.jfree.data.general,SubSeriesDataset,getEndX,370,377,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 351-358)**  
```java
public Number getStartX(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getStartX(
            this.map[series], item
        );
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndX (Lines: 370-377)**  
```java
public Number getEndX(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getEndX(
            this.map[series], item
        );
    }
    else {
        return getX(series, item);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getStartOrEndX(int series, int item, boolean isStart) {
    if (this.parent instanceof IntervalXYDataset) {
        return isStart 
            ? ((IntervalXYDataset) this.parent).getStartX(this.map[series], item)
            : ((IntervalXYDataset) this.parent).getEndX(this.map[series], item);
    } else {
        return getX(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getStartOrEndX(series, item, true);
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getStartOrEndX(series, item, false);
}
```",Type-2
1407-1-3,src,org.jfree.data.general,SubSeriesDataset,getStartX,351,358,src,org.jfree.data.general,SubSeriesDataset,getStartY,389,396,Type 2,"**Code Snippet 1: Method: getStartX (Lines: 351-358)**  
```java
public Number getStartX(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getStartX(
            this.map[series], item
        );
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2: Method: getStartY (Lines: 389-396)**  
```java
public Number getStartY(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getStartY(
            this.map[series], item
        );
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private Number getStartValue(int series, int item, boolean isX) {
    if (this.parent instanceof IntervalXYDataset) {
        return isX 
            ? ((IntervalXYDataset) this.parent).getStartX(this.map[series], item)
            : ((IntervalXYDataset) this.parent).getStartY(this.map[series], item);
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getStartValue(series, item, true);
}
```

**For `getStartY`:**  
```java
public Number getStartY(int series, int item) {
    return getStartValue(series, item, false);
}
```",Type-2
1407-1-4,src,org.jfree.data.general,SubSeriesDataset,getStartX,351,358,src,org.jfree.data.general,SubSeriesDataset,getEndY,408,415,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 351-358)**  
```java
public Number getStartX(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getStartX(
            this.map[series], item
        );
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndY (Lines: 408-415)**  
```java
public Number getEndY(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getEndY(
            this.map[series], item
        );
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for method names and minor layout differences).","**1. Extracted Method:**  
```java
private Number getStartOrEndValue(int series, int item, boolean isX, boolean isStart) {
    if (this.parent instanceof IntervalXYDataset) {
        if (isX) {
            return isStart 
                ? ((IntervalXYDataset) this.parent).getStartX(this.map[series], item)
                : ((IntervalXYDataset) this.parent).getEndX(this.map[series], item);
        } else {
            return isStart 
                ? ((IntervalXYDataset) this.parent).getStartY(this.map[series], item)
                : ((IntervalXYDataset) this.parent).getEndY(this.map[series], item);
        }
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getStartOrEndValue(series, item, true, true);
}
```

**For `getEndY`:**  
```java
public Number getEndY(int series, int item) {
    return getStartOrEndValue(series, item, false, false);
}
```",Type-1
1407-2-3,src,org.jfree.data.general,SubSeriesDataset,getEndX,370,377,src,org.jfree.data.general,SubSeriesDataset,getStartY,389,396,Type 2,"**Code Snippet 1 - Method: getEndX (Lines: 370-377)**  
```java
/**
 * Returns the ending X value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The ending X value for the specified series and item.
 */
public Number getEndX(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getEndX(
            this.map[series], item
        );
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getStartY (Lines: 389-396)**  
```java
/**
 * Returns the starting Y value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The starting Y value for the specified series and item.
 */
public Number getStartY(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getStartY(
            this.map[series], item
        );
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getIntervalValue(String methodType, int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        if (""EndX"".equals(methodType)) {
            return ((IntervalXYDataset) this.parent).getEndX(this.map[series], item);
        } else if (""StartY"".equals(methodType)) {
            return ((IntervalXYDataset) this.parent).getStartY(this.map[series], item);
        }
    }
    if (""EndX"".equals(methodType)) {
        return getX(series, item);
    } else if (""StartY"".equals(methodType)) {
        return getY(series, item);
    }
    return null; // Fallback, should not occur
}
```

**2. Method Calls Replacing the Clones:**  

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getIntervalValue(""EndX"", series, item);
}
```

**For `getStartY`:**  
```java
public Number getStartY(int series, int item) {
    return getIntervalValue(""StartY"", series, item);
}
```",Type-2
1407-2-4,src,org.jfree.data.general,SubSeriesDataset,getEndX,370,377,src,org.jfree.data.general,SubSeriesDataset,getEndY,408,415,Type 2,"**Code Snippet 1 - Method: getEndX (Lines: 370-377)**  
```java
/**
 * Returns the ending X value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The ending X value for the specified series and item.
 */
public Number getEndX(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getEndX(
            this.map[series], item
        );
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndY (Lines: 408-415)**  
```java
/**
 * Returns the ending Y value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The ending Y value for the specified series and item.
 */
public Number getEndY(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getEndY(
            this.map[series], item
        );
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for method name and comments).","**1. Extracted Method:**  
```java
private Number getEndValue(int series, int item, boolean isX) {
    if (this.parent instanceof IntervalXYDataset) {
        return isX 
            ? ((IntervalXYDataset) this.parent).getEndX(this.map[series], item)
            : ((IntervalXYDataset) this.parent).getEndY(this.map[series], item);
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getEndValue(series, item, true);
}
```

**For `getEndY`:**  
```java
public Number getEndY(int series, int item) {
    return getEndValue(series, item, false);
}
```",Type-1
1407-3-4,src,org.jfree.data.general,SubSeriesDataset,getStartY,389,396,src,org.jfree.data.general,SubSeriesDataset,getEndY,408,415,Type 2,"**Code Snippet 1 - Method: getStartY (Lines: 389-396)**  
```java
/**
 * Returns the starting Y value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The starting Y value for the specified series and item.
 */
public Number getStartY(int series, int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getStartY(
            this.map[series], item
        );
    }
    else {
        return getY(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndY (Lines: 408-415)**  
```java
/**
 * Returns the ending Y value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The ending Y value for the specified series and item.
 */
public Number getEndY(int series,  int item) {
    if (this.parent instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) this.parent).getEndY(
            this.map[series], item
        );
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, and layout).","**1. Extracted Method:**  
```java
/**
 * Returns the Y value (start or end) for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 * @param isStart  true for start Y value, false for end Y value.
 *
 * @return The Y value (start or end) for the specified series and item.
 */
private Number getYValue(int series, int item, boolean isStart) {
    if (this.parent instanceof IntervalXYDataset) {
        return isStart 
            ? ((IntervalXYDataset) this.parent).getStartY(this.map[series], item)
            : ((IntervalXYDataset) this.parent).getEndY(this.map[series], item);
    } else {
        return getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartY`:**  
```java
public Number getStartY(int series, int item) {
    return getYValue(series, item, true);
}
```

**For `getEndY`:**  
```java
public Number getEndY(int series, int item) {
    return getYValue(series, item, false);
}
```",Type-1
1408-2-3,src,org.jfree.chart.plot,XYPlot,getDomainAxisEdge,942,949,src,org.jfree.chart.plot,XYPlot,getRangeAxisEdge,1242,1249,Type 2,"```java
// Code snippet 1 - Method: getDomainAxisEdge
public RectangleEdge getDomainAxisEdge(int index) {
    AxisLocation location = getDomainAxisLocation(index);
    RectangleEdge result = Plot.resolveDomainAxisLocation(location,
            this.orientation);
    if (result == null) {
        result = RectangleEdge.opposite(getDomainAxisEdge());
    }
    return result;
}
```

```java
// Code snippet 2 - Method: getRangeAxisEdge
public RectangleEdge getRangeAxisEdge(int index) {
    AxisLocation location = getRangeAxisLocation(index);
    RectangleEdge result = Plot.resolveRangeAxisLocation(location,
            this.orientation);
    if (result == null) {
        result = RectangleEdge.opposite(getRangeAxisEdge());
    }
    return result;
}
```

Clone Type: **Type-2**","```java
// 1. The extracted method
private RectangleEdge getAxisEdge(AxisLocation location, boolean isDomain) {
    RectangleEdge result = isDomain 
            ? Plot.resolveDomainAxisLocation(location, this.orientation)
            : Plot.resolveRangeAxisLocation(location, this.orientation);
    if (result == null) {
        result = isDomain 
                ? RectangleEdge.opposite(getDomainAxisEdge()) 
                : RectangleEdge.opposite(getRangeAxisEdge());
    }
    return result;
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing getDomainAxisEdge
public RectangleEdge getDomainAxisEdge(int index) {
    return getAxisEdge(getDomainAxisLocation(index), true);
}

// Replacing getRangeAxisEdge
public RectangleEdge getRangeAxisEdge(int index) {
    return getAxisEdge(getRangeAxisLocation(index), false);
}
```",Type-2
1419-1-2,src,org.jfree.chart.block,RectangleConstraint,toUnconstrainedWidth,214,221,src,org.jfree.chart.block,RectangleConstraint,toUnconstrainedHeight,231,238,Type 2,"**Code Snippet 1: Method: toUnconstrainedWidth (Lines: 214-221)**  
```java
public RectangleConstraint toUnconstrainedWidth() {
    if (this.widthConstraintType == LengthConstraintType.NONE) {
        return this;   
    }
    else {
        return new RectangleConstraint(this.width, this.widthRange, 
                LengthConstraintType.NONE, this.height, this.heightRange, 
                this.heightConstraintType);
    }
}
```

**Code Snippet 2: Method: toUnconstrainedHeight (Lines: 231-238)**  
```java
public RectangleConstraint toUnconstrainedHeight() {
    if (this.heightConstraintType == LengthConstraintType.NONE) {
        return this;   
    }
    else {
        return new RectangleConstraint(this.width, this.widthRange, 
                this.widthConstraintType, 0.0, this.heightRange, 
                LengthConstraintType.NONE);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private RectangleConstraint toUnconstrained(LengthConstraintType constraintType, boolean isWidth) {
    if (isWidth) {
        if (this.widthConstraintType == LengthConstraintType.NONE) {
            return this;
        } else {
            return new RectangleConstraint(this.width, this.widthRange, 
                    LengthConstraintType.NONE, this.height, this.heightRange, 
                    this.heightConstraintType);
        }
    } else {
        if (this.heightConstraintType == LengthConstraintType.NONE) {
            return this;
        } else {
            return new RectangleConstraint(this.width, this.widthRange, 
                    this.widthConstraintType, 0.0, this.heightRange, 
                    LengthConstraintType.NONE);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `toUnconstrainedWidth`:**  
```java
public RectangleConstraint toUnconstrainedWidth() {
    return toUnconstrained(LengthConstraintType.NONE, true);
}
```

**For `toUnconstrainedHeight`:**  
```java
public RectangleConstraint toUnconstrainedHeight() {
    return toUnconstrained(LengthConstraintType.NONE, false);
}
```",Type-2
1471-1-2,src,org.jfree.chart,ChartPanel,zoomInDomain,1794,1800,src,org.jfree.chart,ChartPanel,zoomInRange,1812,1818,Type 2,"**Code Snippet 1: Method: zoomInDomain (Lines: 1794-1800)**  
```java
public void zoomInDomain(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable plot = (Zoomable) p;
        plot.zoomDomainAxes(this.zoomInFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Code Snippet 2: Method: zoomInRange (Lines: 1812-1818)**  
```java
public void zoomInRange(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(this.zoomInFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names).","**1. The Extracted Method:**  
```java
private void zoomInAxis(double x, double y, boolean isDomain) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        if (isDomain) {
            z.zoomDomainAxes(this.zoomInFactor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        } else {
            z.zoomRangeAxes(this.zoomInFactor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        }
    }
}
```

**2. The Method Calls That Should Replace the Clones:**  

**For `zoomInDomain`:**  
```java
public void zoomInDomain(double x, double y) {
    zoomInAxis(x, y, true);
}
```

**For `zoomInRange`:**  
```java
public void zoomInRange(double x, double y) {
    zoomInAxis(x, y, false);
}
```",Type-2
1471-1-3,src,org.jfree.chart,ChartPanel,zoomInDomain,1794,1800,src,org.jfree.chart,ChartPanel,zoomOutDomain,1841,1847,Type 2,"**Code Snippet 1: Method: zoomInDomain (Lines: 1794-1800)**  
```java
public void zoomInDomain(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable plot = (Zoomable) p;
        plot.zoomDomainAxes(this.zoomInFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Code Snippet 2: Method: zoomOutDomain (Lines: 1841-1847)**  
```java
public void zoomOutDomain(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomDomainAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private void zoomDomain(double x, double y, double zoomFactor) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomDomainAxes(zoomFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `zoomInDomain`:**  
```java
public void zoomInDomain(double x, double y) {
    zoomDomain(x, y, this.zoomInFactor);
}
```

**For `zoomOutDomain`:**  
```java
public void zoomOutDomain(double x, double y) {
    zoomDomain(x, y, this.zoomOutFactor);
}
```",Type-2
1471-1-4,src,org.jfree.chart,ChartPanel,zoomInDomain,1794,1800,src,org.jfree.chart,ChartPanel,zoomOutRange,1859,1865,Type 2,"**Code Snippet 1: Method: zoomInDomain (Lines: 1794-1800)**  
```java
public void zoomInDomain(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable plot = (Zoomable) p;
        plot.zoomDomainAxes(this.zoomInFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Code Snippet 2: Method: zoomOutRange (Lines: 1859-1865)**  
```java
public void zoomOutRange(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and minor differences in method calls).","**1. Extracted Method:**  
```java
private void zoomAxes(double factor, boolean isDomain, double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        if (isDomain) {
            z.zoomDomainAxes(factor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        } else {
            z.zoomRangeAxes(factor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `zoomInDomain`:**  
```java
public void zoomInDomain(double x, double y) {
    zoomAxes(this.zoomInFactor, true, x, y);
}
```

**For `zoomOutRange`:**  
```java
public void zoomOutRange(double x, double y) {
    zoomAxes(this.zoomOutFactor, false, x, y);
}
```",Type-2
1471-2-3,src,org.jfree.chart,ChartPanel,zoomInRange,1812,1818,src,org.jfree.chart,ChartPanel,zoomOutDomain,1841,1847,Type 2,"**Code Snippet 1: zoomInRange (Lines 1812-1818)**  
```java
public void zoomInRange(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(this.zoomInFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Code Snippet 2: zoomOutDomain (Lines 1841-1847)**  
```java
public void zoomOutDomain(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomDomainAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Clone Type:** Type-2 Clone","**1. Extracted Method:**  
```java
private void zoomAxes(boolean isDomain, double factor, double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        if (isDomain) {
            z.zoomDomainAxes(factor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        } else {
            z.zoomRangeAxes(factor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        }
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `zoomInRange`:**  
```java
public void zoomInRange(double x, double y) {
    zoomAxes(false, this.zoomInFactor, x, y);
}
```

**For `zoomOutDomain`:**  
```java
public void zoomOutDomain(double x, double y) {
    zoomAxes(true, this.zoomOutFactor, x, y);
}
```",Type-2
1471-2-4,src,org.jfree.chart,ChartPanel,zoomInRange,1812,1818,src,org.jfree.chart,ChartPanel,zoomOutRange,1859,1865,Type 2,"**Code Snippet 1: Method: zoomInRange (Lines: 1812-1818)**  
```java
public void zoomInRange(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(this.zoomInFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Code Snippet 2: Method: zoomOutRange (Lines: 1859-1865)**  
```java
public void zoomOutRange(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private void zoomRange(double factor, double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(factor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `zoomInRange`:**  
```java
public void zoomInRange(double x, double y) {
    zoomRange(this.zoomInFactor, x, y);
}
```

**For `zoomOutRange`:**  
```java
public void zoomOutRange(double x, double y) {
    zoomRange(this.zoomOutFactor, x, y);
}
```",Type-2
1471-3-4,src,org.jfree.chart,ChartPanel,zoomOutDomain,1841,1847,src,org.jfree.chart,ChartPanel,zoomOutRange,1859,1865,Type 2,"**Code Snippet 1:**
```java
public void zoomOutDomain(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomDomainAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Code Snippet 2:**
```java
public void zoomOutRange(double x, double y) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        z.zoomRangeAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                translateScreenToJava2D(new Point((int) x, (int) y)),
                this.zoomAroundAnchor);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls: `zoomDomainAxes` vs `zoomRangeAxes`).","**1. Extracted Method:**
```java
private void zoomOutAxis(double x, double y, boolean isDomain) {
    Plot p = this.chart.getPlot();
    if (p instanceof Zoomable) {
        Zoomable z = (Zoomable) p;
        if (isDomain) {
            z.zoomDomainAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        } else {
            z.zoomRangeAxes(this.zoomOutFactor, this.info.getPlotInfo(),
                    translateScreenToJava2D(new Point((int) x, (int) y)),
                    this.zoomAroundAnchor);
        }
    }
}
```

**2. Method Calls:**

**For `zoomOutDomain`:**
```java
public void zoomOutDomain(double x, double y) {
    zoomOutAxis(x, y, true);
}
```

**For `zoomOutRange`:**
```java
public void zoomOutRange(double x, double y) {
    zoomOutAxis(x, y, false);
}
```",Type-2
1540-1-2,src,org.jfree.data.xy,XYBarDataset,getStartX,215,221,src,org.jfree.data.xy,XYBarDataset,getEndX,247,253,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 215-221)**  
```java
public Number getStartX(int series, int item) {
    Number result = null;
    Number xnum = this.underlying.getX(series, item);
    if (xnum != null) {
         result = new Double(xnum.doubleValue() - this.barWidth / 2.0);
    }
    return result;
}
```

**Code Snippet 2 - Method: getEndX (Lines: 247-253)**  
```java
public Number getEndX(int series, int item) {
    Number result = null;
    Number xnum = this.underlying.getX(series, item);
    if (xnum != null) {
         result = new Double(xnum.doubleValue() + this.barWidth / 2.0);
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private Number calculateX(int series, int item, double offset) {
    Number result = null;
    Number xnum = this.underlying.getX(series, item);
    if (xnum != null) {
        result = new Double(xnum.doubleValue() + offset);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return calculateX(series, item, -this.barWidth / 2.0);
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return calculateX(series, item, this.barWidth / 2.0);
}
```",Type-3
1542-1-2,src,org.jfree.data.general,CombinedDataset,getStartX,408,414,src,org.jfree.data.general,CombinedDataset,getEndX,426,432,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 408-414)**  
```java
/**
 * Returns the starting X value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The value.
 */
public Number getStartX(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getStartX(di.series, item);
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndX (Lines: 426-432)**  
```java
/**
 * Returns the ending X value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The value.
 */
public Number getEndX(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getEndX(di.series, item);
    }
    else {
        return getX(series, item);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns the X value (start or end) for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 * @param isStart  true for start value, false for end value.
 *
 * @return The X value.
 */
private Number getXValue(int series, int item, boolean isStart) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return isStart 
            ? ((IntervalXYDataset) di.data).getStartX(di.series, item)
            : ((IntervalXYDataset) di.data).getEndX(di.series, item);
    } else {
        return getX(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getXValue(series, item, true);
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getXValue(series, item, false);
}
```",Type-2
1542-1-3,src,org.jfree.data.general,CombinedDataset,getStartX,408,414,src,org.jfree.data.general,CombinedDataset,getStartY,444,450,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 408-414)**  
```java
public Number getStartX(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getStartX(di.series, item);
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getStartY (Lines: 444-450)**  
```java
public Number getStartY(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getStartY(di.series, item);
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for method name and return value).","**1. Extracted Method:**  
```java
private Number getStartValue(int series, int item, boolean isX) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return isX ? ((IntervalXYDataset) di.data).getStartX(di.series, item)
                   : ((IntervalXYDataset) di.data).getStartY(di.series, item);
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getStartValue(series, item, true);
}
```

**For `getStartY`:**  
```java
public Number getStartY(int series, int item) {
    return getStartValue(series, item, false);
}
```",Type-1
1542-1-4,src,org.jfree.data.general,CombinedDataset,getStartX,408,414,src,org.jfree.data.general,CombinedDataset,getEndY,462,468,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 408-414)**  
```java
public Number getStartX(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getStartX(di.series, item);
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndY (Lines: 462-468)**  
```java
public Number getEndY(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getEndY(di.series, item);
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for method names and minor differences in identifiers).","**1. Extracted Method:**  
```java
private Number getIntervalValue(int series, int item, boolean isStart, boolean isX) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        if (isX) {
            return isStart ? ((IntervalXYDataset) di.data).getStartX(di.series, item)
                           : ((IntervalXYDataset) di.data).getEndX(di.series, item);
        } else {
            return isStart ? ((IntervalXYDataset) di.data).getStartY(di.series, item)
                           : ((IntervalXYDataset) di.data).getEndY(di.series, item);
        }
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getIntervalValue(series, item, true, true);
}
```

**For `getEndY`:**  
```java
public Number getEndY(int series, int item) {
    return getIntervalValue(series, item, false, false);
}
```",Type-1
1542-2-3,src,org.jfree.data.general,CombinedDataset,getEndX,426,432,src,org.jfree.data.general,CombinedDataset,getStartY,444,450,Type 2,"**Code Snippet 1 - Method: getEndX (Lines: 426-432)**  
```java
/**
 * Returns the ending X value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The value.
 */
public Number getEndX(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getEndX(di.series, item);
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getStartY (Lines: 444-450)**  
```java
/**
 * Returns the starting Y value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The starting Y value for the specified series and item.
 */
public Number getStartY(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getStartY(di.series, item);
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getIntervalValue(int series, int item, boolean isX, boolean isStart) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        IntervalXYDataset intervalDataset = (IntervalXYDataset) di.data;
        return isX ? (isStart ? intervalDataset.getStartX(di.series, item) 
                              : intervalDataset.getEndX(di.series, item))
                   : (isStart ? intervalDataset.getStartY(di.series, item) 
                              : intervalDataset.getEndY(di.series, item));
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls:**  

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getIntervalValue(series, item, true, false);
}
```

**For `getStartY`:**  
```java
public Number getStartY(int series, int item) {
    return getIntervalValue(series, item, false, true);
}
```",Type-2
1542-2-4,src,org.jfree.data.general,CombinedDataset,getEndX,426,432,src,org.jfree.data.general,CombinedDataset,getEndY,462,468,Type 2,"**Code Snippet 1 - Method: getEndX (Lines: 426-432)**  
```java
/**
 * Returns the ending X value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The value.
 */
public Number getEndX(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getEndX(di.series, item);
    }
    else {
        return getX(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndY (Lines: 462-468)**  
```java
/**
 * Returns the ending Y value for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 *
 * @return The ending Y value for the specified series and item.
 */
public Number getEndY(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getEndY(di.series, item);
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, and layout).","**1. Extracted Method:**  
```java
/**
 * Returns the ending value (X or Y) for the specified series and item.
 *
 * @param series  the index of the series of interest (zero-based).
 * @param item  the index of the item of interest (zero-based).
 * @param isX  true if retrieving the X value, false for the Y value.
 *
 * @return The ending value (X or Y) for the specified series and item.
 */
private Number getEndValue(int series, int item, boolean isX) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return isX 
            ? ((IntervalXYDataset) di.data).getEndX(di.series, item)
            : ((IntervalXYDataset) di.data).getEndY(di.series, item);
    } else {
        return isX ? getX(series, item) : getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getEndValue(series, item, true);
}
```

**For `getEndY`:**  
```java
public Number getEndY(int series, int item) {
    return getEndValue(series, item, false);
}
```",Type-1
1542-3-4,src,org.jfree.data.general,CombinedDataset,getStartY,444,450,src,org.jfree.data.general,CombinedDataset,getEndY,462,468,Type 2,"**Code Snippet 1 - Method: getStartY (Lines: 444-450)**  
```java
public Number getStartY(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getStartY(di.series, item);
    }
    else {
        return getY(series, item);
    }
}
```

**Code Snippet 2 - Method: getEndY (Lines: 462-468)**  
```java
public Number getEndY(int series, int item) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return ((IntervalXYDataset) di.data).getEndY(di.series, item);
    }
    else {
        return getY(series, item);
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getIntervalYValue(int series, int item, boolean isStart) {
    DatasetInfo di = getDatasetInfo(series);
    if (di.data instanceof IntervalXYDataset) {
        return isStart 
            ? ((IntervalXYDataset) di.data).getStartY(di.series, item) 
            : ((IntervalXYDataset) di.data).getEndY(di.series, item);
    } else {
        return getY(series, item);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartY`:**  
```java
public Number getStartY(int series, int item) {
    return getIntervalYValue(series, item, true);
}
```

**For `getEndY`:**  
```java
public Number getEndY(int series, int item) {
    return getIntervalYValue(series, item, false);
}
```",Type-2
1551-1-2,src,org.jfree.chart.block,RectangleConstraint,toRangeWidth,278,284,src,org.jfree.chart.block,RectangleConstraint,toRangeHeight,295,301,Type 2,"**Code Snippet 1: Method: toRangeWidth (Lines: 278-284)**  
```java
public RectangleConstraint toRangeWidth(Range range) {
    if (range == null) {
        throw new IllegalArgumentException(""Null 'range' argument."");   
    }
    return new RectangleConstraint(range.getUpperBound(), range, 
            LengthConstraintType.RANGE, this.height, this.heightRange, 
            this.heightConstraintType);
}
```

**Code Snippet 2: Method: toRangeHeight (Lines: 295-301)**  
```java
public RectangleConstraint toRangeHeight(Range range) {
    if (range == null) {
        throw new IllegalArgumentException(""Null 'range' argument."");   
    }
    return new RectangleConstraint(this.width, this.widthRange, 
            this.widthConstraintType, range.getUpperBound(), range, 
            LengthConstraintType.RANGE);
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private RectangleConstraint toRange(Range range, boolean isWidth) {
    if (range == null) {
        throw new IllegalArgumentException(""Null 'range' argument."");   
    }
    if (isWidth) {
        return new RectangleConstraint(range.getUpperBound(), range, 
                LengthConstraintType.RANGE, this.height, this.heightRange, 
                this.heightConstraintType);
    } else {
        return new RectangleConstraint(this.width, this.widthRange, 
                this.widthConstraintType, range.getUpperBound(), range, 
                LengthConstraintType.RANGE);
    }
}
```

**2. Method Calls:**  

**For `toRangeWidth`:**  
```java
public RectangleConstraint toRangeWidth(Range range) {
    return toRange(range, true);
}
```

**For `toRangeHeight`:**  
```java
public RectangleConstraint toRangeHeight(Range range) {
    return toRange(range, false);
}
```",Type-2
1559-2-3,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 324-330)**  
```java
/**
 * Returns the mean for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The mean for the specified series and item.
 */
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value (mean, median, etc.) for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getMean);
}
```

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getMedian);
}
```",Type-2
1559-2-4,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 324-330)**  
```java
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ1Value (Lines: 358-364)**  
```java
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
private Number getStatisticValue(int series, int item, String statisticType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (statisticType) {
            case ""mean"":
                result = stats.getMean();
                break;
            case ""q1"":
                result = stats.getQ1();
                break;
            default:
                throw new IllegalArgumentException(""Invalid statistic type: "" + statisticType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return getStatisticValue(series, item, ""mean"");
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getStatisticValue(series, item, ""q1"");
}
```",Type-2
1559-2-5,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 324-330)**  
```java
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 375-381)**  
```java
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getStatisticValue(int series, int item, String statisticType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (statisticType) {
            case ""mean"":
                result = stats.getMean();
                break;
            case ""q3"":
                result = stats.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid statistic type: "" + statisticType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return getStatisticValue(series, item, ""mean"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getStatisticValue(series, item, ""q3"");
}
```",Type-2
1559-2-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 324-330)**  
```java
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 392-398)**  
```java
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getStatisticValue(int series, int item, String statisticType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (statisticType) {
            case ""mean"":
                result = stats.getMean();
                break;
            case ""minRegular"":
                result = stats.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid statistic type: "" + statisticType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return getStatisticValue(series, item, ""mean"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getStatisticValue(series, item, ""minRegular"");
}
```",Type-2
1559-2-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 324-330)**  
```java
/**
 * Returns the mean for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The mean for the specified series and item.
 */
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value for the specified series and item based on the provided function.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from the BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getMean);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1559-2-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,Type 2,"**Code Snippet 1 - Method: getMeanValue**  
```java
/**
 * Returns the mean for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The mean for the specified series and item.
 */
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMean);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-2
1559-2-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1 - Method: getMeanValue (Lines: 324-330)**  
```java
/**
 * Returns the mean for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The mean for the specified series and item.
 */
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones**  

**For `getMeanValue`**  
```java
public Number getMeanValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMean);
}
```

**For `getMaxOutlier`**  
```java
public Number getMaxOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-2
1559-2-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMeanValue,324,330,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1: Method: getMeanValue (Lines: 324-330)**  
```java
/**
 * Returns the mean for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The mean for the specified series and item.
 */
public Number getMeanValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMean();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Extracts a value from a BoxAndWhiskerItem based on the provided extractor function.
 *
 * @param series  the series (zero-based index).
 * @param item    the item (zero-based index).
 * @param extractor  a function to extract the desired value from BoxAndWhiskerItem.
 * @param <T>     the type of the value to be extracted.
 *
 * @return The extracted value, or null if the item is null.
 */
private <T> T extractValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    return (stats != null) ? extractor.apply(stats) : null;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMeanValue`:**  
```java
public Number getMeanValue(int series, int item) {
    return extractValue(series, item, BoxAndWhiskerItem::getMean);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return extractValue(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-3-4,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value (e.g., median, Q1) for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getMedian);
}
```

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getQ1);
}
```",Type-2
1559-3-5,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value (e.g., median, Q3) for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getMedian);
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getValue(series, item, BoxAndWhiskerItem::getQ3);
}
```",Type-2
1559-3-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 392-398)**  
```java
/**
 * Returns the min-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The min-value for the specified series and item.
 */
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from the BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMedian);
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMinRegularValue);
}
```",Type-2
1559-3-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMedian);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1559-3-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int series, int item, String valueType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (valueType) {
            case ""Median"":
                result = stats.getMedian();
                break;
            case ""MinOutlier"":
                result = stats.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid valueType: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""Median"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MinOutlier"");
}
```",Type-2
1559-3-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1 - Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value as a Number.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMedian);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-2
1559-3-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMedianValue,341,347,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1: Method: getMedianValue (Lines: 341-347)**  
```java
/**
 * Returns the median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The median-value for the specified series and item.
 */
public Number getMedianValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMedian();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = propertyExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMedianValue`:**  
```java
public Number getMedianValue(int series, int item) {
    return getBoxAndWhiskerItemProperty(series, item, BoxAndWhiskerItem::getMedian);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return getBoxAndWhiskerItemProperty(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-4-5,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getStatisticValue(int series, int item, String statisticType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (statisticType) {
            case ""Q1"":
                result = stats.getQ1();
                break;
            case ""Q3"":
                result = stats.getQ3();
                break;
            default:
                throw new IllegalArgumentException(""Invalid statistic type: "" + statisticType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getStatisticValue(series, item, ""Q1"");
}
```

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getStatisticValue(series, item, ""Q3"");
}
```",Type-2
1559-4-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 392-398)**  
```java
/**
 * Returns the min-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The min-value for the specified series and item.
 */
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getQ1);
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMinRegularValue);
}
```",Type-2
1559-4-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,Type 2,"**Code Snippet 1 - Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for comments and method names).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getQ1);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-1
1559-4-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int series, int item, String valueType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (valueType) {
            case ""Q1"":
                result = stats.getQ1();
                break;
            case ""MinOutlier"":
                result = stats.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid valueType: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""Q1"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MinOutlier"");
}
```",Type-2
1559-4-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value as a Number.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getQ1);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-2
1559-4-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ1Value,358,364,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1: Method: getQ1Value (Lines: 358-364)**  
```java
/**
 * Returns the Q1 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q1 median-value for the specified series and item.
 */
public Number getQ1Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ1();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = propertyExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ1Value`:**  
```java
public Number getQ1Value(int series, int item) {
    return getBoxAndWhiskerItemProperty(series, item, BoxAndWhiskerItem::getQ1);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return getBoxAndWhiskerItemProperty(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-5-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinRegularValue (Lines: 392-398)**  
```java
/**
 * Returns the min-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The min-value for the specified series and item.
 */
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int series, int item, String valueType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (valueType) {
            case ""Q3"":
                result = stats.getQ3();
                break;
            case ""MinRegularValue"":
                result = stats.getMinRegularValue();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""Q3"");
}
```

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MinRegularValue"");
}
```",Type-2
1559-5-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1559-5-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value as a Number.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getQ3);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-2
1559-5-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from the BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getBoxAndWhiskerValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getQ3);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, BoxAndWhiskerItem::getMaxOutlier);
}
```",Type-2
1559-5-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getQ3Value,375,381,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1 - Method: getQ3Value (Lines: 375-381)**  
```java
/**
 * Returns the Q3 median-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The Q3 median-value for the specified series and item.
 */
public Number getQ3Value(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getQ3();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Extracts a specific property from a BoxAndWhiskerItem for the given series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param extractor  a functional interface to extract the desired property.
 * @param <T>  the type of the property to extract.
 *
 * @return The extracted property, or null if the item is null.
 */
private <T> T extractBoxAndWhiskerProperty(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    return (stats != null) ? extractor.apply(stats) : null;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getQ3Value`:**  
```java
public Number getQ3Value(int series, int item) {
    return extractBoxAndWhiskerProperty(series, item, BoxAndWhiskerItem::getQ3);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return extractBoxAndWhiskerProperty(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-6-7,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,Type 2,"**Code Snippet 1 - Method: getMinRegularValue (Lines: 392-398)**  
```java
/**
 * Returns the min-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The min-value for the specified series and item.
 */
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method names).","**1. Extracted Method:**  
```java
/**
 * Returns a value (min or max) for the specified series and item based on the provided function.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a function to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value for the specified series and item.
 */
private Number getRegularValue(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getRegularValue(series, item, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getRegularValue(series, item, BoxAndWhiskerItem::getMaxRegularValue);
}
```",Type-2
1559-6-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 392-398)**  
```java
/**
 * Returns the min-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The min-value for the specified series and item.
 */
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
/**
 * Returns a specific value from the BoxAndWhiskerItem for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param valueExtractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 *
 * @return The extracted value as a Number.
 */
private Number getValueFromItem(int series, int item, java.util.function.Function<BoxAndWhiskerItem, Number> valueExtractor) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = valueExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getValueFromItem(series, item, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getValueFromItem(series, item, BoxAndWhiskerItem::getMinOutlier);
}
```",Type-2
1559-6-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 392-398)**  
```java
/**
 * Returns the min-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The min-value for the specified series and item.
 */
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int series, int item, String valueType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (valueType) {
            case ""MinRegularValue"":
                result = stats.getMinRegularValue();
                break;
            case ""MaxOutlier"":
                result = stats.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MinRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MaxOutlier"");
}
```",Type-2
1559-6-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinRegularValue,392,398,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1: Method: getMinRegularValue (Lines: 392-398)**  
```java
public Number getMinRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 460-466)**  
```java
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private <T> T getBoxAndWhiskerItemProperty(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    T result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = propertyExtractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinRegularValue`:**  
```java
public Number getMinRegularValue(int series, int item) {
    return getBoxAndWhiskerItemProperty(series, item, BoxAndWhiskerItem::getMinRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return getBoxAndWhiskerItemProperty(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-7-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int series, int item, String valueType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = stats.getMaxRegularValue();
                break;
            case ""MinOutlier"":
                result = stats.getMinOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid valueType: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MaxRegularValue"");
}
```

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MinOutlier"");
}
```",Type-2
1559-7-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1 - Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2 - Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private Number getBoxAndWhiskerValue(int series, int item, String valueType) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        switch (valueType) {
            case ""MaxRegularValue"":
                result = stats.getMaxRegularValue();
                break;
            case ""MaxOutlier"":
                result = stats.getMaxOutlier();
                break;
            default:
                throw new IllegalArgumentException(""Invalid value type: "" + valueType);
        }
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MaxRegularValue"");
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return getBoxAndWhiskerValue(series, item, ""MaxOutlier"");
}
```",Type-2
1559-7-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxRegularValue,409,415,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1: Method: getMaxRegularValue (Lines: 409-415)**  
```java
/**
 * Returns the max-value for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The max-value for the specified series and item.
 */
public Number getMaxRegularValue(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxRegularValue();
    }
    return result;
}
```

**Code Snippet 2: Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Retrieves a specific property from a BoxAndWhiskerItem for the given series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param propertyExtractor  a lambda function to extract the desired property from BoxAndWhiskerItem.
 * @param <T>  the type of the property to be returned.
 *
 * @return The extracted property, or null if the BoxAndWhiskerItem is null.
 */
private <T> T getBoxAndWhiskerProperty(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    return (stats != null) ? propertyExtractor.apply(stats) : null;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxRegularValue`:**  
```java
public Number getMaxRegularValue(int series, int item) {
    return getBoxAndWhiskerProperty(series, item, BoxAndWhiskerItem::getMaxRegularValue);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return getBoxAndWhiskerProperty(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-8-9,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,Type 2,"**Code Snippet 1: Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2: Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
/**
 * Returns the outlier value (minimum or maximum) for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item    the item (zero-based index).
 * @param isMin   a flag indicating whether to fetch the minimum (true) or maximum (false) outlier.
 *
 * @return A <code>Number</code> representing the requested outlier value.
 */
private Number getOutlierValue(int series, int item, boolean isMin) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = isMin ? stats.getMinOutlier() : stats.getMaxOutlier();
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getOutlierValue(series, item, true);
}
```

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return getOutlierValue(series, item, false);
}
```",Type-2
1559-8-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMinOutlier,425,431,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1 - Method: getMinOutlier (Lines: 425-431)**  
```java
/**
 * Returns the minimum value which is not a farout.
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMinOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMinOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Retrieves a specific property from a BoxAndWhiskerItem for the given series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param propertyExtractor  a lambda function to extract the desired property from BoxAndWhiskerItem.
 * @param <T>  the type of the property to be returned.
 *
 * @return The extracted property, or null if the item is null.
 */
private <T> T getBoxAndWhiskerProperty(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> propertyExtractor) {
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    return (stats != null) ? propertyExtractor.apply(stats) : null;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMinOutlier`:**  
```java
public Number getMinOutlier(int series, int item) {
    return getBoxAndWhiskerProperty(series, item, BoxAndWhiskerItem::getMinOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return getBoxAndWhiskerProperty(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1559-9-10,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getMaxOutlier,443,449,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,getOutliers,460,466,Type 2,"**Code Snippet 1 - Method: getMaxOutlier (Lines: 443-449)**  
```java
/**
 * Returns the maximum value which is not a farout, ie Q3 + (interquartile 
 * range * farout coefficient).
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return A <code>Number</code> representing the maximum non-farout value.
 */
public Number getMaxOutlier(int series, int item) {
    Number result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getMaxOutlier();
    }
    return result;
}
```

**Code Snippet 2 - Method: getOutliers (Lines: 460-466)**  
```java
/**
 * Returns an array of outliers for the specified series and item.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The array of outliers for the specified series and item.
 */
public List getOutliers(int series, int item) {
    List result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = stats.getOutliers();
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
/**
 * Returns a value or list from the specified series and item based on the provided extractor.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * @param extractor  a functional interface to extract the desired value from BoxAndWhiskerItem.
 * @param <T>  the type of the value to be returned.
 *
 * @return The extracted value or list for the specified series and item.
 */
private <T> T extractFromItem(int series, int item, java.util.function.Function<BoxAndWhiskerItem, T> extractor) {
    T result = null;
    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);
    if (stats != null) {
        result = extractor.apply(stats);
    }
    return result;
}
```

**2. Method Calls Replacing the Clones:**  

**For `getMaxOutlier`:**  
```java
public Number getMaxOutlier(int series, int item) {
    return extractFromItem(series, item, BoxAndWhiskerItem::getMaxOutlier);
}
```

**For `getOutliers`:**  
```java
public List getOutliers(int series, int item) {
    return extractFromItem(series, item, BoxAndWhiskerItem::getOutliers);
}
```",Type-3
1561-1-2,src,org.jfree.chart.plot.dial,DialPlot,removeLayer,357,363,src,org.jfree.chart.plot.dial,DialPlot,removePointer,412,418,Type 2,"**Code Snippet 1: Method: removeLayer (Lines: 357-363)**  
```java
public void removeLayer(int index) {
    DialLayer layer = (DialLayer) this.layers.get(index);
    if (layer != null) {
        layer.removeChangeListener(this);
    }
    this.layers.remove(index);
    fireChangeEvent();
}
```

**Code Snippet 2: Method: removePointer (Lines: 412-418)**  
```java
public void removePointer(int index) {
    DialPointer pointer = (DialPointer) this.pointers.get(index);
    if (pointer != null) {
        pointer.removeChangeListener(this);
    }
    this.pointers.remove(index);
    fireChangeEvent();
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private void removeItem(int index, List<?> list, Class<?> clazz) {
    Object item = list.get(index);
    if (item != null) {
        try {
            clazz.getMethod(""removeChangeListener"", DialLayerChangeListener.class).invoke(item, this);
        } catch (Exception e) {
            throw new RuntimeException(""Error removing change listener"", e);
        }
    }
    list.remove(index);
    fireChangeEvent();
}
```

**2. Method Calls Replacing the Clones:**  

**For `removeLayer`:**  
```java
public void removeLayer(int index) {
    removeItem(index, this.layers, DialLayer.class);
}
```

**For `removePointer`:**  
```java
public void removePointer(int index) {
    removeItem(index, this.pointers, DialPointer.class);
}
```",Type-2
1600-1-2,src,org.jfree.chart.plot,CrosshairState,updateCrosshairX,257,263,src,org.jfree.chart.plot,CrosshairState,updateCrosshairY,296,301,Type 2,"**Code Snippet 1: Method: updateCrosshairX (Lines: 257-263)**  
```java
public void updateCrosshairX(double candidateX, int domainAxisIndex) {
    double d = Math.abs(candidateX - this.anchorX);
    if (d < this.distance) {
        this.crosshairX = candidateX;
        this.domainAxisIndex = domainAxisIndex;
        this.distance = d;
    }
}
```

**Code Snippet 2: Method: updateCrosshairY (Lines: 296-301)**  
```java
public void updateCrosshairY(double candidateY, int rangeAxisIndex) {
    double d = Math.abs(candidateY - this.anchorY);
    if (d < this.distance) {
        this.crosshairY = candidateY;
        this.rangeAxisIndex = rangeAxisIndex;
        this.distance = d;
    }
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
private void updateCrosshair(double candidateValue, int axisIndex, boolean isXAxis) {
    double d = Math.abs(candidateValue - (isXAxis ? this.anchorX : this.anchorY));
    if (d < this.distance) {
        if (isXAxis) {
            this.crosshairX = candidateValue;
            this.domainAxisIndex = axisIndex;
        } else {
            this.crosshairY = candidateValue;
            this.rangeAxisIndex = axisIndex;
        }
        this.distance = d;
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `updateCrosshairX`:**  
```java
public void updateCrosshairX(double candidateX, int domainAxisIndex) {
    updateCrosshair(candidateX, domainAxisIndex, true);
}
```

**For `updateCrosshairY`:**  
```java
public void updateCrosshairY(double candidateY, int rangeAxisIndex) {
    updateCrosshair(candidateY, rangeAxisIndex, false);
}
```",Type-2
1635-1-2,src,org.jfree.data.time,Year,getFirstMillisecond,234,239,src,org.jfree.data.time,Year,getLastMillisecond,253,258,Type 2,"**Code Snippet 1: Method: getFirstMillisecond (Lines: 234-239)**  
```java
public long getFirstMillisecond(Calendar calendar) {
    calendar.set(this.year, Calendar.JANUARY, 1, 0, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    // in the following line, we'd rather call calendar.getTimeInMillis()
    // to avoid object creation, but that isn't supported in Java 1.3.1
    return calendar.getTime().getTime();
}
```

**Code Snippet 2: Method: getLastMillisecond (Lines: 253-258)**  
```java
public long getLastMillisecond(Calendar calendar) {
    calendar.set(this.year, Calendar.DECEMBER, 31, 23, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    // in the following line, we'd rather call calendar.getTimeInMillis()
    // to avoid object creation, but that isn't supported in Java 1.3.1
    return calendar.getTime().getTime();
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private long calculateMillisecond(Calendar calendar, int month, int day, int hour, int minute, int second, int millisecond) {
    calendar.set(this.year, month, day, hour, minute, second);
    calendar.set(Calendar.MILLISECOND, millisecond);
    // in the following line, we'd rather call calendar.getTimeInMillis()
    // to avoid object creation, but that isn't supported in Java 1.3.1
    return calendar.getTime().getTime();
}
```

**2. Method Calls Replacing the Clones:**  

**For `getFirstMillisecond`:**  
```java
public long getFirstMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, Calendar.JANUARY, 1, 0, 0, 0, 0);
}
```

**For `getLastMillisecond`:**  
```java
public long getLastMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, Calendar.DECEMBER, 31, 23, 59, 59, 999);
}
```",Type-3
1638-8-9,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4528,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 2,"```java
// Code snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}

// Code snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

Clone Type: **Type-1** (Identical except for whitespace, comments, layout)","```java
// 1. The extracted method
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}

// 2. The method calls that should replace the clones in the original files

// Replacing in zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}

// Replacing in zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1645-1-2,src,org.jfree.chart.block,AbstractBlock,calculateTotalWidth,514,519,src,org.jfree.chart.block,AbstractBlock,calculateTotalHeight,529,534,Type 2,"**Code Snippet 1: Method: calculateTotalWidth (Lines: 514-519)**  
```java
protected double calculateTotalWidth(double contentWidth) {
    double result = contentWidth;
    result = this.padding.extendWidth(result);
    result = this.frame.getInsets().extendWidth(result);
    result = this.margin.extendWidth(result);
    return result;
}
```

**Code Snippet 2: Method: calculateTotalHeight (Lines: 529-534)**  
```java
protected double calculateTotalHeight(double contentHeight) {
    double result = contentHeight;
    result = this.padding.extendHeight(result);
    result = this.frame.getInsets().extendHeight(result);
    result = this.margin.extendHeight(result);
    return result;
}
```

**Clone Type:** Type-2 (Identical except for variable names and method calls).","**1. Extracted Method:**  
```java
private double calculateTotalDimension(double contentDimension, String dimensionType) {
    double result = contentDimension;
    if (""width"".equals(dimensionType)) {
        result = this.padding.extendWidth(result);
        result = this.frame.getInsets().extendWidth(result);
        result = this.margin.extendWidth(result);
    } else if (""height"".equals(dimensionType)) {
        result = this.padding.extendHeight(result);
        result = this.frame.getInsets().extendHeight(result);
        result = this.margin.extendHeight(result);
    }
    return result;
}
```

**2. Method Calls:**  

**For `calculateTotalWidth`:**  
```java
protected double calculateTotalWidth(double contentWidth) {
    return calculateTotalDimension(contentWidth, ""width"");
}
```

**For `calculateTotalHeight`:**  
```java
protected double calculateTotalHeight(double contentHeight) {
    return calculateTotalDimension(contentHeight, ""height"");
}
```",Type-2
1656-2-3,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4526,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4599,4604,Type 2,"```java
// Code snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}
```

```java
// Code snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

Clone Type: Type-1","```java
// Extracted method
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}
```

```java
// Refactored Code Snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}
```

```java
// Refactored Code Snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1726-2-3,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4528,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 2,"```java
// Code snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}
```

```java
// Code snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

Clone Type: **Type-1** (Identical except for whitespace, comments, layout)","```java
// 1. The extracted method
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing Code snippet 1
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}

// Replacing Code snippet 2
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1728-1-2,src,org.jfree.data.time,TimeSeriesCollection,getStartX,472,476,src,org.jfree.data.time,TimeSeriesCollection,getEndX,487,491,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 472-476)**  
```java
public synchronized Number getStartX(int series, int item) {
    TimeSeries ts = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem dp = ts.getDataItem(item);
    return new Long(dp.getPeriod().getFirstMillisecond(
            this.workingCalendar));
}
```

**Code Snippet 2 - Method: getEndX (Lines: 487-491)**  
```java
public synchronized Number getEndX(int series, int item) {
    TimeSeries ts = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem dp = ts.getDataItem(item);
    return new Long(dp.getPeriod().getLastMillisecond(
            this.workingCalendar));
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types).","**1. Extracted Method:**  
```java
private synchronized Number getBoundaryX(int series, int item, boolean isStart) {
    TimeSeries ts = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem dp = ts.getDataItem(item);
    return new Long(isStart ? dp.getPeriod().getFirstMillisecond(this.workingCalendar)
                            : dp.getPeriod().getLastMillisecond(this.workingCalendar));
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public synchronized Number getStartX(int series, int item) {
    return getBoundaryX(series, item, true);
}
```

**For `getEndX`:**  
```java
public synchronized Number getEndX(int series, int item) {
    return getBoundaryX(series, item, false);
}
```",Type-2
1729-2-3,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4528,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 2,"```java
// Code snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}
```

```java
// Code snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

Clone Type: **Type-1 Clone** (Identical except for whitespace, comments, layout).","```java
// 1. The extracted method
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replace in zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}

// Replace in zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1752-3-4,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4528,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 2,"Code snippet 1 - Method: zoomDomainAxes  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}
```

Code snippet 2 - Method: zoomRangeAxes  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

Clone Type: **Type-1 (Identical except for whitespace, comments, layout)**","1. Extracted Method:
```java
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}
```

2. Method Calls Replacing the Clones:

For `zoomDomainAxes`:
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}
```

For `zoomRangeAxes`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1757-4-5,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4528,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 2,"```java
// Code snippet 1 - Method: zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}
```

```java
// Code snippet 2 - Method: zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

Clone Type: Type-1 (Identical except for whitespace, comments, layout)","```java
// 1. The extracted method
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replace in zoomDomainAxes
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}

// Replace in zoomRangeAxes
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1763-1-2,src,org.jfree.chart.block,AbstractBlock,trimToContentWidth,423,427,src,org.jfree.chart.block,AbstractBlock,trimToContentHeight,441,445,Type 2,"**Code Snippet 1: Method: trimToContentWidth (Lines: 423-427)**  
```java
protected double trimToContentWidth(double fixedWidth) {
    double result = this.margin.trimWidth(fixedWidth);
    result = this.frame.getInsets().trimWidth(result);
    result = this.padding.trimWidth(result);
    return Math.max(result, 0.0);
}
```

**Code Snippet 2: Method: trimToContentHeight (Lines: 441-445)**  
```java
protected double trimToContentHeight(double fixedHeight) {
    double result = this.margin.trimHeight(fixedHeight);
    result = this.frame.getInsets().trimHeight(result);
    result = this.padding.trimHeight(result);
    return Math.max(result, 0.0);
}
```

**Clone Type:** Type-2 (Identical except for variable names).","**1. Extracted Method:**  
```java
protected double trimToContentDimension(double fixedDimension, String dimensionType) {
    double result;
    if (""width"".equals(dimensionType)) {
        result = this.margin.trimWidth(fixedDimension);
        result = this.frame.getInsets().trimWidth(result);
        result = this.padding.trimWidth(result);
    } else if (""height"".equals(dimensionType)) {
        result = this.margin.trimHeight(fixedDimension);
        result = this.frame.getInsets().trimHeight(result);
        result = this.padding.trimHeight(result);
    } else {
        throw new IllegalArgumentException(""Invalid dimension type: "" + dimensionType);
    }
    return Math.max(result, 0.0);
}
```

**2. Method Calls:**  

**For `trimToContentWidth`:**  
```java
protected double trimToContentWidth(double fixedWidth) {
    return trimToContentDimension(fixedWidth, ""width"");
}
```

**For `trimToContentHeight`:**  
```java
protected double trimToContentHeight(double fixedHeight) {
    return trimToContentDimension(fixedHeight, ""height"");
}
```",Type-2
1785-3-4,src,org.jfree.data.xy,XIntervalSeriesCollection,getY,209,212,src,org.jfree.data.xy,XIntervalSeriesCollection,getStartX,223,226,Type 2,"**Code Snippet 1 - Method: getY (Lines: 209-212)**  
```java
public Number getY(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getYValue());
}
```

**Code Snippet 2 - Method: getStartX (Lines: 223-226)**  
```java
public Number getStartX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXLowValue());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getValue(int series, int item, String valueType) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    switch (valueType) {
        case ""YValue"":
            return new Double(di.getYValue());
        case ""XLowValue"":
            return new Double(di.getXLowValue());
        default:
            throw new IllegalArgumentException(""Invalid valueType: "" + valueType);
    }
}
```

**2. Method Calls:**  

**For `getY`:**  
```java
public Number getY(int series, int item) {
    return getValue(series, item, ""YValue"");
}
```

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getValue(series, item, ""XLowValue"");
}
```",Type-2
1785-3-5,src,org.jfree.data.xy,XIntervalSeriesCollection,getY,209,212,src,org.jfree.data.xy,XIntervalSeriesCollection,getEndX,237,240,Type 2,"**Code Snippet 1 - Method: getY (Lines: 209-212)**  
```java
public Number getY(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getYValue());
}
```

**Code Snippet 2 - Method: getEndX (Lines: 237-240)**  
```java
public Number getEndX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXHighValue());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getValue(int series, int item, String valueType) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    switch (valueType) {
        case ""YValue"":
            return new Double(di.getYValue());
        case ""XHighValue"":
            return new Double(di.getXHighValue());
        default:
            throw new IllegalArgumentException(""Invalid value type: "" + valueType);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getY`:**  
```java
public Number getY(int series, int item) {
    return getValue(series, item, ""YValue"");
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getValue(series, item, ""XHighValue"");
}
```",Type-2
1785-4-5,src,org.jfree.data.xy,XIntervalSeriesCollection,getStartX,223,226,src,org.jfree.data.xy,XIntervalSeriesCollection,getEndX,237,240,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 223-226)**  
```java
public Number getStartX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXLowValue());
}
```

**Code Snippet 2 - Method: getEndX (Lines: 237-240)**  
```java
public Number getEndX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXHighValue());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getXValue(int series, int item, boolean isLow) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(isLow ? di.getXLowValue() : di.getXHighValue());
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getXValue(series, item, true);
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getXValue(series, item, false);
}
```",Type-2
1786-1-2,src,org.jfree.chart.plot,CategoryPlot,configureDomainAxes,865,869,src,org.jfree.chart.plot,CategoryPlot,configureRangeAxes,1143,1147,Type 2,"```java
// Code snippet 1 - Method: configureDomainAxes
public void configureDomainAxes() {
    for (int i = 0; i < this.domainAxes.size(); i++) {
        CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

```java
// Code snippet 2 - Method: configureRangeAxes
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

Clone Type: **Type-2**","```java
// 1. The extracted method
private void configureAxes(List<?> axes) {
    for (int i = 0; i < axes.size(); i++) {
        Object axis = axes.get(i);
        if (axis instanceof CategoryAxis) {
            ((CategoryAxis) axis).configure();
        } else if (axis instanceof ValueAxis) {
            ((ValueAxis) axis).configure();
        }
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Replacing configureDomainAxes
public void configureDomainAxes() {
    configureAxes(this.domainAxes);
}

// Replacing configureRangeAxes
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```",Type-2
1786-3-4,src,org.jfree.chart.plot,XYPlot,configureDomainAxes,860,864,src,org.jfree.chart.plot,XYPlot,configureRangeAxes,1160,1164,Type 2,"Code snippet 1:
```java
public void configureDomainAxes() {
    for (int i = 0; i < this.domainAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.domainAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

Code snippet 2:
```java
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

Clone type: **Type-2**","1. Extracted Method:
```java
private void configureAxes(List axes) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = (ValueAxis) axes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

2. Method Calls:
For `configureDomainAxes`:
```java
public void configureDomainAxes() {
    configureAxes(this.domainAxes);
}
```

For `configureRangeAxes`:
```java
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```",Type-2
1809-6-7,src,org.jfree.chart.plot,XYPlot,zoomDomainAxes,4528,4531,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 2,"**Code Snippet 1: Method: zoomDomainAxes (Lines: 4528-4531)**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    // delegate to other method
    zoomDomainAxes(factor, info, source, false);
}
```

**Code Snippet 2: Method: zoomRangeAxes (Lines: 4601-4604)**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, layout).","**1. Extracted Method:**  
```java
private void zoomAxes(double factor, PlotRenderingInfo info, Point2D source, boolean isDomain) {
    if (isDomain) {
        zoomDomainAxes(factor, info, source, false);
    } else {
        zoomRangeAxes(factor, info, source, false);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `zoomDomainAxes`:**  
```java
public void zoomDomainAxes(double factor, PlotRenderingInfo info,
                           Point2D source) {
    zoomAxes(factor, info, source, true);
}
```

**For `zoomRangeAxes`:**  
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    zoomAxes(factor, info, source, false);
}
```",Type-1
1812-2-3,src,org.jfree.data.xy,XIntervalSeriesCollection,getY,209,212,src,org.jfree.data.xy,XIntervalSeriesCollection,getStartX,223,226,Type 2,"**Code Snippet 1 - Method: getY (Lines: 209-212)**  
```java
public Number getY(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getYValue());
}
```

**Code Snippet 2 - Method: getStartX (Lines: 223-226)**  
```java
public Number getStartX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXLowValue());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getValue(int series, int item, String valueType) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    switch (valueType) {
        case ""YValue"":
            return new Double(di.getYValue());
        case ""XLowValue"":
            return new Double(di.getXLowValue());
        default:
            throw new IllegalArgumentException(""Invalid value type: "" + valueType);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getY`:**  
```java
public Number getY(int series, int item) {
    return getValue(series, item, ""YValue"");
}
```

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getValue(series, item, ""XLowValue"");
}
```",Type-2
1812-2-4,src,org.jfree.data.xy,XIntervalSeriesCollection,getY,209,212,src,org.jfree.data.xy,XIntervalSeriesCollection,getEndX,237,240,Type 2,"**Code Snippet 1 - Method: getY (Lines: 209-212)**  
```java
public Number getY(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getYValue());
}
```

**Code Snippet 2 - Method: getEndX (Lines: 237-240)**  
```java
public Number getEndX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXHighValue());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**  
```java
private Number getValue(int series, int item, String valueType) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    switch (valueType) {
        case ""YValue"":
            return new Double(di.getYValue());
        case ""XHighValue"":
            return new Double(di.getXHighValue());
        default:
            throw new IllegalArgumentException(""Invalid valueType: "" + valueType);
    }
}
```

**2. Method Calls Replacing the Clones:**  

**For `getY`:**  
```java
public Number getY(int series, int item) {
    return getValue(series, item, ""YValue"");
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getValue(series, item, ""XHighValue"");
}
```",Type-2
1812-3-4,src,org.jfree.data.xy,XIntervalSeriesCollection,getStartX,223,226,src,org.jfree.data.xy,XIntervalSeriesCollection,getEndX,237,240,Type 2,"**Code Snippet 1 - Method: getStartX**  
```java
public Number getStartX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXLowValue());
}
```

**Code Snippet 2 - Method: getEndX**  
```java
public Number getEndX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXHighValue());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private Number getXValue(int series, int item, boolean isLow) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(isLow ? di.getXLowValue() : di.getXHighValue());
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getXValue(series, item, true);
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getXValue(series, item, false);
}
```",Type-2
1813-1-2,src,org.jfree.data.time,TimePeriodValuesCollection,getStartX,283,286,src,org.jfree.data.time,TimePeriodValuesCollection,getEndX,297,300,Type 2,"**Code Snippet 1 - Method: getStartX (Lines: 283-286)**  
```java
public Number getStartX(int series, int item) {
    TimePeriodValues ts = (TimePeriodValues) this.data.get(series);
    TimePeriodValue dp = ts.getDataItem(item);
    return new Long(dp.getPeriod().getStart().getTime());
}
```

**Code Snippet 2 - Method: getEndX (Lines: 297-300)**  
```java
public Number getEndX(int series, int item) {
    TimePeriodValues ts = (TimePeriodValues) this.data.get(series);
    TimePeriodValue dp = ts.getDataItem(item);
    return new Long(dp.getPeriod().getEnd().getTime());
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)","**1. Extracted Method:**  
```java
private Number getXValue(int series, int item, boolean isStart) {
    TimePeriodValues ts = (TimePeriodValues) this.data.get(series);
    TimePeriodValue dp = ts.getDataItem(item);
    return new Long(isStart ? dp.getPeriod().getStart().getTime() : dp.getPeriod().getEnd().getTime());
}
```

**2. Method Calls Replacing the Clones:**  

**For `getStartX`:**  
```java
public Number getStartX(int series, int item) {
    return getXValue(series, item, true);
}
```

**For `getEndX`:**  
```java
public Number getEndX(int series, int item) {
    return getXValue(series, item, false);
}
```",Type-2
1815-1-2,src,org.jfree.chart.plot,CategoryPlot,configureDomainAxes,866,869,src,org.jfree.chart.plot,CategoryPlot,configureRangeAxes,1144,1147,Type 2,"```java
// Code snippet 1
public void configureDomainAxes() {
    for (int i = 0; i < this.domainAxes.size(); i++) {
        CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}

// Code snippet 2
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}

// Clone Type: Type-2
```","```java
// 1. Extracted Method
private void configureAxes(List<?> axes) {
    for (int i = 0; i < axes.size(); i++) {
        Object axis = axes.get(i);
        if (axis instanceof CategoryAxis) {
            ((CategoryAxis) axis).configure();
        } else if (axis instanceof ValueAxis) {
            ((ValueAxis) axis).configure();
        }
    }
}

// 2. Method calls replacing the clones

// Replacing configureDomainAxes
public void configureDomainAxes() {
    configureAxes(this.domainAxes);
}

// Replacing configureRangeAxes
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```",Type-2
1815-3-4,src,org.jfree.chart.plot,XYPlot,configureDomainAxes,861,864,src,org.jfree.chart.plot,XYPlot,configureRangeAxes,1161,1164,Type 2,"```java
// Code snippet 1 - Method: configureDomainAxes
public void configureDomainAxes() {
    for (int i = 0; i < this.domainAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.domainAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

```java
// Code snippet 2 - Method: configureRangeAxes
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

Clone Type: **Type-1** (Identical except for variable names, literals, types).","```java
// 1. The extracted method
private void configureAxes(List axes) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = (ValueAxis) axes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

```java
// 2. The method calls that should replace the clones in the original files

// Refactored configureDomainAxes
public void configureDomainAxes() {
    configureAxes(this.domainAxes);
}

// Refactored configureRangeAxes
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```",Type-1