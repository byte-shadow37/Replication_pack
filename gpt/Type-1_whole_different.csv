Pair ID,Source Folder 1,Package 1,Class 1,Method 1,Start Line 1,End Line 1,Source Folder 2,Package 2,Class 2,Method 2,Start Line 2,End Line 2,Clone Type,Clone response,Refactoring suggestions,Extracted Clone Type
38-1-2,src,org.jfree.chart.renderer.category,BarRenderer,calculateLabelAnchorPoint,930,1028,src,org.jfree.chart.renderer.xy,XYBarRenderer,calculateLabelAnchorPoint,788,885,Type 1,"The two code snippets are as follows:

---

**Code Snippet 1 (from `BarRenderer` class, method `calculateLabelAnchorPoint`):**

```java
private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,
                                          Rectangle2D bar,
                                          PlotOrientation orientation) {

    Point2D result = null;
    double offset = getItemLabelAnchorOffset();
    double x0 = bar.getX() - offset;
    double x1 = bar.getX();
    double x2 = bar.getX() + offset;
    double x3 = bar.getCenterX();
    double x4 = bar.getMaxX() - offset;
    double x5 = bar.getMaxX();
    double x6 = bar.getMaxX() + offset;

    double y0 = bar.getMaxY() + offset;
    double y1 = bar.getMaxY();
    double y2 = bar.getMaxY() - offset;
    double y3 = bar.getCenterY();
    double y4 = bar.getMinY() + offset;
    double y5 = bar.getMinY();
    double y6 = bar.getMinY() - offset;

    if (anchor == ItemLabelAnchor.CENTER) {
        result = new Point2D.Double(x3, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE1) {
        result = new Point2D.Double(x4, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE2) {
        result = new Point2D.Double(x4, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE3) {
        result = new Point2D.Double(x4, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE4) {
        result = new Point2D.Double(x4, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE5) {
        result = new Point2D.Double(x4, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE6) {
        result = new Point2D.Double(x3, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE7) {
        result = new Point2D.Double(x2, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE8) {
        result = new Point2D.Double(x2, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE9) {
        result = new Point2D.Double(x2, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE10) {
        result = new Point2D.Double(x2, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE11) {
        result = new Point2D.Double(x2, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE12) {
        result = new Point2D.Double(x3, y4);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE1) {
        result = new Point2D.Double(x5, y6);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE2) {
        result = new Point2D.Double(x6, y5);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE3) {
        result = new Point2D.Double(x6, y3);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE4) {
        result = new Point2D.Double(x6, y1);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE5) {
        result = new Point2D.Double(x5, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE6) {
        result = new Point2D.Double(x3, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE7) {
        result = new Point2D.Double(x1, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE8) {
        result = new Point2D.Double(x0, y1);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE9) {
        result = new Point2D.Double(x0, y3);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE10) {
        result = new Point2D.Double(x0, y5);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE11) {
        result = new Point2D.Double(x1, y6);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE12) {
        result = new Point2D.Double(x3, y6);
    }

    return result;

}
```

---

**Code Snippet 2 (from `XYBarRenderer` class, method `calculateLabelAnchorPoint`):**

```java
private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,
        Rectangle2D bar, PlotOrientation orientation) {

    Point2D result = null;
    double offset = getItemLabelAnchorOffset();
    double x0 = bar.getX() - offset;
    double x1 = bar.getX();
    double x2 = bar.getX() + offset;
    double x3 = bar.getCenterX();
    double x4 = bar.getMaxX() - offset;
    double x5 = bar.getMaxX();
    double x6 = bar.getMaxX() + offset;

    double y0 = bar.getMaxY() + offset;
    double y1 = bar.getMaxY();
    double y2 = bar.getMaxY() - offset;
    double y3 = bar.getCenterY();
    double y4 = bar.getMinY() + offset;
    double y5 = bar.getMinY();
    double y6 = bar.getMinY() - offset;

    if (anchor == ItemLabelAnchor.CENTER) {
        result = new Point2D.Double(x3, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE1) {
        result = new Point2D.Double(x4, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE2) {
        result = new Point2D.Double(x4, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE3) {
        result = new Point2D.Double(x4, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE4) {
        result = new Point2D.Double(x4, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE5) {
        result = new Point2D.Double(x4, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE6) {
        result = new Point2D.Double(x3, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE7) {
        result = new Point2D.Double(x2, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE8) {
        result = new Point2D.Double(x2, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE9) {
        result = new Point2D.Double(x2, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE10) {
        result = new Point2D.Double(x2, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE11) {
        result = new Point2D.Double(x2, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE12) {
        result = new Point2D.Double(x3, y4);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE1) {
        result = new Point2D.Double(x5, y6);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE2) {
        result = new Point2D.Double(x6, y5);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE3) {
        result = new Point2D.Double(x6, y3);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE4) {
        result = new Point2D.Double(x6, y1);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE5) {
        result = new Point2D.Double(x5, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE6) {
        result = new Point2D.Double(x3, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE7) {
        result = new Point2D.Double(x1, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE8) {
        result = new Point2D.Double(x0, y1);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE9) {
        result = new Point2D.Double(x0, y3);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE10) {
        result = new Point2D.Double(x0, y5);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE11) {
        result = new Point2D.Double(x1, y6);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE12) {
        result = new Point2D.Double(x3, y6);
    }

    return result;

}
```

---

**Clone Type:**

The two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","**1. Extracted Method (to be placed in the common superclass):**

```java
protected Point2D calculateLabelAnchorPointCommon(ItemLabelAnchor anchor,
                                                  Rectangle2D bar,
                                                  PlotOrientation orientation,
                                                  double offset) {

    Point2D result = null;
    double x0 = bar.getX() - offset;
    double x1 = bar.getX();
    double x2 = bar.getX() + offset;
    double x3 = bar.getCenterX();
    double x4 = bar.getMaxX() - offset;
    double x5 = bar.getMaxX();
    double x6 = bar.getMaxX() + offset;

    double y0 = bar.getMaxY() + offset;
    double y1 = bar.getMaxY();
    double y2 = bar.getMaxY() - offset;
    double y3 = bar.getCenterY();
    double y4 = bar.getMinY() + offset;
    double y5 = bar.getMinY();
    double y6 = bar.getMinY() - offset;

    if (anchor == ItemLabelAnchor.CENTER) {
        result = new Point2D.Double(x3, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE1) {
        result = new Point2D.Double(x4, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE2) {
        result = new Point2D.Double(x4, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE3) {
        result = new Point2D.Double(x4, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE4) {
        result = new Point2D.Double(x4, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE5) {
        result = new Point2D.Double(x4, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE6) {
        result = new Point2D.Double(x3, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE7) {
        result = new Point2D.Double(x2, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE8) {
        result = new Point2D.Double(x2, y2);
    }
    else if (anchor == ItemLabelAnchor.INSIDE9) {
        result = new Point2D.Double(x2, y3);
    }
    else if (anchor == ItemLabelAnchor.INSIDE10) {
        result = new Point2D.Double(x2, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE11) {
        result = new Point2D.Double(x2, y4);
    }
    else if (anchor == ItemLabelAnchor.INSIDE12) {
        result = new Point2D.Double(x3, y4);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE1) {
        result = new Point2D.Double(x5, y6);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE2) {
        result = new Point2D.Double(x6, y5);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE3) {
        result = new Point2D.Double(x6, y3);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE4) {
        result = new Point2D.Double(x6, y1);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE5) {
        result = new Point2D.Double(x5, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE6) {
        result = new Point2D.Double(x3, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE7) {
        result = new Point2D.Double(x1, y0);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE8) {
        result = new Point2D.Double(x0, y1);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE9) {
        result = new Point2D.Double(x0, y3);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE10) {
        result = new Point2D.Double(x0, y5);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE11) {
        result = new Point2D.Double(x1, y6);
    }
    else if (anchor == ItemLabelAnchor.OUTSIDE12) {
        result = new Point2D.Double(x3, y6);
    }

    return result;
}
```

---

**2. Method Calls (to replace the clones in the original files):**

**In `BarRenderer` class:**

```java
private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,
                                          Rectangle2D bar,
                                          PlotOrientation orientation) {
    return calculateLabelAnchorPointCommon(anchor, bar, orientation, getItemLabelAnchorOffset());
}
```

**In `XYBarRenderer` class:**

```java
private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,
                                          Rectangle2D bar,
                                          PlotOrientation orientation) {
    return calculateLabelAnchorPointCommon(anchor, bar, orientation, getItemLabelAnchorOffset());
}
```",Type-1
63-1-2,src,org.jfree.chart.renderer.category,BarRenderer3D,drawBackground,283,353,src,org.jfree.chart.renderer.category,LineRenderer3D,drawBackground,209,279,Type 1,"The two code snippets are as follows:

---

**Code Snippet 1 (from `BarRenderer3D` class, `drawBackground` method):**

```java
public void drawBackground(Graphics2D g2, CategoryPlot plot,
                           Rectangle2D dataArea) {

    float x0 = (float) dataArea.getX();
    float x1 = x0 + (float) Math.abs(this.xOffset);
    float x3 = (float) dataArea.getMaxX();
    float x2 = x3 - (float) Math.abs(this.xOffset);

    float y0 = (float) dataArea.getMaxY();
    float y1 = y0 - (float) Math.abs(this.yOffset);
    float y3 = (float) dataArea.getMinY();
    float y2 = y3 + (float) Math.abs(this.yOffset);

    GeneralPath clip = new GeneralPath();
    clip.moveTo(x0, y0);
    clip.lineTo(x0, y2);
    clip.lineTo(x1, y3);
    clip.lineTo(x3, y3);
    clip.lineTo(x3, y1);
    clip.lineTo(x2, y0);
    clip.closePath();

    Composite originalComposite = g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,
            plot.getBackgroundAlpha()));

    // fill background...
    Paint backgroundPaint = plot.getBackgroundPaint();
    if (backgroundPaint != null) {
        g2.setPaint(backgroundPaint);
        g2.fill(clip);
    }

    GeneralPath leftWall = new GeneralPath();
    leftWall.moveTo(x0, y0);
    leftWall.lineTo(x0, y2);
    leftWall.lineTo(x1, y3);
    leftWall.lineTo(x1, y1);
    leftWall.closePath();
    g2.setPaint(getWallPaint());
    g2.fill(leftWall);

    GeneralPath bottomWall = new GeneralPath();
    bottomWall.moveTo(x0, y0);
    bottomWall.lineTo(x1, y1);
    bottomWall.lineTo(x3, y1);
    bottomWall.lineTo(x2, y0);
    bottomWall.closePath();
    g2.setPaint(getWallPaint());
    g2.fill(bottomWall);

    // highlight the background corners...
    g2.setPaint(Color.lightGray);
    Line2D corner = new Line2D.Double(x0, y0, x1, y1);
    g2.draw(corner);
    corner.setLine(x1, y1, x1, y3);
    g2.draw(corner);
    corner.setLine(x1, y1, x3, y1);
    g2.draw(corner);

    // draw background image, if there is one...
    Image backgroundImage = plot.getBackgroundImage();
    if (backgroundImage != null) {
        Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX()
                + getXOffset(), dataArea.getY(),
                dataArea.getWidth() - getXOffset(),
                dataArea.getHeight() - getYOffset());
        plot.drawBackgroundImage(g2, adjusted);
    }

    g2.setComposite(originalComposite);

}
```

---

**Code Snippet 2 (from `LineRenderer3D` class, `drawBackground` method):**

```java
public void drawBackground(Graphics2D g2, CategoryPlot plot,
                           Rectangle2D dataArea) {

    float x0 = (float) dataArea.getX();
    float x1 = x0 + (float) Math.abs(this.xOffset);
    float x3 = (float) dataArea.getMaxX();
    float x2 = x3 - (float) Math.abs(this.xOffset);

    float y0 = (float) dataArea.getMaxY();
    float y1 = y0 - (float) Math.abs(this.yOffset);
    float y3 = (float) dataArea.getMinY();
    float y2 = y3 + (float) Math.abs(this.yOffset);

    GeneralPath clip = new GeneralPath();
    clip.moveTo(x0, y0);
    clip.lineTo(x0, y2);
    clip.lineTo(x1, y3);
    clip.lineTo(x3, y3);
    clip.lineTo(x3, y1);
    clip.lineTo(x2, y0);
    clip.closePath();

    Composite originalComposite = g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,
            plot.getBackgroundAlpha()));

    // fill background...
    Paint backgroundPaint = plot.getBackgroundPaint();
    if (backgroundPaint != null) {
        g2.setPaint(backgroundPaint);
        g2.fill(clip);
    }

    GeneralPath leftWall = new GeneralPath();
    leftWall.moveTo(x0, y0);
    leftWall.lineTo(x0, y2);
    leftWall.lineTo(x1, y3);
    leftWall.lineTo(x1, y1);
    leftWall.closePath();
    g2.setPaint(getWallPaint());
    g2.fill(leftWall);

    GeneralPath bottomWall = new GeneralPath();
    bottomWall.moveTo(x0, y0);
    bottomWall.lineTo(x1, y1);
    bottomWall.lineTo(x3, y1);
    bottomWall.lineTo(x2, y0);
    bottomWall.closePath();
    g2.setPaint(getWallPaint());
    g2.fill(bottomWall);

    // higlight the background corners...
    g2.setPaint(Color.lightGray);
    Line2D corner = new Line2D.Double(x0, y0, x1, y1);
    g2.draw(corner);
    corner.setLine(x1, y1, x1, y3);
    g2.draw(corner);
    corner.setLine(x1, y1, x3, y1);
    g2.draw(corner);

    // draw background image, if there is one...
    Image backgroundImage = plot.getBackgroundImage();
    if (backgroundImage != null) {
        Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX()
                + getXOffset(), dataArea.getY(),
                dataArea.getWidth() - getXOffset(),
                dataArea.getHeight() - getYOffset());
        plot.drawBackgroundImage(g2, adjusted);
    }

    g2.setComposite(originalComposite);

}
```

---

**Clone Type:**  
The two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","**1. Extracted Method (to be placed in the common superclass):**

```java
protected void draw3DBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, 
                                double xOffset, double yOffset, Paint wallPaint) {

    float x0 = (float) dataArea.getX();
    float x1 = x0 + (float) Math.abs(xOffset);
    float x3 = (float) dataArea.getMaxX();
    float x2 = x3 - (float) Math.abs(xOffset);

    float y0 = (float) dataArea.getMaxY();
    float y1 = y0 - (float) Math.abs(yOffset);
    float y3 = (float) dataArea.getMinY();
    float y2 = y3 + (float) Math.abs(yOffset);

    GeneralPath clip = new GeneralPath();
    clip.moveTo(x0, y0);
    clip.lineTo(x0, y2);
    clip.lineTo(x1, y3);
    clip.lineTo(x3, y3);
    clip.lineTo(x3, y1);
    clip.lineTo(x2, y0);
    clip.closePath();

    Composite originalComposite = g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,
            plot.getBackgroundAlpha()));

    // fill background...
    Paint backgroundPaint = plot.getBackgroundPaint();
    if (backgroundPaint != null) {
        g2.setPaint(backgroundPaint);
        g2.fill(clip);
    }

    GeneralPath leftWall = new GeneralPath();
    leftWall.moveTo(x0, y0);
    leftWall.lineTo(x0, y2);
    leftWall.lineTo(x1, y3);
    leftWall.lineTo(x1, y1);
    leftWall.closePath();
    g2.setPaint(wallPaint);
    g2.fill(leftWall);

    GeneralPath bottomWall = new GeneralPath();
    bottomWall.moveTo(x0, y0);
    bottomWall.lineTo(x1, y1);
    bottomWall.lineTo(x3, y1);
    bottomWall.lineTo(x2, y0);
    bottomWall.closePath();
    g2.setPaint(wallPaint);
    g2.fill(bottomWall);

    // highlight the background corners...
    g2.setPaint(Color.lightGray);
    Line2D corner = new Line2D.Double(x0, y0, x1, y1);
    g2.draw(corner);
    corner.setLine(x1, y1, x1, y3);
    g2.draw(corner);
    corner.setLine(x1, y1, x3, y1);
    g2.draw(corner);

    // draw background image, if there is one...
    Image backgroundImage = plot.getBackgroundImage();
    if (backgroundImage != null) {
        Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX()
                + xOffset, dataArea.getY(),
                dataArea.getWidth() - xOffset,
                dataArea.getHeight() - yOffset);
        plot.drawBackgroundImage(g2, adjusted);
    }

    g2.setComposite(originalComposite);
}
```

---

**2. Method Calls (to replace the clones in the original files):**

**In `BarRenderer3D` class:**

```java
@Override
public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) {
    draw3DBackground(g2, plot, dataArea, this.xOffset, this.yOffset, getWallPaint());
}
```

**In `LineRenderer3D` class:**

```java
@Override
public void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) {
    draw3DBackground(g2, plot, dataArea, this.xOffset, this.yOffset, getWallPaint());
}
```",Type-1
163-1-2,src,org.jfree.chart.renderer.category,AreaRenderer,getLegendItem,149,187,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,getLegendItem,265,301,Type 1,"### Code Snippet 1: `getLegendItem` from `AreaRenderer.java`
```java
/**
 * Returns a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return The legend item.
 */
public LegendItem getLegendItem(int datasetIndex, int series) {

    // if there is no plot, there is no dataset to access...
    CategoryPlot cp = getPlot();
    if (cp == null) {
        return null;
    }

    // check that a legend item needs to be displayed...
    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }

    CategoryDataset dataset = cp.getDataset(datasetIndex);
    String label = getLegendItemLabelGenerator().generateLabel(dataset,
            series);
    String description = label;
    String toolTipText = null;
    if (getLegendItemToolTipGenerator() != null) {
        toolTipText = getLegendItemToolTipGenerator().generateLabel(
                dataset, series);
    }
    String urlText = null;
    if (getLegendItemURLGenerator() != null) {
        urlText = getLegendItemURLGenerator().generateLabel(dataset,
                series);
    }
    Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);

    LegendItem result = new LegendItem(label, description, toolTipText,
            urlText, shape, paint, outlineStroke, outlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getRowKey(series));
    result.setSeriesIndex(series);
    return result;

}
```

---

### Code Snippet 2: `getLegendItem` from `BoxAndWhiskerRenderer.java`
```java
/**
 * Returns a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return The legend item (possibly <code>null</code>).
 */
public LegendItem getLegendItem(int datasetIndex, int series) {

    CategoryPlot cp = getPlot();
    if (cp == null) {
        return null;
    }

    // check that a legend item needs to be displayed...
    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }

    CategoryDataset dataset = cp.getDataset(datasetIndex);
    String label = getLegendItemLabelGenerator().generateLabel(dataset,
            series);
    String description = label;
    String toolTipText = null;
    if (getLegendItemToolTipGenerator() != null) {
        toolTipText = getLegendItemToolTipGenerator().generateLabel(
                dataset, series);
    }
    String urlText = null;
    if (getLegendItemURLGenerator() != null) {
        urlText = getLegendItemURLGenerator().generateLabel(dataset,
                series);
    }
    Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);
    LegendItem result = new LegendItem(label, description, toolTipText,
            urlText, shape, paint, outlineStroke, outlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getRowKey(series));
    result.setSeriesIndex(series);
    return result;

}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `AbstractCategoryItemRenderer`)
```java
/**
 * Creates a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 * @param plot  the category plot.
 * @param labelGenerator  the label generator.
 * @param toolTipGenerator  the tooltip generator (can be null).
 * @param urlGenerator  the URL generator (can be null).
 * @param shape  the shape for the legend item.
 * @param paint  the paint for the legend item.
 * @param outlinePaint  the outline paint for the legend item.
 * @param outlineStroke  the outline stroke for the legend item.
 *
 * @return The legend item (possibly <code>null</code>).
 */
protected LegendItem createLegendItem(int datasetIndex, int series, 
        CategoryPlot plot, CategorySeriesLabelGenerator labelGenerator, 
        CategorySeriesLabelGenerator toolTipGenerator, 
        CategorySeriesLabelGenerator urlGenerator, Shape shape, Paint paint, 
        Paint outlinePaint, Stroke outlineStroke) {

    if (plot == null) {
        return null;
    }

    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }

    CategoryDataset dataset = plot.getDataset(datasetIndex);
    String label = labelGenerator.generateLabel(dataset, series);
    String description = label;
    String toolTipText = null;
    if (toolTipGenerator != null) {
        toolTipText = toolTipGenerator.generateLabel(dataset, series);
    }
    String urlText = null;
    if (urlGenerator != null) {
        urlText = urlGenerator.generateLabel(dataset, series);
    }

    LegendItem result = new LegendItem(label, description, toolTipText,
            urlText, shape, paint, outlineStroke, outlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getRowKey(series));
    result.setSeriesIndex(series);
    return result;
}
```

---

### 2. Refactored Method Calls

#### In `AreaRenderer.java`
```java
/**
 * Returns a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return The legend item.
 */
@Override
public LegendItem getLegendItem(int datasetIndex, int series) {
    CategoryPlot cp = getPlot();
    return createLegendItem(datasetIndex, series, cp, 
            getLegendItemLabelGenerator(), getLegendItemToolTipGenerator(), 
            getLegendItemURLGenerator(), 
            new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0), 
            lookupSeriesPaint(series), lookupSeriesOutlinePaint(series), 
            lookupSeriesOutlineStroke(series));
}
```

---

#### In `BoxAndWhiskerRenderer.java`
```java
/**
 * Returns a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return The legend item (possibly <code>null</code>).
 */
@Override
public LegendItem getLegendItem(int datasetIndex, int series) {
    CategoryPlot cp = getPlot();
    return createLegendItem(datasetIndex, series, cp, 
            getLegendItemLabelGenerator(), getLegendItemToolTipGenerator(), 
            getLegendItemURLGenerator(), 
            new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0), 
            lookupSeriesPaint(series), lookupSeriesOutlinePaint(series), 
            lookupSeriesOutlineStroke(series));
}
```",Type-1
209-3-4,src,org.jfree.data.category,CategoryToPieDataset,equals,295,327,src,org.jfree.data.general,DefaultPieDataset,equals,311,345,Type 1,"### Code Snippet 1 (CategoryToPieDataset.java, `equals` method):
```java
/**
 * Tests this dataset for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a dataset containing the same
 * keys and values in the same order as this dataset.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieDataset)) {
        return false;
    }
    PieDataset that = (PieDataset) obj;
    int count = getItemCount();
    if (that.getItemCount() != count) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }

        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        }
        else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}
```

---

### Code Snippet 2 (DefaultPieDataset.java, `equals` method):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }

    if (!(obj instanceof PieDataset)) {
        return false;
    }
    PieDataset that = (PieDataset) obj;
    int count = getItemCount();
    if (that.getItemCount() != count) {
        return false;
    }

    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }

        Number v1 = getValue(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        }
        else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;

}
```

---

### Clone Type:
The two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `AbstractDataset`):
```java
/**
 * Tests if this dataset is equal to another dataset.
 *
 * @param obj  the object to test.
 * @param getItemCount  a function to get the item count.
 * @param getKey  a function to get the key for an index.
 * @param getValue  a function to get the value for an index.
 * @return A boolean indicating equality.
 */
protected boolean datasetsAreEqual(Object obj, 
                                   java.util.function.Supplier<Integer> getItemCount, 
                                   java.util.function.Function<Integer, Comparable> getKey, 
                                   java.util.function.Function<Integer, Number> getValue) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieDataset)) {
        return false;
    }
    PieDataset that = (PieDataset) obj;
    int count = getItemCount.get();
    if (that.getItemCount() != count) {
        return false;
    }
    for (int i = 0; i < count; i++) {
        Comparable k1 = getKey.apply(i);
        Comparable k2 = that.getKey(i);
        if (!k1.equals(k2)) {
            return false;
        }

        Number v1 = getValue.apply(i);
        Number v2 = that.getValue(i);
        if (v1 == null) {
            if (v2 != null) {
                return false;
            }
        } else {
            if (!v1.equals(v2)) {
                return false;
            }
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryToPieDataset`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object to test.
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, 
        this::getItemCount, 
        this::getKey, 
        this::getValue);
}
```

---

### 3. Refactored `equals` Method in `DefaultPieDataset`:
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, 
        this::getItemCount, 
        this::getKey, 
        this::getValue);
}
```",Type-1
221-1-2,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,createItemArray,201,233,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,createItemArray,196,228,Type 1,"### Code Snippet 1 (from `BubbleXYItemLabelGenerator` class, method `createItemArray`):

```java
protected Object[] createItemArray(XYZDataset dataset,
                                   int series, int item) {

    Object[] result = new Object[4];
    result[0] = dataset.getSeriesKey(series).toString();

    Number x = dataset.getX(series, item);
    DateFormat xf = getXDateFormat();
    if (xf != null) {
        result[1] = xf.format(x);
    }
    else {
        result[1] = getXFormat().format(x);
    }

    Number y = dataset.getY(series, item);
    DateFormat yf = getYDateFormat();
    if (yf != null) {
        result[2] = yf.format(y);
    }
    else {
        result[2] = getYFormat().format(y);
    }

    Number z = dataset.getZ(series, item);
    if (this.zDateFormat != null) {
        result[3] = this.zDateFormat.format(z);
    }
    else {
        result[3] = this.zFormat.format(z);
    }

    return result;

}
```

---

### Code Snippet 2 (from `StandardXYZToolTipGenerator` class, method `createItemArray`):

```java
protected Object[] createItemArray(XYZDataset dataset, 
                                   int series, int item) {

    Object[] result = new Object[4];
    result[0] = dataset.getSeriesKey(series).toString();
    
    Number x = dataset.getX(series, item);
    DateFormat xf = getXDateFormat();
    if (xf != null) {
        result[1] = xf.format(x);   
    }
    else {
        result[1] = getXFormat().format(x);
    }
    
    Number y = dataset.getY(series, item);
    DateFormat yf = getYDateFormat();
    if (yf != null) {
        result[2] = yf.format(y);
    }
    else {
        result[2] = getYFormat().format(y);
    }
    
    Number z = dataset.getZ(series, item);
    if (this.zDateFormat != null) {
        result[3] = this.zDateFormat.format(z);   
    }
    else {
        result[3] = this.zFormat.format(z);   
    }
    
    return result;
    
}
```

---

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass):

```java
protected Object[] createItemArrayCommon(XYZDataset dataset, 
                                         int series, 
                                         int item, 
                                         DateFormat xDateFormat, 
                                         NumberFormat xFormat, 
                                         DateFormat yDateFormat, 
                                         NumberFormat yFormat, 
                                         DateFormat zDateFormat, 
                                         NumberFormat zFormat) {

    Object[] result = new Object[4];
    result[0] = dataset.getSeriesKey(series).toString();

    Number x = dataset.getX(series, item);
    if (xDateFormat != null) {
        result[1] = xDateFormat.format(x);
    } else {
        result[1] = xFormat.format(x);
    }

    Number y = dataset.getY(series, item);
    if (yDateFormat != null) {
        result[2] = yDateFormat.format(y);
    } else {
        result[2] = yFormat.format(y);
    }

    Number z = dataset.getZ(series, item);
    if (zDateFormat != null) {
        result[3] = zDateFormat.format(z);
    } else {
        result[3] = zFormat.format(z);
    }

    return result;
}
```

---

### 2. Refactored Method Calls:

#### In `BubbleXYItemLabelGenerator` class:

```java
@Override
protected Object[] createItemArray(XYZDataset dataset, int series, int item) {
    return createItemArrayCommon(
        dataset, 
        series, 
        item, 
        getXDateFormat(), 
        getXFormat(), 
        getYDateFormat(), 
        getYFormat(), 
        this.zDateFormat, 
        this.zFormat
    );
}
```

---

#### In `StandardXYZToolTipGenerator` class:

```java
@Override
protected Object[] createItemArray(XYZDataset dataset, int series, int item) {
    return createItemArrayCommon(
        dataset, 
        series, 
        item, 
        getXDateFormat(), 
        getXFormat(), 
        getYDateFormat(), 
        getYFormat(), 
        this.zDateFormat, 
        this.zFormat
    );
}
```",Type-1
225-1-2,src,org.jfree.chart.renderer.category,BarRenderer,calculateBarW0,575,607,src,org.jfree.chart.renderer.category,LevelRenderer,calculateBarW0,235,267,Type 1,"```java
// Code snippet from BarRenderer.java
protected double calculateBarW0(CategoryPlot plot,
                                PlotOrientation orientation,
                                Rectangle2D dataArea,
                                CategoryAxis domainAxis,
                                CategoryItemRendererState state,
                                int row,
                                int column) {
    // calculate bar width...
    double space = 0.0;
    if (orientation == PlotOrientation.HORIZONTAL) {
        space = dataArea.getHeight();
    }
    else {
        space = dataArea.getWidth();
    }
    double barW0 = domainAxis.getCategoryStart(column, getColumnCount(),
            dataArea, plot.getDomainAxisEdge());
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = space * getItemMargin()
                           / (categoryCount * (seriesCount - 1));
        double seriesW = calculateSeriesWidth(space, domainAxis,
                categoryCount, seriesCount);
        barW0 = barW0 + row * (seriesW + seriesGap)
                      + (seriesW / 2.0) - (state.getBarWidth() / 2.0);
    }
    else {
        barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(),
                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth()
                / 2.0;
    }
    return barW0;
}
```

```java
// Code snippet from LevelRenderer.java
protected double calculateBarW0(CategoryPlot plot,
                                PlotOrientation orientation,
                                Rectangle2D dataArea,
                                CategoryAxis domainAxis,
                                CategoryItemRendererState state,
                                int row,
                                int column) {
    // calculate bar width...
    double space = 0.0;
    if (orientation == PlotOrientation.HORIZONTAL) {
        space = dataArea.getHeight();
    }
    else {
        space = dataArea.getWidth();
    }
    double barW0 = domainAxis.getCategoryStart(column, getColumnCount(),
            dataArea, plot.getDomainAxisEdge());
    int seriesCount = getRowCount();
    int categoryCount = getColumnCount();
    if (seriesCount > 1) {
        double seriesGap = space * getItemMargin()
                / (categoryCount * (seriesCount - 1));
        double seriesW = calculateSeriesWidth(space, domainAxis,
                categoryCount, seriesCount);
        barW0 = barW0 + row * (seriesW + seriesGap)
                      + (seriesW / 2.0) - (state.getBarWidth() / 2.0);
    }
    else {
        barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(),
                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth()
                / 2.0;
    }
    return barW0;
}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, and layout).","```java
// Extracted method to be placed in the common superclass (AbstractCategoryItemRenderer.java)
protected double calculateBarW0Common(CategoryPlot plot,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      CategoryAxis domainAxis,
                                      CategoryItemRendererState state,
                                      int row,
                                      int column,
                                      int seriesCount,
                                      int categoryCount,
                                      double itemMargin) {
    // calculate bar width...
    double space = 0.0;
    if (orientation == PlotOrientation.HORIZONTAL) {
        space = dataArea.getHeight();
    } else {
        space = dataArea.getWidth();
    }
    double barW0 = domainAxis.getCategoryStart(column, categoryCount,
            dataArea, plot.getDomainAxisEdge());
    if (seriesCount > 1) {
        double seriesGap = space * itemMargin
                / (categoryCount * (seriesCount - 1));
        double seriesW = calculateSeriesWidth(space, domainAxis,
                categoryCount, seriesCount);
        barW0 = barW0 + row * (seriesW + seriesGap)
                      + (seriesW / 2.0) - (state.getBarWidth() / 2.0);
    } else {
        barW0 = domainAxis.getCategoryMiddle(column, categoryCount,
                dataArea, plot.getDomainAxisEdge()) - state.getBarWidth()
                / 2.0;
    }
    return barW0;
}
```

```java
// Refactored method in BarRenderer.java
protected double calculateBarW0(CategoryPlot plot,
                                PlotOrientation orientation,
                                Rectangle2D dataArea,
                                CategoryAxis domainAxis,
                                CategoryItemRendererState state,
                                int row,
                                int column) {
    return calculateBarW0Common(plot, orientation, dataArea, domainAxis, state, row, column,
            getRowCount(), getColumnCount(), getItemMargin());
}
```

```java
// Refactored method in LevelRenderer.java
protected double calculateBarW0(CategoryPlot plot,
                                PlotOrientation orientation,
                                Rectangle2D dataArea,
                                CategoryAxis domainAxis,
                                CategoryItemRendererState state,
                                int row,
                                int column) {
    return calculateBarW0Common(plot, orientation, dataArea, domainAxis, state, row, column,
            getRowCount(), getColumnCount(), getItemMargin());
}
```",Type-1
279-1-2,src,org.jfree.chart.renderer.xy,XYAreaRenderer,getLegendItem,355,383,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,getLegendItem,238,266,Type 1,"### Code Snippet 1 (from `XYAreaRenderer.java`):

```java
/**
 * Returns a default legend item for the specified series.  Subclasses 
 * should override this method to generate customised items.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return A legend item for the series.
 */
public LegendItem getLegendItem(int datasetIndex, int series) {
    LegendItem result = null;
    XYPlot xyplot = getPlot();
    if (xyplot != null) {
        XYDataset dataset = xyplot.getDataset(datasetIndex);
        if (dataset != null) {
            XYSeriesLabelGenerator lg = getLegendItemLabelGenerator();
            String label = lg.generateLabel(dataset, series);
            String description = label;
            String toolTipText = null;
            if (getLegendItemToolTipGenerator() != null) {
                toolTipText = getLegendItemToolTipGenerator().generateLabel(
                        dataset, series);
            }
            String urlText = null;
            if (getLegendItemURLGenerator() != null) {
                urlText = getLegendItemURLGenerator().generateLabel(
                        dataset, series);
            }
            Paint paint = lookupSeriesPaint(series);
            result = new LegendItem(label, description, toolTipText, 
                    urlText, this.legendArea, paint);
            result.setDataset(dataset);
            result.setDatasetIndex(datasetIndex);
            result.setSeriesKey(dataset.getSeriesKey(series));
            result.setSeriesIndex(series);
        }
    }
    return result;
}
```

---

### Code Snippet 2 (from `XYAreaRenderer2.java`):

```java
/**
 * Returns a default legend item for the specified series.  Subclasses 
 * should override this method to generate customised items.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return A legend item for the series.
 */
public LegendItem getLegendItem(int datasetIndex, int series) {
    LegendItem result = null;
    XYPlot xyplot = getPlot();
    if (xyplot != null) {
        XYDataset dataset = xyplot.getDataset(datasetIndex);
        if (dataset != null) {
            XYSeriesLabelGenerator lg = getLegendItemLabelGenerator();
            String label = lg.generateLabel(dataset, series);
            String description = label;
            String toolTipText = null;
            if (getLegendItemToolTipGenerator() != null) {
                toolTipText = getLegendItemToolTipGenerator().generateLabel(
                        dataset, series);
            }
            String urlText = null;
            if (getLegendItemURLGenerator() != null) {
                urlText = getLegendItemURLGenerator().generateLabel(
                        dataset, series);
            }
            Paint paint = lookupSeriesPaint(series);
            result = new LegendItem(label, description, toolTipText, 
                    urlText, this.legendArea, paint);
            result.setDataset(dataset);
            result.setDatasetIndex(datasetIndex);
            result.setSeriesKey(dataset.getSeriesKey(series));
            result.setSeriesIndex(series);
        }
    }
    return result;
}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `AbstractXYItemRenderer`):

```java
/**
 * Creates a legend item for the specified series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 * @param legendArea  the shape used to represent the area in the legend.
 * @return A legend item for the series.
 */
protected LegendItem createLegendItem(int datasetIndex, int series, Shape legendArea) {
    LegendItem result = null;
    XYPlot xyplot = getPlot();
    if (xyplot != null) {
        XYDataset dataset = xyplot.getDataset(datasetIndex);
        if (dataset != null) {
            XYSeriesLabelGenerator lg = getLegendItemLabelGenerator();
            String label = lg.generateLabel(dataset, series);
            String description = label;
            String toolTipText = null;
            if (getLegendItemToolTipGenerator() != null) {
                toolTipText = getLegendItemToolTipGenerator().generateLabel(
                        dataset, series);
            }
            String urlText = null;
            if (getLegendItemURLGenerator() != null) {
                urlText = getLegendItemURLGenerator().generateLabel(
                        dataset, series);
            }
            Paint paint = lookupSeriesPaint(series);
            result = new LegendItem(label, description, toolTipText, 
                    urlText, legendArea, paint);
            result.setDataset(dataset);
            result.setDatasetIndex(datasetIndex);
            result.setSeriesKey(dataset.getSeriesKey(series));
            result.setSeriesIndex(series);
        }
    }
    return result;
}
```

---

### 2. Refactored Method Calls:

#### In `XYAreaRenderer.java`:

```java
/**
 * Returns a default legend item for the specified series.  Subclasses 
 * should override this method to generate customised items.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return A legend item for the series.
 */
public LegendItem getLegendItem(int datasetIndex, int series) {
    return createLegendItem(datasetIndex, series, this.legendArea);
}
```

---

#### In `XYAreaRenderer2.java`:

```java
/**
 * Returns a default legend item for the specified series.  Subclasses 
 * should override this method to generate customised items.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return A legend item for the series.
 */
public LegendItem getLegendItem(int datasetIndex, int series) {
    return createLegendItem(datasetIndex, series, this.legendArea);
}
```",Type-1
282-1-2,src,org.jfree.chart.renderer.category,BarRenderer3D,drawOutline,364,392,src,org.jfree.chart.renderer.category,LineRenderer3D,drawOutline,290,318,Type 1,"### Code Snippet 1: `drawOutline` method from `BarRenderer3D` class (lines 364-392)

```java
/**
 * Draws the outline for the plot.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the area inside the axes.
 */
public void drawOutline(Graphics2D g2, CategoryPlot plot,
                        Rectangle2D dataArea) {

    float x0 = (float) dataArea.getX();
    float x1 = x0 + (float) Math.abs(this.xOffset);
    float x3 = (float) dataArea.getMaxX();
    float x2 = x3 - (float) Math.abs(this.xOffset);

    float y0 = (float) dataArea.getMaxY();
    float y1 = y0 - (float) Math.abs(this.yOffset);
    float y3 = (float) dataArea.getMinY();
    float y2 = y3 + (float) Math.abs(this.yOffset);

    GeneralPath clip = new GeneralPath();
    clip.moveTo(x0, y0);
    clip.lineTo(x0, y2);
    clip.lineTo(x1, y3);
    clip.lineTo(x3, y3);
    clip.lineTo(x3, y1);
    clip.lineTo(x2, y0);
    clip.closePath();

    // put an outline around the data area...
    Stroke outlineStroke = plot.getOutlineStroke();
    Paint outlinePaint = plot.getOutlinePaint();
    if ((outlineStroke != null) && (outlinePaint != null)) {
        g2.setStroke(outlineStroke);
        g2.setPaint(outlinePaint);
        g2.draw(clip);
    }

}
```

---

### Code Snippet 2: `drawOutline` method from `LineRenderer3D` class (lines 290-318)

```java
/**
 * Draws the outline for the plot.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the area inside the axes.
 */
public void drawOutline(Graphics2D g2, CategoryPlot plot,
                        Rectangle2D dataArea) {

    float x0 = (float) dataArea.getX();
    float x1 = x0 + (float) Math.abs(this.xOffset);
    float x3 = (float) dataArea.getMaxX();
    float x2 = x3 - (float) Math.abs(this.xOffset);

    float y0 = (float) dataArea.getMaxY();
    float y1 = y0 - (float) Math.abs(this.yOffset);
    float y3 = (float) dataArea.getMinY();
    float y2 = y3 + (float) Math.abs(this.yOffset);

    GeneralPath clip = new GeneralPath();
    clip.moveTo(x0, y0);
    clip.lineTo(x0, y2);
    clip.lineTo(x1, y3);
    clip.lineTo(x3, y3);
    clip.lineTo(x3, y1);
    clip.lineTo(x2, y0);
    clip.closePath();

    // put an outline around the data area...
    Stroke outlineStroke = plot.getOutlineStroke();
    Paint outlinePaint = plot.getOutlinePaint();
    if ((outlineStroke != null) && (outlinePaint != null)) {
        g2.setStroke(outlineStroke);
        g2.setPaint(outlinePaint);
        g2.draw(clip);
    }

}
```

---

### Clone Type:
The two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass)

```java
/**
 * Draws the outline for the plot.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the area inside the axes.
 * @param xOffset  the x-offset for the 3D effect.
 * @param yOffset  the y-offset for the 3D effect.
 */
protected void drawOutlineFor3D(Graphics2D g2, CategoryPlot plot,
                                Rectangle2D dataArea, double xOffset, double yOffset) {

    float x0 = (float) dataArea.getX();
    float x1 = x0 + (float) Math.abs(xOffset);
    float x3 = (float) dataArea.getMaxX();
    float x2 = x3 - (float) Math.abs(xOffset);

    float y0 = (float) dataArea.getMaxY();
    float y1 = y0 - (float) Math.abs(yOffset);
    float y3 = (float) dataArea.getMinY();
    float y2 = y3 + (float) Math.abs(yOffset);

    GeneralPath clip = new GeneralPath();
    clip.moveTo(x0, y0);
    clip.lineTo(x0, y2);
    clip.lineTo(x1, y3);
    clip.lineTo(x3, y3);
    clip.lineTo(x3, y1);
    clip.lineTo(x2, y0);
    clip.closePath();

    // put an outline around the data area...
    Stroke outlineStroke = plot.getOutlineStroke();
    Paint outlinePaint = plot.getOutlinePaint();
    if ((outlineStroke != null) && (outlinePaint != null)) {
        g2.setStroke(outlineStroke);
        g2.setPaint(outlinePaint);
        g2.draw(clip);
    }
}
```

---

### 2. Refactored Method Calls

#### In `BarRenderer3D` class:

```java
/**
 * Draws the outline for the plot.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the area inside the axes.
 */
@Override
public void drawOutline(Graphics2D g2, CategoryPlot plot,
                        Rectangle2D dataArea) {
    drawOutlineFor3D(g2, plot, dataArea, this.xOffset, this.yOffset);
}
```

---

#### In `LineRenderer3D` class:

```java
/**
 * Draws the outline for the plot.
 *
 * @param g2  the graphics device.
 * @param plot  the plot.
 * @param dataArea  the area inside the axes.
 */
@Override
public void drawOutline(Graphics2D g2, CategoryPlot plot,
                        Rectangle2D dataArea) {
    drawOutlineFor3D(g2, plot, dataArea, this.xOffset, this.yOffset);
}
```",Type-1
317-1-2,src,org.jfree.chart.labels,IntervalCategoryItemLabelGenerator,createItemArray,108,134,src,org.jfree.chart.labels,IntervalCategoryToolTipGenerator,createItemArray,108,134,Type 1,"### Code Snippet 1: `createItemArray` from `IntervalCategoryItemLabelGenerator`
```java
protected Object[] createItemArray(CategoryDataset dataset, 
                                   int row, int column) {
    Object[] result = new Object[5];
    result[0] = dataset.getRowKey(row).toString();
    result[1] = dataset.getColumnKey(column).toString();
    Number value = dataset.getValue(row, column);
    if (getNumberFormat() != null) {
        result[2] = getNumberFormat().format(value);  
    }
    else if (getDateFormat() != null) {
        result[2] = getDateFormat().format(value);
    }
    
    if (dataset instanceof IntervalCategoryDataset) {
        IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;
        Number start = icd.getStartValue(row, column);
        Number end = icd.getEndValue(row, column);
        if (getNumberFormat() != null) {
            result[3] = getNumberFormat().format(start);  
            result[4] = getNumberFormat().format(end);  
        }
        else if (getDateFormat() != null) {
            result[3] = getDateFormat().format(start);
            result[4] = getDateFormat().format(end);
        }
    }
    return result;
}
```

### Code Snippet 2: `createItemArray` from `IntervalCategoryToolTipGenerator`
```java
protected Object[] createItemArray(CategoryDataset dataset, 
                                   int row, int column) {
    Object[] result = new Object[5];
    result[0] = dataset.getRowKey(row).toString();
    result[1] = dataset.getColumnKey(column).toString();
    Number value = dataset.getValue(row, column);
    if (getNumberFormat() != null) {
        result[2] = getNumberFormat().format(value);  
    }
    else if (getDateFormat() != null) {
        result[2] = getDateFormat().format(value);
    }
    
    if (dataset instanceof IntervalCategoryDataset) {
        IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;
        Number start = icd.getStartValue(row, column);
        Number end = icd.getEndValue(row, column);
        if (getNumberFormat() != null) {
            result[3] = getNumberFormat().format(start);  
            result[4] = getNumberFormat().format(end);  
        }
        else if (getDateFormat() != null) {
            result[3] = getDateFormat().format(start);
            result[4] = getDateFormat().format(end);
        }
    }
    return result;
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for their surrounding class names and comments.","### 1. Extracted Method (To be placed in the superclass `StandardCategoryItemLabelGenerator`)
```java
protected Object[] createItemArrayInternal(CategoryDataset dataset, 
                                           int row, int column, 
                                           NumberFormat numberFormat, 
                                           DateFormat dateFormat) {
    Object[] result = new Object[5];
    result[0] = dataset.getRowKey(row).toString();
    result[1] = dataset.getColumnKey(column).toString();
    Number value = dataset.getValue(row, column);
    if (numberFormat != null) {
        result[2] = numberFormat.format(value);  
    }
    else if (dateFormat != null) {
        result[2] = dateFormat.format(value);
    }
    
    if (dataset instanceof IntervalCategoryDataset) {
        IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;
        Number start = icd.getStartValue(row, column);
        Number end = icd.getEndValue(row, column);
        if (numberFormat != null) {
            result[3] = numberFormat.format(start);  
            result[4] = numberFormat.format(end);  
        }
        else if (dateFormat != null) {
            result[3] = dateFormat.format(start);
            result[4] = dateFormat.format(end);
        }
    }
    return result;
}
```

### 2. Refactored Method Calls

#### In `IntervalCategoryItemLabelGenerator`
```java
@Override
protected Object[] createItemArray(CategoryDataset dataset, 
                                   int row, int column) {
    return createItemArrayInternal(dataset, row, column, getNumberFormat(), getDateFormat());
}
```

#### In `IntervalCategoryToolTipGenerator`
```java
@Override
protected Object[] createItemArray(CategoryDataset dataset, 
                                   int row, int column) {
    return createItemArrayInternal(dataset, row, column, getNumberFormat(), getDateFormat());
}
```",Type-1
321-2-4,src,org.jfree.chart.plot,CategoryPlot,clearRangeMarkers,2337,2363,src,org.jfree.chart.plot,XYPlot,clearRangeMarkers,2428,2454,Type 1,"### Code Snippet 1: `clearRangeMarkers` from `CategoryPlot.java`

```java
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

---

### Code Snippet 2: `clearRangeMarkers` from `XYPlot.java`

```java
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

---

### Clone Type:
**Type-1 Clone**: These two code snippets are **identical** except for their surrounding context (class names and comments).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Plot`)

```java
protected void clearMarkers(Map<Integer, Collection<Marker>> backgroundMarkers, 
                            Map<Integer, Collection<Marker>> foregroundMarkers) {
    if (backgroundMarkers != null) {
        Set<Integer> keys = backgroundMarkers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearRangeMarkers(key.intValue());
        }
        backgroundMarkers.clear();
    }
    if (foregroundMarkers != null) {
        Set<Integer> keys = foregroundMarkers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearRangeMarkers(key.intValue());
        }
        foregroundMarkers.clear();
    }
    fireChangeEvent();
}
```

---

### 2. Refactored `clearRangeMarkers` in `CategoryPlot.java`

```java
@Override
public void clearRangeMarkers() {
    clearMarkers(this.backgroundRangeMarkers, this.foregroundRangeMarkers);
}
```

---

### 3. Refactored `clearRangeMarkers` in `XYPlot.java`

```java
@Override
public void clearRangeMarkers() {
    clearMarkers(this.backgroundRangeMarkers, this.foregroundRangeMarkers);
}
```",Type-1
374-1-2,src,org.jfree.chart.plot,CategoryPlot,addRangeMarker,2238,2261,src,org.jfree.chart.plot,XYPlot,addRangeMarker,2395,2418,Type 1,"### Code Snippet 1 (CategoryPlot.java, addRangeMarker method, lines 2238-2261):
```java
/**
 * Adds a marker for display (in the foreground) against the range axis and
 * sends a {@link PlotChangeEvent} to all registered listeners. Typically a
 * marker will be drawn by the renderer as a line perpendicular to the
 * range axis, however this is entirely up to the renderer.
 *
 * @param marker  the marker (<code>null</code> not permitted).
 *
 * @see #removeRangeMarker(Marker)
 */
public void addRangeMarker(Marker marker) {
    addRangeMarker(marker, Layer.FOREGROUND);
}

/**
 * Adds a marker for display against the range axis and sends a
 * {@link PlotChangeEvent} to all registered listeners.  Typically a marker
 * will be drawn by the renderer as a line perpendicular to the range axis,
 * however this is entirely up to the renderer.
 *
 * @param marker  the marker (<code>null</code> not permitted).
 * @param layer  the layer (foreground or background) (<code>null</code>
 *               not permitted).
 *
 * @see #removeRangeMarker(Marker, Layer)
 */
public void addRangeMarker(Marker marker, Layer layer) {
    addRangeMarker(0, marker, layer);
}

/**
 * Adds a marker for display by a particular renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to a range axis, however this is entirely up to the renderer.
 *
 * @param index  the renderer index.
 * @param marker  the marker.
 * @param layer  the layer.
 *
 * @see #removeRangeMarker(int, Marker, Layer)
 */
public void addRangeMarker(int index, Marker marker, Layer layer) {
    addRangeMarker(index, marker, layer, true);
}

/**
 * Adds a marker for display by a particular renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to a range axis, however this is entirely up to the renderer.
 *
 * @param index  the renderer index.
 * @param marker  the marker.
 * @param layer  the layer.
 * @param notify  notify listeners?
 *
 * @since 1.0.10
 *
 * @see #removeRangeMarker(int, Marker, Layer, boolean)
 */
public void addRangeMarker(int index, Marker marker, Layer layer,
        boolean notify) {
    Collection markers;
    if (layer == Layer.FOREGROUND) {
        markers = (Collection) this.foregroundRangeMarkers.get(
                new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.foregroundRangeMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    }
    else if (layer == Layer.BACKGROUND) {
        markers = (Collection) this.backgroundRangeMarkers.get(
                new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.backgroundRangeMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    }
    marker.addChangeListener(this);
    if (notify) {
        fireChangeEvent();
    }
}
```

---

### Code Snippet 2 (XYPlot.java, addRangeMarker method, lines 2395-2418):
```java
/**
 * Adds a marker for the range axis and sends a {@link PlotChangeEvent} to
 * all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param marker  the marker (<code>null</code> not permitted).
 *
 * @see #addRangeMarker(Marker, Layer)
 */
public void addRangeMarker(Marker marker) {
    addRangeMarker(marker, Layer.FOREGROUND);
}

/**
 * Adds a marker for the range axis in the specified layer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param marker  the marker (<code>null</code> not permitted).
 * @param layer  the layer (foreground or background).
 *
 * @see #addRangeMarker(int, Marker, Layer)
 */
public void addRangeMarker(Marker marker, Layer layer) {
    addRangeMarker(0, marker, layer);
}

/**
 * Adds a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 *
 * @see #clearRangeMarkers(int)
 * @see #addDomainMarker(int, Marker, Layer)
 */
public void addRangeMarker(int index, Marker marker, Layer layer) {
    addRangeMarker(index, marker, layer, true);
}

/**
 * Adds a marker for a specific dataset/renderer and, if requested, sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * Typically a marker will be drawn by the renderer as a line perpendicular
 * to the range axis, however this is entirely up to the renderer.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @since 1.0.10
 */
public void addRangeMarker(int index, Marker marker, Layer layer,
        boolean notify) {
    Collection markers;
    if (layer == Layer.FOREGROUND) {
        markers = (Collection) this.foregroundRangeMarkers.get(
                new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.foregroundRangeMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    }
    else if (layer == Layer.BACKGROUND) {
        markers = (Collection) this.backgroundRangeMarkers.get(
                new Integer(index));
        if (markers == null) {
            markers = new java.util.ArrayList();
            this.backgroundRangeMarkers.put(new Integer(index), markers);
        }
        markers.add(marker);
    }
    marker.addChangeListener(this);
    if (notify) {
        fireChangeEvent();
    }
}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the superclass `Plot`):
```java
protected void addRangeMarkerInternal(Map<Integer, Collection<Marker>> foregroundMarkers,
                                      Map<Integer, Collection<Marker>> backgroundMarkers,
                                      int index, Marker marker, Layer layer, boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' not permitted."");
    }
    if (layer == null) {
        throw new IllegalArgumentException(""Null 'layer' not permitted."");
    }
    Collection<Marker> markers;
    if (layer == Layer.FOREGROUND) {
        markers = foregroundMarkers.get(index);
        if (markers == null) {
            markers = new java.util.ArrayList<>();
            foregroundMarkers.put(index, markers);
        }
        markers.add(marker);
    } else if (layer == Layer.BACKGROUND) {
        markers = backgroundMarkers.get(index);
        if (markers == null) {
            markers = new java.util.ArrayList<>();
            backgroundMarkers.put(index, markers);
        }
        markers.add(marker);
    }
    marker.addChangeListener(this);
    if (notify) {
        fireChangeEvent();
    }
}
```

---

### 2. Refactored Code in `CategoryPlot.java`:
```java
public void addRangeMarker(Marker marker) {
    addRangeMarker(marker, Layer.FOREGROUND);
}

public void addRangeMarker(Marker marker, Layer layer) {
    addRangeMarker(0, marker, layer);
}

public void addRangeMarker(int index, Marker marker, Layer layer) {
    addRangeMarker(index, marker, layer, true);
}

public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    addRangeMarkerInternal(this.foregroundRangeMarkers, this.backgroundRangeMarkers, index, marker, layer, notify);
}
```

---

### 3. Refactored Code in `XYPlot.java`:
```java
public void addRangeMarker(Marker marker) {
    addRangeMarker(marker, Layer.FOREGROUND);
}

public void addRangeMarker(Marker marker, Layer layer) {
    addRangeMarker(0, marker, layer);
}

public void addRangeMarker(int index, Marker marker, Layer layer) {
    addRangeMarker(index, marker, layer, true);
}

public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    addRangeMarkerInternal(this.foregroundRangeMarkers, this.backgroundRangeMarkers, index, marker, layer, notify);
}
```",Type-1
432-1-2,src,org.jfree.chart.plot,CategoryPlot,removeRangeMarker,2436,2457,src,org.jfree.chart.plot,XYPlot,removeRangeMarker,2519,2540,Type 1,"### Code Snippet 1: `removeRangeMarker` from `CategoryPlot.java`
```java
/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners.
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 *
 * @see #addRangeMarker(int, Marker, Layer, boolean)
 */
public boolean removeRangeMarker(int index, Marker marker, Layer layer,
        boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(
                index));
    }
    else {
        markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(
                index));
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}
```

### Code Snippet 2: `removeRangeMarker` from `XYPlot.java`
```java
/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 *
 * @since 1.0.10
 */
public boolean removeRangeMarker(int index, Marker marker, Layer layer,
        boolean notify) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundRangeMarkers.get(
                new Integer(index));
    }
    else {
        markers = (ArrayList) this.backgroundRangeMarkers.get(
                new Integer(index));
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `Plot`):
```java
/**
 * Removes a marker for a specific dataset/renderer and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the dataset/renderer index.
 * @param marker  the marker.
 * @param layer  the layer (foreground or background).
 * @param notify  notify listeners?
 * @param foregroundMarkers  the foreground markers map.
 * @param backgroundMarkers  the background markers map.
 *
 * @return A boolean indicating whether or not the marker was actually
 *         removed.
 */
protected boolean removeRangeMarkerInternal(int index, Marker marker, Layer layer, boolean notify,
        Map<Integer, ArrayList<Marker>> foregroundMarkers, Map<Integer, ArrayList<Marker>> backgroundMarkers) {
    if (marker == null) {
        throw new IllegalArgumentException(""Null 'marker' argument."");
    }
    ArrayList<Marker> markers;
    if (layer == Layer.FOREGROUND) {
        markers = foregroundMarkers.get(index);
    } else {
        markers = backgroundMarkers.get(index);
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:
```java
@Override
public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    return removeRangeMarkerInternal(index, marker, layer, notify, this.foregroundRangeMarkers, this.backgroundRangeMarkers);
}
```

#### In `XYPlot.java`:
```java
@Override
public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) {
    return removeRangeMarkerInternal(index, marker, layer, notify, this.foregroundRangeMarkers, this.backgroundRangeMarkers);
}
```",Type-1
511-1-3,src,org.jfree.chart.plot,CategoryPlot,clearDomainMarkers,2000,2019,src,org.jfree.chart.plot,XYPlot,clearDomainMarkers,2095,2114,Type 1,"```java
// Code snippet from CategoryPlot.java
public void clearDomainMarkers() {
    if (this.backgroundDomainMarkers != null) {
        Set keys = this.backgroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.backgroundDomainMarkers.clear();
    }
    if (this.foregroundDomainMarkers != null) {
        Set keys = this.foregroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.foregroundDomainMarkers.clear();
    }
    fireChangeEvent();
}
```

```java
// Code snippet from XYPlot.java
public void clearDomainMarkers() {
    if (this.backgroundDomainMarkers != null) {
        Set keys = this.backgroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.backgroundDomainMarkers.clear();
    }
    if (this.foregroundDomainMarkers != null) {
        Set keys = this.foregroundDomainMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearDomainMarkers(key.intValue());
        }
        this.foregroundDomainMarkers.clear();
    }
    fireChangeEvent();
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, layout).","```java
// Extracted method to be placed in the common superclass (e.g., Plot.java)
protected void clearMarkers(Map<Integer, Collection<Marker>> backgroundMarkers, 
                            Map<Integer, Collection<Marker>> foregroundMarkers) {
    if (backgroundMarkers != null) {
        Set<Integer> keys = backgroundMarkers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearDomainMarkers(key.intValue());
        }
        backgroundMarkers.clear();
    }
    if (foregroundMarkers != null) {
        Set<Integer> keys = foregroundMarkers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearDomainMarkers(key.intValue());
        }
        foregroundMarkers.clear();
    }
    fireChangeEvent();
}
```

```java
// Refactored method in CategoryPlot.java
public void clearDomainMarkers() {
    clearMarkers(this.backgroundDomainMarkers, this.foregroundDomainMarkers);
}
```

```java
// Refactored method in XYPlot.java
public void clearDomainMarkers() {
    clearMarkers(this.backgroundDomainMarkers, this.foregroundDomainMarkers);
}
```",Type-1
511-2-4,src,org.jfree.chart.plot,CategoryPlot,clearRangeMarkers,2271,2290,src,org.jfree.chart.plot,XYPlot,clearRangeMarkers,2341,2360,Type 1,"### Code Snippet 1: `clearRangeMarkers` from `CategoryPlot.java`
```java
/**
 * Clears all the range markers for the plot and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @see #clearDomainMarkers()
 */
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

### Code Snippet 2: `clearRangeMarkers` from `XYPlot.java`
```java
/**
 * Clears all the range markers and sends a {@link PlotChangeEvent} to all
 * registered listeners.
 *
 * @see #clearRangeMarkers()
 */
public void clearRangeMarkers() {
    if (this.backgroundRangeMarkers != null) {
        Set keys = this.backgroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.backgroundRangeMarkers.clear();
    }
    if (this.foregroundRangeMarkers != null) {
        Set keys = this.foregroundRangeMarkers.keySet();
        Iterator iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = (Integer) iterator.next();
            clearRangeMarkers(key.intValue());
        }
        this.foregroundRangeMarkers.clear();
    }
    fireChangeEvent();
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`)
```java
/**
 * Clears all the markers for the given map and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param backgroundMarkers the background markers map.
 * @param foregroundMarkers the foreground markers map.
 */
protected void clearAllRangeMarkers(Map<Integer, Collection<Marker>> backgroundMarkers, 
                                    Map<Integer, Collection<Marker>> foregroundMarkers) {
    if (backgroundMarkers != null) {
        Set<Integer> keys = backgroundMarkers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearRangeMarkers(key.intValue());
        }
        backgroundMarkers.clear();
    }
    if (foregroundMarkers != null) {
        Set<Integer> keys = foregroundMarkers.keySet();
        Iterator<Integer> iterator = keys.iterator();
        while (iterator.hasNext()) {
            Integer key = iterator.next();
            clearRangeMarkers(key.intValue());
        }
        foregroundMarkers.clear();
    }
    fireChangeEvent();
}
```

---

### 2. Refactored Method Calls

#### In `CategoryPlot.java`
```java
/**
 * Clears all the range markers for the plot and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @see #clearDomainMarkers()
 */
public void clearRangeMarkers() {
    clearAllRangeMarkers(this.backgroundRangeMarkers, this.foregroundRangeMarkers);
}
```

#### In `XYPlot.java`
```java
/**
 * Clears all the range markers and sends a {@link PlotChangeEvent} to all
 * registered listeners.
 *
 * @see #clearRangeMarkers()
 */
public void clearRangeMarkers() {
    clearAllRangeMarkers(this.backgroundRangeMarkers, this.foregroundRangeMarkers);
}
```",Type-1
512-1-3,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3733,3752,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4564,4583,Type 1,"### Code Snippet 1: `zoomRangeAxes` method from `CategoryPlot.java` (lines 3733-3752)
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### Code Snippet 2: `zoomRangeAxes` method from `XYPlot.java` (lines 4564-4583)
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `Plot`):
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param rangeAxes  the list of range axes.
 * @param orientation  the plot orientation.
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 * @param getRangeAxisEdge  a function to get the range axis edge.
 */
protected void performZoomRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation,
                                    double factor, PlotRenderingInfo info, Point2D source,
                                    boolean useAnchor, Function<Integer, RectangleEdge> getRangeAxisEdge) {

    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge.apply(i));
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored `zoomRangeAxes` in `CategoryPlot.java`:
```java
@Override
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, this::getRangeAxisEdge);
}
```

---

### 3. Refactored `zoomRangeAxes` in `XYPlot.java`:
```java
@Override
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, this::getRangeAxisEdge);
}
```",Type-1
554-1-2,src,org.jfree.chart.plot,CategoryPlot,removeDomainMarker,2154,2172,src,org.jfree.chart.plot,XYPlot,removeDomainMarker,2283,2301,Type 1,"### Code Snippet 1: `removeDomainMarker` in `CategoryPlot.java` (Lines 2154-2172)
```java
public boolean removeDomainMarker(int index, Marker marker, Layer layer,
        boolean notify) {
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(
                index));
    }
    else {
        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(
                index));
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}
```

### Code Snippet 2: `removeDomainMarker` in `XYPlot.java` (Lines 2283-2301)
```java
public boolean removeDomainMarker(int index, Marker marker, Layer layer,
        boolean notify) {
    ArrayList markers;
    if (layer == Layer.FOREGROUND) {
        markers = (ArrayList) this.foregroundDomainMarkers.get(
                new Integer(index));
    }
    else {
        markers = (ArrayList) this.backgroundDomainMarkers.get(
                new Integer(index));
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`)
```java
protected boolean removeMarker(Map<Integer, ArrayList<Marker>> markerMap, int index, Marker marker, Layer layer, boolean notify) {
    ArrayList<Marker> markers;
    if (layer == Layer.FOREGROUND) {
        markers = markerMap.get(index);
    } else {
        markers = markerMap.get(index);
    }
    if (markers == null) {
        return false;
    }
    boolean removed = markers.remove(marker);
    if (removed && notify) {
        fireChangeEvent();
    }
    return removed;
}
```

### 2. Refactored Method Calls

#### In `CategoryPlot.java`
```java
public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {
    return removeMarker(layer == Layer.FOREGROUND ? this.foregroundDomainMarkers : this.backgroundDomainMarkers, index, marker, layer, notify);
}
```

#### In `XYPlot.java`
```java
public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) {
    return removeMarker(layer == Layer.FOREGROUND ? this.foregroundDomainMarkers : this.backgroundDomainMarkers, index, marker, layer, notify);
}
```",Type-1
599-2-4,src,org.jfree.chart.plot,MeterPlot,setDataset,708,726,src,org.jfree.chart.plot,ThermometerPlot,setDataset,432,450,Type 1,"### Code Snippet 1: `setDataset` Method from `MeterPlot` Class
```java
/**
 * Sets the dataset for the plot, replacing the existing dataset if there 
 * is one, and triggers a {@link PlotChangeEvent}.
 * 
 * @param dataset  the dataset (<code>null</code> permitted).
 * 
 * @see #getDataset()
 */
public void setDataset(ValueDataset dataset) {
    
    // if there is an existing dataset, remove the plot from the list of 
    // change listeners...
    ValueDataset existing = this.dataset;
    if (existing != null) {
        existing.removeChangeListener(this);
    }

    // set the new dataset, and register the chart as a change listener...
    this.dataset = dataset;
    if (dataset != null) {
        setDatasetGroup(dataset.getGroup());
        dataset.addChangeListener(this);
    }

    // send a dataset change event to self...
    DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);
    datasetChanged(event);
    
}
```

---

### Code Snippet 2: `setDataset` Method from `ThermometerPlot` Class
```java
/**
 * Sets the dataset for the plot, replacing the existing dataset if there 
 * is one, and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * 
 * @see #getDataset()
 */
public void setDataset(ValueDataset dataset) {

    // if there is an existing dataset, remove the plot from the list 
    // of change listeners...
    ValueDataset existing = this.dataset;
    if (existing != null) {
        existing.removeChangeListener(this);
    }

    // set the new dataset, and register the chart as a change listener...
    this.dataset = dataset;
    if (dataset != null) {
        setDatasetGroup(dataset.getGroup());
        dataset.addChangeListener(this);
    }

    // send a dataset change event to self...
    DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);
    datasetChanged(event);

}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`)
```java
/**
 * Handles setting the dataset for a plot, replacing the existing dataset 
 * if there is one, and triggering a {@link PlotChangeEvent}.
 *
 * @param currentDataset  the current dataset of the plot.
 * @param newDataset      the new dataset to set (<code>null</code> permitted).
 * @param plotInstance    the plot instance (used for event source and listener registration).
 */
protected void handleSetDataset(ValueDataset currentDataset, ValueDataset newDataset, Plot plotInstance) {
    // if there is an existing dataset, remove the plot from the list of change listeners...
    if (currentDataset != null) {
        currentDataset.removeChangeListener(plotInstance);
    }

    // set the new dataset, and register the chart as a change listener...
    if (newDataset != null) {
        setDatasetGroup(newDataset.getGroup());
        newDataset.addChangeListener(plotInstance);
    }

    // send a dataset change event to self...
    DatasetChangeEvent event = new DatasetChangeEvent(plotInstance, newDataset);
    plotInstance.datasetChanged(event);
}
```

---

### 2. Refactored `setDataset` Method in `MeterPlot` Class
```java
/**
 * Sets the dataset for the plot, replacing the existing dataset if there 
 * is one, and triggers a {@link PlotChangeEvent}.
 * 
 * @param dataset  the dataset (<code>null</code> permitted).
 * 
 * @see #getDataset()
 */
public void setDataset(ValueDataset dataset) {
    handleSetDataset(this.dataset, dataset, this);
    this.dataset = dataset;
}
```

---

### 3. Refactored `setDataset` Method in `ThermometerPlot` Class
```java
/**
 * Sets the dataset for the plot, replacing the existing dataset if there 
 * is one, and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 * 
 * @see #getDataset()
 */
public void setDataset(ValueDataset dataset) {
    handleSetDataset(this.dataset, dataset, this);
    this.dataset = dataset;
}
```",Type-1
617-1-2,src,org.jfree.chart,ChartUtilities,writeImageMap,661,678,src,org.jfree.chart.imagemap,ImageMapUtilities,writeImageMap,95,112,Type 1,"### Code Snippet 1: `writeImageMap` from `ChartUtilities.java`
```java
/**
 * Writes an image map to an output stream.
 *
 * @param writer  the writer (<code>null</code> not permitted).
 * @param name  the map name (<code>null</code> not permitted).
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param useOverLibForToolTips  whether to use OverLIB for tooltips
 *                               (http://www.bosrup.com/web/overlib/).
 *
 * @throws IOException if there are any I/O errors.
 */
public static void writeImageMap(PrintWriter writer,
                                 String name,
                                 ChartRenderingInfo info,
                                 boolean useOverLibForToolTips) 
    throws IOException {

    ToolTipTagFragmentGenerator toolTipTagFragmentGenerator = null;
    if (useOverLibForToolTips) {
        toolTipTagFragmentGenerator 
                = new OverLIBToolTipTagFragmentGenerator();
    }
    else {
        toolTipTagFragmentGenerator 
                = new StandardToolTipTagFragmentGenerator();
    }
    ImageMapUtilities.writeImageMap(writer, name, info, 
            toolTipTagFragmentGenerator, 
            new StandardURLTagFragmentGenerator());

}
```

---

### Code Snippet 2: `writeImageMap` from `ImageMapUtilities.java`
```java
/**
 * Writes an image map to an output stream.
 *
 * @param writer  the writer (<code>null</code> not permitted).
 * @param name  the map name (<code>null</code> not permitted).
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param useOverLibForToolTips  whether to use OverLIB for tooltips
 *                               (http://www.bosrup.com/web/overlib/).
 *
 * @throws java.io.IOException if there are any I/O errors.
 */
public static void writeImageMap(PrintWriter writer,
                                 String name,
                                 ChartRenderingInfo info,
                                 boolean useOverLibForToolTips) 
    throws IOException {

    ToolTipTagFragmentGenerator toolTipTagFragmentGenerator = null;
    if (useOverLibForToolTips) {
        toolTipTagFragmentGenerator 
                = new OverLIBToolTipTagFragmentGenerator();
    }
    else {
        toolTipTagFragmentGenerator 
                = new StandardToolTipTagFragmentGenerator();
    }
    ImageMapUtilities.writeImageMap(writer, name, info, 
            toolTipTagFragmentGenerator, 
            new StandardURLTagFragmentGenerator());

}
```

---

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for minor differences in comments (e.g., `@throws IOException` vs. `@throws java.io.IOException`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Writes an image map to an output stream.
 *
 * @param writer  the writer (<code>null</code> not permitted).
 * @param name  the map name (<code>null</code> not permitted).
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param useOverLibForToolTips  whether to use OverLIB for tooltips
 *                               (http://www.bosrup.com/web/overlib/).
 *
 * @throws IOException if there are any I/O errors.
 */
protected static void writeImageMapInternal(PrintWriter writer,
                                            String name,
                                            ChartRenderingInfo info,
                                            boolean useOverLibForToolTips) 
    throws IOException {

    ToolTipTagFragmentGenerator toolTipTagFragmentGenerator = null;
    if (useOverLibForToolTips) {
        toolTipTagFragmentGenerator 
                = new OverLIBToolTipTagFragmentGenerator();
    }
    else {
        toolTipTagFragmentGenerator 
                = new StandardToolTipTagFragmentGenerator();
    }
    ImageMapUtilities.writeImageMap(writer, name, info, 
            toolTipTagFragmentGenerator, 
            new StandardURLTagFragmentGenerator());
}
```

---

### 2. Method Calls Replacing Clones in Original Files

#### In `ChartUtilities.java`
```java
public static void writeImageMap(PrintWriter writer,
                                 String name,
                                 ChartRenderingInfo info,
                                 boolean useOverLibForToolTips) 
    throws IOException {
    writeImageMapInternal(writer, name, info, useOverLibForToolTips);
}
```

---

#### In `ImageMapUtilities.java`
```java
public static void writeImageMap(PrintWriter writer,
                                 String name,
                                 ChartRenderingInfo info,
                                 boolean useOverLibForToolTips) 
    throws IOException {
    ChartUtilities.writeImageMapInternal(writer, name, info, useOverLibForToolTips);
}
```",Type-1
627-1-3,src,org.jfree.chart.renderer.category,AbstractCategoryItemRenderer,calculateDomainMarkerTextAnchorPoint,1077,1094,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,calculateDomainMarkerTextAnchorPoint,1186,1203,Type 1,"```java
// Code Snippet 1: AbstractCategoryItemRenderer.java (Lines 1077-1094)
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetType,
                                      RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                LengthAdjustmentType.CONTRACT, labelOffsetType);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                labelOffsetType, LengthAdjustmentType.CONTRACT);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);

}
```

```java
// Code Snippet 2: AbstractXYItemRenderer.java (Lines 1186-1203)
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
            PlotOrientation orientation,
            Rectangle2D dataArea,
            Rectangle2D markerArea,
            RectangleInsets markerOffset,
            LengthAdjustmentType labelOffsetType,
            RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                LengthAdjustmentType.CONTRACT, labelOffsetType);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                labelOffsetType, LengthAdjustmentType.CONTRACT);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);

}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, and layout).","```java
// 1. Extracted Method (to be placed in the common superclass AbstractRenderer.java)
protected Point2D calculateMarkerTextAnchorPoint(Graphics2D g2,
            PlotOrientation orientation,
            Rectangle2D markerArea,
            RectangleInsets markerOffset,
            LengthAdjustmentType primaryAdjustment,
            LengthAdjustmentType secondaryAdjustment,
            RectangleAnchor anchor) {

    Rectangle2D anchorRect = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                primaryAdjustment, secondaryAdjustment);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        anchorRect = markerOffset.createAdjustedRectangle(markerArea,
                secondaryAdjustment, primaryAdjustment);
    }
    return RectangleAnchor.coordinates(anchorRect, anchor);
}
```

```java
// 2. Updated Method in AbstractCategoryItemRenderer.java
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
                                      PlotOrientation orientation,
                                      Rectangle2D dataArea,
                                      Rectangle2D markerArea,
                                      RectangleInsets markerOffset,
                                      LengthAdjustmentType labelOffsetType,
                                      RectangleAnchor anchor) {
    return calculateMarkerTextAnchorPoint(g2, orientation, markerArea, markerOffset,
            LengthAdjustmentType.CONTRACT, labelOffsetType, anchor);
}
```

```java
// 3. Updated Method in AbstractXYItemRenderer.java
protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,
            PlotOrientation orientation,
            Rectangle2D dataArea,
            Rectangle2D markerArea,
            RectangleInsets markerOffset,
            LengthAdjustmentType labelOffsetType,
            RectangleAnchor anchor) {
    return calculateMarkerTextAnchorPoint(g2, orientation, markerArea, markerOffset,
            LengthAdjustmentType.CONTRACT, labelOffsetType, anchor);
}
```",Type-1
705-1-3,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3737,3752,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4568,4583,Type 1,"### Code Snippet 1: `zoomRangeAxes` from `CategoryPlot.java`
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### Code Snippet 2: `zoomRangeAxes` from `XYPlot.java`
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `Plot`):
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param rangeAxes  the list of range axes.
 * @param orientation  the plot orientation.
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 * @param getRangeAxisEdge  a function to get the range axis edge.
 */
protected void performZoomRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation,
                                    double factor, PlotRenderingInfo info, Point2D source,
                                    boolean useAnchor, Function<Integer, RectangleEdge> getRangeAxisEdge) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge.apply(i));
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, this::getRangeAxisEdge);
}
```

---

#### In `XYPlot.java`:
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, this::getRangeAxisEdge);
}
```",Type-1
710-1-2,src,org.jfree.chart.plot,MultiplePiePlot,setDataset,174,189,src,org.jfree.chart.plot,SpiderWebPlot,setDataset,355,370,Type 1,"### Code Snippet 1: `setDataset` method from `MultiplePiePlot` class (lines 174-189)
```java
/**
 * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 */
public void setDataset(CategoryDataset dataset) {
    // if there is an existing dataset, remove the plot from the list of
    // change listeners...
    if (this.dataset != null) {
        this.dataset.removeChangeListener(this);
    }

    // set the new dataset, and register the chart as a change listener...
    this.dataset = dataset;
    if (dataset != null) {
        setDatasetGroup(dataset.getGroup());
        dataset.addChangeListener(this);
    }

    // send a dataset change event to self to trigger plot change event
    datasetChanged(new DatasetChangeEvent(this, dataset));
}
```

---

### Code Snippet 2: `setDataset` method from `SpiderWebPlot` class (lines 355-370)
```java
/**
 * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 *
 * @see #getDataset()
 */
public void setDataset(CategoryDataset dataset) {
    // if there is an existing dataset, remove the plot from the list of
    // change listeners...
    if (this.dataset != null) {
        this.dataset.removeChangeListener(this);
    }

    // set the new dataset, and register the chart as a change listener...
    this.dataset = dataset;
    if (dataset != null) {
        setDatasetGroup(dataset.getGroup());
        dataset.addChangeListener(this);
    }

    // send a dataset change event to self to trigger plot change event
    datasetChanged(new DatasetChangeEvent(this, dataset));
}
```

---

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `Plot`)
```java
/**
 * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param currentDataset  the current dataset of the plot.
 * @param newDataset      the new dataset to be set.
 * @param plotInstance    the instance of the plot.
 */
protected void updateDataset(CategoryDataset currentDataset, CategoryDataset newDataset, Plot plotInstance) {
    // if there is an existing dataset, remove the plot from the list of
    // change listeners...
    if (currentDataset != null) {
        currentDataset.removeChangeListener(plotInstance);
    }

    // set the new dataset, and register the chart as a change listener...
    if (newDataset != null) {
        plotInstance.setDatasetGroup(newDataset.getGroup());
        newDataset.addChangeListener(plotInstance);
    }

    // send a dataset change event to self to trigger plot change event
    plotInstance.datasetChanged(new DatasetChangeEvent(plotInstance, newDataset));
}
```

---

### 2. Refactored `setDataset` Method in `MultiplePiePlot`
```java
/**
 * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 */
public void setDataset(CategoryDataset dataset) {
    updateDataset(this.dataset, dataset, this);
    this.dataset = dataset;
}
```

---

### 3. Refactored `setDataset` Method in `SpiderWebPlot`
```java
/**
 * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param dataset  the dataset (<code>null</code> permitted).
 */
public void setDataset(CategoryDataset dataset) {
    updateDataset(this.dataset, dataset, this);
    this.dataset = dataset;
}
```",Type-1
759-1-3,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,getLegendItems,535,548,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,getLegendItems,430,443,Type 1,"### Code Snippet 1: `getLegendItems` from `CombinedDomainCategoryPlot`
```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    LegendItemCollection result = getFixedLegendItems();
    if (result == null) {
        result = new LegendItemCollection();
        if (this.subplots != null) {
            Iterator iterator = this.subplots.iterator();
            while (iterator.hasNext()) {
                CategoryPlot plot = (CategoryPlot) iterator.next();
                LegendItemCollection more = plot.getLegendItems();
                result.addAll(more);
            }
        }
    }
    return result;
}
```

---

### Code Snippet 2: `getLegendItems` from `CombinedRangeCategoryPlot`
```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    LegendItemCollection result = getFixedLegendItems();
    if (result == null) {
        result = new LegendItemCollection();
        if (this.subplots != null) {
            Iterator iterator = this.subplots.iterator();
            while (iterator.hasNext()) {
                CategoryPlot plot = (CategoryPlot) iterator.next();
                LegendItemCollection more = plot.getLegendItems();
                result.addAll(more);
            }
        }
    }
    return result;
}
```

---

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `CategoryPlot`)
```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @param subplots  the list of subplots.
 * @return The legend items.
 */
protected LegendItemCollection collectLegendItems(List subplots) {
    LegendItemCollection result = getFixedLegendItems();
    if (result == null) {
        result = new LegendItemCollection();
        if (subplots != null) {
            Iterator iterator = subplots.iterator();
            while (iterator.hasNext()) {
                CategoryPlot plot = (CategoryPlot) iterator.next();
                LegendItemCollection more = plot.getLegendItems();
                result.addAll(more);
            }
        }
    }
    return result;
}
```

---

### 2. Refactored Method in `CombinedDomainCategoryPlot`
```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    return collectLegendItems(this.subplots);
}
```

---

### 3. Refactored Method in `CombinedRangeCategoryPlot`
```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    return collectLegendItems(this.subplots);
}
```",Type-1
759-2-4,src,org.jfree.chart.plot,CombinedDomainXYPlot,getLegendItems,482,495,src,org.jfree.chart.plot,CombinedRangeXYPlot,getLegendItems,428,442,Type 1,"Here are the two code snippets:

---

**Code Snippet 1 (from `CombinedDomainXYPlot`):**

```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    LegendItemCollection result = getFixedLegendItems();
    if (result == null) {
        result = new LegendItemCollection();
        if (this.subplots != null) {
            Iterator iterator = this.subplots.iterator();
            while (iterator.hasNext()) {
                XYPlot plot = (XYPlot) iterator.next();
                LegendItemCollection more = plot.getLegendItems();
                result.addAll(more);
            }
        }
    }
    return result;
}
```

---

**Code Snippet 2 (from `CombinedRangeXYPlot`):**

```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    LegendItemCollection result = getFixedLegendItems();
    if (result == null) {
        result = new LegendItemCollection();

        if (this.subplots != null) {
            Iterator iterator = this.subplots.iterator();
            while (iterator.hasNext()) {
                XYPlot plot = (XYPlot) iterator.next();
                LegendItemCollection more = plot.getLegendItems();
                result.addAll(more);
            }
        }
    }
    return result;
}
```

---

**Clone Type:**  
These two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","**1. Extracted Method (to be placed in the superclass `XYPlot`):**

```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @param subplots  the list of subplots.
 * @param fixedLegendItems  the fixed legend items.
 * @return The legend items.
 */
protected LegendItemCollection collectLegendItems(List subplots, LegendItemCollection fixedLegendItems) {
    LegendItemCollection result = fixedLegendItems;
    if (result == null) {
        result = new LegendItemCollection();
        if (subplots != null) {
            Iterator iterator = subplots.iterator();
            while (iterator.hasNext()) {
                XYPlot plot = (XYPlot) iterator.next();
                LegendItemCollection more = plot.getLegendItems();
                result.addAll(more);
            }
        }
    }
    return result;
}
```

---

**2. Refactored Method Calls (to replace the clones):**

**In `CombinedDomainXYPlot`:**

```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    return collectLegendItems(this.subplots, getFixedLegendItems());
}
```

**In `CombinedRangeXYPlot`:**

```java
/**
 * Returns a collection of legend items for the plot.
 *
 * @return The legend items.
 */
public LegendItemCollection getLegendItems() {
    return collectLegendItems(this.subplots, getFixedLegendItems());
}
```",Type-1
817-1-2,src,org.jfree.chart.renderer.category,StackedAreaRenderer,adjustedStackValues,466,480,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer2,adjustedStackValues,512,526,Type 1,"### Code Snippet 1 (from `StackedAreaRenderer` class, method `adjustedStackValues`):

```java
/**
 * Calculates adjusted stack values from the supplied values.  The value is
 * the mean of the supplied values, unless either of the supplied values
 * is zero, in which case the adjusted value is zero also.
 *
 * @param stack1  the first stack pair.
 * @param stack2  the second stack pair.
 *
 * @return A pair of average stack values.
 */
private double[] adjustedStackValues(double[] stack1, double[] stack2) {
    double[] result = new double[2];
    if (stack1[0] == 0.0 || stack2[0] == 0.0) {
        result[0] = 0.0;
    }
    else {
        result[0] = (stack1[0] + stack2[0]) / 2.0;
    }
    if (stack1[1] == 0.0 || stack2[1] == 0.0) {
        result[1] = 0.0;
    }
    else {
        result[1] = (stack1[1] + stack2[1]) / 2.0;
    }
    return result;
}
```

---

### Code Snippet 2 (from `StackedXYAreaRenderer2` class, method `adjustedStackValues`):

```java
/**
 * Calculates adjusted stack values from the supplied values.  The value is
 * the mean of the supplied values, unless either of the supplied values
 * is zero, in which case the adjusted value is zero also.
 *
 * @param stack1  the first stack pair.
 * @param stack2  the second stack pair.
 *
 * @return A pair of average stack values.
 */
private double[] adjustedStackValues(double[] stack1, double[] stack2) {
    double[] result = new double[2];
    if (stack1[0] == 0.0 || stack2[0] == 0.0) {
        result[0] = 0.0;
    }
    else {
        result[0] = (stack1[0] + stack2[0]) / 2.0;
    }
    if (stack1[1] == 0.0 || stack2[1] == 0.0) {
        result[1] = 0.0;
    }
    else {
        result[1] = (stack1[1] + stack2[1]) / 2.0;
    }
    return result;
}
```

---

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for their location in different classes.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Calculates adjusted stack values from the supplied values. The value is
 * the mean of the supplied values, unless either of the supplied values
 * is zero, in which case the adjusted value is zero also.
 *
 * @param stack1  the first stack pair.
 * @param stack2  the second stack pair.
 *
 * @return A pair of average stack values.
 */
protected double[] calculateAdjustedStackValues(double[] stack1, double[] stack2) {
    double[] result = new double[2];
    if (stack1[0] == 0.0 || stack2[0] == 0.0) {
        result[0] = 0.0;
    } else {
        result[0] = (stack1[0] + stack2[0]) / 2.0;
    }
    if (stack1[1] == 0.0 || stack2[1] == 0.0) {
        result[1] = 0.0;
    } else {
        result[1] = (stack1[1] + stack2[1]) / 2.0;
    }
    return result;
}
```

---

### 2. Method Calls Replacing the Clones:

#### In `StackedAreaRenderer` class:
```java
private double[] adjustedStackValues(double[] stack1, double[] stack2) {
    return calculateAdjustedStackValues(stack1, stack2);
}
```

#### In `StackedXYAreaRenderer2` class:
```java
private double[] adjustedStackValues(double[] stack1, double[] stack2) {
    return calculateAdjustedStackValues(stack1, stack2);
}
```",Type-1
824-1-4,src,org.jfree.chart.block,CenterArrangement,arrangeRR,207,219,src,org.jfree.chart.block,FlowArrangement,arrangeRR,278,291,Type 1,"### Code Snippet 1: `arrangeRR` in `CenterArrangement` (Lines 207-219)
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    // first arrange without constraints, and see if this fits within
    // the required ranges...
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;  // TODO: we didn't check the height yet
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().getUpperBound());
        return arrangeFR(container, g2, c);
    }
}
```

### Code Snippet 2: `arrangeRR` in `FlowArrangement` (Lines 278-291)
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    // first arrange without constraints, and see if this fits within
    // the required ranges...
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;  // TODO: we didn't check the height yet
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return arrangeFR(container, g2, c);
    }
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Arrangement`):
```java
protected Size2D arrangeRRCommon(BlockContainer container, Graphics2D g2,
                                 RectangleConstraint constraint,
                                 Arrangement arrangementInstance) {

    // first arrange without constraints, and see if this fits within
    // the required ranges...
    Size2D s1 = arrangementInstance.arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;  // TODO: we didn't check the height yet
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return arrangementInstance.arrangeFR(container, g2, c);
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CenterArrangement`:
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRRCommon(container, g2, constraint, this);
}
```

#### In `FlowArrangement`:
```java
protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRRCommon(container, g2, constraint, this);
}
```",Type-1
824-2-5,src,org.jfree.chart.block,CenterArrangement,arrangeRN,257,268,src,org.jfree.chart.block,FlowArrangement,arrangeRN,330,342,Type 1,"### Code Snippet 1: `arrangeRN` in `CenterArrangement` (Lines 257-268)
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    // first arrange without constraints, then see if the width fits
    // within the required range...if not, call arrangeFN() at max width
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().getUpperBound());
        return arrangeFN(container, g2, c);
    }
}
```

### Code Snippet 2: `arrangeRN` in `FlowArrangement` (Lines 330-342)
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    // first arrange without constraints, then see if the width fits
    // within the required range...if not, call arrangeFN() at max width
    Size2D s1 = arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return arrangeFN(container, g2, c);
    }
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for minor differences in formatting (e.g., indentation and line breaks).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractArrangement`)
```java
protected Size2D arrangeRNCommon(BlockContainer container, Graphics2D g2,
                                 RectangleConstraint constraint,
                                 Arrangement arrangement) {
    // first arrange without constraints, then see if the width fits
    // within the required range...if not, call arrangeFN() at max width
    Size2D s1 = arrangement.arrangeNN(container, g2);
    if (constraint.getWidthRange().contains(s1.width)) {
        return s1;   
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().getUpperBound()
        );
        return arrangement.arrangeFN(container, g2, c);
    }
}
```

---

### 2. Refactored Method Calls

#### In `CenterArrangement`:
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRNCommon(container, g2, constraint, this);
}
```

#### In `FlowArrangement`:
```java
protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRNCommon(container, g2, constraint, this);
}
```",Type-1
839-1-2,src,org.jfree.chart.renderer.category,BarRenderer,isInternalAnchor,1039,1052,src,org.jfree.chart.renderer.xy,XYBarRenderer,isInternalAnchor,896,909,Type 1,"```java
// Code snippet from BarRenderer.java
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return anchor == ItemLabelAnchor.CENTER
           || anchor == ItemLabelAnchor.INSIDE1
           || anchor == ItemLabelAnchor.INSIDE2
           || anchor == ItemLabelAnchor.INSIDE3
           || anchor == ItemLabelAnchor.INSIDE4
           || anchor == ItemLabelAnchor.INSIDE5
           || anchor == ItemLabelAnchor.INSIDE6
           || anchor == ItemLabelAnchor.INSIDE7
           || anchor == ItemLabelAnchor.INSIDE8
           || anchor == ItemLabelAnchor.INSIDE9
           || anchor == ItemLabelAnchor.INSIDE10
           || anchor == ItemLabelAnchor.INSIDE11
           || anchor == ItemLabelAnchor.INSIDE12;
}
```

```java
// Code snippet from XYBarRenderer.java
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return anchor == ItemLabelAnchor.CENTER 
           || anchor == ItemLabelAnchor.INSIDE1
           || anchor == ItemLabelAnchor.INSIDE2
           || anchor == ItemLabelAnchor.INSIDE3
           || anchor == ItemLabelAnchor.INSIDE4
           || anchor == ItemLabelAnchor.INSIDE5
           || anchor == ItemLabelAnchor.INSIDE6
           || anchor == ItemLabelAnchor.INSIDE7
           || anchor == ItemLabelAnchor.INSIDE8
           || anchor == ItemLabelAnchor.INSIDE9
           || anchor == ItemLabelAnchor.INSIDE10
           || anchor == ItemLabelAnchor.INSIDE11
           || anchor == ItemLabelAnchor.INSIDE12;  
}
```

Clone Type: **Type-1 Clone** (Identical except for whitespace, comments, or layout).","```java
// Extracted method to be placed in the common superclass (e.g., AbstractCategoryItemRenderer or AbstractXYItemRenderer)
protected boolean isInternalAnchorCommon(ItemLabelAnchor anchor) {
    return anchor == ItemLabelAnchor.CENTER
           || anchor == ItemLabelAnchor.INSIDE1
           || anchor == ItemLabelAnchor.INSIDE2
           || anchor == ItemLabelAnchor.INSIDE3
           || anchor == ItemLabelAnchor.INSIDE4
           || anchor == ItemLabelAnchor.INSIDE5
           || anchor == ItemLabelAnchor.INSIDE6
           || anchor == ItemLabelAnchor.INSIDE7
           || anchor == ItemLabelAnchor.INSIDE8
           || anchor == ItemLabelAnchor.INSIDE9
           || anchor == ItemLabelAnchor.INSIDE10
           || anchor == ItemLabelAnchor.INSIDE11
           || anchor == ItemLabelAnchor.INSIDE12;
}
```

```java
// Refactored method in BarRenderer.java
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return isInternalAnchorCommon(anchor);
}
```

```java
// Refactored method in XYBarRenderer.java
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return isInternalAnchorCommon(anchor);
}
```",Type-1
859-1-2,src,org.jfree.chart.renderer.category,LineAndShapeRenderer,getSeriesShapesFilled,592,605,src,org.jfree.chart.renderer.xy,StandardXYItemRenderer,getItemShapeFilled,336,348,Type 1,"### Code Snippet 1: `getSeriesShapesFilled` method from `LineAndShapeRenderer` class (start line 592, end line 605)
```java
/**
 * Returns the flag used to control whether or not the shapes for a series
 * are filled.
 *
 * @param series  the series index (zero-based).
 *
 * @return A boolean.
 */
public boolean getSeriesShapesFilled(int series) {

    // return the overall setting, if there is one...
    if (this.shapesFilled != null) {
        return this.shapesFilled.booleanValue();
    }

    // otherwise look up the paint table
    Boolean flag = this.seriesShapesFilled.getBoolean(series);
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesFilled;
    }

}
```

---

### Code Snippet 2: `getItemShapeFilled` method from `StandardXYItemRenderer` class (start line 336, end line 348)
```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * filled.
 * <p>
 * The default implementation passes control to the
 * <code>getSeriesShapesFilled</code> method.  You can override this method
 * if you require different behaviour.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 *
 * @see #getSeriesShapesFilled(int)
 */
public boolean getItemShapeFilled(int series, int item) {
    // return the overall setting, if there is one...
    if (this.shapesFilled != null) {
        return this.shapesFilled.booleanValue();
    }

    // otherwise look up the paint table
    Boolean flag = this.seriesShapesFilled.getBoolean(series);
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesFilled;
    }
}
```

---

### Clone Type:
The two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Returns the flag used to control whether or not the shapes for a series
 * or item are filled.
 *
 * @param shapesFilled  the overall setting (can be null).
 * @param seriesShapesFilled  the per-series settings.
 * @param baseShapesFilled  the default value if no other setting is found.
 * @param series  the series index (zero-based).
 *
 * @return A boolean.
 */
protected boolean isShapeFilled(Boolean shapesFilled, BooleanList seriesShapesFilled, boolean baseShapesFilled, int series) {
    if (shapesFilled != null) {
        return shapesFilled.booleanValue();
    }
    Boolean flag = seriesShapesFilled.getBoolean(series);
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseShapesFilled;
    }
}
```

---

### 2. Refactored Method Calls

#### In `LineAndShapeRenderer` class (`getSeriesShapesFilled` method)
```java
/**
 * Returns the flag used to control whether or not the shapes for a series
 * are filled.
 *
 * @param series  the series index (zero-based).
 *
 * @return A boolean.
 */
public boolean getSeriesShapesFilled(int series) {
    return isShapeFilled(this.shapesFilled, this.seriesShapesFilled, this.baseShapesFilled, series);
}
```

---

#### In `StandardXYItemRenderer` class (`getItemShapeFilled` method)
```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * filled.
 * <p>
 * The default implementation passes control to the
 * <code>getSeriesShapesFilled</code> method.  You can override this method
 * if you require different behaviour.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 *
 * @see #getSeriesShapesFilled(int)
 */
public boolean getItemShapeFilled(int series, int item) {
    return isShapeFilled(this.shapesFilled, this.seriesShapesFilled, this.baseShapesFilled, series);
}
```",Type-1
878-2-3,src,org.jfree.chart.urls,CustomCategoryURLGenerator,getURL,100,110,src,org.jfree.chart.urls,CustomXYURLGenerator,getURL,109,119,Type 1,"### Code Snippet 1 (CustomCategoryURLGenerator.java, getURL method, lines 100-110):
```java
/**
 * Returns the URL for an item.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The URL (possibly <code>null</code>).
 */
public String getURL(int series, int item) {
    String result = null;
    if (series < getListCount()) {
        List urls = (List) this.urlSeries.get(series);
        if (urls != null) {
            if (item < urls.size()) {
                result = (String) urls.get(item);
            }
        }
    }
    return result;
}
```

### Code Snippet 2 (CustomXYURLGenerator.java, getURL method, lines 109-119):
```java
/**
 * Returns the URL for an item.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The URL (possibly <code>null</code>).
 */
public String getURL(int series, int item) {
    String result = null;
    if (series < getListCount()) {
        List urls = (List) this.urlSeries.get(series);
        if (urls != null) {
            if (item < urls.size()) {
                result = (String) urls.get(item);
            }
        }
    }
    return result;
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, and layout.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Returns the URL for an item from the given URL series.
 *
 * @param urlSeries  the list of URL series.
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The URL (possibly <code>null</code>).
 */
protected String getURLFromSeries(List urlSeries, int series, int item) {
    String result = null;
    if (series < urlSeries.size()) {
        List urls = (List) urlSeries.get(series);
        if (urls != null) {
            if (item < urls.size()) {
                result = (String) urls.get(item);
            }
        }
    }
    return result;
}
```

### 2. Refactored Method Calls:

#### In `CustomCategoryURLGenerator.java`:
```java
/**
 * Returns the URL for an item.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The URL (possibly <code>null</code>).
 */
public String getURL(int series, int item) {
    return getURLFromSeries(this.urlSeries, series, item);
}
```

#### In `CustomXYURLGenerator.java`:
```java
/**
 * Returns the URL for an item.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The URL (possibly <code>null</code>).
 */
public String getURL(int series, int item) {
    return getURLFromSeries(this.urlSeries, series, item);
}
```",Type-1
892-2-3,src,org.jfree.chart.plot,CombinedDomainXYPlot,findSubplot,571,583,src,org.jfree.chart.plot,CombinedRangeXYPlot,findSubplot,519,531,Type 1,"### Code Snippet 1: `findSubplot` Method from `CombinedDomainXYPlot` (Lines 571-583)
```java
/**
 * Returns the subplot (if any) that contains the (x, y) point (specified
 * in Java2D space).
 *
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param source  the source point (<code>null</code> not permitted).
 *
 * @return A subplot (possibly <code>null</code>).
 */
public XYPlot findSubplot(PlotRenderingInfo info, Point2D source) {
    if (info == null) {
        throw new IllegalArgumentException(""Null 'info' argument."");
    }
    if (source == null) {
        throw new IllegalArgumentException(""Null 'source' argument."");
    }
    XYPlot result = null;
    int subplotIndex = info.getSubplotIndex(source);
    if (subplotIndex >= 0) {
        result =  (XYPlot) this.subplots.get(subplotIndex);
    }
    return result;
}
```

---

### Code Snippet 2: `findSubplot` Method from `CombinedRangeXYPlot` (Lines 519-531)
```java
/**
 * Returns the subplot (if any) that contains the (x, y) point (specified
 * in Java2D space).
 *
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param source  the source point (<code>null</code> not permitted).
 *
 * @return A subplot (possibly <code>null</code>).
 */
public XYPlot findSubplot(PlotRenderingInfo info, Point2D source) {
    if (info == null) {
        throw new IllegalArgumentException(""Null 'info' argument."");
    }
    if (source == null) {
        throw new IllegalArgumentException(""Null 'source' argument."");
    }
    XYPlot result = null;
    int subplotIndex = info.getSubplotIndex(source);
    if (subplotIndex >= 0) {
        result =  (XYPlot) this.subplots.get(subplotIndex);
    }
    return result;
}
```

---

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `XYPlot`)
```java
/**
 * Returns the subplot (if any) that contains the (x, y) point (specified
 * in Java2D space).
 *
 * @param info  the chart rendering info (<code>null</code> not permitted).
 * @param source  the source point (<code>null</code> not permitted).
 * @param subplots  the list of subplots.
 *
 * @return A subplot (possibly <code>null</code>).
 */
protected XYPlot findSubplotInternal(PlotRenderingInfo info, Point2D source, List subplots) {
    if (info == null) {
        throw new IllegalArgumentException(""Null 'info' argument."");
    }
    if (source == null) {
        throw new IllegalArgumentException(""Null 'source' argument."");
    }
    XYPlot result = null;
    int subplotIndex = info.getSubplotIndex(source);
    if (subplotIndex >= 0) {
        result = (XYPlot) subplots.get(subplotIndex);
    }
    return result;
}
```

---

### 2. Refactored Method Calls

#### In `CombinedDomainXYPlot` (Lines 571-583)
```java
public XYPlot findSubplot(PlotRenderingInfo info, Point2D source) {
    return findSubplotInternal(info, source, this.subplots);
}
```

#### In `CombinedRangeXYPlot` (Lines 519-531)
```java
public XYPlot findSubplot(PlotRenderingInfo info, Point2D source) {
    return findSubplotInternal(info, source, this.subplots);
}
```",Type-1
900-1-3,src,org.jfree.chart.plot,CategoryPlot,getDomainMarkers,2042,2054,src,org.jfree.chart.plot,XYPlot,getDomainMarkers,3671,3683,Type 1,"### Code Snippet 1 (from `CategoryPlot.java`):

```java
/**
 * Returns the list of domain markers (read only) for the specified layer.
 *
 * @param layer  the layer (foreground or background).
 *
 * @return The list of domain markers.
 */
public Collection getDomainMarkers(Layer layer) {
    return getDomainMarkers(0, layer);
}

/**
 * Returns a collection of domain markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getDomainMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundDomainMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundDomainMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

---

### Code Snippet 2 (from `XYPlot.java`):

```java
/**
 * Returns the list of domain markers (read only) for the specified layer.
 *
 * @param layer  the layer (foreground or background).
 *
 * @return The list of domain markers.
 */
public Collection getDomainMarkers(Layer layer) {
    return getDomainMarkers(0, layer);
}

/**
 * Returns a collection of domain markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getDomainMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundDomainMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundDomainMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `Plot`):

```java
/**
 * Returns a collection of domain markers for a particular renderer and layer.
 *
 * @param foregroundDomainMarkers  the map of foreground domain markers.
 * @param backgroundDomainMarkers  the map of background domain markers.
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
protected Collection getDomainMarkers(Map foregroundDomainMarkers, Map backgroundDomainMarkers, int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) foregroundDomainMarkers.get(key);
    } else if (layer == Layer.BACKGROUND) {
        result = (Collection) backgroundDomainMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

---

### 2. Refactored Code in `CategoryPlot.java`:

```java
/**
 * Returns the list of domain markers (read only) for the specified layer.
 *
 * @param layer  the layer (foreground or background).
 *
 * @return The list of domain markers.
 */
public Collection getDomainMarkers(Layer layer) {
    return getDomainMarkers(0, layer);
}

/**
 * Returns a collection of domain markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getDomainMarkers(int index, Layer layer) {
    return getDomainMarkers(this.foregroundDomainMarkers, this.backgroundDomainMarkers, index, layer);
}
```

---

### 3. Refactored Code in `XYPlot.java`:

```java
/**
 * Returns the list of domain markers (read only) for the specified layer.
 *
 * @param layer  the layer (foreground or background).
 *
 * @return The list of domain markers.
 */
public Collection getDomainMarkers(Layer layer) {
    return getDomainMarkers(0, layer);
}

/**
 * Returns a collection of domain markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getDomainMarkers(int index, Layer layer) {
    return getDomainMarkers(this.foregroundDomainMarkers, this.backgroundDomainMarkers, index, layer);
}
```",Type-1
900-2-4,src,org.jfree.chart.plot,CategoryPlot,getRangeMarkers,2315,2327,src,org.jfree.chart.plot,XYPlot,getRangeMarkers,3697,3709,Type 1,"### Code Snippet 1: `getRangeMarkers` from `CategoryPlot.java`
```java
/**
 * Returns a collection of range markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getRangeMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundRangeMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundRangeMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

### Code Snippet 2: `getRangeMarkers` from `XYPlot.java`
```java
/**
 * Returns a collection of range markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getRangeMarkers(int index, Layer layer) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) this.foregroundRangeMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) this.backgroundRangeMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `Plot`):
```java
/**
 * Returns a collection of markers for a particular renderer and layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 * @param foregroundMarkers  the map of foreground markers.
 * @param backgroundMarkers  the map of background markers.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
protected Collection getMarkers(int index, Layer layer, Map foregroundMarkers, Map backgroundMarkers) {
    Collection result = null;
    Integer key = new Integer(index);
    if (layer == Layer.FOREGROUND) {
        result = (Collection) foregroundMarkers.get(key);
    }
    else if (layer == Layer.BACKGROUND) {
        result = (Collection) backgroundMarkers.get(key);
    }
    if (result != null) {
        result = Collections.unmodifiableCollection(result);
    }
    return result;
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:
```java
/**
 * Returns a collection of range markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getRangeMarkers(int index, Layer layer) {
    return getMarkers(index, layer, this.foregroundRangeMarkers, this.backgroundRangeMarkers);
}
```

---

#### In `XYPlot.java`:
```java
/**
 * Returns a collection of range markers for a particular renderer and
 * layer.
 *
 * @param index  the renderer index.
 * @param layer  the layer.
 *
 * @return A collection of markers (possibly <code>null</code>).
 */
public Collection getRangeMarkers(int index, Layer layer) {
    return getMarkers(index, layer, this.foregroundRangeMarkers, this.backgroundRangeMarkers);
}
```",Type-1
928-1-2,src,org.jfree.chart.renderer.category,BarRenderer,isInternalAnchor,1040,1052,src,org.jfree.chart.renderer.xy,XYBarRenderer,isInternalAnchor,897,909,Type 1,"### Code Snippet 1: `isInternalAnchor` method from `BarRenderer.java`
```java
/**
 * Returns <code>true</code> if the specified anchor point is inside a bar.
 *
 * @param anchor  the anchor point.
 *
 * @return A boolean.
 */
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return anchor == ItemLabelAnchor.CENTER
           || anchor == ItemLabelAnchor.INSIDE1
           || anchor == ItemLabelAnchor.INSIDE2
           || anchor == ItemLabelAnchor.INSIDE3
           || anchor == ItemLabelAnchor.INSIDE4
           || anchor == ItemLabelAnchor.INSIDE5
           || anchor == ItemLabelAnchor.INSIDE6
           || anchor == ItemLabelAnchor.INSIDE7
           || anchor == ItemLabelAnchor.INSIDE8
           || anchor == ItemLabelAnchor.INSIDE9
           || anchor == ItemLabelAnchor.INSIDE10
           || anchor == ItemLabelAnchor.INSIDE11
           || anchor == ItemLabelAnchor.INSIDE12;
}
```

### Code Snippet 2: `isInternalAnchor` method from `XYBarRenderer.java`
```java
/**
 * Returns <code>true</code> if the specified anchor point is inside a bar.
 * 
 * @param anchor  the anchor point.
 * 
 * @return A boolean.
 */
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return anchor == ItemLabelAnchor.CENTER 
           || anchor == ItemLabelAnchor.INSIDE1
           || anchor == ItemLabelAnchor.INSIDE2
           || anchor == ItemLabelAnchor.INSIDE3
           || anchor == ItemLabelAnchor.INSIDE4
           || anchor == ItemLabelAnchor.INSIDE5
           || anchor == ItemLabelAnchor.INSIDE6
           || anchor == ItemLabelAnchor.INSIDE7
           || anchor == ItemLabelAnchor.INSIDE8
           || anchor == ItemLabelAnchor.INSIDE9
           || anchor == ItemLabelAnchor.INSIDE10
           || anchor == ItemLabelAnchor.INSIDE11
           || anchor == ItemLabelAnchor.INSIDE12;  
}
```

### Clone Type:
These two code snippets are **Type-1 clones** because they are identical except for minor differences in whitespace and formatting.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Returns <code>true</code> if the specified anchor point is inside a bar.
 *
 * @param anchor  the anchor point.
 *
 * @return A boolean.
 */
protected boolean isInternalAnchorCommon(ItemLabelAnchor anchor) {
    return anchor == ItemLabelAnchor.CENTER
           || anchor == ItemLabelAnchor.INSIDE1
           || anchor == ItemLabelAnchor.INSIDE2
           || anchor == ItemLabelAnchor.INSIDE3
           || anchor == ItemLabelAnchor.INSIDE4
           || anchor == ItemLabelAnchor.INSIDE5
           || anchor == ItemLabelAnchor.INSIDE6
           || anchor == ItemLabelAnchor.INSIDE7
           || anchor == ItemLabelAnchor.INSIDE8
           || anchor == ItemLabelAnchor.INSIDE9
           || anchor == ItemLabelAnchor.INSIDE10
           || anchor == ItemLabelAnchor.INSIDE11
           || anchor == ItemLabelAnchor.INSIDE12;
}
```

---

### 2. Refactored Method Calls in `BarRenderer.java`
```java
/**
 * Returns <code>true</code> if the specified anchor point is inside a bar.
 *
 * @param anchor  the anchor point.
 *
 * @return A boolean.
 */
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return isInternalAnchorCommon(anchor);
}
```

---

### 3. Refactored Method Calls in `XYBarRenderer.java`
```java
/**
 * Returns <code>true</code> if the specified anchor point is inside a bar.
 * 
 * @param anchor  the anchor point.
 * 
 * @return A boolean.
 */
private boolean isInternalAnchor(ItemLabelAnchor anchor) {
    return isInternalAnchorCommon(anchor);
}
```",Type-1
937-1-2,src,org.jfree.data.time,Month,findSeparator,482,494,src,org.jfree.data.time,Week,findSeparator,585,597,Type 1,"### Code Snippet 1 (from `Month` class, method `findSeparator`):
```java
/**
 * Finds the first occurrence of ' ', '-', ',' or '.'
 *
 * @param s  the string to parse.
 * 
 * @return <code>-1</code> if none of the characters where found, the
 *      position of the first occurence otherwise.
 */
private static int findSeparator(String s) {

    int result = s.indexOf('-');
    if (result == -1) {
        result = s.indexOf(',');
    }
    if (result == -1) {
        result = s.indexOf(' ');
    }
    if (result == -1) {
        result = s.indexOf('.');
    }
    return result;
}
```

### Code Snippet 2 (from `Week` class, method `findSeparator`):
```java
/**
 * Finds the first occurrence of ' ', '-', ',' or '.'
 *
 * @param s  the string to parse.
 *
 * @return <code>-1</code> if none of the characters was found, the
 *      index of the first occurrence otherwise.
 */
private static int findSeparator(String s) {

    int result = s.indexOf('-');
    if (result == -1) {
        result = s.indexOf(',');
    }
    if (result == -1) {
        result = s.indexOf(' ');
    }
    if (result == -1) {
        result = s.indexOf('.');
    }
    return result;
}
```

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for comments and whitespace**.","### 1. Extracted Method (to be placed in the common superclass `RegularTimePeriod`):
```java
/**
 * Finds the first occurrence of ' ', '-', ',' or '.'
 *
 * @param s  the string to parse.
 * 
 * @return <code>-1</code> if none of the characters were found, the
 *      position of the first occurrence otherwise.
 */
protected static int findSeparatorInString(String s) {
    int result = s.indexOf('-');
    if (result == -1) {
        result = s.indexOf(',');
    }
    if (result == -1) {
        result = s.indexOf(' ');
    }
    if (result == -1) {
        result = s.indexOf('.');
    }
    return result;
}
```

---

### 2. Refactored Method in `Month` Class:
```java
/**
 * Finds the first occurrence of ' ', '-', ',' or '.'
 *
 * @param s  the string to parse.
 * 
 * @return <code>-1</code> if none of the characters where found, the
 *      position of the first occurrence otherwise.
 */
private static int findSeparator(String s) {
    return RegularTimePeriod.findSeparatorInString(s);
}
```

---

### 3. Refactored Method in `Week` Class:
```java
/**
 * Finds the first occurrence of ' ', '-', ',' or '.'
 *
 * @param s  the string to parse.
 *
 * @return <code>-1</code> if none of the characters was found, the
 *      index of the first occurrence otherwise.
 */
private static int findSeparator(String s) {
    return RegularTimePeriod.findSeparatorInString(s);
}
```",Type-1
981-1-4,src,org.jfree.chart.block,CenterArrangement,arrangeFR,166,176,src,org.jfree.chart.block,FlowArrangement,arrangeFR,236,247,Type 1,"### Code Snippet 1: `arrangeFR` in `CenterArrangement` (Lines 236-247)
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeFN(container, g2, constraint);
    if (constraint.getHeightRange().contains(s.height)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedHeight(
                constraint.getHeightRange().constrain(s.getHeight()));
        return arrangeFF(container, g2, c);
    }
}
```

---

### Code Snippet 2: `arrangeFR` in `FlowArrangement` (Lines 236-247)
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeFN(container, g2, constraint);
    if (constraint.getHeightRange().contains(s.height)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedHeight(
            constraint.getHeightRange().constrain(s.getHeight())
        );
        return arrangeFF(container, g2, c);
    }
}
```

---

### Clone Type: **Type-1 Clone**
These two code snippets are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass)
```java
protected Size2D arrangeFRCommon(BlockContainer container, Graphics2D g2,
                                 RectangleConstraint constraint,
                                 java.util.function.BiFunction<BlockContainer, RectangleConstraint, Size2D> arrangeFN,
                                 java.util.function.BiFunction<BlockContainer, RectangleConstraint, Size2D> arrangeFF) {

    Size2D s = arrangeFN.apply(container, constraint);
    if (constraint.getHeightRange().contains(s.height)) {
        return s;   
    } else {
        RectangleConstraint c = constraint.toFixedHeight(
                constraint.getHeightRange().constrain(s.getHeight()));
        return arrangeFF.apply(container, c);
    }
}
```

---

### 2. Refactored Method Calls in `CenterArrangement`
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeFRCommon(container, g2, constraint, 
        (c, con) -> arrangeFN(c, g2, con), 
        (c, con) -> arrangeFF(c, g2, con));
}
```

---

### 3. Refactored Method Calls in `FlowArrangement`
```java
protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeFRCommon(container, g2, constraint, 
        (c, con) -> arrangeFN(c, g2, con), 
        (c, con) -> arrangeFF(c, g2, con));
}
```",Type-1
981-2-3,src,org.jfree.chart.block,CenterArrangement,arrangeRF,233,243,src,org.jfree.chart.block,ColumnArrangement,arrangeRF,276,287,Type 1,"### Code Snippet 1 (from `CenterArrangement` class, method `arrangeRF`):

```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().constrain(s.getWidth()));
        return arrangeFF(container, g2, c);
    }
}
```

---

### Code Snippet 2 (from `ColumnArrangement` class, method `arrangeRF`):

```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangeFF(container, g2, c);
    }
}
```

---

### Clone Type:
**Type-1 Clone**: The two code snippets are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractArrangement`):

```java
protected Size2D arrangeRFCommon(BlockContainer container, Graphics2D g2,
                                 RectangleConstraint constraint,
                                 Arrangement arrangement) {

    Size2D s = arrangement.arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangement.arrangeFF(container, g2, c);
    }
}
```

---

### 2. Refactored Method Calls (in `CenterArrangement` class):

```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRFCommon(container, g2, constraint, this);
}
```

---

### 3. Refactored Method Calls (in `ColumnArrangement` class):

```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRFCommon(container, g2, constraint, this);
}
```",Type-1
981-2-5,src,org.jfree.chart.block,CenterArrangement,arrangeRF,233,243,src,org.jfree.chart.block,FlowArrangement,arrangeRF,305,316,Type 1,"### Code Snippet 1: `arrangeRF` in `CenterArrangement` (Lines 233-243)
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
                constraint.getWidthRange().constrain(s.getWidth()));
        return arrangeFF(container, g2, c);
    }
}
```

### Code Snippet 2: `arrangeRF` in `FlowArrangement` (Lines 305-316)
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangeFF(container, g2, c);
    }
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for minor differences in formatting (e.g., indentation and line breaks).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected Size2D arrangeRFCommon(BlockContainer container, Graphics2D g2,
                                 RectangleConstraint constraint,
                                 Arrangement arrangementInstance) {

    Size2D s = arrangementInstance.arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangementInstance.arrangeFF(container, g2, c);
    }
}
```

### 2. Refactored Method Calls in `CenterArrangement`
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRFCommon(container, g2, constraint, this);
}
```

### 3. Refactored Method Calls in `FlowArrangement`
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRFCommon(container, g2, constraint, this);
}
```",Type-1
981-3-5,src,org.jfree.chart.block,ColumnArrangement,arrangeRF,276,287,src,org.jfree.chart.block,FlowArrangement,arrangeRF,305,316,Type 1,"### Code Snippet 1: `arrangeRF` in `ColumnArrangement` (lines 276-287)
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangeFF(container, g2, c);
    }
}
```

### Code Snippet 2: `arrangeRF` in `FlowArrangement` (lines 305-316)
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {

    Size2D s = arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    }
    else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangeFF(container, g2, c);
    }
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, and layout.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractArrangement`)
```java
protected Size2D arrangeRFCommon(BlockContainer container, Graphics2D g2,
                                 RectangleConstraint constraint,
                                 Arrangement arrangementInstance) {

    Size2D s = arrangementInstance.arrangeNF(container, g2, constraint);
    if (constraint.getWidthRange().contains(s.width)) {
        return s;   
    } else {
        RectangleConstraint c = constraint.toFixedWidth(
            constraint.getWidthRange().constrain(s.getWidth())
        );
        return arrangementInstance.arrangeFF(container, g2, c);
    }
}
```

---

### 2. Refactored Method Calls

#### In `ColumnArrangement`:
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRFCommon(container, g2, constraint, this);
}
```

#### In `FlowArrangement`:
```java
protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                           RectangleConstraint constraint) {
    return arrangeRFCommon(container, g2, constraint, this);
}
```",Type-1
1138-1-3,src,org.jfree.chart.renderer.category,LineAndShapeRenderer,getItemLineVisible,249,258,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemLineVisible,267,276,Type 1,"### Code Snippet 1: `getItemLineVisible` from `LineAndShapeRenderer.java` (lines 249-258)
```java
/**
 * Returns the flag used to control whether or not the line for an item is
 * visible.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemLineVisible(int series, int item) {
    Boolean flag = this.linesVisible;
    if (flag == null) {
        flag = getSeriesLinesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseLinesVisible;
    }
}
```

### Code Snippet 2: `getItemLineVisible` from `XYLineAndShapeRenderer.java` (lines 267-276)
```java
/**
 * Returns the flag used to control whether or not the line for an item is
 * visible.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemLineVisible(int series, int item) {
    Boolean flag = this.linesVisible;
    if (flag == null) {
        flag = getSeriesLinesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseLinesVisible;
    }
}
```

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, or layout**.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Returns the flag used to control whether or not the line for an item is
 * visible.
 *
 * @param linesVisible  the global lines visible flag.
 * @param seriesLinesVisible  the per-series lines visible flags.
 * @param baseLinesVisible  the base lines visible flag.
 * @param series  the series index (zero-based).
 * @return A boolean.
 */
protected boolean isItemLineVisible(Boolean linesVisible, BooleanList seriesLinesVisible, boolean baseLinesVisible, int series) {
    Boolean flag = linesVisible;
    if (flag == null) {
        flag = seriesLinesVisible.getBoolean(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseLinesVisible;
    }
}
```

---

### 2. Refactored Method Calls

#### In `LineAndShapeRenderer.java`
```java
/**
 * Returns the flag used to control whether or not the line for an item is
 * visible.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemLineVisible(int series, int item) {
    return isItemLineVisible(this.linesVisible, this.seriesLinesVisible, this.baseLinesVisible, series);
}
```

---

#### In `XYLineAndShapeRenderer.java`
```java
/**
 * Returns the flag used to control whether or not the line for an item is
 * visible.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemLineVisible(int series, int item) {
    return isItemLineVisible(this.linesVisible, this.seriesLinesVisible, this.baseLinesVisible, series);
}
```",Type-1
1138-2-4,src,org.jfree.chart.renderer.category,LineAndShapeRenderer,getItemShapeVisible,388,397,src,org.jfree.chart.renderer.xy,XYLineAndShapeRenderer,getItemShapeVisible,435,444,Type 1,"### Code Snippet 1 (from `LineAndShapeRenderer.java`):

```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * visible.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemShapeVisible(int series, int item) {
    Boolean flag = this.shapesVisible;
    if (flag == null) {
        flag = getSeriesShapesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesVisible;
    }
}
```

---

### Code Snippet 2 (from `XYLineAndShapeRenderer.java`):

```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * visible.
 * <p>
 * The default implementation passes control to the
 * <code>getSeriesShapesVisible</code> method. You can override this method
 * if you require different behaviour.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemShapeVisible(int series, int item) {
    Boolean flag = this.shapesVisible;
    if (flag == null) {
        flag = getSeriesShapesVisible(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    }
    else {
        return this.baseShapesVisible;
    }
}
```

---

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * visible.
 *
 * @param shapesVisible  the global shapes visible flag.
 * @param seriesShapesVisible  the per-series shapes visible list.
 * @param baseShapesVisible  the base shapes visible flag.
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
protected boolean isItemShapeVisible(Boolean shapesVisible, BooleanList seriesShapesVisible, boolean baseShapesVisible, int series, int item) {
    Boolean flag = shapesVisible;
    if (flag == null) {
        flag = seriesShapesVisible.getBoolean(series);
    }
    if (flag != null) {
        return flag.booleanValue();
    } else {
        return baseShapesVisible;
    }
}
```

---

### 2. Refactored Method Calls:

#### In `LineAndShapeRenderer.java`:

```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * visible.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemShapeVisible(int series, int item) {
    return isItemShapeVisible(this.shapesVisible, this.seriesShapesVisible, this.baseShapesVisible, series, item);
}
```

---

#### In `XYLineAndShapeRenderer.java`:

```java
/**
 * Returns the flag used to control whether or not the shape for an item is
 * visible.
 * <p>
 * The default implementation passes control to the
 * <code>getSeriesShapesVisible</code> method. You can override this method
 * if you require different behaviour.
 *
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 *
 * @return A boolean.
 */
public boolean getItemShapeVisible(int series, int item) {
    return isItemShapeVisible(this.shapesVisible, this.seriesShapesVisible, this.baseShapesVisible, series, item);
}
```",Type-1
1161-1-6,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,setOrientation,499,506,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,setOrientation,388,395,Type 1,"### Code Snippet 1 (from `CombinedDomainCategoryPlot` class, method `setOrientation`):

```java
/**
 * Sets the orientation of the plot (and all subplots).
 *
 * @param orientation  the orientation (<code>null</code> not permitted).
 */
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        CategoryPlot plot = (CategoryPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

---

### Code Snippet 2 (from `CombinedRangeCategoryPlot` class, method `setOrientation`):

```java
/**
 * Sets the orientation for the plot (and all the subplots).
 * 
 * @param orientation  the orientation.
 */
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        CategoryPlot plot = (CategoryPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

---

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the superclass `CategoryPlot`):

```java
/**
 * Sets the orientation for the plot and its subplots.
 *
 * @param orientation  the orientation.
 * @param subplots     the list of subplots.
 */
protected void setOrientationForSubplots(PlotOrientation orientation, List subplots) {
    super.setOrientation(orientation);

    Iterator iterator = subplots.iterator();
    while (iterator.hasNext()) {
        CategoryPlot plot = (CategoryPlot) iterator.next();
        plot.setOrientation(orientation);
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CombinedDomainCategoryPlot` class:

```java
/**
 * Sets the orientation of the plot (and all subplots).
 *
 * @param orientation  the orientation (<code>null</code> not permitted).
 */
public void setOrientation(PlotOrientation orientation) {
    setOrientationForSubplots(orientation, this.subplots);
}
```

---

#### In `CombinedRangeCategoryPlot` class:

```java
/**
 * Sets the orientation for the plot (and all the subplots).
 * 
 * @param orientation  the orientation.
 */
public void setOrientation(PlotOrientation orientation) {
    setOrientationForSubplots(orientation, this.subplots);
}
```",Type-1
1161-3-10,src,org.jfree.chart.plot,CombinedDomainXYPlot,setOrientation,182,188,src,org.jfree.chart.plot,CombinedRangeXYPlot,setOrientation,562,569,Type 1,"### Code Snippet 1 (from `CombinedDomainXYPlot` class, `setOrientation` method, lines 182-188):
```java
/**
 * Sets the orientation for the plot (also changes the orientation for all
 * the subplots to match).
 *
 * @param orientation  the orientation (<code>null</code> not allowed).
 */
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

### Code Snippet 2 (from `CombinedRangeXYPlot` class, `setOrientation` method, lines 562-569):
```java
/**
 * Sets the orientation for the plot (and all its subplots).
 *
 * @param orientation  the orientation.
 */
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

### Clone Type:
These two code snippets are **Type-1 clones** because they are identical except for minor differences in comments and whitespace.","### 1. Extracted Method (to be placed in the common superclass `XYPlot`):
```java
/**
 * Sets the orientation for the plot and updates the orientation for all subplots.
 *
 * @param orientation  the orientation.
 * @param subplots     the list of subplots to update.
 */
protected void updateOrientationForSubplots(PlotOrientation orientation, List subplots) {
    super.setOrientation(orientation);
    Iterator iterator = subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }
}
```

---

### 2. Refactored `setOrientation` Method in `CombinedDomainXYPlot`:
```java
/**
 * Sets the orientation for the plot (also changes the orientation for all
 * the subplots to match).
 *
 * @param orientation  the orientation (<code>null</code> not allowed).
 */
public void setOrientation(PlotOrientation orientation) {
    updateOrientationForSubplots(orientation, this.subplots);
}
```

---

### 3. Refactored `setOrientation` Method in `CombinedRangeXYPlot`:
```java
/**
 * Sets the orientation for the plot (and all its subplots).
 *
 * @param orientation  the orientation.
 */
public void setOrientation(PlotOrientation orientation) {
    updateOrientationForSubplots(orientation, this.subplots);
}
```",Type-1
1161-5-9,src,org.jfree.chart.plot,CombinedDomainXYPlot,setRenderer,595,604,src,org.jfree.chart.plot,CombinedRangeXYPlot,setRenderer,543,552,Type 1,"### Code Snippet 1 (from `CombinedDomainXYPlot` class, method `setRenderer`):
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

### Code Snippet 2 (from `CombinedRangeXYPlot` class, method `setRenderer`):
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are **identical** except for their location in different classes.","### 1. Extracted Method (to be placed in the superclass `XYPlot`):
```java
/**
 * Sets the item renderer for all subplots.
 *
 * @param renderer the new renderer.
 * @param subplots the list of subplots.
 */
protected void setRendererForSubplots(XYItemRenderer renderer, List subplots) {
    Iterator iterator = subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }
}
```

---

### 2. Refactored Method in `CombinedDomainXYPlot`:
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    setRendererForSubplots(renderer, this.subplots);
}
```

---

### 3. Refactored Method in `CombinedRangeXYPlot`:
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    setRendererForSubplots(renderer, this.subplots);
}
```",Type-1
1172-1-3,src,org.jfree.chart.plot,CategoryPlot,setDomainAxisLocation,797,805,src,org.jfree.chart.plot,XYPlot,setDomainAxisLocation,920,929,Type 1,"### Code Snippet 1 (CategoryPlot.java, lines 797-805):
```java
public void setDomainAxisLocation(AxisLocation location, boolean notify) {
    // delegate...
    setDomainAxisLocation(0, location, notify);
}

public void setDomainAxisLocation(int index, AxisLocation location,
        boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.domainAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

### Code Snippet 2 (XYPlot.java, lines 920-929):
```java
public void setDomainAxisLocation(AxisLocation location, boolean notify) {
    // delegate...
    setDomainAxisLocation(0, location, notify);
}

public void setDomainAxisLocation(int index, AxisLocation location,
        boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.domainAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`):
```java
protected void updateDomainAxisLocation(int index, AxisLocation location, boolean notify, List<AxisLocation> domainAxisLocations) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    domainAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

---

### 2. Refactored Code in `CategoryPlot.java`:
```java
public void setDomainAxisLocation(AxisLocation location, boolean notify) {
    // delegate...
    setDomainAxisLocation(0, location, notify);
}

public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) {
    updateDomainAxisLocation(index, location, notify, this.domainAxisLocations);
}
```

---

### 3. Refactored Code in `XYPlot.java`:
```java
public void setDomainAxisLocation(AxisLocation location, boolean notify) {
    // delegate...
    setDomainAxisLocation(0, location, notify);
}

public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) {
    updateDomainAxisLocation(index, location, notify, this.domainAxisLocations);
}
```",Type-1
1172-2-4,src,org.jfree.chart.plot,CategoryPlot,setRangeAxisLocation,1078,1086,src,org.jfree.chart.plot,XYPlot,setRangeAxisLocation,1219,1228,Type 1,"### Code Snippet 1: `setRangeAxisLocation` in `CategoryPlot.java`
```java
/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location.
 *
 * @see #getRangeAxisLocation(int)
 * @see #setRangeAxisLocation(int, AxisLocation, boolean)
 */
public void setRangeAxisLocation(int index, AxisLocation location) {
    setRangeAxisLocation(index, location, true);
}

/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location.
 * @param notify  notify listeners?
 *
 * @see #getRangeAxisLocation(int)
 * @see #setDomainAxisLocation(int, AxisLocation, boolean)
 */
public void setRangeAxisLocation(int index, AxisLocation location,
                                 boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.rangeAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

### Code Snippet 2: `setRangeAxisLocation` in `XYPlot.java`
```java
/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location (<code>null</code> permitted).
 *
 * @see #getRangeAxisLocation(int)
 */
public void setRangeAxisLocation(int index, AxisLocation location) {
    setRangeAxisLocation(index, location, true);
}

/**
 * Sets the axis location for a domain axis and, if requested, sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location (<code>null</code> not permitted for
 *     index 0).
 * @param notify  notify listeners?
 *
 * @since 1.0.5
 *
 * @see #getRangeAxisLocation(int)
 * @see #setDomainAxisLocation(int, AxisLocation, boolean)
 */
public void setRangeAxisLocation(int index, AxisLocation location,
        boolean notify) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(
                ""Null 'location' for index 0 not permitted."");
    }
    this.rangeAxisLocations.set(index, location);
    if (notify) {
        fireChangeEvent();
    }
}
```

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`)
```java
protected void setAxisLocation(List<AxisLocation> axisLocations, int index, AxisLocation location, boolean notify, Runnable fireChangeEvent) {
    if (index == 0 && location == null) {
        throw new IllegalArgumentException(""Null 'location' for index 0 not permitted."");
    }
    axisLocations.set(index, location);
    if (notify) {
        fireChangeEvent.run();
    }
}
```

---

### 2. Refactored Code in `CategoryPlot.java`
```java
/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location.
 *
 * @see #getRangeAxisLocation(int)
 * @see #setRangeAxisLocation(int, AxisLocation, boolean)
 */
public void setRangeAxisLocation(int index, AxisLocation location) {
    setRangeAxisLocation(index, location, true);
}

/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location.
 * @param notify  notify listeners?
 *
 * @see #getRangeAxisLocation(int)
 * @see #setDomainAxisLocation(int, AxisLocation, boolean)
 */
public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) {
    setAxisLocation(this.rangeAxisLocations, index, location, notify, this::fireChangeEvent);
}
```

---

### 3. Refactored Code in `XYPlot.java`
```java
/**
 * Sets the location for a range axis and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location (<code>null</code> permitted).
 *
 * @see #getRangeAxisLocation(int)
 */
public void setRangeAxisLocation(int index, AxisLocation location) {
    setRangeAxisLocation(index, location, true);
}

/**
 * Sets the axis location for a domain axis and, if requested, sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the axis index.
 * @param location  the location (<code>null</code> not permitted for
 *     index 0).
 * @param notify  notify listeners?
 *
 * @since 1.0.5
 *
 * @see #getRangeAxisLocation(int)
 * @see #setDomainAxisLocation(int, AxisLocation, boolean)
 */
public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) {
    setAxisLocation(this.rangeAxisLocations, index, location, notify, this::fireChangeEvent);
}
```",Type-1
1173-1-4,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,setOrientation,499,506,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,setOrientation,388,395,Type 1,"```java
// Code snippet from CombinedDomainCategoryPlot.java
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        CategoryPlot plot = (CategoryPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

```java
// Code snippet from CombinedRangeCategoryPlot.java
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        CategoryPlot plot = (CategoryPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, layout)","```java
// Extracted method to be placed in the common superclass (CategoryPlot.java or its appropriate superclass)
protected void updateSubplotOrientations(List subplots, PlotOrientation orientation) {
    Iterator iterator = subplots.iterator();
    while (iterator.hasNext()) {
        CategoryPlot plot = (CategoryPlot) iterator.next();
        plot.setOrientation(orientation);
    }
}
```

```java
// Refactored method in CombinedDomainCategoryPlot.java
public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    updateSubplotOrientations(this.subplots, orientation);
}
```

```java
// Refactored method in CombinedRangeCategoryPlot.java
public void setOrientation(PlotOrientation orientation) {
    super.setOrientation(orientation);
    updateSubplotOrientations(this.subplots, orientation);
}
```",Type-1
1173-2-6,src,org.jfree.chart.plot,CombinedDomainXYPlot,setOrientation,182,188,src,org.jfree.chart.plot,CombinedRangeXYPlot,setOrientation,562,569,Type 1,"### Code Snippet 1 (from `CombinedDomainXYPlot` class, method `setOrientation`):

```java
/**
 * Sets the orientation for the plot (also changes the orientation for all
 * the subplots to match).
 *
 * @param orientation  the orientation (<code>null</code> not allowed).
 */
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);
    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

---

### Code Snippet 2 (from `CombinedRangeXYPlot` class, method `setOrientation`):

```java
/**
 * Sets the orientation for the plot (and all its subplots).
 *
 * @param orientation  the orientation.
 */
public void setOrientation(PlotOrientation orientation) {

    super.setOrientation(orientation);

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }

}
```

---

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `XYPlot`):

```java
/**
 * Sets the orientation for the plot and updates the orientation for all subplots.
 *
 * @param orientation  the orientation.
 * @param subplots     the list of subplots to update.
 */
protected void updateOrientationForSubplots(PlotOrientation orientation, List subplots) {
    super.setOrientation(orientation);
    Iterator iterator = subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setOrientation(orientation);
    }
}
```

---

### 2. Refactored Method Calls (in `CombinedDomainXYPlot` class):

```java
/**
 * Sets the orientation for the plot (also changes the orientation for all
 * the subplots to match).
 *
 * @param orientation  the orientation (<code>null</code> not allowed).
 */
public void setOrientation(PlotOrientation orientation) {
    updateOrientationForSubplots(orientation, this.subplots);
}
```

---

### 3. Refactored Method Calls (in `CombinedRangeXYPlot` class):

```java
/**
 * Sets the orientation for the plot (and all its subplots).
 *
 * @param orientation  the orientation.
 */
public void setOrientation(PlotOrientation orientation) {
    updateOrientationForSubplots(orientation, this.subplots);
}
```",Type-1
1173-3-5,src,org.jfree.chart.plot,CombinedDomainXYPlot,setRenderer,595,604,src,org.jfree.chart.plot,CombinedRangeXYPlot,setRenderer,543,552,Type 1,"### Code Snippet 1 (CombinedDomainXYPlot.java, setRenderer method, lines 595-604):
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

### Code Snippet 2 (CombinedRangeXYPlot.java, setRenderer method, lines 543-552):
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {

    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used

    Iterator iterator = this.subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }

}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the superclass `XYPlot`):
```java
/**
 * Sets the item renderer for all subplots.
 *
 * @param renderer the new renderer.
 * @param subplots the list of subplots.
 */
protected void setRendererForSubplots(XYItemRenderer renderer, List subplots) {
    Iterator iterator = subplots.iterator();
    while (iterator.hasNext()) {
        XYPlot plot = (XYPlot) iterator.next();
        plot.setRenderer(renderer);
    }
}
```

---

### 2. Refactored Code in `CombinedDomainXYPlot.java`:
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    setRendererForSubplots(renderer, this.subplots);
}
```

---

### 3. Refactored Code in `CombinedRangeXYPlot.java`:
```java
/**
 * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are
 * notified that the plot has been modified.
 * <P>
 * Note: usually you will want to set the renderer independently for each
 * subplot, which is NOT what this method does.
 *
 * @param renderer the new renderer.
 */
public void setRenderer(XYItemRenderer renderer) {
    super.setRenderer(renderer);  // not strictly necessary, since the
                                  // renderer set for the
                                  // parent plot is not used
    setRendererForSubplots(renderer, this.subplots);
}
```",Type-1
1210-1-3,src,org.jfree.chart.plot,CombinedDomainXYPlot,getDataRange,206,215,src,org.jfree.chart.plot,CombinedRangeXYPlot,getDataRange,587,596,Type 1,"### Code Snippet 1: `getDataRange` from `CombinedDomainXYPlot.java`
```java
/**
 * Returns a range representing the extent of the data values in this plot
 * (obtained from the subplots) that will be rendered against the specified
 * axis.  NOTE: This method is intended for internal JFreeChart use, and
 * is public only so that code in the axis classes can call it.  Since
 * only the domain axis is shared between subplots, the JFreeChart code
 * will only call this method for the domain values (although this is not
 * checked/enforced).
 *
 * @param axis  the axis.
 *
 * @return The range (possibly <code>null</code>).
 */
public Range getDataRange(ValueAxis axis) {
    Range result = null;
    if (this.subplots != null) {
        Iterator iterator = this.subplots.iterator();
        while (iterator.hasNext()) {
            XYPlot subplot = (XYPlot) iterator.next();
            result = Range.combine(result, subplot.getDataRange(axis));
        }
    }
    return result;
}
```

---

### Code Snippet 2: `getDataRange` from `CombinedRangeXYPlot.java`
```java
/**
 * Returns a range representing the extent of the data values in this plot
 * (obtained from the subplots) that will be rendered against the specified
 * axis.  NOTE: This method is intended for internal JFreeChart use, and
 * is public only so that code in the axis classes can call it.  Since
 * only the range axis is shared between subplots, the JFreeChart code
 * will only call this method for the range values (although this is not
 * checked/enforced).
 *
 * @param axis  the axis.
 *
 * @return The range.
 */
public Range getDataRange(ValueAxis axis) {
    Range result = null;
    if (this.subplots != null) {
        Iterator iterator = this.subplots.iterator();
        while (iterator.hasNext()) {
            XYPlot subplot = (XYPlot) iterator.next();
            result = Range.combine(result, subplot.getDataRange(axis));
        }
    }
    return result;
}
```

---

### Clone Type:
**Type-1 Clone**: The two code snippets are **identical except for comments**.","### 1. Extracted Method (to be placed in the superclass `XYPlot`)
```java
/**
 * Returns a range representing the extent of the data values in the given subplots
 * that will be rendered against the specified axis.
 *
 * @param subplots  the list of subplots.
 * @param axis      the axis.
 *
 * @return The range (possibly <code>null</code>).
 */
protected Range calculateDataRange(List subplots, ValueAxis axis) {
    Range result = null;
    if (subplots != null) {
        Iterator iterator = subplots.iterator();
        while (iterator.hasNext()) {
            XYPlot subplot = (XYPlot) iterator.next();
            result = Range.combine(result, subplot.getDataRange(axis));
        }
    }
    return result;
}
```

---

### 2. Refactored Method Calls

#### In `CombinedDomainXYPlot.java`
```java
/**
 * Returns a range representing the extent of the data values in this plot
 * (obtained from the subplots) that will be rendered against the specified
 * axis.  NOTE: This method is intended for internal JFreeChart use, and
 * is public only so that code in the axis classes can call it.  Since
 * only the domain axis is shared between subplots, the JFreeChart code
 * will only call this method for the domain values (although this is not
 * checked/enforced).
 *
 * @param axis  the axis.
 *
 * @return The range (possibly <code>null</code>).
 */
public Range getDataRange(ValueAxis axis) {
    return calculateDataRange(this.subplots, axis);
}
```

---

#### In `CombinedRangeXYPlot.java`
```java
/**
 * Returns a range representing the extent of the data values in this plot
 * (obtained from the subplots) that will be rendered against the specified
 * axis.  NOTE: This method is intended for internal JFreeChart use, and
 * is public only so that code in the axis classes can call it.  Since
 * only the range axis is shared between subplots, the JFreeChart code
 * will only call this method for the range values (although this is not
 * checked/enforced).
 *
 * @param axis  the axis.
 *
 * @return The range.
 */
public Range getDataRange(ValueAxis axis) {
    return calculateDataRange(this.subplots, axis);
}
```",Type-1
1253-1-2,src,org.jfree.chart.axis,DateAxis,selectAutoTickUnit,1259,1267,src,org.jfree.chart.axis,NumberAxis,selectAutoTickUnit,1040,1048,Type 1,"### Code Snippet 1 (from `DateAxis.java`):

```java
/**
 * Selects an appropriate tick value for the axis.  The strategy is to
 * display as many ticks as possible (selected from an array of 'standard'
 * tick units) without the labels overlapping.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area defined by the axes.
 * @param edge  the axis location.
 */
protected void selectAutoTickUnit(Graphics2D g2,
                                  Rectangle2D dataArea,
                                  RectangleEdge edge) {

    if (RectangleEdge.isTopOrBottom(edge)) {
        selectHorizontalAutoTickUnit(g2, dataArea, edge);
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        selectVerticalAutoTickUnit(g2, dataArea, edge);
    }

}
```

---

### Code Snippet 2 (from `NumberAxis.java`):

```java
/**
 * Selects an appropriate tick value for the axis.  The strategy is to
 * display as many ticks as possible (selected from an array of 'standard'
 * tick units) without the labels overlapping.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area defined by the axes.
 * @param edge  the axis location.
 */
protected void selectAutoTickUnit(Graphics2D g2,
                                  Rectangle2D dataArea,
                                  RectangleEdge edge) {

    if (RectangleEdge.isTopOrBottom(edge)) {
        selectHorizontalAutoTickUnit(g2, dataArea, edge);
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        selectVerticalAutoTickUnit(g2, dataArea, edge);
    }

}
```

---

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `ValueAxis`):

```java
/**
 * Selects an appropriate tick value for the axis. The strategy is to
 * display as many ticks as possible (selected from an array of 'standard'
 * tick units) without the labels overlapping.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area defined by the axes.
 * @param edge  the axis location.
 * @param horizontalSelector  the method reference for horizontal tick unit selection.
 * @param verticalSelector  the method reference for vertical tick unit selection.
 */
protected void selectAutoTickUnit(Graphics2D g2,
                                  Rectangle2D dataArea,
                                  RectangleEdge edge,
                                  Runnable horizontalSelector,
                                  Runnable verticalSelector) {

    if (RectangleEdge.isTopOrBottom(edge)) {
        horizontalSelector.run();
    }
    else if (RectangleEdge.isLeftOrRight(edge)) {
        verticalSelector.run();
    }

}
```

---

### 2. Refactored Method Calls in `DateAxis.java`:

```java
/**
 * Selects an appropriate tick value for the axis. The strategy is to
 * display as many ticks as possible (selected from an array of 'standard'
 * tick units) without the labels overlapping.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area defined by the axes.
 * @param edge  the axis location.
 */
protected void selectAutoTickUnit(Graphics2D g2,
                                  Rectangle2D dataArea,
                                  RectangleEdge edge) {

    selectAutoTickUnit(g2, dataArea, edge,
        () -> selectHorizontalAutoTickUnit(g2, dataArea, edge),
        () -> selectVerticalAutoTickUnit(g2, dataArea, edge)
    );

}
```

---

### 3. Refactored Method Calls in `NumberAxis.java`:

```java
/**
 * Selects an appropriate tick value for the axis. The strategy is to
 * display as many ticks as possible (selected from an array of 'standard'
 * tick units) without the labels overlapping.
 *
 * @param g2  the graphics device.
 * @param dataArea  the area defined by the axes.
 * @param edge  the axis location.
 */
protected void selectAutoTickUnit(Graphics2D g2,
                                  Rectangle2D dataArea,
                                  RectangleEdge edge) {

    selectAutoTickUnit(g2, dataArea, edge,
        () -> selectHorizontalAutoTickUnit(g2, dataArea, edge),
        () -> selectVerticalAutoTickUnit(g2, dataArea, edge)
    );

}
```",Type-1
1295-2-4,src,org.jfree.chart.plot,CategoryPlot,clearRangeAxes,1129,1137,src,org.jfree.chart.plot,XYPlot,clearRangeAxes,1144,1152,Type 1,"### Code Snippet 1: `clearRangeAxes` in `CategoryPlot.java` (Lines 1129-1137)
```java
/**
 * Clears the range axes from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 */
public void clearRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    this.rangeAxes.clear();
    fireChangeEvent();
}
```

### Code Snippet 2: `clearRangeAxes` in `XYPlot.java` (Lines 1144-1152)
```java
/**
 * Clears the range axes from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 */
public void clearRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(this);
        }
    }
    this.rangeAxes.clear();
    fireChangeEvent();
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`)
```java
/**
 * Clears the range axes from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param rangeAxes  the list of range axes.
 * @param listener   the listener to remove from each axis.
 */
protected void clearRangeAxes(List<ValueAxis> rangeAxes, Plot listener) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis axis = rangeAxes.get(i);
        if (axis != null) {
            axis.removeChangeListener(listener);
        }
    }
    rangeAxes.clear();
    fireChangeEvent();
}
```

---

### 2. Refactored Method Calls

#### In `CategoryPlot.java`
```java
/**
 * Clears the range axes from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 */
public void clearRangeAxes() {
    clearRangeAxes(this.rangeAxes, this);
}
```

#### In `XYPlot.java`
```java
/**
 * Clears the range axes from the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 */
public void clearRangeAxes() {
    clearRangeAxes(this.rangeAxes, this);
}
```",Type-1
1300-1-2,src,org.jfree.data,ComparableObjectSeries,setMaximumItemCount,158,166,src,org.jfree.data.xy,XYSeries,setMaximumItemCount,222,230,Type 1,"### Code Snippet 1 (from `ComparableObjectSeries` class, method `setMaximumItemCount`):

```java
/**
 * Sets the maximum number of items that will be retained in the series.  
 * If you add a new item to the series such that the number of items will 
 * exceed the maximum item count, then the first element in the series is 
 * automatically removed, ensuring that the maximum item count is not 
 * exceeded.
 * <p>
 * Typically this value is set before the series is populated with data,
 * but if it is applied later, it may cause some items to be removed from
 * the series (in which case a {@link SeriesChangeEvent} will be sent to
 * all registered listeners.
 *
 * @param maximum  the maximum number of items for the series.
 */
public void setMaximumItemCount(int maximum) {
    this.maximumItemCount = maximum;
    boolean dataRemoved = false;
    while (this.data.size() > maximum) {
        this.data.remove(0);   
        dataRemoved = true;
    }
    if (dataRemoved) {
        fireSeriesChanged();
    }
}
```

---

### Code Snippet 2 (from `XYSeries` class, method `setMaximumItemCount`):

```java
/**
 * Sets the maximum number of items that will be retained in the series.
 * If you add a new item to the series such that the number of items will
 * exceed the maximum item count, then the first element in the series is
 * automatically removed, ensuring that the maximum item count is not
 * exceeded.
 * <p>
 * Typically this value is set before the series is populated with data,
 * but if it is applied later, it may cause some items to be removed from
 * the series (in which case a {@link SeriesChangeEvent} will be sent to
 * all registered listeners.
 *
 * @param maximum  the maximum number of items for the series.
 */
public void setMaximumItemCount(int maximum) {
    this.maximumItemCount = maximum;
    boolean dataRemoved = false;
    while (this.data.size() > maximum) {
        this.data.remove(0);
        dataRemoved = true;
    }
    if (dataRemoved) {
        fireSeriesChanged();
    }
}
```

---

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `Series`):

```java
/**
 * Sets the maximum number of items that will be retained in the series.
 * If you add a new item to the series such that the number of items will
 * exceed the maximum item count, then the first element in the series is
 * automatically removed, ensuring that the maximum item count is not
 * exceeded.
 * <p>
 * Typically this value is set before the series is populated with data,
 * but if it is applied later, it may cause some items to be removed from
 * the series (in which case a {@link SeriesChangeEvent} will be sent to
 * all registered listeners.
 *
 * @param maximum  the maximum number of items for the series.
 * @param data     the list of data items in the series.
 * @param fireChangeCallback  a callback to notify listeners of changes.
 */
protected void setMaximumItemCountInternal(int maximum, List data, Runnable fireChangeCallback) {
    boolean dataRemoved = false;
    while (data.size() > maximum) {
        data.remove(0);
        dataRemoved = true;
    }
    if (dataRemoved) {
        fireChangeCallback.run();
    }
}
```

---

### 2. Refactored Method Calls (in `ComparableObjectSeries`):

```java
public void setMaximumItemCount(int maximum) {
    this.maximumItemCount = maximum;
    setMaximumItemCountInternal(maximum, this.data, this::fireSeriesChanged);
}
```

---

### 3. Refactored Method Calls (in `XYSeries`):

```java
public void setMaximumItemCount(int maximum) {
    this.maximumItemCount = maximum;
    setMaximumItemCountInternal(maximum, this.data, this::fireSeriesChanged);
}
```",Type-1
1417-1-2,src,org.jfree.chart.renderer.category,BarRenderer,calculateSeriesWidth,834,841,src,org.jfree.chart.renderer.category,LevelRenderer,calculateSeriesWidth,350,357,Type 1,"### Code Snippet 1: `calculateSeriesWidth` in `BarRenderer.java` (Lines 834-841)
```java
protected double calculateSeriesWidth(double space, CategoryAxis axis,
                                      int categories, int series) {
    double factor = 1.0 - getItemMargin() - axis.getLowerMargin()
                        - axis.getUpperMargin();
    if (categories > 1) {
        factor = factor - axis.getCategoryMargin();
    }
    return (space * factor) / (categories * series);
}
```

### Code Snippet 2: `calculateSeriesWidth` in `LevelRenderer.java` (Lines 350-357)
```java
protected double calculateSeriesWidth(double space, CategoryAxis axis,
                                      int categories, int series) {
    double factor = 1.0 - getItemMargin() - axis.getLowerMargin()
                    - axis.getUpperMargin();
    if (categories > 1) {
        factor = factor - axis.getCategoryMargin();
    }
    return (space * factor) / (categories * series);
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, and layout.","### 1. Extracted Method (To be placed in the common superclass `AbstractCategoryItemRenderer`)
```java
protected double calculateSeriesWidthCommon(double space, CategoryAxis axis,
                                            int categories, int series, double itemMargin) {
    double factor = 1.0 - itemMargin - axis.getLowerMargin() - axis.getUpperMargin();
    if (categories > 1) {
        factor = factor - axis.getCategoryMargin();
    }
    return (space * factor) / (categories * series);
}
```

### 2. Refactored Code in `BarRenderer.java`
```java
@Override
protected double calculateSeriesWidth(double space, CategoryAxis axis,
                                      int categories, int series) {
    return calculateSeriesWidthCommon(space, axis, categories, series, getItemMargin());
}
```

### 3. Refactored Code in `LevelRenderer.java`
```java
@Override
protected double calculateSeriesWidth(double space, CategoryAxis axis,
                                      int categories, int series) {
    return calculateSeriesWidthCommon(space, axis, categories, series, getItemMargin());
}
```",Type-1
1435-1-3,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,handleClick,599,606,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,handleClick,468,475,Type 1,"### Code Snippet 1: `handleClick` method from `CombinedDomainCategoryPlot.java`
```java
/**
 * Handles a 'click' on the plot.
 *
 * @param x  x-coordinate of the click.
 * @param y  y-coordinate of the click.
 * @param info  information about the plot's dimensions.
 *
 */
public void handleClick(int x, int y, PlotRenderingInfo info) {

    Rectangle2D dataArea = info.getDataArea();
    if (dataArea.contains(x, y)) {
        for (int i = 0; i < this.subplots.size(); i++) {
            CategoryPlot subplot = (CategoryPlot) this.subplots.get(i);
            PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
            subplot.handleClick(x, y, subplotInfo);
        }
    }

}
```

### Code Snippet 2: `handleClick` method from `CombinedRangeCategoryPlot.java`
```java
/**
 * Handles a 'click' on the plot by updating the anchor value.
 *
 * @param x  x-coordinate of the click.
 * @param y  y-coordinate of the click.
 * @param info  information about the plot's dimensions.
 *
 */
public void handleClick(int x, int y, PlotRenderingInfo info) {

    Rectangle2D dataArea = info.getDataArea();
    if (dataArea.contains(x, y)) {
        for (int i = 0; i < this.subplots.size(); i++) {
            CategoryPlot subplot = (CategoryPlot) this.subplots.get(i);
            PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
            subplot.handleClick(x, y, subplotInfo);
        }
    }

}
```

### Clone Type:
These two code snippets are **Type-1 clones** because they are **identical except for comments**.","### 1. Extracted Method (to be placed in the common superclass `CategoryPlot`):
```java
/**
 * Handles a 'click' on the plot by delegating to subplots.
 *
 * @param x  x-coordinate of the click.
 * @param y  y-coordinate of the click.
 * @param info  information about the plot's dimensions.
 * @param subplots  the list of subplots.
 */
protected void handleClickOnSubplots(int x, int y, PlotRenderingInfo info, List<CategoryPlot> subplots) {
    Rectangle2D dataArea = info.getDataArea();
    if (dataArea.contains(x, y)) {
        for (int i = 0; i < subplots.size(); i++) {
            CategoryPlot subplot = subplots.get(i);
            PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
            subplot.handleClick(x, y, subplotInfo);
        }
    }
}
```

---

### 2. Refactored `handleClick` Method in `CombinedDomainCategoryPlot.java`:
```java
/**
 * Handles a 'click' on the plot.
 *
 * @param x  x-coordinate of the click.
 * @param y  y-coordinate of the click.
 * @param info  information about the plot's dimensions.
 *
 */
public void handleClick(int x, int y, PlotRenderingInfo info) {
    handleClickOnSubplots(x, y, info, this.subplots);
}
```

---

### 3. Refactored `handleClick` Method in `CombinedRangeCategoryPlot.java`:
```java
/**
 * Handles a 'click' on the plot by updating the anchor value.
 *
 * @param x  x-coordinate of the click.
 * @param y  y-coordinate of the click.
 * @param info  information about the plot's dimensions.
 *
 */
public void handleClick(int x, int y, PlotRenderingInfo info) {
    handleClickOnSubplots(x, y, info, this.subplots);
}
```",Type-1
1435-2-4,src,org.jfree.chart.plot,CombinedDomainXYPlot,handleClick,642,648,src,org.jfree.chart.plot,CombinedRangeXYPlot,handleClick,620,627,Type 1,"### Code Snippet 1 (from `CombinedDomainXYPlot` class, `handleClick` method, lines 642-648):
```java
public void handleClick(int x, int y, PlotRenderingInfo info) {
    Rectangle2D dataArea = info.getDataArea();
    if (dataArea.contains(x, y)) {
        for (int i = 0; i < this.subplots.size(); i++) {
            XYPlot subplot = (XYPlot) this.subplots.get(i);
            PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
            subplot.handleClick(x, y, subplotInfo);
        }
    }
}
```

### Code Snippet 2 (from `CombinedRangeXYPlot` class, `handleClick` method, lines 620-627):
```java
public void handleClick(int x, int y, PlotRenderingInfo info) {
    Rectangle2D dataArea = info.getDataArea();
    if (dataArea.contains(x, y)) {
        for (int i = 0; i < this.subplots.size(); i++) {
            XYPlot subplot = (XYPlot) this.subplots.get(i);
            PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
            subplot.handleClick(x, y, subplotInfo);
        }
    }
}
```

### Clone Type:
**Type-1 Clone**: These two code snippets are identical except for their location in different classes.","### 1. Extracted Method (to be placed in the common superclass `XYPlot`):
```java
protected void handleClickForSubplots(int x, int y, PlotRenderingInfo info, List subplots) {
    Rectangle2D dataArea = info.getDataArea();
    if (dataArea.contains(x, y)) {
        for (int i = 0; i < subplots.size(); i++) {
            XYPlot subplot = (XYPlot) subplots.get(i);
            PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
            subplot.handleClick(x, y, subplotInfo);
        }
    }
}
```

### 2. Refactored `handleClick` Method in `CombinedDomainXYPlot`:
```java
public void handleClick(int x, int y, PlotRenderingInfo info) {
    handleClickForSubplots(x, y, info, this.subplots);
}
```

### 3. Refactored `handleClick` Method in `CombinedRangeXYPlot`:
```java
public void handleClick(int x, int y, PlotRenderingInfo info) {
    handleClickForSubplots(x, y, info, this.subplots);
}
```",Type-1
1477-1-2,src,org.jfree.data.xy,Vector,hashCode,137,143,src,org.jfree.data.xy,XYCoordinate,hashCode,124,130,Type 1,"### Code Snippet 1 (Vector.java, hashCode method, lines 137-143):
```java
public int hashCode() {
    int result = 193;
    long temp = Double.doubleToLongBits(this.x);
    result = 37 * result + (int) (temp ^ (temp >>> 32));
    temp = Double.doubleToLongBits(this.y);
    result = 37 * result + (int) (temp ^ (temp >>> 32));
    return result;
}
```

### Code Snippet 2 (XYCoordinate.java, hashCode method, lines 124-130):
```java
public int hashCode() {
    int result = 193;
    long temp = Double.doubleToLongBits(this.x);
    result = 37 * result + (int) (temp ^ (temp >>> 32));
    temp = Double.doubleToLongBits(this.y);
    result = 37 * result + (int) (temp ^ (temp >>> 32));
    return result;
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, or layout.","### 1. Extracted Method (to be placed in the common superclass):
```java
protected int calculateHashCode(double x, double y) {
    int result = 193;
    long temp = Double.doubleToLongBits(x);
    result = 37 * result + (int) (temp ^ (temp >>> 32));
    temp = Double.doubleToLongBits(y);
    result = 37 * result + (int) (temp ^ (temp >>> 32));
    return result;
}
```

### 2. Refactored `hashCode` Method in `Vector.java`:
```java
@Override
public int hashCode() {
    return calculateHashCode(this.x, this.y);
}
```

### 3. Refactored `hashCode` Method in `XYCoordinate.java`:
```java
@Override
public int hashCode() {
    return calculateHashCode(this.x, this.y);
}
```",Type-1
1536-1-2,src,org.jfree.chart.annotations,XYBoxAnnotation,readObject,301,307,src,org.jfree.chart.annotations,XYPolygonAnnotation,readObject,353,358,Type 1,"### Code Snippet 1 (XYBoxAnnotation.java, method `readObject`, lines 301-307):
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.stroke = SerialUtilities.readStroke(stream);
    this.outlinePaint = SerialUtilities.readPaint(stream);
    this.fillPaint = SerialUtilities.readPaint(stream);
}
```

### Code Snippet 2 (XYPolygonAnnotation.java, method `readObject`, lines 353-358):
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.stroke = SerialUtilities.readStroke(stream);
    this.outlinePaint = SerialUtilities.readPaint(stream);
    this.fillPaint = SerialUtilities.readPaint(stream);
}
```

### Clone Type:
These two code snippets are **Type-1 clones** because they are identical except for whitespace, comments, and layout.","### 1. Extracted Method (to be placed in the common superclass `AbstractXYAnnotation`):
```java
protected void readObjectCommon(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.stroke = SerialUtilities.readStroke(stream);
    this.outlinePaint = SerialUtilities.readPaint(stream);
    this.fillPaint = SerialUtilities.readPaint(stream);
}
```

### 2. Refactored Code in `XYBoxAnnotation.java`:
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    readObjectCommon(stream);
}
```

### 3. Refactored Code in `XYPolygonAnnotation.java`:
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    readObjectCommon(stream);
}
```",Type-1
1536-6-8,src,org.jfree.chart.plot.dial,ArcDialFrame,readObject,512,517,src,org.jfree.chart.plot.dial,StandardDialFrame,readObject,352,357,Type 1,"### Code Snippet 1 (ArcDialFrame.java, method `readObject`, lines 512-517):
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.backgroundPaint = SerialUtilities.readPaint(stream);
    this.foregroundPaint = SerialUtilities.readPaint(stream);
    this.stroke = SerialUtilities.readStroke(stream);
}
```

### Code Snippet 2 (StandardDialFrame.java, method `readObject`, lines 352-357):
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    this.backgroundPaint = SerialUtilities.readPaint(stream);
    this.foregroundPaint = SerialUtilities.readPaint(stream);
    this.stroke = SerialUtilities.readStroke(stream);
}
```

### Clone Type:
**Type-1 Clone**","### 1. Extracted Method (To be placed in the common superclass `AbstractDialLayer`):
```java
protected void readObjectHelper(ObjectInputStream stream, Paint backgroundPaint, Paint foregroundPaint, Stroke stroke) 
        throws IOException, ClassNotFoundException {
    stream.defaultReadObject();
    backgroundPaint = SerialUtilities.readPaint(stream);
    foregroundPaint = SerialUtilities.readPaint(stream);
    stroke = SerialUtilities.readStroke(stream);
}
```

### 2. Refactored Code in `ArcDialFrame.java`:
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    readObjectHelper(stream, this.backgroundPaint, this.foregroundPaint, this.stroke);
}
```

### 3. Refactored Code in `StandardDialFrame.java`:
```java
private void readObject(ObjectInputStream stream) 
        throws IOException, ClassNotFoundException {
    readObjectHelper(stream, this.backgroundPaint, this.foregroundPaint, this.stroke);
}
```",Type-1
1547-1-2,src,org.jfree.chart.title,ShortTextTitle,arrangeRN,155,161,src,org.jfree.chart.title,TextTitle,arrangeRN,602,608,Type 1,"### Code Snippet 1 (ShortTextTitle.java, arrangeRN method, lines 155-161):
```java
protected Size2D arrangeRN(Graphics2D g2, Range widthRange) {
    Size2D s = arrangeNN(g2);
    if (widthRange.contains(s.getWidth())) {
        return s;
    }
    double ww = widthRange.constrain(s.getWidth());
    return arrangeFN(g2, ww);
}
```

### Code Snippet 2 (TextTitle.java, arrangeRN method, lines 602-608):
```java
protected Size2D arrangeRN(Graphics2D g2, Range widthRange) {
    Size2D s = arrangeNN(g2);
    if (widthRange.contains(s.getWidth())) {
        return s;
    }
    double ww = widthRange.constrain(s.getWidth());
    return arrangeFN(g2, ww);
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for their location in different classes.","### 1. Extracted Method (To be placed in the common superclass, `TextTitle`):
```java
protected Size2D arrangeRange(Graphics2D g2, Range widthRange, Size2D nnSize, java.util.function.Function<Double, Size2D> arrangeFixedWidth) {
    if (widthRange.contains(nnSize.getWidth())) {
        return nnSize;
    }
    double constrainedWidth = widthRange.constrain(nnSize.getWidth());
    return arrangeFixedWidth.apply(constrainedWidth);
}
```

### 2. Refactored Method Calls (Replacing the clones in the original files):

#### In `ShortTextTitle.java`:
```java
protected Size2D arrangeRN(Graphics2D g2, Range widthRange) {
    return arrangeRange(g2, widthRange, arrangeNN(g2), (w) -> arrangeFN(g2, w));
}
```

#### In `TextTitle.java`:
```java
protected Size2D arrangeRN(Graphics2D g2, Range widthRange) {
    return arrangeRange(g2, widthRange, arrangeNN(g2), (w) -> arrangeFN(g2, w));
}
```",Type-1
1634-1-2,src,org.jfree.data.xy,DefaultXYDataset,removeSeries,285,290,src,org.jfree.data.xy,DefaultXYZDataset,removeSeries,331,336,Type 1,"### Code Snippet 1 (from `DefaultXYDataset.java`):
```java
/**
 * Removes a series from the dataset, then sends a 
 * {@link DatasetChangeEvent} to all registered listeners.
 * 
 * @param seriesKey  the series key (<code>null</code> not permitted).
 * 
 */
public void removeSeries(Comparable seriesKey) {
    int seriesIndex = indexOf(seriesKey);
    if (seriesIndex >= 0) {
        this.seriesKeys.remove(seriesIndex);
        this.seriesList.remove(seriesIndex);
        notifyListeners(new DatasetChangeEvent(this, this));
    }
}
```

### Code Snippet 2 (from `DefaultXYZDataset.java`):
```java
/**
 * Removes a series from the dataset, then sends a
 * {@link DatasetChangeEvent} to all registered listeners.
 *
 * @param seriesKey  the series key (<code>null</code> not permitted).
 *
 */
public void removeSeries(Comparable seriesKey) {
    int seriesIndex = indexOf(seriesKey);
    if (seriesIndex >= 0) {
        this.seriesKeys.remove(seriesIndex);
        this.seriesList.remove(seriesIndex);
        notifyListeners(new DatasetChangeEvent(this, this));
    }
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for comments, layout, and possibly whitespace.","### 1. Extracted Method (to be placed in the superclass `AbstractXYDataset`):
```java
protected void removeSeriesFromDataset(List seriesKeys, List seriesList, Comparable seriesKey) {
    int seriesIndex = seriesKeys.indexOf(seriesKey);
    if (seriesIndex >= 0) {
        seriesKeys.remove(seriesIndex);
        seriesList.remove(seriesIndex);
        notifyListeners(new DatasetChangeEvent(this, this));
    }
}
```

### 2. Refactored Method Calls:

#### In `DefaultXYDataset.java`:
```java
/**
 * Removes a series from the dataset, then sends a 
 * {@link DatasetChangeEvent} to all registered listeners.
 * 
 * @param seriesKey  the series key (<code>null</code> not permitted).
 * 
 */
public void removeSeries(Comparable seriesKey) {
    removeSeriesFromDataset(this.seriesKeys, this.seriesList, seriesKey);
}
```

#### In `DefaultXYZDataset.java`:
```java
/**
 * Removes a series from the dataset, then sends a
 * {@link DatasetChangeEvent} to all registered listeners.
 *
 * @param seriesKey  the series key (<code>null</code> not permitted).
 *
 */
public void removeSeries(Comparable seriesKey) {
    removeSeriesFromDataset(this.seriesKeys, this.seriesList, seriesKey);
}
```",Type-1
1638-3-9,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3768,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 1,"```java
// Code snippet from CategoryPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

```java
// Code snippet from XYPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

Clone type: **Type-1 Clone** (Identical except for whitespace, comments, and layout).","```java
// Extracted method to be placed in the common superclass (e.g., Plot.java)
protected void performZoomOnRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation, double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor, RectangleEdge rangeAxisEdge) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot orientation
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), rangeAxisEdge);
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

```java
// Refactored method in CategoryPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, getRangeAxisEdge());
}
```

```java
// Refactored method in XYPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, getRangeAxisEdge());
}
```",Type-1
1646-1-2,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,drawHighFarOut,813,818,src,org.jfree.chart.renderer.xy,XYBoxAndWhiskerRenderer,drawHighFarOut,751,756,Type 1,"```java
// Code snippet from BoxAndWhiskerRenderer.java
private void drawHighFarOut(double aRadius, Graphics2D g2, double xx,
                            double m) {
    double side = aRadius * 2;
    g2.draw(new Line2D.Double(xx - side, m + side, xx + side, m + side));
    g2.draw(new Line2D.Double(xx - side, m + side, xx, m));
    g2.draw(new Line2D.Double(xx + side, m + side, xx, m));
}
```

```java
// Code snippet from XYBoxAndWhiskerRenderer.java
protected void drawHighFarOut(double aRadius, Graphics2D g2, double xx, 
                              double m) {
    double side = aRadius * 2;
    g2.draw(new Line2D.Double(xx - side, m + side, xx + side, m + side));
    g2.draw(new Line2D.Double(xx - side, m + side, xx, m));
    g2.draw(new Line2D.Double(xx + side, m + side, xx, m));
}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, layout)","```java
// Extracted method to be placed in the common superclass (e.g., AbstractRenderer or a relevant superclass)
protected void drawHighFarOutShape(double aRadius, Graphics2D g2, double xx, double m) {
    double side = aRadius * 2;
    g2.draw(new Line2D.Double(xx - side, m + side, xx + side, m + side));
    g2.draw(new Line2D.Double(xx - side, m + side, xx, m));
    g2.draw(new Line2D.Double(xx + side, m + side, xx, m));
}
```

```java
// Refactored method in BoxAndWhiskerRenderer.java
private void drawHighFarOut(double aRadius, Graphics2D g2, double xx, double m) {
    drawHighFarOutShape(aRadius, g2, xx, m);
}
```

```java
// Refactored method in XYBoxAndWhiskerRenderer.java
protected void drawHighFarOut(double aRadius, Graphics2D g2, double xx, double m) {
    drawHighFarOutShape(aRadius, g2, xx, m);
}
```",Type-1
1647-1-2,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,drawLowFarOut,829,834,src,org.jfree.chart.renderer.xy,XYBoxAndWhiskerRenderer,drawLowFarOut,767,772,Type 1,"Here are the two code snippets:

---

**Code Snippet 1 (BoxAndWhiskerRenderer.java, lines 829-834):**

```java
private void drawLowFarOut(double aRadius, Graphics2D g2, double xx,
                           double m) {
    double side = aRadius * 2;
    g2.draw(new Line2D.Double(xx - side, m - side, xx + side, m - side));
    g2.draw(new Line2D.Double(xx - side, m - side, xx, m));
    g2.draw(new Line2D.Double(xx + side, m - side, xx, m));
}
```

---

**Code Snippet 2 (XYBoxAndWhiskerRenderer.java, lines 767-772):**

```java
protected void drawLowFarOut(double aRadius, Graphics2D g2, double xx, 
                             double m) {
    double side = aRadius * 2;
    g2.draw(new Line2D.Double(xx - side, m - side, xx + side, m - side));
    g2.draw(new Line2D.Double(xx - side, m - side, xx, m));
    g2.draw(new Line2D.Double(xx + side, m - side, xx, m));
}
```

---

**Clone Type:**  
These two code snippets are **Type-1 clones** because they are identical except for minor differences in method modifiers (`private` vs. `protected`) and whitespace.","**1. Extracted Method (to be placed in the common superclass):**

```java
protected void drawLowFarOutImpl(double aRadius, Graphics2D g2, double xx, double m) {
    double side = aRadius * 2;
    g2.draw(new Line2D.Double(xx - side, m - side, xx + side, m - side));
    g2.draw(new Line2D.Double(xx - side, m - side, xx, m));
    g2.draw(new Line2D.Double(xx + side, m - side, xx, m));
}
```

---

**2. Refactored Method Calls:**

**In `BoxAndWhiskerRenderer.java` (lines 829-834):**

```java
private void drawLowFarOut(double aRadius, Graphics2D g2, double xx, double m) {
    drawLowFarOutImpl(aRadius, g2, xx, m);
}
```

---

**In `XYBoxAndWhiskerRenderer.java` (lines 767-772):**

```java
protected void drawLowFarOut(double aRadius, Graphics2D g2, double xx, double m) {
    drawLowFarOutImpl(aRadius, g2, xx, m);
}
```",Type-1
1649-1-2,src,org.jfree.data.xy,DefaultIntervalXYDataset,getItemCount,127,132,src,org.jfree.data.xy,DefaultXYDataset,getItemCount,146,151,Type 1,"### Code Snippet 1 (from `DefaultIntervalXYDataset` class, `getItemCount` method, lines 127-132):
```java
public int getItemCount(int series) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) this.seriesList.get(series);
    return seriesArray[0].length;
}
```

### Code Snippet 2 (from `DefaultXYDataset` class, `getItemCount` method, lines 146-151):
```java
public int getItemCount(int series) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) this.seriesList.get(series);
    return seriesArray[0].length;
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, and layout.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYDataset`):
```java
protected int getItemCountFromSeries(List seriesList, int series, int seriesCount) {
    if ((series < 0) || (series >= seriesCount)) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) seriesList.get(series);
    return seriesArray[0].length;
}
```

---

### 2. Refactored Code in `DefaultIntervalXYDataset`:
```java
public int getItemCount(int series) {
    return getItemCountFromSeries(this.seriesList, series, getSeriesCount());
}
```

---

### 3. Refactored Code in `DefaultXYDataset`:
```java
public int getItemCount(int series) {
    return getItemCountFromSeries(this.seriesList, series, getSeriesCount());
}
```",Type-1
1649-1-3,src,org.jfree.data.xy,DefaultIntervalXYDataset,getItemCount,127,132,src,org.jfree.data.xy,DefaultXYZDataset,getItemCount,147,152,Type 1,"```java
// Code snippet from DefaultIntervalXYDataset.java
public int getItemCount(int series) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) this.seriesList.get(series);
    return seriesArray[0].length;
}
```

```java
// Code snippet from DefaultXYZDataset.java
public int getItemCount(int series) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) this.seriesList.get(series);
    return seriesArray[0].length;
}
```

**Clone Type:** Type-1","```java
// Extracted method to be placed in the common superclass (AbstractIntervalXYDataset)
protected int getItemCountFromSeries(List seriesList, int series, int seriesCount) {
    if ((series < 0) || (series >= seriesCount)) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) seriesList.get(series);
    return seriesArray[0].length;
}
```

```java
// Refactored method in DefaultIntervalXYDataset.java
public int getItemCount(int series) {
    return getItemCountFromSeries(this.seriesList, series, getSeriesCount());
}
```

```java
// Refactored method in DefaultXYZDataset.java
public int getItemCount(int series) {
    return getItemCountFromSeries(this.seriesList, series, getSeriesCount());
}
```",Type-1
1649-2-3,src,org.jfree.data.xy,DefaultXYDataset,getItemCount,146,151,src,org.jfree.data.xy,DefaultXYZDataset,getItemCount,147,152,Type 1,"### Code Snippet 1 (from `DefaultXYDataset.java`):
```java
/**
 * Returns the number of items in the specified series.
 * 
 * @param series  the series index (in the range <code>0</code> to 
 *     <code>getSeriesCount() - 1</code>).
 * 
 * @return The item count.
 * 
 * @throws IllegalArgumentException if <code>series</code> is not in the 
 *     specified range.
 */
public int getItemCount(int series) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) this.seriesList.get(series);
    return seriesArray[0].length;
}
```

### Code Snippet 2 (from `DefaultXYZDataset.java`):
```java
/**
 * Returns the number of items in the specified series.
 *
 * @param series  the series index (in the range <code>0</code> to
 *     <code>getSeriesCount() - 1</code>).
 *
 * @return The item count.
 *
 * @throws IllegalArgumentException if <code>series</code> is not in the
 *     specified range.
 */
public int getItemCount(int series) {
    if ((series < 0) || (series >= getSeriesCount())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) this.seriesList.get(series);
    return seriesArray[0].length;
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, and layout.","### 1. Extracted Method (to be placed in the superclass `AbstractXYDataset`):
```java
/**
 * Returns the number of items in the specified series.
 *
 * @param series  the series index (in the range <code>0</code> to
 *     <code>getSeriesCount() - 1</code>).
 * @param seriesList  the list of series data.
 *
 * @return The item count.
 *
 * @throws IllegalArgumentException if <code>series</code> is not in the
 *     specified range.
 */
protected int getItemCountFromSeries(int series, List seriesList) {
    if ((series < 0) || (series >= seriesList.size())) {
        throw new IllegalArgumentException(""Series index out of bounds"");
    }
    double[][] seriesArray = (double[][]) seriesList.get(series);
    return seriesArray[0].length;
}
```

---

### 2. Refactored Method in `DefaultXYDataset.java`:
```java
/**
 * Returns the number of items in the specified series.
 * 
 * @param series  the series index (in the range <code>0</code> to 
 *     <code>getSeriesCount() - 1</code>).
 * 
 * @return The item count.
 * 
 * @throws IllegalArgumentException if <code>series</code> is not in the 
 *     specified range.
 */
public int getItemCount(int series) {
    return getItemCountFromSeries(series, this.seriesList);
}
```

---

### 3. Refactored Method in `DefaultXYZDataset.java`:
```java
/**
 * Returns the number of items in the specified series.
 *
 * @param series  the series index (in the range <code>0</code> to
 *     <code>getSeriesCount() - 1</code>).
 *
 * @return The item count.
 *
 * @throws IllegalArgumentException if <code>series</code> is not in the
 *     specified range.
 */
public int getItemCount(int series) {
    return getItemCountFromSeries(series, this.seriesList);
}
```",Type-1
1656-1-3,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3766,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4599,4604,Type 1,"### Code Snippet 1 (CategoryPlot.java, zoomRangeAxes method, lines 3766-3771):
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo state,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, state, source, false);
}
```

### Code Snippet 2 (XYPlot.java, zoomRangeAxes method, lines 4599-4604):
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

### Clone Type:
These two code snippets are **Type-2 clones** because they are identical except for variable names (`state` vs. `info`).","### 1. Extracted Method (to be placed in the common superclass `Plot`):
```java
protected void performZoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source) {
    performZoomRangeAxes(factor, state, source, false);
}
```

#### In `XYPlot.java`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source) {
    performZoomRangeAxes(factor, info, source, false);
}
```",Type-2
1666-1-2,src,org.jfree.data,DefaultKeyedValues2D,hashCode,554,559,src,org.jfree.data,KeyedObjects2D,hashCode,493,498,Type 1,"### Code Snippet 1 (from `DefaultKeyedValues2D` class, `hashCode` method):
```java
public int hashCode() {
    int result;
    result = this.rowKeys.hashCode();
    result = 29 * result + this.columnKeys.hashCode();
    result = 29 * result + this.rows.hashCode();
    return result;
}
```

### Code Snippet 2 (from `KeyedObjects2D` class, `hashCode` method):
```java
public int hashCode() {
    int result;
    result = this.rowKeys.hashCode();
    result = 29 * result + this.columnKeys.hashCode();
    result = 29 * result + this.rows.hashCode();
    return result;
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, or layout.","### 1. Extracted Method (to be placed in the common superclass):
```java
protected int calculateHashCode(List rowKeys, List columnKeys, List rows) {
    int result;
    result = rowKeys.hashCode();
    result = 29 * result + columnKeys.hashCode();
    result = 29 * result + rows.hashCode();
    return result;
}
```

### 2. Refactored Code in `DefaultKeyedValues2D`:
```java
@Override
public int hashCode() {
    return calculateHashCode(this.rowKeys, this.columnKeys, this.rows);
}
```

### 3. Refactored Code in `KeyedObjects2D`:
```java
@Override
public int hashCode() {
    return calculateHashCode(this.rowKeys, this.columnKeys, this.rows);
}
```",Type-1
1726-1-3,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3768,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 1,"```java
// Code snippet from CategoryPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

```java
// Code snippet from XYPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, layout).","```java
// Extracted method to be placed in the common superclass (e.g., Plot.java)
protected void performZoomOnRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation, 
                                      double factor, PlotRenderingInfo info, Point2D source, 
                                      boolean useAnchor, RectangleEdge rangeAxisEdge) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), rangeAxisEdge);
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

```java
// Refactored method in CategoryPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, getRangeAxisEdge());
}
```

```java
// Refactored method in XYPlot.java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, getRangeAxisEdge());
}
```",Type-1
1729-1-3,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3768,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 1,"### Code Snippet 1: `zoomRangeAxes` method from `CategoryPlot` class (lines 3768-3771)
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

### Code Snippet 2: `zoomRangeAxes` method from `XYPlot` class (lines 4601-4604)
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `Plot`):
```java
protected void performZoomOnRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation, 
                                      double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored `zoomRangeAxes` Method in `CategoryPlot`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor);
}
```

---

### 3. Refactored `zoomRangeAxes` Method in `XYPlot`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor);
}
```",Type-1
1748-1-2,src,org.jfree.chart.renderer.category,StackedAreaRenderer,averageStackValues,449,453,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer2,averageStackValues,495,499,Type 1,"### Code Snippet 1 (from `StackedAreaRenderer` class, method `averageStackValues`):

```java
/**
 * Returns a pair of ""stack"" values calculated as the mean of the two
 * specified stack value pairs.
 *
 * @param stack1  the first stack pair.
 * @param stack2  the second stack pair.
 *
 * @return A pair of average stack values.
 */
private double[] averageStackValues(double[] stack1, double[] stack2) {
    double[] result = new double[2];
    result[0] = (stack1[0] + stack2[0]) / 2.0;
    result[1] = (stack1[1] + stack2[1]) / 2.0;
    return result;
}
```

---

### Code Snippet 2 (from `StackedXYAreaRenderer2` class, method `averageStackValues`):

```java
/**
 * Returns a pair of ""stack"" values calculated as the mean of the two
 * specified stack value pairs.
 *
 * @param stack1  the first stack pair.
 * @param stack2  the second stack pair.
 *
 * @return A pair of average stack values.
 */
private double[] averageStackValues(double[] stack1, double[] stack2) {
    double[] result = new double[2];
    result[0] = (stack1[0] + stack2[0]) / 2.0;
    result[1] = (stack1[1] + stack2[1]) / 2.0;
    return result;
}
```

---

### Clone Type:
**Type-1 Clone**: The two code snippets are **identical** except for their location in different classes.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Returns a pair of ""stack"" values calculated as the mean of the two
 * specified stack value pairs.
 *
 * @param stack1  the first stack pair.
 * @param stack2  the second stack pair.
 *
 * @return A pair of average stack values.
 */
protected double[] calculateAverageStackValues(double[] stack1, double[] stack2) {
    double[] result = new double[2];
    result[0] = (stack1[0] + stack2[0]) / 2.0;
    result[1] = (stack1[1] + stack2[1]) / 2.0;
    return result;
}
```

---

### 2. Refactored Method Calls:

#### In `StackedAreaRenderer` class:

```java
private double[] averageStackValues(double[] stack1, double[] stack2) {
    return calculateAverageStackValues(stack1, stack2);
}
```

---

#### In `StackedXYAreaRenderer2` class:

```java
private double[] averageStackValues(double[] stack1, double[] stack2) {
    return calculateAverageStackValues(stack1, stack2);
}
```",Type-1
1751-2-3,src,org.jfree.chart.annotations,XYBoxAnnotation,writeObject,286,290,src,org.jfree.chart.annotations,XYPolygonAnnotation,writeObject,338,342,Type 1,"### Code Snippet 1 (XYBoxAnnotation.java, lines 286-290):
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writeStroke(this.stroke, stream);
    SerialUtilities.writePaint(this.outlinePaint, stream);
    SerialUtilities.writePaint(this.fillPaint, stream);
}
```

### Code Snippet 2 (XYPolygonAnnotation.java, lines 338-342):
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writeStroke(this.stroke, stream);
    SerialUtilities.writePaint(this.outlinePaint, stream);
    SerialUtilities.writePaint(this.fillPaint, stream);
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for their location in different classes.","### 1. Extracted Method (To be placed in the common superclass `AbstractXYAnnotation`):
```java
protected void writeObjectHelper(ObjectOutputStream stream, Stroke stroke, Paint outlinePaint, Paint fillPaint) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writeStroke(stroke, stream);
    SerialUtilities.writePaint(outlinePaint, stream);
    SerialUtilities.writePaint(fillPaint, stream);
}
```

### 2. Refactored Code in `XYBoxAnnotation.java`:
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    writeObjectHelper(stream, this.stroke, this.outlinePaint, this.fillPaint);
}
```

### 3. Refactored Code in `XYPolygonAnnotation.java`:
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    writeObjectHelper(stream, this.stroke, this.outlinePaint, this.fillPaint);
}
```",Type-1
1751-7-9,src,org.jfree.chart.plot.dial,ArcDialFrame,writeObject,497,501,src,org.jfree.chart.plot.dial,StandardDialFrame,writeObject,337,341,Type 1,"### Code Snippet 1 (ArcDialFrame.java, `writeObject` method, lines 497-501):
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writePaint(this.backgroundPaint, stream);
    SerialUtilities.writePaint(this.foregroundPaint, stream);
    SerialUtilities.writeStroke(this.stroke, stream);
}
```

### Code Snippet 2 (StandardDialFrame.java, `writeObject` method, lines 337-341):
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writePaint(this.backgroundPaint, stream);
    SerialUtilities.writePaint(this.foregroundPaint, stream);
    SerialUtilities.writeStroke(this.stroke, stream);
}
```

### Clone Type:
**Type-1 Clone**: The two code snippets are identical except for whitespace, comments, or layout.","### 1. Extracted Method (To be placed in the common superclass `AbstractDialLayer`):
```java
protected void writeObjectHelper(ObjectOutputStream stream, Paint backgroundPaint, Paint foregroundPaint, Stroke stroke) throws IOException {
    stream.defaultWriteObject();
    SerialUtilities.writePaint(backgroundPaint, stream);
    SerialUtilities.writePaint(foregroundPaint, stream);
    SerialUtilities.writeStroke(stroke, stream);
}
```

### 2. Refactored Code in `ArcDialFrame.java`:
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    writeObjectHelper(stream, this.backgroundPaint, this.foregroundPaint, this.stroke);
}
```

### 3. Refactored Code in `StandardDialFrame.java`:
```java
private void writeObject(ObjectOutputStream stream) throws IOException {
    writeObjectHelper(stream, this.backgroundPaint, this.foregroundPaint, this.stroke);
}
```",Type-1
1752-2-4,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3768,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 1,"### Code Snippet 1 (CategoryPlot.java, zoomRangeAxes method, lines 3768-3771):
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

### Code Snippet 2 (XYPlot.java, zoomRangeAxes method, lines 4601-4604):
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`):
```java
protected void performZoomOnRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation, double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor);
}
```

#### In `XYPlot.java`:
```java
public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) {
    performZoomOnRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor);
}
```",Type-1
1757-1-5,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3768,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 1,"### Code Snippet 1: `zoomRangeAxes` from `CategoryPlot.java`
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### Code Snippet 2: `zoomRangeAxes` from `XYPlot.java`
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 *
 * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
 *
 * @since 1.0.7
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {

    // perform the zoom on each range axis
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                // get the relevant source coordinate given the plot
                // orientation
                double sourceY = source.getY();
                if (this.orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge());
                rangeAxis.resizeRange(factor, anchorY);
            }
            else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### Clone Type:
The two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (To be placed in the common superclass `Plot`):
```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param rangeAxes  the list of range axes.
 * @param orientation  the plot orientation.
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param useAnchor  a flag that controls whether or not the source point
 *         is used for the zoom anchor.
 * @param getRangeAxisEdge  a function to get the range axis edge.
 */
protected void performZoomRangeAxes(List<ValueAxis> rangeAxes, PlotOrientation orientation,
                                    double factor, PlotRenderingInfo info, Point2D source,
                                    boolean useAnchor, Function<Integer, RectangleEdge> getRangeAxisEdge) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (useAnchor) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge.apply(i));
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:
```java
@Override
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, this::getRangeAxisEdge);
}
```

---

#### In `XYPlot.java`:
```java
@Override
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source, boolean useAnchor) {
    performZoomRangeAxes(this.rangeAxes, this.orientation, factor, info, source, useAnchor, this::getRangeAxisEdge);
}
```",Type-1
1786-2-4,src,org.jfree.chart.plot,CategoryPlot,configureRangeAxes,1143,1147,src,org.jfree.chart.plot,XYPlot,configureRangeAxes,1160,1164,Type 1,"```java
// Code snippet from CategoryPlot.java
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

```java
// Code snippet from XYPlot.java
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

Clone Type: **Type-1 Clone**","```java
// Extracted method to be placed in the common superclass (e.g., Plot.java)
protected void configureAxes(List<ValueAxis> axes) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = axes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

```java
// Refactored method in CategoryPlot.java
@Override
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```

```java
// Refactored method in XYPlot.java
@Override
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```",Type-1
1815-2-4,src,org.jfree.chart.plot,CategoryPlot,configureRangeAxes,1144,1147,src,org.jfree.chart.plot,XYPlot,configureRangeAxes,1161,1164,Type 1,"### Code Snippet 1 (CategoryPlot.java: configureRangeAxes method, lines 1144-1147)
```java
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

### Code Snippet 2 (XYPlot.java: configureRangeAxes method, lines 1161-1164)
```java
public void configureRangeAxes() {
    for (int i = 0; i < this.rangeAxes.size(); i++) {
        ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

### Clone Type: 
**Type-1 Clone** (Identical except for whitespace, comments, and layout).","### 1. Extracted Method (To be placed in the common superclass `Plot`)
```java
protected void configureAxes(List<ValueAxis> axes) {
    for (int i = 0; i < axes.size(); i++) {
        ValueAxis axis = axes.get(i);
        if (axis != null) {
            axis.configure();
        }
    }
}
```

### 2. Refactored Code in `CategoryPlot.java`
```java
@Override
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```

### 3. Refactored Code in `XYPlot.java`
```java
@Override
public void configureRangeAxes() {
    configureAxes(this.rangeAxes);
}
```",Type-1
1809-3-7,src,org.jfree.chart.plot,CategoryPlot,zoomRangeAxes,3768,3771,src,org.jfree.chart.plot,XYPlot,zoomRangeAxes,4601,4604,Type 1,"### Code Snippet 1 (from `CategoryPlot.java`):

```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param state  the plot state.
 * @param source  the source point (in Java2D space) for the zoom.
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo state,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, state, source, false);
}
```

### Code Snippet 2 (from `XYPlot.java`):

```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    // delegate to other method
    zoomRangeAxes(factor, info, source, false);
}
```

### Clone Type:
These two code snippets are **Type-1 Clones** because they are **identical except for whitespace, comments, and layout**.","### 1. Extracted Method (to be placed in the common superclass `Plot`):

```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 * @param rangeAxes  the list of range axes.
 * @param orientation  the plot orientation.
 */
protected void performZoomRangeAxes(double factor, PlotRenderingInfo info,
                                    Point2D source, List<ValueAxis> rangeAxes,
                                    PlotOrientation orientation) {
    for (int i = 0; i < rangeAxes.size(); i++) {
        ValueAxis rangeAxis = rangeAxes.get(i);
        if (rangeAxis != null) {
            if (source != null) {
                double sourceY = source.getY();
                if (orientation == PlotOrientation.HORIZONTAL) {
                    sourceY = source.getX();
                }
                double anchorY = rangeAxis.java2DToValue(sourceY,
                        info.getDataArea(), getRangeAxisEdge(i));
                rangeAxis.resizeRange(factor, anchorY);
            } else {
                rangeAxis.resizeRange(factor);
            }
        }
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryPlot.java`:

```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param state  the plot state.
 * @param source  the source point (in Java2D space) for the zoom.
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo state,
                          Point2D source) {
    performZoomRangeAxes(factor, state, source, this.rangeAxes, this.orientation);
}
```

---

#### In `XYPlot.java`:

```java
/**
 * Multiplies the range on the range axis/axes by the specified factor.
 *
 * @param factor  the zoom factor.
 * @param info  the plot rendering info.
 * @param source  the source point.
 */
public void zoomRangeAxes(double factor, PlotRenderingInfo info,
                          Point2D source) {
    performZoomRangeAxes(factor, info, source, this.rangeAxes, this.orientation);
}
```",Type-1
