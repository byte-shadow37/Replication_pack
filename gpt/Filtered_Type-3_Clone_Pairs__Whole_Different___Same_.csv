Pair ID,Source Folder 1,Package 1,Class 1,Method 1,Start Line 1,End Line 1,Source Folder 2,Package 2,Class 2,Method 2,Start Line 2,End Line 2,Clone Type,Clone response,Refactoring suggestions,Extracted Clone Type
31-1-2,src,org.jfree.chart.renderer.category,GroupedStackedBarRenderer,drawItem,240,337,src,org.jfree.chart.renderer.category,StackedBarRenderer,drawItem,276,378,Type 3,"### Code Snippet 1: `drawItem` method from `GroupedStackedBarRenderer.java`

```java
public void drawItem(Graphics2D g2,
                     CategoryItemRendererState state,
                     Rectangle2D dataArea,
                     CategoryPlot plot,
                     CategoryAxis domainAxis,
                     ValueAxis rangeAxis,
                     CategoryDataset dataset,
                     int row,
                     int column,
                     int pass) {

    // nothing is drawn for null values...
    Number dataValue = dataset.getValue(row, column);
    if (dataValue == null) {
        return;
    }

    double value = dataValue.doubleValue();
    Comparable group = this.seriesToGroupMap.getGroup(
            dataset.getRowKey(row));
    PlotOrientation orientation = plot.getOrientation();
    double barW0 = calculateBarW0(plot, orientation, dataArea, domainAxis,
            state, row, column);

    double positiveBase = 0.0;
    double negativeBase = 0.0;

    for (int i = 0; i < row; i++) {
        if (group.equals(this.seriesToGroupMap.getGroup(
                dataset.getRowKey(i)))) {
            Number v = dataset.getValue(i, column);
            if (v != null) {
                double d = v.doubleValue();
                if (d > 0) {
                    positiveBase = positiveBase + d;
                }
                else {
                    negativeBase = negativeBase + d;
                }
            }
        }
    }

    double translatedBase;
    double translatedValue;
    RectangleEdge location = plot.getRangeAxisEdge();
    if (value > 0.0) {
        translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea,
                location);
        translatedValue = rangeAxis.valueToJava2D(positiveBase + value,
                dataArea, location);
    }
    else {
        translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea,
                location);
        translatedValue = rangeAxis.valueToJava2D(negativeBase + value,
                dataArea, location);
    }
    double barL0 = Math.min(translatedBase, translatedValue);
    double barLength = Math.max(Math.abs(translatedValue - translatedBase),
            getMinimumBarLength());

    Rectangle2D bar = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        bar = new Rectangle2D.Double(barL0, barW0, barLength,
                state.getBarWidth());
    }
    else {
        bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(),
                barLength);
    }
    Paint itemPaint = getItemPaint(row, column);
    if (getGradientPaintTransformer() != null
            && itemPaint instanceof GradientPaint) {
        GradientPaint gp = (GradientPaint) itemPaint;
        itemPaint = getGradientPaintTransformer().transform(gp, bar);
    }
    g2.setPaint(itemPaint);
    g2.fill(bar);
    if (isDrawBarOutline()
            && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
        g2.setStroke(getItemStroke(row, column));
        g2.setPaint(getItemOutlinePaint(row, column));
        g2.draw(bar);
    }

    CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
            column);
    if (generator != null && isItemLabelVisible(row, column)) {
        drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                (value < 0.0));
    }

    // collect entity and tool tip information...
    if (state.getInfo() != null) {
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

}
```

---

### Code Snippet 2: `drawItem` method from `StackedBarRenderer.java`

```java
public void drawItem(Graphics2D g2,
                     CategoryItemRendererState state,
                     Rectangle2D dataArea,
                     CategoryPlot plot,
                     CategoryAxis domainAxis,
                     ValueAxis rangeAxis,
                     CategoryDataset dataset,
                     int row,
                     int column,
                     int pass) {

    // nothing is drawn for null values...
    Number dataValue = dataset.getValue(row, column);
    if (dataValue == null) {
        return;
    }

    double value = dataValue.doubleValue();
    double total = 0.0;  // only needed if calculating percentages
    if (this.renderAsPercentages) {
        total = DataUtilities.calculateColumnTotal(dataset, column);
        value = value / total;
    }

    PlotOrientation orientation = plot.getOrientation();
    double barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(),
            dataArea, plot.getDomainAxisEdge())
            - state.getBarWidth() / 2.0;

    double positiveBase = getBase();
    double negativeBase = positiveBase;

    for (int i = 0; i < row; i++) {
        Number v = dataset.getValue(i, column);
        if (v != null) {
            double d = v.doubleValue();
            if (this.renderAsPercentages) {
                d = d / total;
            }
            if (d > 0) {
                positiveBase = positiveBase + d;
            }
            else {
                negativeBase = negativeBase + d;
            }
        }
    }

    double translatedBase;
    double translatedValue;
    RectangleEdge location = plot.getRangeAxisEdge();
    if (value >= 0.0) {
        translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea,
                location);
        translatedValue = rangeAxis.valueToJava2D(positiveBase + value,
                dataArea, location);
    }
    else {
        translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea,
                location);
        translatedValue = rangeAxis.valueToJava2D(negativeBase + value,
                dataArea, location);
    }
    double barL0 = Math.min(translatedBase, translatedValue);
    double barLength = Math.max(Math.abs(translatedValue - translatedBase),
            getMinimumBarLength());

    Rectangle2D bar = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        bar = new Rectangle2D.Double(barL0, barW0, barLength,
                state.getBarWidth());
    }
    else {
        bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(),
                barLength);
    }
    if (pass == 0) {
        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            g2.setStroke(getItemOutlineStroke(row, column));
            g2.setPaint(getItemOutlinePaint(row, column));
            g2.draw(bar);
        }

        // add an item entity, if this information is being collected
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, row, column, bar);
        }
    }
    else if (pass == 1) {
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
                column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                    (value < 0.0));
        }
    }
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the handling of `seriesToGroupMap` in `GroupedStackedBarRenderer` and the `renderAsPercentages` logic in `StackedBarRenderer`.","### 1. Extracted Method (to be placed in the superclass `BarRenderer`)

```java
protected void drawStackedBar(Graphics2D g2,
                              CategoryItemRendererState state,
                              Rectangle2D dataArea,
                              CategoryPlot plot,
                              CategoryAxis domainAxis,
                              ValueAxis rangeAxis,
                              CategoryDataset dataset,
                              int row,
                              int column,
                              int pass,
                              boolean renderAsPercentages,
                              double baseValue,
                              KeyToGroupMap seriesToGroupMap) {

    // nothing is drawn for null values...
    Number dataValue = dataset.getValue(row, column);
    if (dataValue == null) {
        return;
    }

    double value = dataValue.doubleValue();
    double total = 0.0;  // only needed if calculating percentages
    if (renderAsPercentages) {
        total = DataUtilities.calculateColumnTotal(dataset, column);
        value = value / total;
    }

    PlotOrientation orientation = plot.getOrientation();
    double barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(),
            dataArea, plot.getDomainAxisEdge())
            - state.getBarWidth() / 2.0;

    double positiveBase = baseValue;
    double negativeBase = baseValue;

    for (int i = 0; i < row; i++) {
        Number v = dataset.getValue(i, column);
        if (v != null) {
            double d = v.doubleValue();
            if (renderAsPercentages) {
                d = d / total;
            }
            if (seriesToGroupMap == null || seriesToGroupMap.getGroup(dataset.getRowKey(i)).equals(seriesToGroupMap.getGroup(dataset.getRowKey(row)))) {
                if (d > 0) {
                    positiveBase = positiveBase + d;
                } else {
                    negativeBase = negativeBase + d;
                }
            }
        }
    }

    double translatedBase;
    double translatedValue;
    RectangleEdge location = plot.getRangeAxisEdge();
    if (value >= 0.0) {
        translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea,
                location);
        translatedValue = rangeAxis.valueToJava2D(positiveBase + value,
                dataArea, location);
    } else {
        translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea,
                location);
        translatedValue = rangeAxis.valueToJava2D(negativeBase + value,
                dataArea, location);
    }
    double barL0 = Math.min(translatedBase, translatedValue);
    double barLength = Math.max(Math.abs(translatedValue - translatedBase),
            getMinimumBarLength());

    Rectangle2D bar = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        bar = new Rectangle2D.Double(barL0, barW0, barLength,
                state.getBarWidth());
    } else {
        bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(),
                barLength);
    }
    if (pass == 0) {
        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            g2.setStroke(getItemOutlineStroke(row, column));
            g2.setPaint(getItemOutlinePaint(row, column));
            g2.draw(bar);
        }

        // add an item entity, if this information is being collected
        EntityCollection entities = state.getEntityCollection();
        if (entities != null) {
            addItemEntity(entities, dataset, row, column, bar);
        }
    } else if (pass == 1) {
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
                column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, dataset, row, column, plot, generator, bar,
                    (value < 0.0));
        }
    }
}
```

---

### 2. Method Calls Replacing Clones in Original Files

#### In `GroupedStackedBarRenderer.java`

```java
@Override
public void drawItem(Graphics2D g2,
                     CategoryItemRendererState state,
                     Rectangle2D dataArea,
                     CategoryPlot plot,
                     CategoryAxis domainAxis,
                     ValueAxis rangeAxis,
                     CategoryDataset dataset,
                     int row,
                     int column,
                     int pass) {
    drawStackedBar(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, pass, false, 0.0, this.seriesToGroupMap);
}
```

---

#### In `StackedBarRenderer.java`

```java
@Override
public void drawItem(Graphics2D g2,
                     CategoryItemRendererState state,
                     Rectangle2D dataArea,
                     CategoryPlot plot,
                     CategoryAxis domainAxis,
                     ValueAxis rangeAxis,
                     CategoryDataset dataset,
                     int row,
                     int column,
                     int pass) {
    drawStackedBar(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, pass, this.renderAsPercentages, getBase(), null);
}
```",Type-3
45-1-2,src,org.jfree.chart,ChartFactory,createPieChart,324,400,src,org.jfree.chart,ChartFactory,createPieChart,441,526,Type 3,"**Code Snippet 1:**
```java
/**
 * Creates a pie chart with default settings.
 * <P>
 * The chart object returned by this method uses a {@link PiePlot} instance 
 * as the plot.
 *
 * @param title  the chart title (<code>null</code> permitted).
 * @param dataset  the dataset for the chart (<code>null</code> permitted).
 * @param legend  a flag specifying whether or not a legend is required.
 * @param tooltips  configure chart to generate tool tips?
 * @param locale  the locale (<code>null</code> not permitted).
 *
 * @return A pie chart.
 * 
 * @since 1.0.7
 */
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2:**
```java
/**
 * Creates a pie chart with default settings.
 * <P>
 * The chart object returned by this method uses a {@link PiePlot} instance 
 * as the plot.
 *
 * @param title  the chart title (<code>null</code> permitted).
 * @param dataset  the dataset for the chart (<code>null</code> permitted).
 * @param legend  a flag specifying whether or not a legend is required.
 * @param tooltips  configure chart to generate tool tips?
 * @param urls  configure chart to generate URLs?
 *
 * @return A pie chart.
 */
public static JFreeChart createPieChart(String title,
                                        PieDataset dataset,
                                        boolean legend,
                                        boolean tooltips,
                                        boolean urls) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator());
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator());
    }
    if (urls) {
        plot.setURLGenerator(new StandardPieURLGenerator());
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**
```java
private static PiePlot createPiePlot(PieDataset dataset, boolean tooltips, boolean urls, Locale locale) {
    PiePlot plot = new PiePlot(dataset);
    if (locale != null) {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    } else {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator());
    }
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        if (locale != null) {
            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        } else {
            plot.setToolTipGenerator(new StandardPieToolTipGenerator());
        }
    }
    if (urls) {
        plot.setURLGenerator(new StandardPieURLGenerator());
    }
    return plot;
}
```

**2. Method Calls Replacing the Clones:**

**For Code Snippet 1:**
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = createPiePlot(dataset, tooltips, false, locale);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**For Code Snippet 2:**
```java
public static JFreeChart createPieChart(String title,
                                        PieDataset dataset,
                                        boolean legend,
                                        boolean tooltips,
                                        boolean urls) {

    PiePlot plot = createPiePlot(dataset, tooltips, urls, null);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```",Type-3
62-1-2,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,createHorizontalBlock,507,577,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,createVerticalBlock,704,774,Type 3,"**Code Snippet 1 - Method: createHorizontalBlock (Lines: 507-577)**

```java
private Shape[] createHorizontalBlock(double x0, double width, double y0,
        double y1, boolean inverted) {
    Shape[] result = new Shape[6];
    Point2D p00 = new Point2D.Double(y0, x0);
    Point2D p01 = new Point2D.Double(y0, x0 + width);
    Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(),
            p01.getY() - getYOffset());
    Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(),
            p00.getY() - getYOffset());

    Point2D p0 = new Point2D.Double(y1, x0);
    Point2D p1 = new Point2D.Double(y1, x0 + width);
    Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(),
            p1.getY() - getYOffset());
    Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(),
            p0.getY() - getYOffset());

    GeneralPath bottom = new GeneralPath();
    bottom.moveTo((float) p1.getX(), (float) p1.getY());
    bottom.lineTo((float) p01.getX(), (float) p01.getY());
    bottom.lineTo((float) p02.getX(), (float) p02.getY());
    bottom.lineTo((float) p2.getX(), (float) p2.getY());
    bottom.closePath();

    GeneralPath top = new GeneralPath();
    top.moveTo((float) p0.getX(), (float) p0.getY());
    top.lineTo((float) p00.getX(), (float) p00.getY());
    top.lineTo((float) p03.getX(), (float) p03.getY());
    top.lineTo((float) p3.getX(), (float) p3.getY());
    top.closePath();

    GeneralPath back = new GeneralPath();
    back.moveTo((float) p2.getX(), (float) p2.getY());
    back.lineTo((float) p02.getX(), (float) p02.getY());
    back.lineTo((float) p03.getX(), (float) p03.getY());
    back.lineTo((float) p3.getX(), (float) p3.getY());
    back.closePath();

    GeneralPath front = new GeneralPath();
    front.moveTo((float) p0.getX(), (float) p0.getY());
    front.lineTo((float) p1.getX(), (float) p1.getY());
    front.lineTo((float) p01.getX(), (float) p01.getY());
    front.lineTo((float) p00.getX(), (float) p00.getY());
    front.closePath();

    GeneralPath left = new GeneralPath();
    left.moveTo((float) p0.getX(), (float) p0.getY());
    left.lineTo((float) p1.getX(), (float) p1.getY());
    left.lineTo((float) p2.getX(), (float) p2.getY());
    left.lineTo((float) p3.getX(), (float) p3.getY());
    left.closePath();

    GeneralPath right = new GeneralPath();
    right.moveTo((float) p00.getX(), (float) p00.getY());
    right.lineTo((float) p01.getX(), (float) p01.getY());
    right.lineTo((float) p02.getX(), (float) p02.getY());
    right.lineTo((float) p03.getX(), (float) p03.getY());
    right.closePath();
    result[0] = bottom;
    result[1] = back;
    if (inverted) {
        result[2] = right;
        result[3] = left;
    }
    else {
        result[2] = left;
        result[3] = right;
    }
    result[4] = top;
    result[5] = front;
    return result;
}
```

**Code Snippet 2 - Method: createVerticalBlock (Lines: 704-774)**

```java
private Shape[] createVerticalBlock(double x0, double width, double y0,
        double y1, boolean inverted) {
    Shape[] result = new Shape[6];
    Point2D p00 = new Point2D.Double(x0, y0);
    Point2D p01 = new Point2D.Double(x0 + width, y0);
    Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(),
            p01.getY() - getYOffset());
    Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(),
            p00.getY() - getYOffset());

    Point2D p0 = new Point2D.Double(x0, y1);
    Point2D p1 = new Point2D.Double(x0 + width, y1);
    Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(),
            p1.getY() - getYOffset());
    Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(),
            p0.getY() - getYOffset());

    GeneralPath right = new GeneralPath();
    right.moveTo((float) p1.getX(), (float) p1.getY());
    right.lineTo((float) p01.getX(), (float) p01.getY());
    right.lineTo((float) p02.getX(), (float) p02.getY());
    right.lineTo((float) p2.getX(), (float) p2.getY());
    right.closePath();

    GeneralPath left = new GeneralPath();
    left.moveTo((float) p0.getX(), (float) p0.getY());
    left.lineTo((float) p00.getX(), (float) p00.getY());
    left.lineTo((float) p03.getX(), (float) p03.getY());
    left.lineTo((float) p3.getX(), (float) p3.getY());
    left.closePath();

    GeneralPath back = new GeneralPath();
    back.moveTo((float) p2.getX(), (float) p2.getY());
    back.lineTo((float) p02.getX(), (float) p02.getY());
    back.lineTo((float) p03.getX(), (float) p03.getY());
    back.lineTo((float) p3.getX(), (float) p3.getY());
    back.closePath();

    GeneralPath front = new GeneralPath();
    front.moveTo((float) p0.getX(), (float) p0.getY());
    front.lineTo((float) p1.getX(), (float) p1.getY());
    front.lineTo((float) p01.getX(), (float) p01.getY());
    front.lineTo((float) p00.getX(), (float) p00.getY());
    front.closePath();

    GeneralPath top = new GeneralPath();
    top.moveTo((float) p0.getX(), (float) p0.getY());
    top.lineTo((float) p1.getX(), (float) p1.getY());
    top.lineTo((float) p2.getX(), (float) p2.getY());
    top.lineTo((float) p3.getX(), (float) p3.getY());
    top.closePath();

    GeneralPath bottom = new GeneralPath();
    bottom.moveTo((float) p00.getX(), (float) p00.getY());
    bottom.lineTo((float) p01.getX(), (float) p01.getY());
    bottom.lineTo((float) p02.getX(), (float) p02.getY());
    bottom.lineTo((float) p03.getX(), (float) p03.getY());
    bottom.closePath();

    result[0] = bottom;
    result[1] = back;
    result[2] = left;
    result[3] = right;
    result[4] = top;
    result[5] = front;
    if (inverted) {
        result[0] = top;
        result[4] = bottom;
    }
    return result;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**

```java
private Shape[] createBlock(double x0, double width, double y0, double y1, boolean inverted, boolean isHorizontal) {
    Shape[] result = new Shape[6];
    Point2D p00 = isHorizontal ? new Point2D.Double(y0, x0) : new Point2D.Double(x0, y0);
    Point2D p01 = isHorizontal ? new Point2D.Double(y0, x0 + width) : new Point2D.Double(x0 + width, y0);
    Point2D p02 = new Point2D.Double(p01.getX() + getXOffset(), p01.getY() - getYOffset());
    Point2D p03 = new Point2D.Double(p00.getX() + getXOffset(), p00.getY() - getYOffset());

    Point2D p0 = isHorizontal ? new Point2D.Double(y1, x0) : new Point2D.Double(x0, y1);
    Point2D p1 = isHorizontal ? new Point2D.Double(y1, x0 + width) : new Point2D.Double(x0 + width, y1);
    Point2D p2 = new Point2D.Double(p1.getX() + getXOffset(), p1.getY() - getYOffset());
    Point2D p3 = new Point2D.Double(p0.getX() + getXOffset(), p0.getY() - getYOffset());

    GeneralPath bottom = new GeneralPath();
    bottom.moveTo((float) p1.getX(), (float) p1.getY());
    bottom.lineTo((float) p01.getX(), (float) p01.getY());
    bottom.lineTo((float) p02.getX(), (float) p02.getY());
    bottom.lineTo((float) p2.getX(), (float) p2.getY());
    bottom.closePath();

    GeneralPath top = new GeneralPath();
    top.moveTo((float) p0.getX(), (float) p0.getY());
    top.lineTo((float) p00.getX(), (float) p00.getY());
    top.lineTo((float) p03.getX(), (float) p03.getY());
    top.lineTo((float) p3.getX(), (float) p3.getY());
    top.closePath();

    GeneralPath back = new GeneralPath();
    back.moveTo((float) p2.getX(), (float) p2.getY());
    back.lineTo((float) p02.getX(), (float) p02.getY());
    back.lineTo((float) p03.getX(), (float) p03.getY());
    back.lineTo((float) p3.getX(), (float) p3.getY());
    back.closePath();

    GeneralPath front = new GeneralPath();
    front.moveTo((float) p0.getX(), (float) p0.getY());
    front.lineTo((float) p1.getX(), (float) p1.getY());
    front.lineTo((float) p01.getX(), (float) p01.getY());
    front.lineTo((float) p00.getX(), (float) p00.getY());
    front.closePath();

    GeneralPath left = new GeneralPath();
    left.moveTo((float) p0.getX(), (float) p0.getY());
    left.lineTo((float) p1.getX(), (float) p1.getY());
    left.lineTo((float) p2.getX(), (float) p2.getY());
    left.lineTo((float) p3.getX(), (float) p3.getY());
    left.closePath();

    GeneralPath right = new GeneralPath();
    right.moveTo((float) p00.getX(), (float) p00.getY());
    right.lineTo((float) p01.getX(), (float) p01.getY());
    right.lineTo((float) p02.getX(), (float) p02.getY());
    right.lineTo((float) p03.getX(), (float) p03.getY());
    right.closePath();

    result[0] = bottom;
    result[1] = back;
    if (isHorizontal) {
        if (inverted) {
            result[2] = right;
            result[3] = left;
        } else {
            result[2] = left;
            result[3] = right;
        }
    } else {
        result[2] = left;
        result[3] = right;
        if (inverted) {
            result[0] = top;
            result[4] = bottom;
        } else {
            result[4] = top;
        }
    }
    result[5] = front;
    return result;
}
```

**2. Method Calls Replacing Clones:**

**For `createHorizontalBlock`:**

```java
return createBlock(x0, width, y0, y1, inverted, true);
```

**For `createVerticalBlock`:**

```java
return createBlock(x0, width, y0, y1, inverted, false);
```",Type-3
65-1-2,src,org.jfree.chart.renderer,RendererUtilities,findLiveItemsLowerBound,68,138,src,org.jfree.chart.renderer,RendererUtilities,findLiveItemsUpperBound,156,222,Type 3,"**Code Snippet 1: Method: findLiveItemsLowerBound (Lines: 68-138)**  
```java
public static int findLiveItemsLowerBound(XYDataset dataset, int series, 
        double xLow, double xHigh) {
    int itemCount = dataset.getItemCount(series);
    if (itemCount <= 1) {
        return 0;
    }
    if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {
        int low = 0;
        int high = itemCount - 1;
        int mid = (low + high) / 2;
        double lowValue = dataset.getXValue(series, low);
        if (lowValue >= xLow) {
            return low;
        }
        double highValue = dataset.getXValue(series, high);
        if (highValue < xLow) {
            return high;
        }
        while (high - low > 1) {
            double midV = dataset.getXValue(series, mid);
            if (midV >= xLow) {
                high = mid;
            }
            else {
                low = mid;
            }
            mid = (low + high) / 2;
        }
        return mid;
    }
    else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {
        int low = 0;
        int high = itemCount - 1;
        int mid = (low + high) / 2;
        double lowValue = dataset.getXValue(series, low);
        if (lowValue <= xHigh) {
            return low;
        }
        double highValue = dataset.getXValue(series, high);
        if (highValue > xHigh) {
            return high;
        }
        while (high - low > 1) {
            double midV = dataset.getXValue(series, mid);
            if (midV > xHigh) {
                low = mid;
            }
            else {
                high = mid;
            }
            mid = (low + high) / 2;
        }
        return mid;
    }
    else {
        int index = 0;
        while (index < itemCount && dataset.getXValue(series, index) 
                < xLow) {
            index++;
        }
        return Math.max(0, index - 1);
    }
}
```

**Code Snippet 2: Method: findLiveItemsUpperBound (Lines: 156-222)**  
```java
public static int findLiveItemsUpperBound(XYDataset dataset, int series, 
        double xLow, double xHigh) {
    int itemCount = dataset.getItemCount(series);
    if (itemCount <= 1) {
        return 0;
    }
    if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {
        int low = 0;
        int high = itemCount - 1;
        int mid = (low + high + 1) / 2;
        double lowValue = dataset.getXValue(series, low);
        if (lowValue > xHigh) {
            return low;
        }
        double highValue = dataset.getXValue(series, high);
        if (highValue <= xHigh) {
            return high;
        }
        while (high - low > 1) {
            double midV = dataset.getXValue(series, mid);
            if (midV <= xHigh) {
                low = mid;
            }
            else {
                high = mid;
            }
            mid = (low + high + 1) / 2;
        }
        return mid;
    }
    else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {
        int low = 0;
        int high = itemCount - 1;
        int mid = (low + high) / 2;
        double lowValue = dataset.getXValue(series, low);
        if (lowValue < xLow) {
            return low;
        }
        double highValue = dataset.getXValue(series, high);
        if (highValue >= xLow) {
            return high;
        }
        while (high - low > 1) {
            double midV = dataset.getXValue(series, mid);
            if (midV >= xLow) {
                low = mid;
            }
            else {
                high = mid;
            }
            mid = (low + high) / 2;
        }
        return mid;
    }
    else {
        int index = itemCount - 1;
        while (index >= 0 && dataset.getXValue(series, index) 
                > xHigh) {
            index--;
        }
        return Math.min(itemCount - 1, index + 1);
    }
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**  
```java
private static int findBound(XYDataset dataset, int series, double xLow, double xHigh, boolean isLowerBound) {
    int itemCount = dataset.getItemCount(series);
    if (itemCount <= 1) {
        return 0;
    }
    if (dataset.getDomainOrder() == DomainOrder.ASCENDING) {
        int low = 0;
        int high = itemCount - 1;
        int mid = (low + high + (isLowerBound ? 0 : 1)) / 2;
        double lowValue = dataset.getXValue(series, low);
        if ((isLowerBound && lowValue >= xLow) || (!isLowerBound && lowValue > xHigh)) {
            return low;
        }
        double highValue = dataset.getXValue(series, high);
        if ((isLowerBound && highValue < xLow) || (!isLowerBound && highValue <= xHigh)) {
            return high;
        }
        while (high - low > 1) {
            double midV = dataset.getXValue(series, mid);
            if ((isLowerBound && midV >= xLow) || (!isLowerBound && midV <= xHigh)) {
                high = mid;
            } else {
                low = mid;
            }
            mid = (low + high + (isLowerBound ? 0 : 1)) / 2;
        }
        return mid;
    } else if (dataset.getDomainOrder() == DomainOrder.DESCENDING) {
        int low = 0;
        int high = itemCount - 1;
        int mid = (low + high) / 2;
        double lowValue = dataset.getXValue(series, low);
        if ((isLowerBound && lowValue <= xHigh) || (!isLowerBound && lowValue < xLow)) {
            return low;
        }
        double highValue = dataset.getXValue(series, high);
        if ((isLowerBound && highValue > xHigh) || (!isLowerBound && highValue >= xLow)) {
            return high;
        }
        while (high - low > 1) {
            double midV = dataset.getXValue(series, mid);
            if ((isLowerBound && midV > xHigh) || (!isLowerBound && midV >= xLow)) {
                low = mid;
            } else {
                high = mid;
            }
            mid = (low + high) / 2;
        }
        return mid;
    } else {
        int index = isLowerBound ? 0 : itemCount - 1;
        while ((isLowerBound && index < itemCount && dataset.getXValue(series, index) < xLow) ||
               (!isLowerBound && index >= 0 && dataset.getXValue(series, index) > xHigh)) {
            index += isLowerBound ? 1 : -1;
        }
        return isLowerBound ? Math.max(0, index - 1) : Math.min(itemCount - 1, index + 1);
    }
}
```

**2. Method Calls Replacing Clones:**  

**For `findLiveItemsLowerBound`:**  
```java
public static int findLiveItemsLowerBound(XYDataset dataset, int series, double xLow, double xHigh) {
    return findBound(dataset, series, xLow, xHigh, true);
}
```

**For `findLiveItemsUpperBound`:**  
```java
public static int findLiveItemsUpperBound(XYDataset dataset, int series, double xLow, double xHigh) {
    return findBound(dataset, series, xLow, xHigh, false);
}
```",Type-3
71-1-2,src,org.jfree.chart.axis,Axis,equals,1180,1247,src,org.jfree.chart.plot,MeterPlot,equals,1205,1270,Type 3,"### Code Snippet 1: `equals` method from `Axis.java`

```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Axis)) {
        return false;
    }
    Axis that = (Axis) obj;
    if (this.visible != that.visible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.label, that.label)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {
        return false;
    }
    if (this.labelAngle != that.labelAngle) {
        return false;
    }
    if (this.axisLineVisible != that.axisLineVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {
        return false;
    }
    if (this.tickLabelsVisible != that.tickLabelsVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(
        this.tickLabelInsets, that.tickLabelInsets
    )) {
        return false;
    }
    if (this.tickMarksVisible != that.tickMarksVisible) {
        return false;
    }
    if (this.tickMarkInsideLength != that.tickMarkInsideLength) {
        return false;
    }
    if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {
        return false;
    }
    if (this.fixedDimension != that.fixedDimension) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `MeterPlot.java`

```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }   
    if (!(obj instanceof MeterPlot)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;
    }
    MeterPlot that = (MeterPlot) obj;
    if (!ObjectUtilities.equal(this.units, that.units)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.range, that.range)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.intervals, that.intervals)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.dialOutlinePaint, 
            that.dialOutlinePaint)) {
        return false;   
    }
    if (this.shape != that.shape) {
        return false;   
    }
    if (!PaintUtilities.equal(this.dialBackgroundPaint, 
            that.dialBackgroundPaint)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.needlePaint, that.needlePaint)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.tickPaint, that.tickPaint)) {
        return false;
    }
    if (this.tickSize != that.tickSize) {
        return false;
    }
    if (this.tickLabelsVisible != that.tickLabelsVisible) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFormat, 
            that.tickLabelFormat)) {
        return false;   
    }
    if (this.drawBorder != that.drawBorder) {
        return false;   
    }
    if (this.meterAngle != that.meterAngle) {
        return false;   
    }
    return true;      
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements and logic specific to their respective classes (`Axis` and `MeterPlot`).","### 1. Extracted Method (to be placed in the common superclass)

```java
protected boolean equalsHelper(Object obj, boolean visible, String label, Font labelFont, Paint labelPaint, RectangleInsets labelInsets, double labelAngle, boolean axisLineVisible, Stroke axisLineStroke, Paint axisLinePaint, boolean tickLabelsVisible, Font tickLabelFont, Paint tickLabelPaint, RectangleInsets tickLabelInsets, boolean tickMarksVisible, float tickMarkInsideLength, float tickMarkOutsideLength, Paint tickMarkPaint, Stroke tickMarkStroke, double fixedDimension) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Axis)) {
        return false;
    }
    Axis that = (Axis) obj;
    if (visible != that.visible) {
        return false;
    }
    if (!ObjectUtilities.equal(label, that.label)) {
        return false;
    }
    if (!ObjectUtilities.equal(labelFont, that.labelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(labelPaint, that.labelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(labelInsets, that.labelInsets)) {
        return false;
    }
    if (labelAngle != that.labelAngle) {
        return false;
    }
    if (axisLineVisible != that.axisLineVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(axisLineStroke, that.axisLineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(axisLinePaint, that.axisLinePaint)) {
        return false;
    }
    if (tickLabelsVisible != that.tickLabelsVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(tickLabelFont, that.tickLabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(tickLabelPaint, that.tickLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(tickLabelInsets, that.tickLabelInsets)) {
        return false;
    }
    if (tickMarksVisible != that.tickMarksVisible) {
        return false;
    }
    if (tickMarkInsideLength != that.tickMarkInsideLength) {
        return false;
    }
    if (tickMarkOutsideLength != that.tickMarkOutsideLength) {
        return false;
    }
    if (!PaintUtilities.equal(tickMarkPaint, that.tickMarkPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(tickMarkStroke, that.tickMarkStroke)) {
        return false;
    }
    if (fixedDimension != that.fixedDimension) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Axis.java`

```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this.visible,
        this.label,
        this.labelFont,
        this.labelPaint,
        this.labelInsets,
        this.labelAngle,
        this.axisLineVisible,
        this.axisLineStroke,
        this.axisLinePaint,
        this.tickLabelsVisible,
        this.tickLabelFont,
        this.tickLabelPaint,
        this.tickLabelInsets,
        this.tickMarksVisible,
        this.tickMarkInsideLength,
        this.tickMarkOutsideLength,
        this.tickMarkPaint,
        this.tickMarkStroke,
        this.fixedDimension
    );
}
```

---

### 3. Refactored `equals` Method in `MeterPlot.java`

```java
@Override
public boolean equals(Object obj) {
    if (!super.equals(obj)) {
        return false;
    }
    MeterPlot that = (MeterPlot) obj;
    if (!ObjectUtilities.equal(this.units, that.units)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.range, that.range)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.intervals, that.intervals)) {
        return false;
    }
    if (!PaintUtilities.equal(this.dialOutlinePaint, that.dialOutlinePaint)) {
        return false;
    }
    if (this.shape != that.shape) {
        return false;
    }
    if (!PaintUtilities.equal(this.dialBackgroundPaint, that.dialBackgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.needlePaint, that.needlePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.valueFont, that.valueFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.valuePaint, that.valuePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.tickPaint, that.tickPaint)) {
        return false;
    }
    if (this.tickSize != that.tickSize) {
        return false;
    }
    if (this.tickLabelsVisible != that.tickLabelsVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFormat, that.tickLabelFormat)) {
        return false;
    }
    if (this.drawBorder != that.drawBorder) {
        return false;
    }
    if (this.meterAngle != that.meterAngle) {
        return false;
    }
    return true;
}
```",Type-3
90-1-2,src,org.jfree.chart.renderer.category,BarRenderer,drawItemLabel,857,917,src,org.jfree.chart.renderer.xy,XYBarRenderer,drawItemLabel,717,775,Type 3,"The two code snippets are as follows:

---

**Code Snippet 1 (BarRenderer.java, drawItemLabel method, lines 857-917):**

```java
protected void drawItemLabel(Graphics2D g2,
                             CategoryDataset data,
                             int row,
                             int column,
                             CategoryPlot plot,
                             CategoryItemLabelGenerator generator,
                             Rectangle2D bar,
                             boolean negative) {

    String label = generator.generateLabel(data, row, column);
    if (label == null) {
        return;  // nothing to do
    }

    Font labelFont = getItemLabelFont(row, column);
    g2.setFont(labelFont);
    Paint paint = getItemLabelPaint(row, column);
    g2.setPaint(paint);

    // find out where to place the label...
    ItemLabelPosition position = null;
    if (!negative) {
        position = getPositiveItemLabelPosition(row, column);
    }
    else {
        position = getNegativeItemLabelPosition(row, column);
    }

    // work out the label anchor point...
    Point2D anchorPoint = calculateLabelAnchorPoint(
            position.getItemLabelAnchor(), bar, plot.getOrientation());

    if (isInternalAnchor(position.getItemLabelAnchor())) {
        Shape bounds = TextUtilities.calculateRotatedStringBounds(label,
                g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(),
                position.getTextAnchor(), position.getAngle(),
                position.getRotationAnchor());

        if (bounds != null) {
            if (!bar.contains(bounds.getBounds2D())) {
                if (!negative) {
                    position = getPositiveItemLabelPositionFallback();
                }
                else {
                    position = getNegativeItemLabelPositionFallback();
                }
                if (position != null) {
                    anchorPoint = calculateLabelAnchorPoint(
                            position.getItemLabelAnchor(), bar,
                            plot.getOrientation());
                }
            }
        }

    }

    if (position != null) {
        TextUtilities.drawRotatedString(label, g2,
                (float) anchorPoint.getX(), (float) anchorPoint.getY(),
                position.getTextAnchor(), position.getAngle(),
                position.getRotationAnchor());
    }
}
```

---

**Code Snippet 2 (XYBarRenderer.java, drawItemLabel method, lines 717-775):**

```java
protected void drawItemLabel(Graphics2D g2, XYDataset dataset,
        int series, int item, XYPlot plot, XYItemLabelGenerator generator, 
        Rectangle2D bar, boolean negative) {
                                     
    if (generator == null) {
        return;  // nothing to do
    }
    String label = generator.generateLabel(dataset, series, item);
    if (label == null) {
        return;  // nothing to do   
    }
    
    Font labelFont = getItemLabelFont(series, item);
    g2.setFont(labelFont);
    Paint paint = getItemLabelPaint(series, item);
    g2.setPaint(paint);

    // find out where to place the label...
    ItemLabelPosition position = null;
    if (!negative) {
        position = getPositiveItemLabelPosition(series, item);
    }
    else {
        position = getNegativeItemLabelPosition(series, item);
    }

    // work out the label anchor point...
    Point2D anchorPoint = calculateLabelAnchorPoint(
            position.getItemLabelAnchor(), bar, plot.getOrientation());
    
    if (isInternalAnchor(position.getItemLabelAnchor())) {
        Shape bounds = TextUtilities.calculateRotatedStringBounds(label, 
                g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(),
                position.getTextAnchor(), position.getAngle(),
                position.getRotationAnchor());
        
        if (bounds != null) {
            if (!bar.contains(bounds.getBounds2D())) {
                if (!negative) {
                    position = getPositiveItemLabelPositionFallback();
                }
                else {
                    position = getNegativeItemLabelPositionFallback();
                }
                if (position != null) {
                    anchorPoint = calculateLabelAnchorPoint(
                            position.getItemLabelAnchor(), bar, 
                            plot.getOrientation());
                }
            }
        }
    
    }
    
    if (position != null) {
        TextUtilities.drawRotatedString(label, g2, 
                (float) anchorPoint.getX(), (float) anchorPoint.getY(),
                position.getTextAnchor(), position.getAngle(), 
                position.getRotationAnchor());
    }        
}
```

---

**Clone Type:**

The two code snippets are **Type-2 clones**. They are structurally identical but differ in variable names, method signatures, and dataset types (e.g., `CategoryDataset` vs. `XYDataset`, `row/column` vs. `series/item`).","**1. Extracted Method (to be placed in the common superclass):**

```java
protected void drawItemLabelCommon(Graphics2D g2,
                                   Object dataset,
                                   int seriesOrRow,
                                   int itemOrColumn,
                                   Object plot,
                                   Object generator,
                                   Rectangle2D bar,
                                   boolean negative,
                                   Font labelFont,
                                   Paint labelPaint,
                                   ItemLabelPosition positivePosition,
                                   ItemLabelPosition negativePosition,
                                   ItemLabelPosition positiveFallback,
                                   ItemLabelPosition negativeFallback,
                                   PlotOrientation orientation,
                                   Point2D anchorPoint,
                                   boolean isInternalAnchor,
                                   Shape bounds,
                                   double angle,
                                   TextAnchor textAnchor,
                                   TextAnchor rotationAnchor) {

    if (generator == null) {
        return;  // nothing to do
    }

    String label = null;
    if (generator instanceof CategoryItemLabelGenerator) {
        label = ((CategoryItemLabelGenerator) generator).generateLabel((CategoryDataset) dataset, seriesOrRow, itemOrColumn);
    } else if (generator instanceof XYItemLabelGenerator) {
        label = ((XYItemLabelGenerator) generator).generateLabel((XYDataset) dataset, seriesOrRow, itemOrColumn);
    }

    if (label == null) {
        return;  // nothing to do
    }

    g2.setFont(labelFont);
    g2.setPaint(labelPaint);

    ItemLabelPosition position = negative ? negativePosition : positivePosition;

    anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), bar, orientation);

    if (isInternalAnchor) {
        bounds = TextUtilities.calculateRotatedStringBounds(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), textAnchor, angle, rotationAnchor);

        if (bounds != null && !bar.contains(bounds.getBounds2D())) {
            position = negative ? negativeFallback : positiveFallback;
            if (position != null) {
                anchorPoint = calculateLabelAnchorPoint(position.getItemLabelAnchor(), bar, orientation);
            }
        }
    }

    if (position != null) {
        TextUtilities.drawRotatedString(label, g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(), textAnchor, angle, rotationAnchor);
    }
}
```

---

**2. Method Calls (to replace the clones in the original files):**

**In `BarRenderer.java`:**

```java
@Override
protected void drawItemLabel(Graphics2D g2,
                             CategoryDataset data,
                             int row,
                             int column,
                             CategoryPlot plot,
                             CategoryItemLabelGenerator generator,
                             Rectangle2D bar,
                             boolean negative) {

    drawItemLabelCommon(g2,
                        data,
                        row,
                        column,
                        plot,
                        generator,
                        bar,
                        negative,
                        getItemLabelFont(row, column),
                        getItemLabelPaint(row, column),
                        getPositiveItemLabelPosition(row, column),
                        getNegativeItemLabelPosition(row, column),
                        getPositiveItemLabelPositionFallback(),
                        getNegativeItemLabelPositionFallback(),
                        plot.getOrientation(),
                        null,
                        isInternalAnchor(getPositiveItemLabelPosition(row, column).getItemLabelAnchor()),
                        null,
                        getPositiveItemLabelPosition(row, column).getAngle(),
                        getPositiveItemLabelPosition(row, column).getTextAnchor(),
                        getPositiveItemLabelPosition(row, column).getRotationAnchor());
}
```

**In `XYBarRenderer.java`:**

```java
@Override
protected void drawItemLabel(Graphics2D g2,
                             XYDataset dataset,
                             int series,
                             int item,
                             XYPlot plot,
                             XYItemLabelGenerator generator,
                             Rectangle2D bar,
                             boolean negative) {

    drawItemLabelCommon(g2,
                        dataset,
                        series,
                        item,
                        plot,
                        generator,
                        bar,
                        negative,
                        getItemLabelFont(series, item),
                        getItemLabelPaint(series, item),
                        getPositiveItemLabelPosition(series, item),
                        getNegativeItemLabelPosition(series, item),
                        getPositiveItemLabelPositionFallback(),
                        getNegativeItemLabelPositionFallback(),
                        plot.getOrientation(),
                        null,
                        isInternalAnchor(getPositiveItemLabelPosition(series, item).getItemLabelAnchor()),
                        null,
                        getPositiveItemLabelPosition(series, item).getAngle(),
                        getPositiveItemLabelPosition(series, item).getTextAnchor(),
                        getPositiveItemLabelPosition(series, item).getRotationAnchor());
}
```",Type-2
93-1-2,src,org.jfree.chart.renderer.category,AbstractCategoryItemRenderer,equals,1191,1249,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,equals,1483,1537,Type 3,"### Code Snippet 1: AbstractCategoryItemRenderer.java (lines 1191-1249)

```java
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemRenderer)) {
        return false;
    }
    AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;

    if (!ObjectUtilities.equal(this.itemLabelGenerator,
            that.itemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.itemLabelGeneratorList,
            that.itemLabelGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseItemLabelGenerator,
            that.baseItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipGenerator,
            that.toolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipGeneratorList,
            that.toolTipGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseToolTipGenerator,
            that.baseToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.itemURLGenerator,
            that.itemURLGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.itemURLGeneratorList,
            that.itemURLGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseItemURLGenerator,
            that.baseItemURLGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemLabelGenerator,
            that.legendItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,
            that.legendItemToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemURLGenerator,
            that.legendItemURLGenerator)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: AbstractXYItemRenderer.java (lines 1483-1537)

```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractXYItemRenderer)) {
        return false;
    }
    AbstractXYItemRenderer that = (AbstractXYItemRenderer) obj;
    if (!ObjectUtilities.equal(this.itemLabelGenerator,
            that.itemLabelGenerator)) {
        return false;
    }
    if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseItemLabelGenerator,
            that.baseItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipGenerator,
            that.toolTipGenerator)) {
        return false;
    }
    if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseToolTipGenerator,
            that.baseToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {
        return false;
    }
    if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {
        return false;
    }
    if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {
        return false;
    }
    if (this.defaultEntityRadius != that.defaultEntityRadius) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemLabelGenerator,
            that.legendItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,
            that.legendItemToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemURLGenerator,
            that.legendItemURLGenerator)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the handling of `itemLabelGeneratorList`, `toolTipGeneratorList`, `urlGenerator`, `foregroundAnnotations`, `backgroundAnnotations`, and `defaultEntityRadius`.","### 1. Extracted Method (To be placed in the common superclass `AbstractRenderer`)

```java
protected boolean equalsRenderer(Object obj, 
        Object itemLabelGenerator, Object itemLabelGeneratorList, Object baseItemLabelGenerator,
        Object toolTipGenerator, Object toolTipGeneratorList, Object baseToolTipGenerator,
        Object urlGenerator, Object foregroundAnnotations, Object backgroundAnnotations,
        int defaultEntityRadius, Object legendItemLabelGenerator, 
        Object legendItemToolTipGenerator, Object legendItemURLGenerator) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractRenderer)) {
        return false;
    }
    AbstractRenderer that = (AbstractRenderer) obj;

    if (!ObjectUtilities.equal(itemLabelGenerator, that.itemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(itemLabelGeneratorList, that.itemLabelGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(baseItemLabelGenerator, that.baseItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(toolTipGenerator, that.toolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(toolTipGeneratorList, that.toolTipGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(baseToolTipGenerator, that.baseToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(urlGenerator, that.urlGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(foregroundAnnotations, that.foregroundAnnotations)) {
        return false;
    }
    if (!ObjectUtilities.equal(backgroundAnnotations, that.backgroundAnnotations)) {
        return false;
    }
    if (defaultEntityRadius != that.defaultEntityRadius) {
        return false;
    }
    if (!ObjectUtilities.equal(legendItemLabelGenerator, that.legendItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(legendItemToolTipGenerator, that.legendItemToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(legendItemURLGenerator, that.legendItemURLGenerator)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### 2. Refactored Method Calls

#### AbstractCategoryItemRenderer.java (lines 1191-1249)

```java
public boolean equals(Object obj) {
    return equalsRenderer(obj, 
        this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator,
        this.toolTipGenerator, this.toolTipGeneratorList, this.baseToolTipGenerator,
        this.itemURLGenerator, null, null, // No foregroundAnnotations or backgroundAnnotations
        0, // No defaultEntityRadius
        this.legendItemLabelGenerator, this.legendItemToolTipGenerator, this.legendItemURLGenerator);
}
```

---

#### AbstractXYItemRenderer.java (lines 1483-1537)

```java
public boolean equals(Object obj) {
    return equalsRenderer(obj, 
        this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator,
        this.toolTipGenerator, this.toolTipGeneratorList, this.baseToolTipGenerator,
        this.urlGenerator, this.foregroundAnnotations, this.backgroundAnnotations,
        this.defaultEntityRadius,
        this.legendItemLabelGenerator, this.legendItemToolTipGenerator, this.legendItemURLGenerator);
}
```",Type-3
100-1-2,src,org.jfree.chart.plot,PolarPlot,equals,990,1042,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,equals,1483,1537,Type 3,"### Code Snippet 1 (PolarPlot.java, `equals` method, lines 990-1042):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PolarPlot)) {
        return false;
    }
    PolarPlot that = (PolarPlot) obj;
    if (!ObjectUtilities.equal(this.axis, that.axis)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.renderer, that.renderer)) {
        return false;
    }
    if (!this.angleTickUnit.equals(that.angleTickUnit)) {
        return false;
    }
    if (this.angleGridlinesVisible != that.angleGridlinesVisible) {
        return false;
    }
    if (this.angleLabelsVisible != that.angleLabelsVisible) {
        return false;
    }
    if (!this.angleLabelFont.equals(that.angleLabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.angleLabelPaint, that.angleLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.angleGridlineStroke,
            that.angleGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(
        this.angleGridlinePaint, that.angleGridlinePaint
    )) {
        return false;
    }
    if (this.radiusGridlinesVisible != that.radiusGridlinesVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.radiusGridlineStroke,
            that.radiusGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.radiusGridlinePaint,
            that.radiusGridlinePaint)) {
        return false;
    }
    if (!this.cornerTextItems.equals(that.cornerTextItems)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (AbstractXYItemRenderer.java, `equals` method, lines 1483-1537):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractXYItemRenderer)) {
        return false;
    }
    AbstractXYItemRenderer that = (AbstractXYItemRenderer) obj;
    if (!ObjectUtilities.equal(this.itemLabelGenerator,
            that.itemLabelGenerator)) {
        return false;
    }
    if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseItemLabelGenerator,
            that.baseItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipGenerator,
            that.toolTipGenerator)) {
        return false;
    }
    if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseToolTipGenerator,
            that.baseToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {
        return false;
    }
    if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {
        return false;
    }
    if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {
        return false;
    }
    if (this.defaultEntityRadius != that.defaultEntityRadius) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemLabelGenerator,
            that.legendItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,
            that.legendItemToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemURLGenerator,
            that.legendItemURLGenerator)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are **mostly similar but with some different statements**. The structure and logic of the `equals` methods are similar, but the fields being compared and the specific checks differ between the two classes.","### 1. Extracted Method (To be placed in the common superclass, e.g., `Plot`):
```java
protected boolean equalsHelper(Object obj, Object[] fields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `PolarPlot.java`:
```java
@Override
public boolean equals(Object obj) {
    Object[] fields = {
        this.axis, this.renderer, this.angleTickUnit, this.angleGridlinesVisible,
        this.angleLabelsVisible, this.angleLabelFont, this.angleLabelPaint,
        this.angleGridlineStroke, this.angleGridlinePaint, this.radiusGridlinesVisible,
        this.radiusGridlineStroke, this.radiusGridlinePaint, this.cornerTextItems
    };
    Object[] thatFields = {
        ((PolarPlot) obj).axis, ((PolarPlot) obj).renderer, ((PolarPlot) obj).angleTickUnit,
        ((PolarPlot) obj).angleGridlinesVisible, ((PolarPlot) obj).angleLabelsVisible,
        ((PolarPlot) obj).angleLabelFont, ((PolarPlot) obj).angleLabelPaint,
        ((PolarPlot) obj).angleGridlineStroke, ((PolarPlot) obj).angleGridlinePaint,
        ((PolarPlot) obj).radiusGridlinesVisible, ((PolarPlot) obj).radiusGridlineStroke,
        ((PolarPlot) obj).radiusGridlinePaint, ((PolarPlot) obj).cornerTextItems
    };
    return equalsHelper(obj, fields, thatFields);
}
```

---

### 3. Refactored `equals` Method in `AbstractXYItemRenderer.java`:
```java
@Override
public boolean equals(Object obj) {
    Object[] fields = {
        this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator,
        this.toolTipGenerator, this.toolTipGeneratorList, this.baseToolTipGenerator,
        this.urlGenerator, this.foregroundAnnotations, this.backgroundAnnotations,
        this.defaultEntityRadius, this.legendItemLabelGenerator, this.legendItemToolTipGenerator,
        this.legendItemURLGenerator
    };
    Object[] thatFields = {
        ((AbstractXYItemRenderer) obj).itemLabelGenerator,
        ((AbstractXYItemRenderer) obj).itemLabelGeneratorList,
        ((AbstractXYItemRenderer) obj).baseItemLabelGenerator,
        ((AbstractXYItemRenderer) obj).toolTipGenerator,
        ((AbstractXYItemRenderer) obj).toolTipGeneratorList,
        ((AbstractXYItemRenderer) obj).baseToolTipGenerator,
        ((AbstractXYItemRenderer) obj).urlGenerator,
        ((AbstractXYItemRenderer) obj).foregroundAnnotations,
        ((AbstractXYItemRenderer) obj).backgroundAnnotations,
        ((AbstractXYItemRenderer) obj).defaultEntityRadius,
        ((AbstractXYItemRenderer) obj).legendItemLabelGenerator,
        ((AbstractXYItemRenderer) obj).legendItemToolTipGenerator,
        ((AbstractXYItemRenderer) obj).legendItemURLGenerator
    };
    return equalsHelper(obj, fields, thatFields);
}
```",Type-3
100-1-3,src,org.jfree.chart.plot,PolarPlot,equals,990,1042,src,org.jfree.chart.title,LegendGraphic,equals,647,695,Type 3,"### Code Snippet 1: `equals` method in `PolarPlot` class (lines 990-1042)
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PolarPlot)) {
        return false;
    }
    PolarPlot that = (PolarPlot) obj;
    if (!ObjectUtilities.equal(this.axis, that.axis)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.renderer, that.renderer)) {
        return false;
    }
    if (!this.angleTickUnit.equals(that.angleTickUnit)) {
        return false;
    }
    if (this.angleGridlinesVisible != that.angleGridlinesVisible) {
        return false;
    }
    if (this.angleLabelsVisible != that.angleLabelsVisible) {
        return false;
    }
    if (!this.angleLabelFont.equals(that.angleLabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.angleLabelPaint, that.angleLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.angleGridlineStroke,
            that.angleGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(
        this.angleGridlinePaint, that.angleGridlinePaint
    )) {
        return false;
    }
    if (this.radiusGridlinesVisible != that.radiusGridlinesVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.radiusGridlineStroke,
            that.radiusGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.radiusGridlinePaint,
            that.radiusGridlinePaint)) {
        return false;
    }
    if (!this.cornerTextItems.equals(that.cornerTextItems)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `LegendGraphic` class (lines 647-695)
```java
/**
 * Tests this <code>LegendGraphic</code> instance for equality with an
 * arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof LegendGraphic)) {
        return false;
    }
    LegendGraphic that = (LegendGraphic) obj;
    if (this.shapeVisible != that.shapeVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.shape, that.shape)) {
        return false;
    }
    if (this.shapeFilled != that.shapeFilled) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.fillPaintTransformer, 
            that.fillPaintTransformer)) {
        return false;
    }
    if (this.shapeOutlineVisible != that.shapeOutlineVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {
        return false;
    }
    if (this.shapeAnchor != that.shapeAnchor) {
        return false;
    }
    if (this.shapeLocation != that.shapeLocation) {
        return false;
    }
    if (this.lineVisible != that.lineVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.line, that.line)) {
        return false;
    }
    if (!PaintUtilities.equal(this.linePaint, that.linePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.lineStroke, that.lineStroke)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`PolarPlot` and `LegendGraphic`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractBlock` or a new utility class)
```java
protected boolean equalsHelper(Object obj, Object axis, Object renderer, Object angleTickUnit, 
        boolean angleGridlinesVisible, boolean angleLabelsVisible, Font angleLabelFont, 
        Paint angleLabelPaint, Stroke angleGridlineStroke, Paint angleGridlinePaint, 
        boolean radiusGridlinesVisible, Stroke radiusGridlineStroke, Paint radiusGridlinePaint, 
        List cornerTextItems, boolean shapeVisible, Shape shape, boolean shapeFilled, 
        Paint fillPaint, Object fillPaintTransformer, boolean shapeOutlineVisible, 
        Paint outlinePaint, Stroke outlineStroke, RectangleAnchor shapeAnchor, 
        RectangleAnchor shapeLocation, boolean lineVisible, Shape line, Paint linePaint, 
        Stroke lineStroke) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractBlock)) {
        return false;
    }
    AbstractBlock that = (AbstractBlock) obj;

    // PolarPlot-specific checks
    if (axis != null && !ObjectUtilities.equal(axis, that.axis)) {
        return false;
    }
    if (renderer != null && !ObjectUtilities.equal(renderer, that.renderer)) {
        return false;
    }
    if (angleTickUnit != null && !angleTickUnit.equals(that.angleTickUnit)) {
        return false;
    }
    if (angleGridlinesVisible != that.angleGridlinesVisible) {
        return false;
    }
    if (angleLabelsVisible != that.angleLabelsVisible) {
        return false;
    }
    if (angleLabelFont != null && !angleLabelFont.equals(that.angleLabelFont)) {
        return false;
    }
    if (angleLabelPaint != null && !PaintUtilities.equal(angleLabelPaint, that.angleLabelPaint)) {
        return false;
    }
    if (angleGridlineStroke != null && !ObjectUtilities.equal(angleGridlineStroke, that.angleGridlineStroke)) {
        return false;
    }
    if (angleGridlinePaint != null && !PaintUtilities.equal(angleGridlinePaint, that.angleGridlinePaint)) {
        return false;
    }
    if (radiusGridlinesVisible != that.radiusGridlinesVisible) {
        return false;
    }
    if (radiusGridlineStroke != null && !ObjectUtilities.equal(radiusGridlineStroke, that.radiusGridlineStroke)) {
        return false;
    }
    if (radiusGridlinePaint != null && !PaintUtilities.equal(radiusGridlinePaint, that.radiusGridlinePaint)) {
        return false;
    }
    if (cornerTextItems != null && !cornerTextItems.equals(that.cornerTextItems)) {
        return false;
    }

    // LegendGraphic-specific checks
    if (shapeVisible != that.shapeVisible) {
        return false;
    }
    if (shape != null && !ShapeUtilities.equal(shape, that.shape)) {
        return false;
    }
    if (shapeFilled != that.shapeFilled) {
        return false;
    }
    if (fillPaint != null && !PaintUtilities.equal(fillPaint, that.fillPaint)) {
        return false;
    }
    if (fillPaintTransformer != null && !ObjectUtilities.equal(fillPaintTransformer, that.fillPaintTransformer)) {
        return false;
    }
    if (shapeOutlineVisible != that.shapeOutlineVisible) {
        return false;
    }
    if (outlinePaint != null && !PaintUtilities.equal(outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (outlineStroke != null && !ObjectUtilities.equal(outlineStroke, that.outlineStroke)) {
        return false;
    }
    if (shapeAnchor != null && shapeAnchor != that.shapeAnchor) {
        return false;
    }
    if (shapeLocation != null && shapeLocation != that.shapeLocation) {
        return false;
    }
    if (lineVisible != that.lineVisible) {
        return false;
    }
    if (line != null && !ShapeUtilities.equal(line, that.line)) {
        return false;
    }
    if (linePaint != null && !PaintUtilities.equal(linePaint, that.linePaint)) {
        return false;
    }
    if (lineStroke != null && !ObjectUtilities.equal(lineStroke, that.lineStroke)) {
        return false;
    }

    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `PolarPlot` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.axis, this.renderer, this.angleTickUnit, 
        this.angleGridlinesVisible, this.angleLabelsVisible, this.angleLabelFont, 
        this.angleLabelPaint, this.angleGridlineStroke, this.angleGridlinePaint, 
        this.radiusGridlinesVisible, this.radiusGridlineStroke, this.radiusGridlinePaint, 
        this.cornerTextItems, false, null, false, null, null, false, null, null, 
        null, null, false, null, null, null);
}
```

---

### 3. Refactored `equals` Method in `LegendGraphic` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, null, null, null, false, false, null, null, null, 
        null, false, null, null, null, this.shapeVisible, this.shape, this.shapeFilled, 
        this.fillPaint, this.fillPaintTransformer, this.shapeOutlineVisible, 
        this.outlinePaint, this.outlineStroke, this.shapeAnchor, this.shapeLocation, 
        this.lineVisible, this.line, this.linePaint, this.lineStroke);
}
```",Type-3
100-2-3,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,equals,1483,1537,src,org.jfree.chart.title,LegendGraphic,equals,647,695,Type 3,"### Code Snippet 1 (AbstractXYItemRenderer.java, `equals` method, lines 1483-1537):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractXYItemRenderer)) {
        return false;
    }
    AbstractXYItemRenderer that = (AbstractXYItemRenderer) obj;
    if (!ObjectUtilities.equal(this.itemLabelGenerator,
            that.itemLabelGenerator)) {
        return false;
    }
    if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseItemLabelGenerator,
            that.baseItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipGenerator,
            that.toolTipGenerator)) {
        return false;
    }
    if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.baseToolTipGenerator,
            that.baseToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {
        return false;
    }
    if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {
        return false;
    }
    if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {
        return false;
    }
    if (this.defaultEntityRadius != that.defaultEntityRadius) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemLabelGenerator,
            that.legendItemLabelGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,
            that.legendItemToolTipGenerator)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.legendItemURLGenerator,
            that.legendItemURLGenerator)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (LegendGraphic.java, `equals` method, lines 647-695):
```java
public boolean equals(Object obj) {
    if (!(obj instanceof LegendGraphic)) {
        return false;
    }
    LegendGraphic that = (LegendGraphic) obj;
    if (this.shapeVisible != that.shapeVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.shape, that.shape)) {
        return false;
    }
    if (this.shapeFilled != that.shapeFilled) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.fillPaintTransformer, 
            that.fillPaintTransformer)) {
        return false;
    }
    if (this.shapeOutlineVisible != that.shapeOutlineVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {
        return false;
    }
    if (this.shapeAnchor != that.shapeAnchor) {
        return false;
    }
    if (this.shapeLocation != that.shapeLocation) {
        return false;
    }
    if (this.lineVisible != that.lineVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.line, that.line)) {
        return false;
    }
    if (!PaintUtilities.equal(this.linePaint, that.linePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.lineStroke, that.lineStroke)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Types:
- **Code Snippet 1**: Type-3 Clone (Mostly similar but with some different statements).
- **Code Snippet 2**: Type-3 Clone (Mostly similar but with some different statements).","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean equalsHelper(Object obj, boolean shapeVisible, Object shape, boolean shapeFilled, Object fillPaint,
                               Object fillPaintTransformer, boolean shapeOutlineVisible, Object outlinePaint,
                               Object outlineStroke, Object shapeAnchor, Object shapeLocation, boolean lineVisible,
                               Object line, Object linePaint, Object lineStroke, Object itemLabelGenerator,
                               Object itemLabelGeneratorList, Object baseItemLabelGenerator, Object toolTipGenerator,
                               Object toolTipGeneratorList, Object baseToolTipGenerator, Object urlGenerator,
                               Object foregroundAnnotations, Object backgroundAnnotations, int defaultEntityRadius,
                               Object legendItemLabelGenerator, Object legendItemToolTipGenerator,
                               Object legendItemURLGenerator) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractXYItemRenderer || obj instanceof LegendGraphic)) {
        return false;
    }
    if (obj instanceof AbstractXYItemRenderer) {
        AbstractXYItemRenderer that = (AbstractXYItemRenderer) obj;
        if (!ObjectUtilities.equal(itemLabelGenerator, that.itemLabelGenerator)) {
            return false;
        }
        if (!itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {
            return false;
        }
        if (!ObjectUtilities.equal(baseItemLabelGenerator, that.baseItemLabelGenerator)) {
            return false;
        }
        if (!ObjectUtilities.equal(toolTipGenerator, that.toolTipGenerator)) {
            return false;
        }
        if (!toolTipGeneratorList.equals(that.toolTipGeneratorList)) {
            return false;
        }
        if (!ObjectUtilities.equal(baseToolTipGenerator, that.baseToolTipGenerator)) {
            return false;
        }
        if (!ObjectUtilities.equal(urlGenerator, that.urlGenerator)) {
            return false;
        }
        if (!foregroundAnnotations.equals(that.foregroundAnnotations)) {
            return false;
        }
        if (!backgroundAnnotations.equals(that.backgroundAnnotations)) {
            return false;
        }
        if (defaultEntityRadius != that.defaultEntityRadius) {
            return false;
        }
        if (!ObjectUtilities.equal(legendItemLabelGenerator, that.legendItemLabelGenerator)) {
            return false;
        }
        if (!ObjectUtilities.equal(legendItemToolTipGenerator, that.legendItemToolTipGenerator)) {
            return false;
        }
        if (!ObjectUtilities.equal(legendItemURLGenerator, that.legendItemURLGenerator)) {
            return false;
        }
    } else if (obj instanceof LegendGraphic) {
        LegendGraphic that = (LegendGraphic) obj;
        if (shapeVisible != that.shapeVisible) {
            return false;
        }
        if (!ShapeUtilities.equal(shape, that.shape)) {
            return false;
        }
        if (shapeFilled != that.shapeFilled) {
            return false;
        }
        if (!PaintUtilities.equal(fillPaint, that.fillPaint)) {
            return false;
        }
        if (!ObjectUtilities.equal(fillPaintTransformer, that.fillPaintTransformer)) {
            return false;
        }
        if (shapeOutlineVisible != that.shapeOutlineVisible) {
            return false;
        }
        if (!PaintUtilities.equal(outlinePaint, that.outlinePaint)) {
            return false;
        }
        if (!ObjectUtilities.equal(outlineStroke, that.outlineStroke)) {
            return false;
        }
        if (shapeAnchor != that.shapeAnchor) {
            return false;
        }
        if (shapeLocation != that.shapeLocation) {
            return false;
        }
        if (lineVisible != that.lineVisible) {
            return false;
        }
        if (!ShapeUtilities.equal(line, that.line)) {
            return false;
        }
        if (!PaintUtilities.equal(linePaint, that.linePaint)) {
            return false;
        }
        if (!ObjectUtilities.equal(lineStroke, that.lineStroke)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored Method Calls:

#### In `AbstractXYItemRenderer.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, false, null, false, null, null, false, null, null, null, null, false, null, null, null,
            this.itemLabelGenerator, this.itemLabelGeneratorList, this.baseItemLabelGenerator, this.toolTipGenerator,
            this.toolTipGeneratorList, this.baseToolTipGenerator, this.urlGenerator, this.foregroundAnnotations,
            this.backgroundAnnotations, this.defaultEntityRadius, this.legendItemLabelGenerator,
            this.legendItemToolTipGenerator, this.legendItemURLGenerator);
}
```

#### In `LegendGraphic.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.shapeVisible, this.shape, this.shapeFilled, this.fillPaint, this.fillPaintTransformer,
            this.shapeOutlineVisible, this.outlinePaint, this.outlineStroke, this.shapeAnchor, this.shapeLocation,
            this.lineVisible, this.line, this.linePaint, this.lineStroke, null, null, null, null, null, null, null, null,
            null, 0, null, null, null);
}
```",Type-3
106-1-3,src,org.jfree.chart,JFreeChart,equals,1582,1632,src,org.jfree.chart.title,LegendGraphic,equals,647,695,Type 3,"### Code Snippet 1: `equals` method from `JFreeChart` class (lines 1582-1632)

```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof JFreeChart)) {
        return false;
    }
    JFreeChart that = (JFreeChart) obj;
    if (!this.renderingHints.equals(that.renderingHints)) {
        return false;
    }
    if (this.borderVisible != that.borderVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.borderStroke, that.borderStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.borderPaint, that.borderPaint)) {
        return false;
    }
    if (!this.padding.equals(that.padding)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.title, that.title)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subtitles, that.subtitles)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.plot, that.plot)) {
        return false;
    }
    if (!PaintUtilities.equal(
        this.backgroundPaint, that.backgroundPaint
    )) {
        return false;
    }
    if (!ObjectUtilities.equal(this.backgroundImage,
            that.backgroundImage)) {
        return false;
    }
    if (this.backgroundImageAlignment != that.backgroundImageAlignment) {
        return false;
    }
    if (this.backgroundImageAlpha != that.backgroundImageAlpha) {
        return false;
    }
    if (this.notify != that.notify) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `LegendGraphic` class (lines 647-695)

```java
public boolean equals(Object obj) {
    if (!(obj instanceof LegendGraphic)) {
        return false;
    }
    LegendGraphic that = (LegendGraphic) obj;
    if (this.shapeVisible != that.shapeVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.shape, that.shape)) {
        return false;
    }
    if (this.shapeFilled != that.shapeFilled) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.fillPaintTransformer, 
            that.fillPaintTransformer)) {
        return false;
    }
    if (this.shapeOutlineVisible != that.shapeOutlineVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {
        return false;
    }
    if (this.shapeAnchor != that.shapeAnchor) {
        return false;
    }
    if (this.shapeLocation != that.shapeLocation) {
        return false;
    }
    if (this.lineVisible != that.lineVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.line, that.line)) {
        return false;
    }
    if (!PaintUtilities.equal(this.linePaint, that.linePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.lineStroke, that.lineStroke)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Types:
- **Code Snippet 1 (`JFreeChart.equals`)**: **Type-3 Clone** (Mostly similar but with some different statements).
- **Code Snippet 2 (`LegendGraphic.equals`)**: **Type-3 Clone** (Mostly similar but with some different statements).","### 1. Extracted Method (to be placed in the common superclass)

```java
protected boolean equalsHelper(Object obj, Object thisInstance, boolean[] booleanFields, Object[] objectFields, Object[] enumFields) {
    if (obj == thisInstance) {
        return true;
    }
    if (obj == null || thisInstance.getClass() != obj.getClass()) {
        return false;
    }
    Object that = obj;

    for (int i = 0; i < booleanFields.length; i++) {
        if (booleanFields[i] != ((boolean[]) booleanFields[i])[i]) {
            return false;
        }
    }

    for (int i = 0; i < objectFields.length; i++) {
        if (!ObjectUtilities.equal(objectFields[i], ((Object[]) objectFields[i])[i])) {
            return false;
        }
    }

    for (int i = 0; i < enumFields.length; i++) {
        if (enumFields[i] != ((Enum[]) enumFields[i])[i]) {
            return false;
        }
    }

    return true;
}
```

### 2. Refactored `equals` Method in `JFreeChart` Class

```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        new boolean[] { this.borderVisible, this.notify },
        new Object[] {
            this.renderingHints, this.borderStroke, this.borderPaint, this.padding,
            this.title, this.subtitles, this.plot, this.backgroundPaint,
            this.backgroundImage
        },
        new Object[] { this.backgroundImageAlignment, this.backgroundImageAlpha }
    );
}
```

### 3. Refactored `equals` Method in `LegendGraphic` Class

```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        new boolean[] { this.shapeVisible, this.shapeFilled, this.shapeOutlineVisible, this.lineVisible },
        new Object[] {
            this.shape, this.fillPaint, this.fillPaintTransformer, this.outlinePaint,
            this.outlineStroke, this.line, this.linePaint, this.lineStroke
        },
        new Object[] { this.shapeAnchor, this.shapeLocation }
    );
}
```",Type-3
106-2-3,src,org.jfree.chart.plot,PolarPlot,equals,990,1042,src,org.jfree.chart.title,LegendGraphic,equals,647,695,Type 3,"### Code Snippet 1: `equals` method in `PolarPlot` class (lines 990-1042)
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PolarPlot)) {
        return false;
    }
    PolarPlot that = (PolarPlot) obj;
    if (!ObjectUtilities.equal(this.axis, that.axis)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.renderer, that.renderer)) {
        return false;
    }
    if (!this.angleTickUnit.equals(that.angleTickUnit)) {
        return false;
    }
    if (this.angleGridlinesVisible != that.angleGridlinesVisible) {
        return false;
    }
    if (this.angleLabelsVisible != that.angleLabelsVisible) {
        return false;
    }
    if (!this.angleLabelFont.equals(that.angleLabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.angleLabelPaint, that.angleLabelPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.angleGridlineStroke,
            that.angleGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(
        this.angleGridlinePaint, that.angleGridlinePaint
    )) {
        return false;
    }
    if (this.radiusGridlinesVisible != that.radiusGridlinesVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.radiusGridlineStroke,
            that.radiusGridlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.radiusGridlinePaint,
            that.radiusGridlinePaint)) {
        return false;
    }
    if (!this.cornerTextItems.equals(that.cornerTextItems)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `LegendGraphic` class (lines 647-695)
```java
/**
 * Tests this <code>LegendGraphic</code> instance for equality with an
 * arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof LegendGraphic)) {
        return false;
    }
    LegendGraphic that = (LegendGraphic) obj;
    if (this.shapeVisible != that.shapeVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.shape, that.shape)) {
        return false;
    }
    if (this.shapeFilled != that.shapeFilled) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.fillPaintTransformer, 
            that.fillPaintTransformer)) {
        return false;
    }
    if (this.shapeOutlineVisible != that.shapeOutlineVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {
        return false;
    }
    if (this.shapeAnchor != that.shapeAnchor) {
        return false;
    }
    if (this.shapeLocation != that.shapeLocation) {
        return false;
    }
    if (this.lineVisible != that.lineVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(this.line, that.line)) {
        return false;
    }
    if (!PaintUtilities.equal(this.linePaint, that.linePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.lineStroke, that.lineStroke)) {
        return false;
    }
    return super.equals(obj);    
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared and the utility methods used for equality checks.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractBlock` or a new utility class)
```java
protected boolean areObjectsEqual(
    Object obj,
    Object axis1, Object axis2,
    Object renderer1, Object renderer2,
    Object angleTickUnit1, Object angleTickUnit2,
    boolean angleGridlinesVisible1, boolean angleGridlinesVisible2,
    boolean angleLabelsVisible1, boolean angleLabelsVisible2,
    Object angleLabelFont1, Object angleLabelFont2,
    Object angleLabelPaint1, Object angleLabelPaint2,
    Object angleGridlineStroke1, Object angleGridlineStroke2,
    Object angleGridlinePaint1, Object angleGridlinePaint2,
    boolean radiusGridlinesVisible1, boolean radiusGridlinesVisible2,
    Object radiusGridlineStroke1, Object radiusGridlineStroke2,
    Object radiusGridlinePaint1, Object radiusGridlinePaint2,
    Object cornerTextItems1, Object cornerTextItems2,
    Object shape1, Object shape2,
    boolean shapeVisible1, boolean shapeVisible2,
    boolean shapeFilled1, boolean shapeFilled2,
    Object fillPaint1, Object fillPaint2,
    Object fillPaintTransformer1, Object fillPaintTransformer2,
    boolean shapeOutlineVisible1, boolean shapeOutlineVisible2,
    Object outlinePaint1, Object outlinePaint2,
    Object outlineStroke1, Object outlineStroke2,
    Object shapeAnchor1, Object shapeAnchor2,
    Object shapeLocation1, Object shapeLocation2,
    boolean lineVisible1, boolean lineVisible2,
    Object line1, Object line2,
    Object linePaint1, Object linePaint2,
    Object lineStroke1, Object lineStroke2
) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(axis1, axis2)) {
        return false;
    }
    if (!ObjectUtilities.equal(renderer1, renderer2)) {
        return false;
    }
    if (!ObjectUtilities.equal(angleTickUnit1, angleTickUnit2)) {
        return false;
    }
    if (angleGridlinesVisible1 != angleGridlinesVisible2) {
        return false;
    }
    if (angleLabelsVisible1 != angleLabelsVisible2) {
        return false;
    }
    if (!ObjectUtilities.equal(angleLabelFont1, angleLabelFont2)) {
        return false;
    }
    if (!PaintUtilities.equal(angleLabelPaint1, angleLabelPaint2)) {
        return false;
    }
    if (!ObjectUtilities.equal(angleGridlineStroke1, angleGridlineStroke2)) {
        return false;
    }
    if (!PaintUtilities.equal(angleGridlinePaint1, angleGridlinePaint2)) {
        return false;
    }
    if (radiusGridlinesVisible1 != radiusGridlinesVisible2) {
        return false;
    }
    if (!ObjectUtilities.equal(radiusGridlineStroke1, radiusGridlineStroke2)) {
        return false;
    }
    if (!PaintUtilities.equal(radiusGridlinePaint1, radiusGridlinePaint2)) {
        return false;
    }
    if (!ObjectUtilities.equal(cornerTextItems1, cornerTextItems2)) {
        return false;
    }
    if (shapeVisible1 != shapeVisible2) {
        return false;
    }
    if (!ShapeUtilities.equal(shape1, shape2)) {
        return false;
    }
    if (shapeFilled1 != shapeFilled2) {
        return false;
    }
    if (!PaintUtilities.equal(fillPaint1, fillPaint2)) {
        return false;
    }
    if (!ObjectUtilities.equal(fillPaintTransformer1, fillPaintTransformer2)) {
        return false;
    }
    if (shapeOutlineVisible1 != shapeOutlineVisible2) {
        return false;
    }
    if (!PaintUtilities.equal(outlinePaint1, outlinePaint2)) {
        return false;
    }
    if (!ObjectUtilities.equal(outlineStroke1, outlineStroke2)) {
        return false;
    }
    if (!ObjectUtilities.equal(shapeAnchor1, shapeAnchor2)) {
        return false;
    }
    if (!ObjectUtilities.equal(shapeLocation1, shapeLocation2)) {
        return false;
    }
    if (lineVisible1 != lineVisible2) {
        return false;
    }
    if (!ShapeUtilities.equal(line1, line2)) {
        return false;
    }
    if (!PaintUtilities.equal(linePaint1, linePaint2)) {
        return false;
    }
    if (!ObjectUtilities.equal(lineStroke1, lineStroke2)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `PolarPlot` Class
```java
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        this.axis, ((PolarPlot) obj).axis,
        this.renderer, ((PolarPlot) obj).renderer,
        this.angleTickUnit, ((PolarPlot) obj).angleTickUnit,
        this.angleGridlinesVisible, ((PolarPlot) obj).angleGridlinesVisible,
        this.angleLabelsVisible, ((PolarPlot) obj).angleLabelsVisible,
        this.angleLabelFont, ((PolarPlot) obj).angleLabelFont,
        this.angleLabelPaint, ((PolarPlot) obj).angleLabelPaint,
        this.angleGridlineStroke, ((PolarPlot) obj).angleGridlineStroke,
        this.angleGridlinePaint, ((PolarPlot) obj).angleGridlinePaint,
        this.radiusGridlinesVisible, ((PolarPlot) obj).radiusGridlinesVisible,
        this.radiusGridlineStroke, ((PolarPlot) obj).radiusGridlineStroke,
        this.radiusGridlinePaint, ((PolarPlot) obj).radiusGridlinePaint,
        this.cornerTextItems, ((PolarPlot) obj).cornerTextItems,
        null, null, // Shape-related fields not applicable
        false, false, // Shape-related fields not applicable
        false, false, // Shape-related fields not applicable
        null, null, // Shape-related fields not applicable
        null, null, // Shape-related fields not applicable
        false, false, // Shape-related fields not applicable
        null, null, // Shape-related fields not applicable
        null, null, // Shape-related fields not applicable
        false, false, // Shape-related fields not applicable
        null, null, // Shape-related fields not applicable
        null, null // Shape-related fields not applicable
    );
}
```

---

### 3. Refactored `equals` Method in `LegendGraphic` Class
```java
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        null, null, // Axis-related fields not applicable
        null, null, // Renderer-related fields not applicable
        null, null, // AngleTickUnit-related fields not applicable
        false, false, // AngleGridlinesVisible-related fields not applicable
        false, false, // AngleLabelsVisible-related fields not applicable
        null, null, // AngleLabelFont-related fields not applicable
        null, null, // AngleLabelPaint-related fields not applicable
        null, null, // AngleGridlineStroke-related fields not applicable
        null, null, // AngleGridlinePaint-related fields not applicable
        false, false, // RadiusGridlinesVisible-related fields not applicable
        null, null, // RadiusGridlineStroke-related fields not applicable
        null, null, // RadiusGridlinePaint-related fields not applicable
        null, null, // CornerTextItems-related fields not applicable
        this.shape, ((LegendGraphic) obj).shape,
        this.shapeVisible, ((LegendGraphic) obj).shapeVisible,
        this.shapeFilled, ((LegendGraphic) obj).shapeFilled,
        this.fillPaint, ((LegendGraphic) obj).fillPaint,
        this.fillPaintTransformer, ((LegendGraphic) obj).fillPaintTransformer,
        this.shapeOutlineVisible, ((LegendGraphic) obj).shapeOutlineVisible,
        this.outlinePaint, ((LegendGraphic) obj).outlinePaint,
        this.outlineStroke, ((LegendGraphic) obj).outlineStroke,
        this.shapeAnchor, ((LegendGraphic) obj).shapeAnchor,
        this.shapeLocation, ((LegendGraphic) obj).shapeLocation,
        this.lineVisible, ((LegendGraphic) obj).lineVisible,
        this.line, ((LegendGraphic) obj).line,
        this.linePaint, ((LegendGraphic) obj).linePaint,
        this.lineStroke, ((LegendGraphic) obj).lineStroke
    );
}
```",Type-3
126-1-2,src,org.jfree.chart.plot,CombinedDomainXYPlot,draw,427,472,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,draw,335,378,Type 3,"### Code Snippet 1: `CombinedDomainXYPlot.draw` (Lines 427-472)
```java
/**
 * Draws the plot within the specified area on a graphics device.
 *
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>
 *                permitted).
 * @param parentState  the state from the parent plot, if there is one
 *                     (<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>
 *              permitted).
 */
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {

    // set up info collection...
    if (info != null) {
        info.setPlotArea(area);
    }

    // adjust the drawing area for plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);

    setFixedRangeAxisSpaceForSubplots(null);
    AxisSpace space = calculateAxisSpace(g2, area);
    Rectangle2D dataArea = space.shrink(area, null);

    // set the width and height of non-shared axis of all sub-plots
    setFixedRangeAxisSpaceForSubplots(space);

    // draw the shared axis
    ValueAxis axis = getDomainAxis();
    RectangleEdge edge = getDomainAxisEdge();
    double cursor = RectangleEdge.coordinate(dataArea, edge);
    AxisState axisState = axis.draw(g2, cursor, area, dataArea, edge, info);
    if (parentState == null) {
        parentState = new PlotState();
    }
    parentState.getSharedAxisStates().put(axis, axisState);

    // draw all the subplots
    for (int i = 0; i < this.subplots.size(); i++) {
        XYPlot plot = (XYPlot) this.subplots.get(i);
        PlotRenderingInfo subplotInfo = null;
        if (info != null) {
            subplotInfo = new PlotRenderingInfo(info.getOwner());
            info.addSubplotInfo(subplotInfo);
        }
        plot.draw(g2, this.subplotAreas[i], anchor, parentState,
                subplotInfo);
    }

    if (info != null) {
        info.setDataArea(dataArea);
    }

}
```

---

### Code Snippet 2: `CombinedRangeCategoryPlot.draw` (Lines 335-378)
```java
/**
 * Draws the plot on a Java 2D graphics device (such as the screen or a 
 * printer).  Will perform all the placement calculations for each 
 * sub-plots and then tell these to draw themselves.
 *
 * @param g2  the graphics device.
 * @param area  the area within which the plot (including axis labels)
 *              should be drawn.
 * @param anchor  the anchor point (<code>null</code> permitted).
 * @param parentState  the parent state.
 * @param info  collects information about the drawing (<code>null</code> 
 *              permitted).
 */
public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {

    // set up info collection...
    if (info != null) {
        info.setPlotArea(area);
    }

    // adjust the drawing area for plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);

    // calculate the data area...
    AxisSpace space = calculateAxisSpace(g2, area);
    Rectangle2D dataArea = space.shrink(area, null);

    // set the width and height of non-shared axis of all sub-plots
    setFixedDomainAxisSpaceForSubplots(space);

    // draw the shared axis
    ValueAxis axis = getRangeAxis();
    RectangleEdge rangeEdge = getRangeAxisEdge();
    double cursor = RectangleEdge.coordinate(dataArea, rangeEdge);
    AxisState state = axis.draw(g2, cursor, area, dataArea, rangeEdge, 
            info);
    if (parentState == null) {
        parentState = new PlotState();
    }
    parentState.getSharedAxisStates().put(axis, state);
    
    // draw all the charts
    for (int i = 0; i < this.subplots.size(); i++) {
        CategoryPlot plot = (CategoryPlot) this.subplots.get(i);
        PlotRenderingInfo subplotInfo = null;
        if (info != null) {
            subplotInfo = new PlotRenderingInfo(info.getOwner());
            info.addSubplotInfo(subplotInfo);
        }
        plot.draw(g2, this.subplotArea[i], null, parentState, subplotInfo);
    }

    if (info != null) {
        info.setDataArea(dataArea);
    }

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the handling of `subplots` (e.g., `XYPlot` vs. `CategoryPlot`), method calls (`setFixedRangeAxisSpaceForSubplots` vs. `setFixedDomainAxisSpaceForSubplots`), and axis handling (`getDomainAxis` vs. `getRangeAxis`).","### 1. Extracted Method (To be placed in the superclass `Plot`):
```java
/**
 * Draws the plot within the specified area on a graphics device.
 *
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>
 *                permitted).
 * @param parentState  the state from the parent plot, if there is one
 *                     (<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>
 *              permitted).
 * @param subplots  the list of subplots.
 * @param subplotAreas  the array of subplot areas.
 * @param axis  the shared axis.
 * @param edge  the edge of the shared axis.
 * @param calculateAxisSpace  the method reference to calculate axis space.
 * @param setFixedAxisSpaceForSubplots  the method reference to set fixed axis space for subplots.
 * @param drawSubplot  the method reference to draw a subplot.
 */
protected void drawSharedAxisPlot(Graphics2D g2,
                                  Rectangle2D area,
                                  Point2D anchor,
                                  PlotState parentState,
                                  PlotRenderingInfo info,
                                  List subplots,
                                  Rectangle2D[] subplotAreas,
                                  ValueAxis axis,
                                  RectangleEdge edge,
                                  Function<Rectangle2D, AxisSpace> calculateAxisSpace,
                                  Consumer<AxisSpace> setFixedAxisSpaceForSubplots,
                                  BiConsumer<Integer, PlotRenderingInfo> drawSubplot) {

    // set up info collection...
    if (info != null) {
        info.setPlotArea(area);
    }

    // adjust the drawing area for plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);

    // calculate the data area...
    AxisSpace space = calculateAxisSpace.apply(area);
    Rectangle2D dataArea = space.shrink(area, null);

    // set the width and height of non-shared axis of all sub-plots
    setFixedAxisSpaceForSubplots.accept(space);

    // draw the shared axis
    double cursor = RectangleEdge.coordinate(dataArea, edge);
    AxisState axisState = axis.draw(g2, cursor, area, dataArea, edge, info);
    if (parentState == null) {
        parentState = new PlotState();
    }
    parentState.getSharedAxisStates().put(axis, axisState);

    // draw all the subplots
    for (int i = 0; i < subplots.size(); i++) {
        PlotRenderingInfo subplotInfo = null;
        if (info != null) {
            subplotInfo = new PlotRenderingInfo(info.getOwner());
            info.addSubplotInfo(subplotInfo);
        }
        drawSubplot.accept(i, subplotInfo);
    }

    if (info != null) {
        info.setDataArea(dataArea);
    }
}
```

---

### 2. Refactored Method Calls:

#### In `CombinedDomainXYPlot.draw`:
```java
@Override
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {

    drawSharedAxisPlot(
        g2,
        area,
        anchor,
        parentState,
        info,
        this.subplots,
        this.subplotAreas,
        getDomainAxis(),
        getDomainAxisEdge(),
        a -> calculateAxisSpace(g2, a),
        s -> setFixedRangeAxisSpaceForSubplots(s),
        (i, subplotInfo) -> {
            XYPlot plot = (XYPlot) this.subplots.get(i);
            plot.draw(g2, this.subplotAreas[i], anchor, parentState, subplotInfo);
        }
    );
}
```

---

#### In `CombinedRangeCategoryPlot.draw`:
```java
@Override
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {

    drawSharedAxisPlot(
        g2,
        area,
        anchor,
        parentState,
        info,
        this.subplots,
        this.subplotArea,
        getRangeAxis(),
        getRangeAxisEdge(),
        a -> calculateAxisSpace(g2, a),
        s -> setFixedDomainAxisSpaceForSubplots(s),
        (i, subplotInfo) -> {
            CategoryPlot plot = (CategoryPlot) this.subplots.get(i);
            plot.draw(g2, this.subplotArea[i], null, parentState, subplotInfo);
        }
    );
}
```",Type-3
126-1-3,src,org.jfree.chart.plot,CombinedDomainXYPlot,draw,427,472,src,org.jfree.chart.plot,CombinedRangeXYPlot,draw,372,418,Type 3,"### Code Snippet 1: `CombinedDomainXYPlot.draw` (Lines 427-472)
```java
/**
 * Draws the plot within the specified area on a graphics device.
 *
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>
 *                permitted).
 * @param parentState  the state from the parent plot, if there is one
 *                     (<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>
 *              permitted).
 */
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {

    // set up info collection...
    if (info != null) {
        info.setPlotArea(area);
    }

    // adjust the drawing area for plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);

    setFixedRangeAxisSpaceForSubplots(null);
    AxisSpace space = calculateAxisSpace(g2, area);
    Rectangle2D dataArea = space.shrink(area, null);

    // set the width and height of non-shared axis of all sub-plots
    setFixedRangeAxisSpaceForSubplots(space);

    // draw the shared axis
    ValueAxis axis = getDomainAxis();
    RectangleEdge edge = getDomainAxisEdge();
    double cursor = RectangleEdge.coordinate(dataArea, edge);
    AxisState axisState = axis.draw(g2, cursor, area, dataArea, edge, info);
    if (parentState == null) {
        parentState = new PlotState();
    }
    parentState.getSharedAxisStates().put(axis, axisState);

    // draw all the subplots
    for (int i = 0; i < this.subplots.size(); i++) {
        XYPlot plot = (XYPlot) this.subplots.get(i);
        PlotRenderingInfo subplotInfo = null;
        if (info != null) {
            subplotInfo = new PlotRenderingInfo(info.getOwner());
            info.addSubplotInfo(subplotInfo);
        }
        plot.draw(g2, this.subplotAreas[i], anchor, parentState,
                subplotInfo);
    }

    if (info != null) {
        info.setDataArea(dataArea);
    }

}
```

---

### Code Snippet 2: `CombinedRangeXYPlot.draw` (Lines 372-418)
```java
/**
 * Draws the plot within the specified area on a graphics device.
 *
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>
 *                permitted).
 * @param parentState  the state from the parent plot, if there is one
 *                     (<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>
 *              permitted).
 */
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {

    // set up info collection...
    if (info != null) {
        info.setPlotArea(area);
    }

    // adjust the drawing area for plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);

    AxisSpace space = calculateAxisSpace(g2, area);
    Rectangle2D dataArea = space.shrink(area, null);
    //this.axisOffset.trim(dataArea);

    // set the width and height of non-shared axis of all sub-plots
    setFixedDomainAxisSpaceForSubplots(space);

    // draw the shared axis
    ValueAxis axis = getRangeAxis();
    RectangleEdge edge = getRangeAxisEdge();
    double cursor = RectangleEdge.coordinate(dataArea, edge);
    AxisState axisState = axis.draw(g2, cursor, area, dataArea, edge, info);

    if (parentState == null) {
        parentState = new PlotState();
    }
    parentState.getSharedAxisStates().put(axis, axisState);

    // draw all the charts
    for (int i = 0; i < this.subplots.size(); i++) {
        XYPlot plot = (XYPlot) this.subplots.get(i);
        PlotRenderingInfo subplotInfo = null;
        if (info != null) {
            subplotInfo = new PlotRenderingInfo(info.getOwner());
            info.addSubplotInfo(subplotInfo);
        }
        plot.draw(g2, this.subplotAreas[i], anchor, parentState,
                subplotInfo);
    }

    if (info != null) {
        info.setDataArea(dataArea);
    }

}
```

---

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements, such as:
- `setFixedRangeAxisSpaceForSubplots` in `CombinedDomainXYPlot` vs. `setFixedDomainAxisSpaceForSubplots` in `CombinedRangeXYPlot`.
- `getDomainAxis` and `getDomainAxisEdge` in `CombinedDomainXYPlot` vs. `getRangeAxis` and `getRangeAxisEdge` in `CombinedRangeXYPlot`.
- Minor differences in comments and variable names.","### 1. Extracted Method (To be placed in the superclass `XYPlot`)
```java
/**
 * Draws the plot within the specified area on a graphics device.
 *
 * @param g2  the graphics device.
 * @param area  the plot area (in Java2D space).
 * @param anchor  an anchor point in Java2D space (<code>null</code>
 *                permitted).
 * @param parentState  the state from the parent plot, if there is one
 *                     (<code>null</code> permitted).
 * @param info  collects chart drawing information (<code>null</code>
 *              permitted).
 * @param axis  the shared axis.
 * @param edge  the edge of the shared axis.
 * @param subplots  the list of subplots.
 * @param subplotAreas  the areas of the subplots.
 * @param setFixedAxisSpace  a method reference to set the fixed axis space for subplots.
 */
protected void drawSharedAxisPlot(Graphics2D g2,
                                  Rectangle2D area,
                                  Point2D anchor,
                                  PlotState parentState,
                                  PlotRenderingInfo info,
                                  ValueAxis axis,
                                  RectangleEdge edge,
                                  List subplots,
                                  Rectangle2D[] subplotAreas,
                                  java.util.function.Consumer<AxisSpace> setFixedAxisSpace) {

    // set up info collection...
    if (info != null) {
        info.setPlotArea(area);
    }

    // adjust the drawing area for plot insets (if any)...
    RectangleInsets insets = getInsets();
    insets.trim(area);

    AxisSpace space = calculateAxisSpace(g2, area);
    Rectangle2D dataArea = space.shrink(area, null);

    // set the width and height of non-shared axis of all sub-plots
    setFixedAxisSpace.accept(space);

    // draw the shared axis
    double cursor = RectangleEdge.coordinate(dataArea, edge);
    AxisState axisState = axis.draw(g2, cursor, area, dataArea, edge, info);

    if (parentState == null) {
        parentState = new PlotState();
    }
    parentState.getSharedAxisStates().put(axis, axisState);

    // draw all the subplots
    for (int i = 0; i < subplots.size(); i++) {
        XYPlot plot = (XYPlot) subplots.get(i);
        PlotRenderingInfo subplotInfo = null;
        if (info != null) {
            subplotInfo = new PlotRenderingInfo(info.getOwner());
            info.addSubplotInfo(subplotInfo);
        }
        plot.draw(g2, subplotAreas[i], anchor, parentState, subplotInfo);
    }

    if (info != null) {
        info.setDataArea(dataArea);
    }
}
```

---

### 2. Method Calls (Replacing Clones in Original Files)

#### In `CombinedDomainXYPlot.draw`:
```java
@Override
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {
    drawSharedAxisPlot(
        g2,
        area,
        anchor,
        parentState,
        info,
        getDomainAxis(),
        getDomainAxisEdge(),
        this.subplots,
        this.subplotAreas,
        this::setFixedRangeAxisSpaceForSubplots
    );
}
```

#### In `CombinedRangeXYPlot.draw`:
```java
@Override
public void draw(Graphics2D g2,
                 Rectangle2D area,
                 Point2D anchor,
                 PlotState parentState,
                 PlotRenderingInfo info) {
    drawSharedAxisPlot(
        g2,
        area,
        anchor,
        parentState,
        info,
        getRangeAxis(),
        getRangeAxisEdge(),
        this.subplots,
        this.subplotAreas,
        this::setFixedDomainAxisSpaceForSubplots
    );
}
```",Type-3
129-1-2,src,org.jfree.chart.axis,CategoryAxis,equals,1184,1227,src,org.jfree.chart.plot,DefaultDrawingSupplier,equals,345,389,Type 3,"### Code Snippet 1: `equals` method in `CategoryAxis` class (lines 1184-1227)

```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryAxis that = (CategoryAxis) obj;
    if (that.lowerMargin != this.lowerMargin) {
        return false;
    }
    if (that.upperMargin != this.upperMargin) {
        return false;
    }
    if (that.categoryMargin != this.categoryMargin) {
        return false;
    }
    if (that.maximumCategoryLabelWidthRatio
            != this.maximumCategoryLabelWidthRatio) {
        return false;
    }
    if (that.categoryLabelPositionOffset
            != this.categoryLabelPositionOffset) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelPositions,
            this.categoryLabelPositions)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelToolTips,
            this.categoryLabelToolTips)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFontMap,
            that.tickLabelFontMap)) {
        return false;
    }
    if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)

---

### Code Snippet 2: `equals` method in `DefaultDrawingSupplier` class (lines 345-389)

```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof DefaultDrawingSupplier)) {
        return false;
    }

    DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;

    if (!Arrays.equals(this.paintSequence, that.paintSequence)) {
        return false;
    }
    if (this.paintIndex != that.paintIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlinePaintSequence, 
            that.outlinePaintSequence)) {
        return false;
    }
    if (this.outlinePaintIndex != that.outlinePaintIndex) {
        return false;
    }
    if (!Arrays.equals(this.strokeSequence, that.strokeSequence)) {
        return false;
    }
    if (this.strokeIndex != that.strokeIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlineStrokeSequence, 
            that.outlineStrokeSequence)) {
        return false;
    }
    if (this.outlineStrokeIndex != that.outlineStrokeIndex) {
        return false;   
    }
    if (!equalShapes(this.shapeSequence, that.shapeSequence)) {
        return false;
    }
    if (this.shapeIndex != that.shapeIndex) {
        return false;
    }
    return true;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (to be placed in the common superclass)

```java
/**
 * Compares two objects for equality by checking their fields and properties.
 *
 * @param obj  the object to compare with.
 * @param lowerMargin  the lower margin of the current object.
 * @param upperMargin  the upper margin of the current object.
 * @param categoryMargin  the category margin of the current object.
 * @param maximumCategoryLabelWidthRatio  the maximum category label width ratio of the current object.
 * @param categoryLabelPositionOffset  the category label position offset of the current object.
 * @param categoryLabelPositions  the category label positions of the current object.
 * @param categoryLabelToolTips  the category label tooltips of the current object.
 * @param tickLabelFontMap  the tick label font map of the current object.
 * @param tickLabelPaintMap  the tick label paint map of the current object.
 * @param paintSequence  the paint sequence of the current object.
 * @param paintIndex  the paint index of the current object.
 * @param outlinePaintSequence  the outline paint sequence of the current object.
 * @param outlinePaintIndex  the outline paint index of the current object.
 * @param strokeSequence  the stroke sequence of the current object.
 * @param strokeIndex  the stroke index of the current object.
 * @param outlineStrokeSequence  the outline stroke sequence of the current object.
 * @param outlineStrokeIndex  the outline stroke index of the current object.
 * @param shapeSequence  the shape sequence of the current object.
 * @param shapeIndex  the shape index of the current object.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj,
                               double lowerMargin, double upperMargin, double categoryMargin,
                               float maximumCategoryLabelWidthRatio, int categoryLabelPositionOffset,
                               Object categoryLabelPositions, Object categoryLabelToolTips,
                               Map tickLabelFontMap, Map tickLabelPaintMap,
                               Paint[] paintSequence, int paintIndex,
                               Paint[] outlinePaintSequence, int outlinePaintIndex,
                               Stroke[] strokeSequence, int strokeIndex,
                               Stroke[] outlineStrokeSequence, int outlineStrokeIndex,
                               Shape[] shapeSequence, int shapeIndex) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CategoryAxis) && !(obj instanceof DefaultDrawingSupplier)) {
        return false;
    }

    if (obj instanceof CategoryAxis) {
        CategoryAxis that = (CategoryAxis) obj;
        if (that.lowerMargin != lowerMargin) {
            return false;
        }
        if (that.upperMargin != upperMargin) {
            return false;
        }
        if (that.categoryMargin != categoryMargin) {
            return false;
        }
        if (that.maximumCategoryLabelWidthRatio != maximumCategoryLabelWidthRatio) {
            return false;
        }
        if (that.categoryLabelPositionOffset != categoryLabelPositionOffset) {
            return false;
        }
        if (!ObjectUtilities.equal(that.categoryLabelPositions, categoryLabelPositions)) {
            return false;
        }
        if (!ObjectUtilities.equal(that.categoryLabelToolTips, categoryLabelToolTips)) {
            return false;
        }
        if (!ObjectUtilities.equal(that.tickLabelFontMap, tickLabelFontMap)) {
            return false;
        }
        if (!equalPaintMaps(that.tickLabelPaintMap, tickLabelPaintMap)) {
            return false;
        }
    } else if (obj instanceof DefaultDrawingSupplier) {
        DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;
        if (!Arrays.equals(that.paintSequence, paintSequence)) {
            return false;
        }
        if (that.paintIndex != paintIndex) {
            return false;
        }
        if (!Arrays.equals(that.outlinePaintSequence, outlinePaintSequence)) {
            return false;
        }
        if (that.outlinePaintIndex != outlinePaintIndex) {
            return false;
        }
        if (!Arrays.equals(that.strokeSequence, strokeSequence)) {
            return false;
        }
        if (that.strokeIndex != strokeIndex) {
            return false;
        }
        if (!Arrays.equals(that.outlineStrokeSequence, outlineStrokeSequence)) {
            return false;
        }
        if (that.outlineStrokeIndex != outlineStrokeIndex) {
            return false;
        }
        if (!equalShapes(that.shapeSequence, shapeSequence)) {
            return false;
        }
        if (that.shapeIndex != shapeIndex) {
            return false;
        }
    }

    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryAxis` Class

```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj,
                        this.lowerMargin, this.upperMargin, this.categoryMargin,
                        this.maximumCategoryLabelWidthRatio, this.categoryLabelPositionOffset,
                        this.categoryLabelPositions, this.categoryLabelToolTips,
                        this.tickLabelFontMap, this.tickLabelPaintMap,
                        null, 0, null, 0, null, 0, null, 0, null, 0);
}
```

---

### 3. Refactored `equals` Method in `DefaultDrawingSupplier` Class

```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj,
                        0, 0, 0, 0, 0, null, null, null, null,
                        this.paintSequence, this.paintIndex,
                        this.outlinePaintSequence, this.outlinePaintIndex,
                        this.strokeSequence, this.strokeIndex,
                        this.outlineStrokeSequence, this.outlineStrokeIndex,
                        this.shapeSequence, this.shapeIndex);
}
```",Type-3
129-1-3,src,org.jfree.chart.axis,CategoryAxis,equals,1184,1227,src,org.jfree.chart.renderer.xy,CandlestickRenderer,equals,884,923,Type 3,"### Code Snippet 1: `equals` method from `CategoryAxis` class (lines 1184-1227)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryAxis that = (CategoryAxis) obj;
    if (that.lowerMargin != this.lowerMargin) {
        return false;
    }
    if (that.upperMargin != this.upperMargin) {
        return false;
    }
    if (that.categoryMargin != this.categoryMargin) {
        return false;
    }
    if (that.maximumCategoryLabelWidthRatio
            != this.maximumCategoryLabelWidthRatio) {
        return false;
    }
    if (that.categoryLabelPositionOffset
            != this.categoryLabelPositionOffset) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelPositions,
            this.categoryLabelPositions)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelToolTips,
            this.categoryLabelToolTips)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFontMap,
            that.tickLabelFontMap)) {
        return false;
    }
    if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `CandlestickRenderer` class (lines 884-923)
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CandlestickRenderer)) {
        return false;
    }
    CandlestickRenderer that = (CandlestickRenderer) obj;
    if (this.candleWidth != that.candleWidth) {
        return false;
    }
    if (!PaintUtilities.equal(this.upPaint, that.upPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.downPaint, that.downPaint)) {
        return false;
    }
    if (this.drawVolume != that.drawVolume) {
        return false;
    }
    if (this.maxCandleWidthInMilliseconds
            != that.maxCandleWidthInMilliseconds) {
        return false;
    }
    if (this.autoWidthMethod != that.autoWidthMethod) {
        return false;
    }
    if (this.autoWidthFactor != that.autoWidthFactor) {
        return false;
    }
    if (this.autoWidthGap != that.autoWidthGap) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (!PaintUtilities.equal(this.volumePaint, that.volumePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`lowerMargin`, `upperMargin`, etc., in `CategoryAxis` vs. `candleWidth`, `upPaint`, etc., in `CandlestickRenderer`) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality by checking their fields.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * @return true if all fields are equal, false otherwise.
 */
protected boolean compareFields(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

### 2. Updated `equals` Method in `CategoryAxis`
```java
@Override
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        {lowerMargin, ((CategoryAxis) obj).lowerMargin},
    });
}
```",Type-3
129-1-4,src,org.jfree.chart.axis,CategoryAxis,equals,1184,1227,src,org.jfree.chart.renderer.xy,StandardXYItemRenderer,equals,1006,1048,Type 3,"```java
// Code Snippet 1: Method equals in CategoryAxis.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryAxis that = (CategoryAxis) obj;
    if (that.lowerMargin != this.lowerMargin) {
        return false;
    }
    if (that.upperMargin != this.upperMargin) {
        return false;
    }
    if (that.categoryMargin != this.categoryMargin) {
        return false;
    }
    if (that.maximumCategoryLabelWidthRatio
            != this.maximumCategoryLabelWidthRatio) {
        return false;
    }
    if (that.categoryLabelPositionOffset
            != this.categoryLabelPositionOffset) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelPositions,
            this.categoryLabelPositions)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelToolTips,
            this.categoryLabelToolTips)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFontMap,
            that.tickLabelFontMap)) {
        return false;
    }
    if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: Method equals in StandardXYItemRenderer.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYItemRenderer)) {
        return false;
    }
    StandardXYItemRenderer that = (StandardXYItemRenderer) obj;
    if (this.baseShapesVisible != that.baseShapesVisible) {
        return false;
    }
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (this.plotImages != that.plotImages) {
        return false;
    }
    if (this.plotDiscontinuous != that.plotDiscontinuous) {
        return false;
    }
    if (this.gapThresholdType != that.gapThresholdType) {
        return false;
    }
    if (this.gapThreshold != that.gapThreshold) {
        return false;
    }
    if (!ObjectUtilities.equal(this.shapesFilled, that.shapesFilled)) {
        return false;
    }
    if (!this.seriesShapesFilled.equals(that.seriesShapesFilled)) {
        return false;
    }
    if (this.baseShapesFilled != that.baseShapesFilled) {
        return false;
    }
    if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;
    }
    return super.equals(obj);
}
```

Clone Type: **Type-3 (Mostly similar but with some different statements)**","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractRenderer or a relevant superclass)
protected boolean equalsHelper(Object obj, Object thisInstance, Class<?> clazz, Object... fields) {
    if (obj == thisInstance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!((Double) thisField).equals(thatField)) {
                return false;
            }
        } else if (thisField instanceof Boolean && thatField instanceof Boolean) {
            if (!((Boolean) thisField).equals(thatField)) {
                return false;
            }
        } else if (!ObjectUtilities.equal(thisField, thatField)) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored equals method in CategoryAxis.java
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        CategoryAxis.class,
        this.lowerMargin, ((CategoryAxis) obj).lowerMargin,
        this.upperMargin, ((CategoryAxis) obj).upperMargin,
        this.categoryMargin, ((CategoryAxis) obj).categoryMargin,
        this.maximumCategoryLabelWidthRatio, ((CategoryAxis) obj).maximumCategoryLabelWidthRatio,
        this.categoryLabelPositionOffset, ((CategoryAxis) obj).categoryLabelPositionOffset,
        this.categoryLabelPositions, ((CategoryAxis) obj).categoryLabelPositions,
        this.categoryLabelToolTips, ((CategoryAxis) obj).categoryLabelToolTips,
        this.tickLabelFontMap, ((CategoryAxis) obj).tickLabelFontMap,
        this.tickLabelPaintMap, ((CategoryAxis) obj).tickLabelPaintMap
    ) && super.equals(obj);
}
```

```java
// 3. Refactored equals method in StandardXYItemRenderer.java
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        StandardXYItemRenderer.class,
        this.baseShapesVisible, ((StandardXYItemRenderer) obj).baseShapesVisible,
        this.plotLines, ((StandardXYItemRenderer) obj).plotLines,
        this.plotImages, ((StandardXYItemRenderer) obj).plotImages,
        this.plotDiscontinuous, ((StandardXYItemRenderer) obj).plotDiscontinuous,
        this.gapThresholdType, ((StandardXYItemRenderer) obj).gapThresholdType,
        this.gapThreshold, ((StandardXYItemRenderer) obj).gapThreshold,
        this.shapesFilled, ((StandardXYItemRenderer) obj).shapesFilled,
        this.seriesShapesFilled, ((StandardXYItemRenderer) obj).seriesShapesFilled,
        this.baseShapesFilled, ((StandardXYItemRenderer) obj).baseShapesFilled,
        this.drawSeriesLineAsPath, ((StandardXYItemRenderer) obj).drawSeriesLineAsPath,
        this.legendLine, ((StandardXYItemRenderer) obj).legendLine
    ) && super.equals(obj);
}
```",Type-3
129-1-5,src,org.jfree.chart.axis,CategoryAxis,equals,1184,1227,src,org.jfree.chart.title,TextTitle,equals,826,861,Type 3,"```java
// Code snippet from CategoryAxis.java (lines 1184-1227)
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryAxis that = (CategoryAxis) obj;
    if (that.lowerMargin != this.lowerMargin) {
        return false;
    }
    if (that.upperMargin != this.upperMargin) {
        return false;
    }
    if (that.categoryMargin != this.categoryMargin) {
        return false;
    }
    if (that.maximumCategoryLabelWidthRatio
            != this.maximumCategoryLabelWidthRatio) {
        return false;
    }
    if (that.categoryLabelPositionOffset
            != this.categoryLabelPositionOffset) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelPositions,
            this.categoryLabelPositions)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelToolTips,
            this.categoryLabelToolTips)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFontMap,
            that.tickLabelFontMap)) {
        return false;
    }
    if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {
        return false;
    }
    return true;
}
```

```java
// Code snippet from TextTitle.java (lines 826-861)
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TextTitle)) {
        return false;
    }
    TextTitle that = (TextTitle) obj;
    if (!ObjectUtilities.equal(this.text, that.text)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.font, that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.textAlignment != that.textAlignment) {
        return false;
    }
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) {
        return false;
    }
    if (this.expandToFitSpace != that.expandToFitSpace) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// Extracted method to be placed in the common superclass (e.g., AbstractTitle or a new utility class)
protected boolean commonEquals(Object obj, Object thisInstance, Class<?> clazz, 
                               Object[] fieldsThis, Object[] fieldsThat, 
                               boolean[] primitiveComparisons, 
                               ObjectUtilities[] objectComparisons) {
    if (obj == thisInstance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);

    for (int i = 0; i < primitiveComparisons.length; i++) {
        if (primitiveComparisons[i] != fieldsThat[i]) {
            return false;
        }
    }

    for (int i = 0; i < objectComparisons.length; i++) {
        if (!ObjectUtilities.equal(fieldsThis[i], fieldsThat[i])) {
            return false;
        }
    }

    return true;
}
```

```java
// Refactored equals method in CategoryAxis.java
public boolean equals(Object obj) {
    return commonEquals(obj, this, CategoryAxis.class, 
                        new Object[] { this.lowerMargin, this.upperMargin, this.categoryMargin, 
                                       this.maximumCategoryLabelWidthRatio, this.categoryLabelPositionOffset, 
                                       this.categoryLabelPositions, this.categoryLabelToolTips, 
                                       this.tickLabelFontMap, this.tickLabelPaintMap },
                        new Object[] { that.lowerMargin, that.upperMargin, that.categoryMargin, 
                                       that.maximumCategoryLabelWidthRatio, that.categoryLabelPositionOffset, 
                                       that.categoryLabelPositions, that.categoryLabelToolTips, 
                                       that.tickLabelFontMap, that.tickLabelPaintMap },
                        new boolean[] { },
                        new ObjectUtilities[] { });
}
```

```java
// Refactored equals method in TextTitle.java
public boolean equals(Object obj) {
    return commonEquals(obj, this, TextTitle.class, 
                        new Object[] { this.text, this.font, this.paint, 
                                       this.textAlignment, this.backgroundPaint, 
                                       this.maximumLinesToDisplay, this.expandToFitSpace, 
                                       this.toolTipText, this.urlText },
                        new Object[] { that.text, that.font, that.paint, 
                                       that.textAlignment, that.backgroundPaint, 
                                       that.maximumLinesToDisplay, that.expandToFitSpace, 
                                       that.toolTipText, that.urlText },
                        new boolean[] { },
                        new ObjectUtilities[] { });
}
```",Type-3
129-2-3,src,org.jfree.chart.plot,DefaultDrawingSupplier,equals,345,389,src,org.jfree.chart.renderer.xy,CandlestickRenderer,equals,884,923,Type 3,"### Code Snippet 1: `equals` method from `DefaultDrawingSupplier` class
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof DefaultDrawingSupplier)) {
        return false;
    }

    DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;

    if (!Arrays.equals(this.paintSequence, that.paintSequence)) {
        return false;
    }
    if (this.paintIndex != that.paintIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlinePaintSequence, 
            that.outlinePaintSequence)) {
        return false;
    }
    if (this.outlinePaintIndex != that.outlinePaintIndex) {
        return false;
    }
    if (!Arrays.equals(this.strokeSequence, that.strokeSequence)) {
        return false;
    }
    if (this.strokeIndex != that.strokeIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlineStrokeSequence, 
            that.outlineStrokeSequence)) {
        return false;
    }
    if (this.outlineStrokeIndex != that.outlineStrokeIndex) {
        return false;   
    }
    if (!equalShapes(this.shapeSequence, that.shapeSequence)) {
        return false;
    }
    if (this.shapeIndex != that.shapeIndex) {
        return false;
    }
    return true;

}
```

---

### Code Snippet 2: `equals` method from `CandlestickRenderer` class
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CandlestickRenderer)) {
        return false;
    }
    CandlestickRenderer that = (CandlestickRenderer) obj;
    if (this.candleWidth != that.candleWidth) {
        return false;
    }
    if (!PaintUtilities.equal(this.upPaint, that.upPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.downPaint, that.downPaint)) {
        return false;
    }
    if (this.drawVolume != that.drawVolume) {
        return false;
    }
    if (this.maxCandleWidthInMilliseconds
            != that.maxCandleWidthInMilliseconds) {
        return false;
    }
    if (this.autoWidthMethod != that.autoWidthMethod) {
        return false;
    }
    if (this.autoWidthFactor != that.autoWidthFactor) {
        return false;
    }
    if (this.autoWidthGap != that.autoWidthGap) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (!PaintUtilities.equal(this.volumePaint, that.volumePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on their respective fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param paintSequence  the paint sequence of the current object.
 * @param paintIndex  the paint index of the current object.
 * @param outlinePaintSequence  the outline paint sequence of the current object.
 * @param outlinePaintIndex  the outline paint index of the current object.
 * @param strokeSequence  the stroke sequence of the current object.
 * @param strokeIndex  the stroke index of the current object.
 * @param outlineStrokeSequence  the outline stroke sequence of the current object.
 * @param outlineStrokeIndex  the outline stroke index of the current object.
 * @param shapeSequence  the shape sequence of the current object.
 * @param shapeIndex  the shape index of the current object.
 * @param equalShapesMethod  a method reference to compare shape arrays.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean isEqual(Object obj, Paint[] paintSequence, int paintIndex,
                          Paint[] outlinePaintSequence, int outlinePaintIndex,
                          Stroke[] strokeSequence, int strokeIndex,
                          Stroke[] outlineStrokeSequence, int outlineStrokeIndex,
                          Shape[] shapeSequence, int shapeIndex,
                          BiFunction<Shape[], Shape[], Boolean> equalShapesMethod) {
    if (obj == this) {
        return true;
    }

    if (!(obj instanceof DefaultDrawingSupplier)) {
        return false;
    }

    DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;

    if (!Arrays.equals(paintSequence, that.paintSequence)) {
        return false;
    }
    if (paintIndex != that.paintIndex) {
        return false;
    }
    if (!Arrays.equals(outlinePaintSequence, that.outlinePaintSequence)) {
        return false;
    }
    if (outlinePaintIndex != that.outlinePaintIndex) {
        return false;
    }
    if (!Arrays.equals(strokeSequence, that.strokeSequence)) {
        return false;
    }
    if (strokeIndex != that.strokeIndex) {
        return false;
    }
    if (!Arrays.equals(outlineStrokeSequence, that.outlineStrokeSequence)) {
        return false;
    }
    if (outlineStrokeIndex != that.outlineStrokeIndex) {
        return false;
    }
    if (!equalShapesMethod.apply(shapeSequence, that.shapeSequence)) {
        return false;
    }
    if (shapeIndex != that.shapeIndex) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DefaultDrawingSupplier`
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, this.paintSequence, this.paintIndex,
                   this.outlinePaintSequence, this.outlinePaintIndex,
                   this.strokeSequence, this.strokeIndex,
                   this.outlineStrokeSequence, this.outlineStrokeIndex,
                   this.shapeSequence, this.shapeIndex,
                   this::equalShapes);
}
```

---

### 3. Refactored `equals` Method in `CandlestickRenderer`
```java
@Override
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CandlestickRenderer)) {
        return false;
    }
    CandlestickRenderer that = (CandlestickRenderer) obj;
    if (this.candleWidth != that.candleWidth) {
        return false;
    }
    if (!PaintUtilities.equal(this.upPaint, that.upPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.downPaint, that.downPaint)) {
        return false;
    }
    if (this.drawVolume != that.drawVolume) {
        return false;
    }
    if (this.maxCandleWidthInMilliseconds != that.maxCandleWidthInMilliseconds) {
        return false;
    }
    if (this.autoWidthMethod != that.autoWidthMethod) {
        return false;
    }
    if (this.autoWidthFactor != that.autoWidthFactor) {
        return false;
    }
    if (this.autoWidthGap != that.autoWidthGap) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (!PaintUtilities.equal(this.volumePaint, that.volumePaint)) {
        return false;
    }
    return super.equals(obj);
}
```",Type-3
129-2-4,src,org.jfree.chart.plot,DefaultDrawingSupplier,equals,345,389,src,org.jfree.chart.renderer.xy,StandardXYItemRenderer,equals,1006,1048,Type 3,"### Code Snippet 1: `equals` method from `DefaultDrawingSupplier` (lines 345-389)
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof DefaultDrawingSupplier)) {
        return false;
    }

    DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;

    if (!Arrays.equals(this.paintSequence, that.paintSequence)) {
        return false;
    }
    if (this.paintIndex != that.paintIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlinePaintSequence, 
            that.outlinePaintSequence)) {
        return false;
    }
    if (this.outlinePaintIndex != that.outlinePaintIndex) {
        return false;
    }
    if (!Arrays.equals(this.strokeSequence, that.strokeSequence)) {
        return false;
    }
    if (this.strokeIndex != that.strokeIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlineStrokeSequence, 
            that.outlineStrokeSequence)) {
        return false;
    }
    if (this.outlineStrokeIndex != that.outlineStrokeIndex) {
        return false;   
    }
    if (!equalShapes(this.shapeSequence, that.shapeSequence)) {
        return false;
    }
    if (this.shapeIndex != that.shapeIndex) {
        return false;
    }
    return true;

}
```

---

### Code Snippet 2: `equals` method from `StandardXYItemRenderer` (lines 1006-1048)
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYItemRenderer)) {
        return false;
    }
    StandardXYItemRenderer that = (StandardXYItemRenderer) obj;
    if (this.baseShapesVisible != that.baseShapesVisible) {
        return false;
    }
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (this.plotImages != that.plotImages) {
        return false;
    }
    if (this.plotDiscontinuous != that.plotDiscontinuous) {
        return false;
    }
    if (this.gapThresholdType != that.gapThresholdType) {
        return false;
    }
    if (this.gapThreshold != that.gapThreshold) {
        return false;
    }
    if (!ObjectUtilities.equal(this.shapesFilled, that.shapesFilled)) {
        return false;
    }
    if (!this.seriesShapesFilled.equals(that.seriesShapesFilled)) {
        return false;
    }
    if (this.baseShapesFilled != that.baseShapesFilled) {
        return false;
    }
    if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;
    }
    return super.equals(obj);

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** and logic specific to their respective classes (`DefaultDrawingSupplier` and `StandardXYItemRenderer`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality based on the provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param paintSequence  the paint sequence of this object.
 * @param paintIndex  the paint index of this object.
 * @param outlinePaintSequence  the outline paint sequence of this object.
 * @param outlinePaintIndex  the outline paint index of this object.
 * @param strokeSequence  the stroke sequence of this object.
 * @param strokeIndex  the stroke index of this object.
 * @param outlineStrokeSequence  the outline stroke sequence of this object.
 * @param outlineStrokeIndex  the outline stroke index of this object.
 * @param shapeSequence  the shape sequence of this object.
 * @param shapeIndex  the shape index of this object.
 * @param additionalChecks  a runnable for additional equality checks.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, 
        Paint[] paintSequence, int paintIndex, 
        Paint[] outlinePaintSequence, int outlinePaintIndex, 
        Stroke[] strokeSequence, int strokeIndex, 
        Stroke[] outlineStrokeSequence, int outlineStrokeIndex, 
        Shape[] shapeSequence, int shapeIndex, 
        Runnable additionalChecks) {

    if (obj == this) {
        return true;
    }

    if (!clazz.isInstance(obj)) {
        return false;
    }

    Object that = clazz.cast(obj);

    if (!Arrays.equals(paintSequence, ((DefaultDrawingSupplier) that).paintSequence)) {
        return false;
    }
    if (paintIndex != ((DefaultDrawingSupplier) that).paintIndex) {
        return false;
    }
    if (!Arrays.equals(outlinePaintSequence, ((DefaultDrawingSupplier) that).outlinePaintSequence)) {
        return false;
    }
    if (outlinePaintIndex != ((DefaultDrawingSupplier) that).outlinePaintIndex) {
        return false;
    }
    if (!Arrays.equals(strokeSequence, ((DefaultDrawingSupplier) that).strokeSequence)) {
        return false;
    }
    if (strokeIndex != ((DefaultDrawingSupplier) that).strokeIndex) {
        return false;
    }
    if (!Arrays.equals(outlineStrokeSequence, ((DefaultDrawingSupplier) that).outlineStrokeSequence)) {
        return false;
    }
    if (outlineStrokeIndex != ((DefaultDrawingSupplier) that).outlineStrokeIndex) {
        return false;
    }
    if (!equalShapes(shapeSequence, ((DefaultDrawingSupplier) that).shapeSequence)) {
        return false;
    }
    if (shapeIndex != ((DefaultDrawingSupplier) that).shapeIndex) {
        return false;
    }

    if (additionalChecks != null) {
        additionalChecks.run();
    }

    return true;
}
```

---

### 2. Refactored `equals` Method in `DefaultDrawingSupplier`
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DefaultDrawingSupplier.class, 
        this.paintSequence, this.paintIndex, 
        this.outlinePaintSequence, this.outlinePaintIndex, 
        this.strokeSequence, this.strokeIndex, 
        this.outlineStrokeSequence, this.outlineStrokeIndex, 
        this.shapeSequence, this.shapeIndex, null);
}
```

---

### 3. Refactored `equals` Method in `StandardXYItemRenderer`
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardXYItemRenderer.class, 
        null, 0, // paintSequence and paintIndex are not used here
        null, 0, // outlinePaintSequence and outlinePaintIndex are not used here
        null, 0, // strokeSequence and strokeIndex are not used here
        null, 0, // outlineStrokeSequence and outlineStrokeIndex are not used here
        null, 0, // shapeSequence and shapeIndex are not used here
        () -> {
            StandardXYItemRenderer that = (StandardXYItemRenderer) obj;
            if (this.baseShapesVisible != that.baseShapesVisible) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.plotLines != that.plotLines) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.plotImages != that.plotImages) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.plotDiscontinuous != that.plotDiscontinuous) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.gapThresholdType != that.gapThresholdType) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.gapThreshold != that.gapThreshold) {
                throw new RuntimeException(""Not equal"");
            }
            if (!ObjectUtilities.equal(this.shapesFilled, that.shapesFilled)) {
                throw new RuntimeException(""Not equal"");
            }
            if (!this.seriesShapesFilled.equals(that.seriesShapesFilled)) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.baseShapesFilled != that.baseShapesFilled) {
                throw new RuntimeException(""Not equal"");
            }
            if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {
                throw new RuntimeException(""Not equal"");
            }
            if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
                throw new RuntimeException(""Not equal"");
            }
        });
}
```",Type-3
129-2-5,src,org.jfree.chart.plot,DefaultDrawingSupplier,equals,345,389,src,org.jfree.chart.title,TextTitle,equals,826,861,Type 3,"### Code Snippet 1 (DefaultDrawingSupplier.java, lines 345-389)
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof DefaultDrawingSupplier)) {
        return false;
    }

    DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;

    if (!Arrays.equals(this.paintSequence, that.paintSequence)) {
        return false;
    }
    if (this.paintIndex != that.paintIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlinePaintSequence, 
            that.outlinePaintSequence)) {
        return false;
    }
    if (this.outlinePaintIndex != that.outlinePaintIndex) {
        return false;
    }
    if (!Arrays.equals(this.strokeSequence, that.strokeSequence)) {
        return false;
    }
    if (this.strokeIndex != that.strokeIndex) {
        return false;   
    }
    if (!Arrays.equals(this.outlineStrokeSequence, 
            that.outlineStrokeSequence)) {
        return false;
    }
    if (this.outlineStrokeIndex != that.outlineStrokeIndex) {
        return false;   
    }
    if (!equalShapes(this.shapeSequence, that.shapeSequence)) {
        return false;
    }
    if (this.shapeIndex != that.shapeIndex) {
        return false;
    }
    return true;

}
```

### Code Snippet 2 (TextTitle.java, lines 826-861)
```java
/**
 * Tests this title for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TextTitle)) {
        return false;
    }
    TextTitle that = (TextTitle) obj;
    if (!ObjectUtilities.equal(this.text, that.text)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.font, that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.textAlignment != that.textAlignment) {
        return false;
    }
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) {
        return false;
    }
    if (this.expandToFitSpace != that.expandToFitSpace) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on their respective attributes.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param paintSequence  the paint sequence of the current object.
 * @param paintIndex  the paint index of the current object.
 * @param outlinePaintSequence  the outline paint sequence of the current object.
 * @param outlinePaintIndex  the outline paint index of the current object.
 * @param strokeSequence  the stroke sequence of the current object.
 * @param strokeIndex  the stroke index of the current object.
 * @param outlineStrokeSequence  the outline stroke sequence of the current object.
 * @param outlineStrokeIndex  the outline stroke index of the current object.
 * @param shapeSequence  the shape sequence of the current object.
 * @param shapeIndex  the shape index of the current object.
 * @param text  the text of the current object.
 * @param font  the font of the current object.
 * @param paint  the paint of the current object.
 * @param textAlignment  the text alignment of the current object.
 * @param backgroundPaint  the background paint of the current object.
 * @param maximumLinesToDisplay  the maximum lines to display of the current object.
 * @param expandToFitSpace  the expand-to-fit-space flag of the current object.
 * @param toolTipText  the tooltip text of the current object.
 * @param urlText  the URL text of the current object.
 * @param superEquals  the result of calling super.equals(obj).
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Paint[] paintSequence, int paintIndex,
        Paint[] outlinePaintSequence, int outlinePaintIndex, Stroke[] strokeSequence,
        int strokeIndex, Stroke[] outlineStrokeSequence, int outlineStrokeIndex,
        Shape[] shapeSequence, int shapeIndex, String text, Font font, Paint paint,
        HorizontalAlignment textAlignment, Paint backgroundPaint, int maximumLinesToDisplay,
        boolean expandToFitSpace, String toolTipText, String urlText, boolean superEquals) {

    if (obj == this) {
        return true;
    }

    if (obj instanceof DefaultDrawingSupplier) {
        DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;

        if (!Arrays.equals(paintSequence, that.paintSequence)) {
            return false;
        }
        if (paintIndex != that.paintIndex) {
            return false;
        }
        if (!Arrays.equals(outlinePaintSequence, that.outlinePaintSequence)) {
            return false;
        }
        if (outlinePaintIndex != that.outlinePaintIndex) {
            return false;
        }
        if (!Arrays.equals(strokeSequence, that.strokeSequence)) {
            return false;
        }
        if (strokeIndex != that.strokeIndex) {
            return false;
        }
        if (!Arrays.equals(outlineStrokeSequence, that.outlineStrokeSequence)) {
            return false;
        }
        if (outlineStrokeIndex != that.outlineStrokeIndex) {
            return false;
        }
        if (!equalShapes(shapeSequence, that.shapeSequence)) {
            return false;
        }
        if (shapeIndex != that.shapeIndex) {
            return false;
        }
        return true;
    }

    if (obj instanceof TextTitle) {
        TextTitle that = (TextTitle) obj;

        if (!ObjectUtilities.equal(text, that.text)) {
            return false;
        }
        if (!ObjectUtilities.equal(font, that.font)) {
            return false;
        }
        if (!PaintUtilities.equal(paint, that.paint)) {
            return false;
        }
        if (textAlignment != that.textAlignment) {
            return false;
        }
        if (!PaintUtilities.equal(backgroundPaint, that.backgroundPaint)) {
            return false;
        }
        if (maximumLinesToDisplay != that.maximumLinesToDisplay) {
            return false;
        }
        if (expandToFitSpace != that.expandToFitSpace) {
            return false;
        }
        if (!ObjectUtilities.equal(toolTipText, that.toolTipText)) {
            return false;
        }
        if (!ObjectUtilities.equal(urlText, that.urlText)) {
            return false;
        }
        return superEquals;
    }

    return false;
}
```

---

### 2. Refactored Method Calls

#### In `DefaultDrawingSupplier.java`
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, this.paintSequence, this.paintIndex,
            this.outlinePaintSequence, this.outlinePaintIndex, this.strokeSequence,
            this.strokeIndex, this.outlineStrokeSequence, this.outlineStrokeIndex,
            this.shapeSequence, this.shapeIndex, null, null, null, null, null,
            0, false, null, null, false);
}
```

---

#### In `TextTitle.java`
```java
/**
 * Tests this title for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, null, 0, null, 0, null, 0, null, 0, null, 0,
            this.text, this.font, this.paint, this.textAlignment, this.backgroundPaint,
            this.maximumLinesToDisplay, this.expandToFitSpace, this.toolTipText,
            this.urlText, super.equals(obj));
}
```",Type-3
129-3-4,src,org.jfree.chart.renderer.xy,CandlestickRenderer,equals,884,923,src,org.jfree.chart.renderer.xy,StandardXYItemRenderer,equals,1006,1048,Type 3,"### Code Snippet 1: `equals` method from `CandlestickRenderer` class
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CandlestickRenderer)) {
        return false;
    }
    CandlestickRenderer that = (CandlestickRenderer) obj;
    if (this.candleWidth != that.candleWidth) {
        return false;
    }
    if (!PaintUtilities.equal(this.upPaint, that.upPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.downPaint, that.downPaint)) {
        return false;
    }
    if (this.drawVolume != that.drawVolume) {
        return false;
    }
    if (this.maxCandleWidthInMilliseconds
            != that.maxCandleWidthInMilliseconds) {
        return false;
    }
    if (this.autoWidthMethod != that.autoWidthMethod) {
        return false;
    }
    if (this.autoWidthFactor != that.autoWidthFactor) {
        return false;
    }
    if (this.autoWidthGap != that.autoWidthGap) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (!PaintUtilities.equal(this.volumePaint, that.volumePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `StandardXYItemRenderer` class
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYItemRenderer)) {
        return false;
    }
    StandardXYItemRenderer that = (StandardXYItemRenderer) obj;
    if (this.baseShapesVisible != that.baseShapesVisible) {
        return false;
    }
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (this.plotImages != that.plotImages) {
        return false;
    }
    if (this.plotDiscontinuous != that.plotDiscontinuous) {
        return false;
    }
    if (this.gapThresholdType != that.gapThresholdType) {
        return false;
    }
    if (this.gapThreshold != that.gapThreshold) {
        return false;
    }
    if (!ObjectUtilities.equal(this.shapesFilled, that.shapesFilled)) {
        return false;
    }
    if (!this.seriesShapesFilled.equals(that.seriesShapesFilled)) {
        return false;
    }
    if (this.baseShapesFilled != that.baseShapesFilled) {
        return false;
    }
    if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;
    }
    return super.equals(obj);

}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`CandlestickRenderer` and `StandardXYItemRenderer`).","### 1. Extracted Method (to be placed in the common superclass `AbstractXYItemRenderer`)
```java
protected boolean rendererEquals(Object obj, 
                                 Object thisRenderer, 
                                 double candleWidth, 
                                 Paint upPaint, 
                                 Paint downPaint, 
                                 boolean drawVolume, 
                                 double maxCandleWidthInMilliseconds, 
                                 int autoWidthMethod, 
                                 double autoWidthFactor, 
                                 double autoWidthGap, 
                                 boolean useOutlinePaint, 
                                 Paint volumePaint, 
                                 boolean baseShapesVisible, 
                                 boolean plotLines, 
                                 boolean plotImages, 
                                 boolean plotDiscontinuous, 
                                 UnitType gapThresholdType, 
                                 double gapThreshold, 
                                 Boolean shapesFilled, 
                                 BooleanList seriesShapesFilled, 
                                 boolean baseShapesFilled, 
                                 boolean drawSeriesLineAsPath, 
                                 Shape legendLine) {
    if (obj == thisRenderer) {
        return true;
    }
    if (!(obj.getClass().equals(thisRenderer.getClass()))) {
        return false;
    }
    if (thisRenderer instanceof CandlestickRenderer) {
        CandlestickRenderer that = (CandlestickRenderer) obj;
        if (candleWidth != that.candleWidth) {
            return false;
        }
        if (!PaintUtilities.equal(upPaint, that.upPaint)) {
            return false;
        }
        if (!PaintUtilities.equal(downPaint, that.downPaint)) {
            return false;
        }
        if (drawVolume != that.drawVolume) {
            return false;
        }
        if (maxCandleWidthInMilliseconds != that.maxCandleWidthInMilliseconds) {
            return false;
        }
        if (autoWidthMethod != that.autoWidthMethod) {
            return false;
        }
        if (autoWidthFactor != that.autoWidthFactor) {
            return false;
        }
        if (autoWidthGap != that.autoWidthGap) {
            return false;
        }
        if (useOutlinePaint != that.useOutlinePaint) {
            return false;
        }
        if (!PaintUtilities.equal(volumePaint, that.volumePaint)) {
            return false;
        }
    } else if (thisRenderer instanceof StandardXYItemRenderer) {
        StandardXYItemRenderer that = (StandardXYItemRenderer) obj;
        if (baseShapesVisible != that.baseShapesVisible) {
            return false;
        }
        if (plotLines != that.plotLines) {
            return false;
        }
        if (plotImages != that.plotImages) {
            return false;
        }
        if (plotDiscontinuous != that.plotDiscontinuous) {
            return false;
        }
        if (gapThresholdType != that.gapThresholdType) {
            return false;
        }
        if (gapThreshold != that.gapThreshold) {
            return false;
        }
        if (!ObjectUtilities.equal(shapesFilled, that.shapesFilled)) {
            return false;
        }
        if (!seriesShapesFilled.equals(that.seriesShapesFilled)) {
            return false;
        }
        if (baseShapesFilled != that.baseShapesFilled) {
            return false;
        }
        if (drawSeriesLineAsPath != that.drawSeriesLineAsPath) {
            return false;
        }
        if (!ShapeUtilities.equal(legendLine, that.legendLine)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `CandlestickRenderer`
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return rendererEquals(obj, this, 
                          this.candleWidth, 
                          this.upPaint, 
                          this.downPaint, 
                          this.drawVolume, 
                          this.maxCandleWidthInMilliseconds, 
                          this.autoWidthMethod, 
                          this.autoWidthFactor, 
                          this.autoWidthGap, 
                          this.useOutlinePaint, 
                          this.volumePaint, 
                          false, // baseShapesVisible
                          false, // plotLines
                          false, // plotImages
                          false, // plotDiscontinuous
                          null,  // gapThresholdType
                          0.0,   // gapThreshold
                          null,  // shapesFilled
                          null,  // seriesShapesFilled
                          false, // baseShapesFilled
                          false, // drawSeriesLineAsPath
                          null); // legendLine
}
```

---

### 3. Refactored `equals` Method in `StandardXYItemRenderer`
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return rendererEquals(obj, this, 
                          0.0,   // candleWidth
                          null,  // upPaint
                          null,  // downPaint
                          false, // drawVolume
                          0.0,   // maxCandleWidthInMilliseconds
                          0,     // autoWidthMethod
                          0.0,   // autoWidthFactor
                          0.0,   // autoWidthGap
                          false, // useOutlinePaint
                          null,  // volumePaint
                          this.baseShapesVisible, 
                          this.plotLines, 
                          this.plotImages, 
                          this.plotDiscontinuous, 
                          this.gapThresholdType, 
                          this.gapThreshold, 
                          this.shapesFilled, 
                          this.seriesShapesFilled, 
                          this.baseShapesFilled, 
                          this.drawSeriesLineAsPath, 
                          this.legendLine);
}
```",Type-3
129-3-5,src,org.jfree.chart.renderer.xy,CandlestickRenderer,equals,884,923,src,org.jfree.chart.title,TextTitle,equals,826,861,Type 3,"### Code Snippet 1 (CandlestickRenderer.java, equals method, lines 884-923):
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CandlestickRenderer)) {
        return false;
    }
    CandlestickRenderer that = (CandlestickRenderer) obj;
    if (this.candleWidth != that.candleWidth) {
        return false;
    }
    if (!PaintUtilities.equal(this.upPaint, that.upPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.downPaint, that.downPaint)) {
        return false;
    }
    if (this.drawVolume != that.drawVolume) {
        return false;
    }
    if (this.maxCandleWidthInMilliseconds
            != that.maxCandleWidthInMilliseconds) {
        return false;
    }
    if (this.autoWidthMethod != that.autoWidthMethod) {
        return false;
    }
    if (this.autoWidthFactor != that.autoWidthFactor) {
        return false;
    }
    if (this.autoWidthGap != that.autoWidthGap) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (!PaintUtilities.equal(this.volumePaint, that.volumePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (TextTitle.java, equals method, lines 826-861):
```java
/**
 * Tests this title for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TextTitle)) {
        return false;
    }
    TextTitle that = (TextTitle) obj;
    if (!ObjectUtilities.equal(this.text, that.text)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.font, that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.textAlignment != that.textAlignment) {
        return false;
    }
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) {
        return false;
    }
    if (this.expandToFitSpace != that.expandToFitSpace) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`candleWidth`, `upPaint`, etc., in the first snippet vs. `text`, `font`, etc., in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean equalsHelper(Object obj, Object[] fields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `CandlestickRenderer`:
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    CandlestickRenderer that = (CandlestickRenderer) obj;
    return equalsHelper(obj,
        new Object[] {
            this.candleWidth, this.upPaint, this.downPaint, this.drawVolume,
            this.maxCandleWidthInMilliseconds, this.autoWidthMethod,
            this.autoWidthFactor, this.autoWidthGap, this.useOutlinePaint,
            this.volumePaint
        },
        new Object[] {
            that.candleWidth, that.upPaint, that.downPaint, that.drawVolume,
            that.maxCandleWidthInMilliseconds, that.autoWidthMethod,
            that.autoWidthFactor, that.autoWidthGap, that.useOutlinePaint,
            that.volumePaint
        }
    );
}
```

---

### 3. Refactored `equals` Method in `TextTitle`:
```java
/**
 * Tests this title for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    TextTitle that = (TextTitle) obj;
    return equalsHelper(obj,
        new Object[] {
            this.text, this.font, this.paint, this.textAlignment,
            this.backgroundPaint, this.maximumLinesToDisplay,
            this.expandToFitSpace, this.toolTipText, this.urlText
        },
        new Object[] {
            that.text, that.font, that.paint, that.textAlignment,
            that.backgroundPaint, that.maximumLinesToDisplay,
            that.expandToFitSpace, that.toolTipText, that.urlText
        }
    );
}
```",Type-3
129-4-5,src,org.jfree.chart.renderer.xy,StandardXYItemRenderer,equals,1006,1048,src,org.jfree.chart.title,TextTitle,equals,826,861,Type 3,"### Code Snippet 1: `equals` method from `StandardXYItemRenderer` (lines 1006-1048)

```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYItemRenderer)) {
        return false;
    }
    StandardXYItemRenderer that = (StandardXYItemRenderer) obj;
    if (this.baseShapesVisible != that.baseShapesVisible) {
        return false;
    }
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (this.plotImages != that.plotImages) {
        return false;
    }
    if (this.plotDiscontinuous != that.plotDiscontinuous) {
        return false;
    }
    if (this.gapThresholdType != that.gapThresholdType) {
        return false;
    }
    if (this.gapThreshold != that.gapThreshold) {
        return false;
    }
    if (!ObjectUtilities.equal(this.shapesFilled, that.shapesFilled)) {
        return false;
    }
    if (!this.seriesShapesFilled.equals(that.seriesShapesFilled)) {
        return false;
    }
    if (this.baseShapesFilled != that.baseShapesFilled) {
        return false;
    }
    if (this.drawSeriesLineAsPath != that.drawSeriesLineAsPath) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;
    }
    return super.equals(obj);

}
```

---

### Code Snippet 2: `equals` method from `TextTitle` (lines 826-861)

```java
/**
 * Tests this title for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TextTitle)) {
        return false;
    }
    TextTitle that = (TextTitle) obj;
    if (!ObjectUtilities.equal(this.text, that.text)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.font, that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.textAlignment != that.textAlignment) {
        return false;
    }
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) {
        return false;
    }
    if (this.expandToFitSpace != that.expandToFitSpace) {
        return false;
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`baseShapesVisible`, `plotLines`, etc., in the first snippet vs. `text`, `font`, etc., in the second snippet) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)

```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare to.
 * @param fields  the fields to compare.
 * @return true if all fields are equal, false otherwise.
 */
protected boolean compareFields(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (thisField instanceof Boolean || thisField instanceof Number || thisField instanceof Enum) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!ObjectUtilities.equal(thisField, thatField)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `StandardXYItemRenderer`

```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        {this.baseShapesVisible, ((StandardXYItemRenderer) obj).baseShapesVisible},
        {this.plotLines, ((StandardXYItemRenderer) obj).plotLines},
        {this.plotImages, ((StandardXYItemRenderer) obj).plotImages},
        {this.plotDiscontinuous, ((StandardXYItemRenderer) obj).plotDiscontinuous},
        {this.gapThresholdType, ((StandardXYItemRenderer) obj).gapThresholdType},
        {this.gapThreshold, ((StandardXYItemRenderer) obj).gapThreshold},
        {this.shapesFilled, ((StandardXYItemRenderer) obj).shapesFilled},
        {this.seriesShapesFilled, ((StandardXYItemRenderer) obj).seriesShapesFilled},
        {this.baseShapesFilled, ((StandardXYItemRenderer) obj).baseShapesFilled},
        {this.drawSeriesLineAsPath, ((StandardXYItemRenderer) obj).drawSeriesLineAsPath},
        {this.legendLine, ((StandardXYItemRenderer) obj).legendLine}
    });
}
```

---

### 3. Refactored `equals` Method in `TextTitle`

```java
/**
 * Tests this title for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        {this.text, ((TextTitle) obj).text},
        {this.font, ((TextTitle) obj).font},
        {this.paint, ((TextTitle) obj).paint},
        {this.textAlignment, ((TextTitle) obj).textAlignment},
        {this.backgroundPaint, ((TextTitle) obj).backgroundPaint},
        {this.maximumLinesToDisplay, ((TextTitle) obj).maximumLinesToDisplay},
        {this.expandToFitSpace, ((TextTitle) obj).expandToFitSpace},
        {this.toolTipText, ((TextTitle) obj).toolTipText},
        {this.urlText, ((TextTitle) obj).urlText}
    });
}
```",Type-3
131-1-2,src,org.jfree.chart.title,ImageTitle,drawHorizontal,221,261,src,org.jfree.chart.title,ImageTitle,drawVertical,275,319,Type 3,"**Code Snippet 1 - Method: drawHorizontal (Lines: 221-261)**  
```java
protected Size2D drawHorizontal(Graphics2D g2, Rectangle2D chartArea) {

    double startY = 0.0;
    double topSpace = 0.0;
    double bottomSpace = 0.0;
    double leftSpace = 0.0;
    double rightSpace = 0.0;

    double w = getWidth();
    double h = getHeight();
    RectangleInsets padding = getPadding();
    topSpace = padding.calculateTopOutset(h);
    bottomSpace = padding.calculateBottomOutset(h);
    leftSpace = padding.calculateLeftOutset(w);
    rightSpace = padding.calculateRightOutset(w);

    if (getPosition() == RectangleEdge.TOP) {
        startY = chartArea.getY() + topSpace;
    }
    else {
        startY = chartArea.getY() + chartArea.getHeight() - bottomSpace - h;
    }

    // what is our alignment?
    HorizontalAlignment horizontalAlignment = getHorizontalAlignment();
    double startX = 0.0;
    if (horizontalAlignment == HorizontalAlignment.CENTER) {
        startX = chartArea.getX() + leftSpace + chartArea.getWidth() / 2.0
                 - w / 2.0;
    }
    else if (horizontalAlignment == HorizontalAlignment.LEFT) {
        startX = chartArea.getX() + leftSpace;
    }
    else if (horizontalAlignment == HorizontalAlignment.RIGHT) {
        startX = chartArea.getX() + chartArea.getWidth() - rightSpace - w;
    }
    g2.drawImage(this.image, (int) startX, (int) startY, (int) w, (int) h,
            null);

    return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,
        h + topSpace + bottomSpace);

}
```

**Code Snippet 2 - Method: drawVertical (Lines: 275-319)**  
```java
protected Size2D drawVertical(Graphics2D g2, Rectangle2D chartArea) {

    double startX = 0.0;
    double topSpace = 0.0;
    double bottomSpace = 0.0;
    double leftSpace = 0.0;
    double rightSpace = 0.0;

    double w = getWidth();
    double h = getHeight();

    RectangleInsets padding = getPadding();
    if (padding != null) {
        topSpace = padding.calculateTopOutset(h);
        bottomSpace = padding.calculateBottomOutset(h);
        leftSpace = padding.calculateLeftOutset(w);
        rightSpace = padding.calculateRightOutset(w);
    }

    if (getPosition() == RectangleEdge.LEFT) {
        startX = chartArea.getX() + leftSpace;
    }
    else {
        startX = chartArea.getMaxX() - rightSpace - w;
    }

    // what is our alignment?
    VerticalAlignment alignment = getVerticalAlignment();
    double startY = 0.0;
    if (alignment == VerticalAlignment.CENTER) {
        startY = chartArea.getMinY() + topSpace
                 + chartArea.getHeight() / 2.0 - h / 2.0;
    }
    else if (alignment == VerticalAlignment.TOP) {
        startY = chartArea.getMinY() + topSpace;
    }
    else if (alignment == VerticalAlignment.BOTTOM) {
        startY = chartArea.getMaxY() - bottomSpace - h;
    }

    g2.drawImage(this.image, (int) startX, (int) startY, (int) w, (int) h,
            null);

    return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,
        h + topSpace + bottomSpace);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. The Extracted Method:**  
```java
private Size2D drawImage(Graphics2D g2, Rectangle2D chartArea, boolean isHorizontal) {

    double startX = 0.0;
    double startY = 0.0;
    double topSpace = 0.0;
    double bottomSpace = 0.0;
    double leftSpace = 0.0;
    double rightSpace = 0.0;

    double w = getWidth();
    double h = getHeight();

    RectangleInsets padding = getPadding();
    if (padding != null) {
        topSpace = padding.calculateTopOutset(h);
        bottomSpace = padding.calculateBottomOutset(h);
        leftSpace = padding.calculateLeftOutset(w);
        rightSpace = padding.calculateRightOutset(w);
    }

    if (isHorizontal) {
        if (getPosition() == RectangleEdge.TOP) {
            startY = chartArea.getY() + topSpace;
        } else {
            startY = chartArea.getY() + chartArea.getHeight() - bottomSpace - h;
        }

        HorizontalAlignment horizontalAlignment = getHorizontalAlignment();
        if (horizontalAlignment == HorizontalAlignment.CENTER) {
            startX = chartArea.getX() + leftSpace + chartArea.getWidth() / 2.0 - w / 2.0;
        } else if (horizontalAlignment == HorizontalAlignment.LEFT) {
            startX = chartArea.getX() + leftSpace;
        } else if (horizontalAlignment == HorizontalAlignment.RIGHT) {
            startX = chartArea.getX() + chartArea.getWidth() - rightSpace - w;
        }
    } else {
        if (getPosition() == RectangleEdge.LEFT) {
            startX = chartArea.getX() + leftSpace;
        } else {
            startX = chartArea.getMaxX() - rightSpace - w;
        }

        VerticalAlignment alignment = getVerticalAlignment();
        if (alignment == VerticalAlignment.CENTER) {
            startY = chartArea.getMinY() + topSpace + chartArea.getHeight() / 2.0 - h / 2.0;
        } else if (alignment == VerticalAlignment.TOP) {
            startY = chartArea.getMinY() + topSpace;
        } else if (alignment == VerticalAlignment.BOTTOM) {
            startY = chartArea.getMaxY() - bottomSpace - h;
        }
    }

    g2.drawImage(this.image, (int) startX, (int) startY, (int) w, (int) h, null);

    return new Size2D(chartArea.getWidth() + leftSpace + rightSpace, h + topSpace + bottomSpace);
}
```

**2. The Method Calls That Replace the Clones:**  

**For `drawHorizontal`:**  
```java
protected Size2D drawHorizontal(Graphics2D g2, Rectangle2D chartArea) {
    return drawImage(g2, chartArea, true);
}
```

**For `drawVertical`:**  
```java
protected Size2D drawVertical(Graphics2D g2, Rectangle2D chartArea) {
    return drawImage(g2, chartArea, false);
}
```",Type-3
136-1-2,src,org.jfree.chart.axis,CategoryAxis,equals,1184,1227,src,org.jfree.chart.renderer.xy,CandlestickRenderer,equals,884,923,Type 3,"### Code Snippet 1: `equals` method in `CategoryAxis` class (lines 1184-1227)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryAxis that = (CategoryAxis) obj;
    if (that.lowerMargin != this.lowerMargin) {
        return false;
    }
    if (that.upperMargin != this.upperMargin) {
        return false;
    }
    if (that.categoryMargin != this.categoryMargin) {
        return false;
    }
    if (that.maximumCategoryLabelWidthRatio
            != this.maximumCategoryLabelWidthRatio) {
        return false;
    }
    if (that.categoryLabelPositionOffset
            != this.categoryLabelPositionOffset) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelPositions,
            this.categoryLabelPositions)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.categoryLabelToolTips,
            this.categoryLabelToolTips)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickLabelFontMap,
            that.tickLabelFontMap)) {
        return false;
    }
    if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `CandlestickRenderer` class (lines 884-923)
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CandlestickRenderer)) {
        return false;
    }
    CandlestickRenderer that = (CandlestickRenderer) obj;
    if (this.candleWidth != that.candleWidth) {
        return false;
    }
    if (!PaintUtilities.equal(this.upPaint, that.upPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.downPaint, that.downPaint)) {
        return false;
    }
    if (this.drawVolume != that.drawVolume) {
        return false;
    }
    if (this.maxCandleWidthInMilliseconds
            != that.maxCandleWidthInMilliseconds) {
        return false;
    }
    if (this.autoWidthMethod != that.autoWidthMethod) {
        return false;
    }
    if (this.autoWidthFactor != that.autoWidthFactor) {
        return false;
    }
    if (this.autoWidthGap != that.autoWidthGap) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (!PaintUtilities.equal(this.volumePaint, that.volumePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`CategoryAxis` and `CandlestickRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractRenderer` or `AbstractAxis`)
```java
protected boolean baseEquals(Object obj, Object thisObj, double[] doubleFields, Object[] objectFields, boolean[] booleanFields) {
    if (obj == thisObj) {
        return true;
    }
    if (obj == null || !thisObj.getClass().isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < doubleFields.length; i += 2) {
        if (doubleFields[i] != doubleFields[i + 1]) {
            return false;
        }
    }
    for (int i = 0; i < objectFields.length; i += 2) {
        if (!ObjectUtilities.equal(objectFields[i], objectFields[i + 1])) {
            return false;
        }
    }
    for (int i = 0; i < booleanFields.length; i += 2) {
        if (booleanFields[i] != booleanFields[i + 1]) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryAxis` Class
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        this,
        new double[]{
            this.lowerMargin, ((CategoryAxis) obj).lowerMargin,
            this.upperMargin, ((CategoryAxis) obj).upperMargin,
            this.categoryMargin, ((CategoryAxis) obj).categoryMargin,
            this.maximumCategoryLabelWidthRatio, ((CategoryAxis) obj).maximumCategoryLabelWidthRatio
        },
        new Object[]{
            this.categoryLabelPositions, ((CategoryAxis) obj).categoryLabelPositions,
            this.categoryLabelToolTips, ((CategoryAxis) obj).categoryLabelToolTips,
            this.tickLabelFontMap, ((CategoryAxis) obj).tickLabelFontMap,
            this.tickLabelPaintMap, ((CategoryAxis) obj).tickLabelPaintMap
        },
        new boolean[]{}
    );
}
```

---

### 3. Refactored `equals` Method in `CandlestickRenderer` Class
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        this,
        new double[]{
            this.candleWidth, ((CandlestickRenderer) obj).candleWidth,
            this.maxCandleWidthInMilliseconds, ((CandlestickRenderer) obj).maxCandleWidthInMilliseconds,
            this.autoWidthFactor, ((CandlestickRenderer) obj).autoWidthFactor,
            this.autoWidthGap, ((CandlestickRenderer) obj).autoWidthGap
        },
        new Object[]{
            this.upPaint, ((CandlestickRenderer) obj).upPaint,
            this.downPaint, ((CandlestickRenderer) obj).downPaint,
            this.volumePaint, ((CandlestickRenderer) obj).volumePaint
        },
        new boolean[]{
            this.drawVolume, ((CandlestickRenderer) obj).drawVolume,
            this.useOutlinePaint, ((CandlestickRenderer) obj).useOutlinePaint
        }
    );
}
```",Type-3
155-1-2,src,org.jfree.chart.annotations,XYTextAnnotation,equals,406,441,src,org.jfree.chart.renderer.category,BarRenderer,equals,1062,1101,Type 3,"### Code Snippet 1: `equals` method from `XYTextAnnotation` class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYTextAnnotation)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYTextAnnotation that = (XYTextAnnotation) obj;
    if (!this.text.equals(that.text)) {
        return false;   
    }
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!this.font.equals(that.font)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;   
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;   
    }
    if (this.rotationAngle != that.rotationAngle) {
        return false;   
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;   
    }
    return true;   
}
```

---

### Code Snippet 2: `equals` method from `BarRenderer` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BarRenderer that = (BarRenderer) obj;
    if (this.base != that.base) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.drawBarOutline != that.drawBarOutline) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    if (this.minimumBarLength != that.minimumBarLength) {
        return false;
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer,
            that.gradientPaintTransformer)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback,
        that.positiveItemLabelPositionFallback)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback,
        that.negativeItemLabelPositionFallback)) {
        return false;
    }
    return true;

}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`text`, `x`, `y`, etc., in `XYTextAnnotation` vs. `base`, `itemMargin`, etc., in `BarRenderer`) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare to.
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean compareFields(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if ((double) thisField != (double) thatField) {
                return false;
            }
        } else if (thisField instanceof Boolean && thatField instanceof Boolean) {
            if ((boolean) thisField != (boolean) thatField) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYTextAnnotation`
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        { this.text, ((XYTextAnnotation) obj).text },
        { this.x, ((XYTextAnnotation) obj).x },
        { this.y, ((XYTextAnnotation) obj).y },
        { this.font, ((XYTextAnnotation) obj).font },
        { this.paint, ((XYTextAnnotation) obj).paint },
        { this.rotationAnchor, ((XYTextAnnotation) obj).rotationAnchor },
        { this.rotationAngle, ((XYTextAnnotation) obj).rotationAngle },
        { this.textAnchor, ((XYTextAnnotation) obj).textAnchor }
    });
}
```

---

### 3. Refactored `equals` Method in `BarRenderer`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        { this.base, ((BarRenderer) obj).base },
        { this.itemMargin, ((BarRenderer) obj).itemMargin },
        { this.drawBarOutline, ((BarRenderer) obj).drawBarOutline },
        { this.maximumBarWidth, ((BarRenderer) obj).maximumBarWidth },
        { this.minimumBarLength, ((BarRenderer) obj).minimumBarLength },
        { this.gradientPaintTransformer, ((BarRenderer) obj).gradientPaintTransformer },
        { this.positiveItemLabelPositionFallback, ((BarRenderer) obj).positiveItemLabelPositionFallback },
        { this.negativeItemLabelPositionFallback, ((BarRenderer) obj).negativeItemLabelPositionFallback }
    });
}
```",Type-3
155-2-3,src,org.jfree.chart.renderer.category,BarRenderer,equals,1062,1101,src,org.jfree.chart.title,LegendTitle,equals,547,582,Type 3,"### Code Snippet 1 (BarRenderer.java, `equals` method, lines 1062-1101):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BarRenderer that = (BarRenderer) obj;
    if (this.base != that.base) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.drawBarOutline != that.drawBarOutline) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    if (this.minimumBarLength != that.minimumBarLength) {
        return false;
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer,
            that.gradientPaintTransformer)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback,
        that.positiveItemLabelPositionFallback)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback,
        that.negativeItemLabelPositionFallback)) {
        return false;
    }
    return true;

}
```

---

### Code Snippet 2 (LegendTitle.java, `equals` method, lines 547-582):
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    LegendTitle that = (LegendTitle) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;   
    }
    if (this.legendItemGraphicEdge != that.legendItemGraphicEdge) {
        return false;   
    }
    if (this.legendItemGraphicAnchor != that.legendItemGraphicAnchor) {
        return false;   
    }
    if (this.legendItemGraphicLocation != that.legendItemGraphicLocation) {
        return false;   
    }
    if (!this.itemFont.equals(that.itemFont)) {
        return false;   
    }
    if (!this.itemPaint.equals(that.itemPaint)) {
        return false;   
    }
    if (!this.hLayout.equals(that.hLayout)) {
        return false;   
    }
    if (!this.vLayout.equals(that.vLayout)) {
        return false;   
    }
    return true;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`base`, `itemMargin`, etc., in `BarRenderer` vs. `backgroundPaint`, `legendItemGraphicEdge`, etc., in `LegendTitle`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!ObjectUtilities.equal(thisField, thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `BarRenderer`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        {this.base, ((BarRenderer) obj).base},
        {this.itemMargin, ((BarRenderer) obj).itemMargin},
        {this.drawBarOutline, ((BarRenderer) obj).drawBarOutline},
        {this.maximumBarWidth, ((BarRenderer) obj).maximumBarWidth},
        {this.minimumBarLength, ((BarRenderer) obj).minimumBarLength},
        {this.gradientPaintTransformer, ((BarRenderer) obj).gradientPaintTransformer},
        {this.positiveItemLabelPositionFallback, ((BarRenderer) obj).positiveItemLabelPositionFallback},
        {this.negativeItemLabelPositionFallback, ((BarRenderer) obj).negativeItemLabelPositionFallback}
    });
}
```

---

### 3. Refactored `equals` Method in `LegendTitle`:
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        {this.backgroundPaint, ((LegendTitle) obj).backgroundPaint},
        {this.legendItemGraphicEdge, ((LegendTitle) obj).legendItemGraphicEdge},
        {this.legendItemGraphicAnchor, ((LegendTitle) obj).legendItemGraphicAnchor},
        {this.legendItemGraphicLocation, ((LegendTitle) obj).legendItemGraphicLocation},
        {this.itemFont, ((LegendTitle) obj).itemFont},
        {this.itemPaint, ((LegendTitle) obj).itemPaint},
        {this.hLayout, ((LegendTitle) obj).hLayout},
        {this.vLayout, ((LegendTitle) obj).vLayout}
    });
}
```",Type-3
157-1-3,src,org.jfree.chart.plot.dial,DialPlot,equals,744,779,src,org.jfree.chart.util,RelativeDateFormat,equals,453,491,Type 3,"### Code Snippet 1 (DialPlot.java, `equals` method, lines 744-779):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPlot)) {
        return false;
    }
    DialPlot that = (DialPlot) obj;
    if (!ObjectUtilities.equal(this.background, that.background)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.cap, that.cap)) {
        return false;
    }
    if (!this.dialFrame.equals(that.dialFrame)) {
        return false;
    }
    if (this.viewX != that.viewX) {
        return false;
    }
    if (this.viewY != that.viewY) {
        return false;
    }
    if (this.viewW != that.viewW) {
        return false;
    }
    if (this.viewH != that.viewH) {
        return false;
    }
    if (!this.layers.equals(that.layers)) {
        return false;
    }
    if (!this.pointers.equals(that.pointers)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (RelativeDateFormat.java, `equals` method, lines 453-491):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof RelativeDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    RelativeDateFormat that = (RelativeDateFormat) obj;
    if (this.baseMillis != that.baseMillis) {
        return false;
    }
    if (this.showZeroDays != that.showZeroDays) {
        return false;
    }
    if (this.showZeroHours != that.showZeroHours) {
        return false;
    }
    if (!this.positivePrefix.equals(that.positivePrefix)) {
        return false;
    }
    if (!this.daySuffix.equals(that.daySuffix)) {
        return false;
    }
    if (!this.hourSuffix.equals(that.hourSuffix)) {
        return false;
    }
    if (!this.minuteSuffix.equals(that.minuteSuffix)) {
        return false;
    }
    if (!this.secondSuffix.equals(that.secondSuffix)) {
        return false;
    }
    if (!this.secondFormatter.equals(that.secondFormatter)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`DialPlot` and `RelativeDateFormat`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `ObjectUtilities` or a new utility class):
```java
protected boolean commonEquals(Object obj, Object thisObj, Class<?> clazz, Object[] fields, Object[] otherFields) {
    if (obj == thisObj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DialPlot.java`:
```java
public boolean equals(Object obj) {
    Object[] fields = {
        this.background, this.cap, this.dialFrame, this.viewX, this.viewY,
        this.viewW, this.viewH, this.layers, this.pointers
    };
    Object[] otherFields = {
        ((DialPlot) obj).background, ((DialPlot) obj).cap, ((DialPlot) obj).dialFrame,
        ((DialPlot) obj).viewX, ((DialPlot) obj).viewY, ((DialPlot) obj).viewW,
        ((DialPlot) obj).viewH, ((DialPlot) obj).layers, ((DialPlot) obj).pointers
    };
    return commonEquals(obj, this, DialPlot.class, fields, otherFields) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `RelativeDateFormat.java`:
```java
public boolean equals(Object obj) {
    Object[] fields = {
        this.baseMillis, this.showZeroDays, this.showZeroHours, this.positivePrefix,
        this.daySuffix, this.hourSuffix, this.minuteSuffix, this.secondSuffix,
        this.secondFormatter
    };
    Object[] otherFields = {
        ((RelativeDateFormat) obj).baseMillis, ((RelativeDateFormat) obj).showZeroDays,
        ((RelativeDateFormat) obj).showZeroHours, ((RelativeDateFormat) obj).positivePrefix,
        ((RelativeDateFormat) obj).daySuffix, ((RelativeDateFormat) obj).hourSuffix,
        ((RelativeDateFormat) obj).minuteSuffix, ((RelativeDateFormat) obj).secondSuffix,
        ((RelativeDateFormat) obj).secondFormatter
    };
    return commonEquals(obj, this, RelativeDateFormat.class, fields, otherFields) && super.equals(obj);
}
```",Type-3
157-2-3,src,org.jfree.chart.renderer.xy,XYBarRenderer,equals,955,994,src,org.jfree.chart.util,RelativeDateFormat,equals,453,491,Type 3,"```java
// Code snippet 1: equals method from XYBarRenderer.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYBarRenderer that = (XYBarRenderer) obj;
    if (this.base != that.base) {
        return false;
    }
    if (this.drawBarOutline != that.drawBarOutline) {
        return false;
    }
    if (this.margin != that.margin) {
        return false;
    }
    if (this.useYInterval != that.useYInterval) {
        return false;
    }
    if (!ObjectUtilities.equal(
        this.gradientPaintTransformer, that.gradientPaintTransformer)
    ) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendBar, that.legendBar)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback,
            that.positiveItemLabelPositionFallback)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback,
            that.negativeItemLabelPositionFallback)) {
        return false;
    }        
    return true;
}
```

```java
// Code snippet 2: equals method from RelativeDateFormat.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof RelativeDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    RelativeDateFormat that = (RelativeDateFormat) obj;
    if (this.baseMillis != that.baseMillis) {
        return false;
    }
    if (this.showZeroDays != that.showZeroDays) {
        return false;
    }
    if (this.showZeroHours != that.showZeroHours) {
        return false;
    }
    if (!this.positivePrefix.equals(that.positivePrefix)) {
        return false;
    }
    if (!this.daySuffix.equals(that.daySuffix)) {
        return false;
    }
    if (!this.hourSuffix.equals(that.hourSuffix)) {
        return false;
    }
    if (!this.minuteSuffix.equals(that.minuteSuffix)) {
        return false;
    }
    if (!this.secondSuffix.equals(that.secondSuffix)) {
        return false;
    }
    if (!this.secondFormatter.equals(that.secondFormatter)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","```java
// 1. Extracted method to be placed in the common superclass
protected boolean equalsHelper(Object obj, Object thisInstance, double base, boolean drawBarOutline, double margin, boolean useYInterval, 
                               Object gradientPaintTransformer, Object legendBar, Object positiveItemLabelPositionFallback, 
                               Object negativeItemLabelPositionFallback, Object otherInstance, double otherBase, boolean otherDrawBarOutline, 
                               double otherMargin, boolean otherUseYInterval, Object otherGradientPaintTransformer, Object otherLegendBar, 
                               Object otherPositiveItemLabelPositionFallback, Object otherNegativeItemLabelPositionFallback) {
    if (obj == thisInstance) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (base != otherBase) {
        return false;
    }
    if (drawBarOutline != otherDrawBarOutline) {
        return false;
    }
    if (margin != otherMargin) {
        return false;
    }
    if (useYInterval != otherUseYInterval) {
        return false;
    }
    if (!ObjectUtilities.equal(gradientPaintTransformer, otherGradientPaintTransformer)) {
        return false;
    }
    if (!ShapeUtilities.equal(legendBar, otherLegendBar)) {
        return false;
    }
    if (!ObjectUtilities.equal(positiveItemLabelPositionFallback, otherPositiveItemLabelPositionFallback)) {
        return false;
    }
    if (!ObjectUtilities.equal(negativeItemLabelPositionFallback, otherNegativeItemLabelPositionFallback)) {
        return false;
    }
    return true;
}
```

```java
// 2. Refactored equals method in XYBarRenderer.java
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof XYBarRenderer)) {
        return false;
    }
    XYBarRenderer that = (XYBarRenderer) obj;
    return equalsHelper(obj, this, this.base, this.drawBarOutline, this.margin, this.useYInterval, 
                        this.gradientPaintTransformer, this.legendBar, this.positiveItemLabelPositionFallback, 
                        this.negativeItemLabelPositionFallback, that, that.base, that.drawBarOutline, that.margin, 
                        that.useYInterval, that.gradientPaintTransformer, that.legendBar, that.positiveItemLabelPositionFallback, 
                        that.negativeItemLabelPositionFallback);
}
```

```java
// 3. Refactored equals method in RelativeDateFormat.java
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof RelativeDateFormat)) {
        return false;
    }
    RelativeDateFormat that = (RelativeDateFormat) obj;
    return equalsHelper(obj, this, this.baseMillis, this.showZeroDays, this.showZeroHours, 0.0, 
                        this.positivePrefix, this.daySuffix, this.hourSuffix, this.minuteSuffix, 
                        that, that.baseMillis, that.showZeroDays, that.showZeroHours, 0.0, 
                        that.positivePrefix, that.daySuffix, that.hourSuffix, that.minuteSuffix);
}
```",Type-3
163-1-3,src,org.jfree.chart.renderer.category,AreaRenderer,getLegendItem,149,187,src,org.jfree.chart.renderer.xy,XYBubbleRenderer,getLegendItem,282,317,Type 3,"### Code Snippet 1: `getLegendItem` from `AreaRenderer.java`
```java
public LegendItem getLegendItem(int datasetIndex, int series) {

    // if there is no plot, there is no dataset to access...
    CategoryPlot cp = getPlot();
    if (cp == null) {
        return null;
    }

    // check that a legend item needs to be displayed...
    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }

    CategoryDataset dataset = cp.getDataset(datasetIndex);
    String label = getLegendItemLabelGenerator().generateLabel(dataset,
            series);
    String description = label;
    String toolTipText = null;
    if (getLegendItemToolTipGenerator() != null) {
        toolTipText = getLegendItemToolTipGenerator().generateLabel(
                dataset, series);
    }
    String urlText = null;
    if (getLegendItemURLGenerator() != null) {
        urlText = getLegendItemURLGenerator().generateLabel(dataset,
                series);
    }
    Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);

    LegendItem result = new LegendItem(label, description, toolTipText,
            urlText, shape, paint, outlineStroke, outlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getRowKey(series));
    result.setSeriesIndex(series);
    return result;

}
```

---

### Code Snippet 2: `getLegendItem` from `XYBubbleRenderer.java`
```java
public LegendItem getLegendItem(int datasetIndex, int series) {
    LegendItem result = null;
    XYPlot plot = getPlot();
    if (plot == null) {
        return null;
    }
       
    XYDataset dataset = plot.getDataset(datasetIndex);
    if (dataset != null) {
        if (getItemVisible(series, 0)) {
            String label = getLegendItemLabelGenerator().generateLabel(
                    dataset, series);
            String description = label;
            String toolTipText = null;
            if (getLegendItemToolTipGenerator() != null) {
                toolTipText = getLegendItemToolTipGenerator().generateLabel(
                        dataset, series);
            }
            String urlText = null;
            if (getLegendItemURLGenerator() != null) {
                urlText = getLegendItemURLGenerator().generateLabel(
                        dataset, series);
            }
            Shape shape = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);
            Paint paint = lookupSeriesPaint(series);
            Paint outlinePaint = lookupSeriesOutlinePaint(series);
            Stroke outlineStroke = lookupSeriesOutlineStroke(series);
            result = new LegendItem(label, description, toolTipText, 
                    urlText, shape, paint, outlineStroke, outlinePaint);
            result.setDataset(dataset);
            result.setDatasetIndex(datasetIndex);
            result.setSeriesKey(dataset.getSeriesKey(series));
            result.setSeriesIndex(series);
        }
    }
    return result;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of `CategoryPlot` and `CategoryDataset` in the first snippet versus `XYPlot` and `XYDataset` in the second snippet, as well as the use of different shapes (`Rectangle2D.Double` vs. `Ellipse2D.Double`).","### 1. Extracted Method (to be placed in the common superclass)
```java
protected LegendItem createLegendItem(int datasetIndex, int series, 
        Object plot, Object dataset, boolean isVisible, 
        String label, String description, String toolTipText, 
        String urlText, Shape shape, Paint paint, 
        Paint outlinePaint, Stroke outlineStroke) {

    if (plot == null || dataset == null || !isVisible) {
        return null;
    }

    LegendItem result = new LegendItem(label, description, toolTipText, 
            urlText, shape, paint, outlineStroke, outlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    if (dataset instanceof CategoryDataset) {
        result.setSeriesKey(((CategoryDataset) dataset).getRowKey(series));
    } else if (dataset instanceof XYDataset) {
        result.setSeriesKey(((XYDataset) dataset).getSeriesKey(series));
    }
    result.setSeriesIndex(series);
    return result;
}
```

---

### 2. Refactored `getLegendItem` in `AreaRenderer.java`
```java
public LegendItem getLegendItem(int datasetIndex, int series) {

    CategoryPlot cp = getPlot();
    if (cp == null) {
        return null;
    }

    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }

    CategoryDataset dataset = cp.getDataset(datasetIndex);
    String label = getLegendItemLabelGenerator().generateLabel(dataset, series);
    String description = label;
    String toolTipText = (getLegendItemToolTipGenerator() != null) 
            ? getLegendItemToolTipGenerator().generateLabel(dataset, series) 
            : null;
    String urlText = (getLegendItemURLGenerator() != null) 
            ? getLegendItemURLGenerator().generateLabel(dataset, series) 
            : null;
    Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);

    return createLegendItem(datasetIndex, series, cp, dataset, true, 
            label, description, toolTipText, urlText, shape, paint, 
            outlinePaint, outlineStroke);
}
```

---

### 3. Refactored `getLegendItem` in `XYBubbleRenderer.java`
```java
public LegendItem getLegendItem(int datasetIndex, int series) {

    XYPlot plot = getPlot();
    if (plot == null) {
        return null;
    }

    XYDataset dataset = plot.getDataset(datasetIndex);
    if (dataset == null || !getItemVisible(series, 0)) {
        return null;
    }

    String label = getLegendItemLabelGenerator().generateLabel(dataset, series);
    String description = label;
    String toolTipText = (getLegendItemToolTipGenerator() != null) 
            ? getLegendItemToolTipGenerator().generateLabel(dataset, series) 
            : null;
    String urlText = (getLegendItemURLGenerator() != null) 
            ? getLegendItemURLGenerator().generateLabel(dataset, series) 
            : null;
    Shape shape = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);

    return createLegendItem(datasetIndex, series, plot, dataset, true, 
            label, description, toolTipText, urlText, shape, paint, 
            outlinePaint, outlineStroke);
}
```",Type-3
163-2-3,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,getLegendItem,265,301,src,org.jfree.chart.renderer.xy,XYBubbleRenderer,getLegendItem,282,317,Type 3,"### Code Snippet 1 (from `BoxAndWhiskerRenderer.java`):

```java
/**
 * Returns a legend item for a series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return The legend item (possibly <code>null</code>).
 */
public LegendItem getLegendItem(int datasetIndex, int series) {

    CategoryPlot cp = getPlot();
    if (cp == null) {
        return null;
    }

    // check that a legend item needs to be displayed...
    if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
        return null;
    }

    CategoryDataset dataset = cp.getDataset(datasetIndex);
    String label = getLegendItemLabelGenerator().generateLabel(dataset,
            series);
    String description = label;
    String toolTipText = null;
    if (getLegendItemToolTipGenerator() != null) {
        toolTipText = getLegendItemToolTipGenerator().generateLabel(
                dataset, series);
    }
    String urlText = null;
    if (getLegendItemURLGenerator() != null) {
        urlText = getLegendItemURLGenerator().generateLabel(dataset,
                series);
    }
    Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);
    Paint paint = lookupSeriesPaint(series);
    Paint outlinePaint = lookupSeriesOutlinePaint(series);
    Stroke outlineStroke = lookupSeriesOutlineStroke(series);
    LegendItem result = new LegendItem(label, description, toolTipText,
            urlText, shape, paint, outlineStroke, outlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getRowKey(series));
    result.setSeriesIndex(series);
    return result;

}
```

---

### Code Snippet 2 (from `XYBubbleRenderer.java`):

```java
/**
 * Returns a legend item for the specified series.  The default method
 * is overridden so that the legend displays circles for all series.
 *
 * @param datasetIndex  the dataset index (zero-based).
 * @param series  the series index (zero-based).
 *
 * @return A legend item for the series.
 */
public LegendItem getLegendItem(int datasetIndex, int series) {
    LegendItem result = null;
    XYPlot plot = getPlot();
    if (plot == null) {
        return null;
    }
       
    XYDataset dataset = plot.getDataset(datasetIndex);
    if (dataset != null) {
        if (getItemVisible(series, 0)) {
            String label = getLegendItemLabelGenerator().generateLabel(
                    dataset, series);
            String description = label;
            String toolTipText = null;
            if (getLegendItemToolTipGenerator() != null) {
                toolTipText = getLegendItemToolTipGenerator().generateLabel(
                        dataset, series);
            }
            String urlText = null;
            if (getLegendItemURLGenerator() != null) {
                urlText = getLegendItemURLGenerator().generateLabel(
                        dataset, series);
            }
            Shape shape = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);
            Paint paint = lookupSeriesPaint(series);
            Paint outlinePaint = lookupSeriesOutlinePaint(series);
            Stroke outlineStroke = lookupSeriesOutlineStroke(series);
            result = new LegendItem(label, description, toolTipText, 
                    urlText, shape, paint, outlineStroke, outlinePaint);
            result.setDataset(dataset);
            result.setDatasetIndex(datasetIndex);
            result.setSeriesKey(dataset.getSeriesKey(series));
            result.setSeriesIndex(series);
        }
    }
    return result;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `CategoryPlot` vs. `XYPlot`, `CategoryDataset` vs. `XYDataset`, `Rectangle2D.Double` vs. `Ellipse2D.Double`, etc.).","### 1. Extracted Method (to be placed in the common superclass `AbstractXYItemRenderer` or `AbstractCategoryItemRenderer`):

```java
protected LegendItem createLegendItem(
        Plot plot,
        Dataset dataset,
        int datasetIndex,
        int series,
        boolean isSeriesVisible,
        boolean isSeriesVisibleInLegend,
        LegendItemLabelGenerator labelGenerator,
        LegendItemToolTipGenerator toolTipGenerator,
        LegendItemURLGenerator urlGenerator,
        Shape shape,
        Paint seriesPaint,
        Paint seriesOutlinePaint,
        Stroke seriesOutlineStroke) {

    if (plot == null || dataset == null || !isSeriesVisible || !isSeriesVisibleInLegend) {
        return null;
    }

    String label = labelGenerator.generateLabel(dataset, series);
    String description = label;
    String toolTipText = null;
    if (toolTipGenerator != null) {
        toolTipText = toolTipGenerator.generateLabel(dataset, series);
    }
    String urlText = null;
    if (urlGenerator != null) {
        urlText = urlGenerator.generateLabel(dataset, series);
    }

    LegendItem result = new LegendItem(label, description, toolTipText, urlText, shape, seriesPaint, seriesOutlineStroke, seriesOutlinePaint);
    result.setDataset(dataset);
    result.setDatasetIndex(datasetIndex);
    result.setSeriesKey(dataset.getSeriesKey(series));
    result.setSeriesIndex(series);

    return result;
}
```

---

### 2. Refactored Method Calls:

#### In `BoxAndWhiskerRenderer.java`:

```java
@Override
public LegendItem getLegendItem(int datasetIndex, int series) {
    CategoryPlot cp = getPlot();
    CategoryDataset dataset = cp != null ? cp.getDataset(datasetIndex) : null;

    return createLegendItem(
            cp,
            dataset,
            datasetIndex,
            series,
            isSeriesVisible(series),
            isSeriesVisibleInLegend(series),
            getLegendItemLabelGenerator(),
            getLegendItemToolTipGenerator(),
            getLegendItemURLGenerator(),
            new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0),
            lookupSeriesPaint(series),
            lookupSeriesOutlinePaint(series),
            lookupSeriesOutlineStroke(series)
    );
}
```

---

#### In `XYBubbleRenderer.java`:

```java
@Override
public LegendItem getLegendItem(int datasetIndex, int series) {
    XYPlot plot = getPlot();
    XYDataset dataset = plot != null ? plot.getDataset(datasetIndex) : null;

    return createLegendItem(
            plot,
            dataset,
            datasetIndex,
            series,
            getItemVisible(series, 0),
            true, // XYBubbleRenderer does not check series visibility in legend
            getLegendItemLabelGenerator(),
            getLegendItemToolTipGenerator(),
            getLegendItemURLGenerator(),
            new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0),
            lookupSeriesPaint(series),
            lookupSeriesOutlinePaint(series),
            lookupSeriesOutlineStroke(series)
    );
}
```",Type-3
165-1-2,src,org.jfree.chart.axis,NumberAxis,createIntegerTickUnits,783,820,src,org.jfree.chart.axis,NumberAxis,createIntegerTickUnits,918,956,Type 3,"**Code Snippet 1: Method: createIntegerTickUnits (Lines: 783-820)**

```java
public static TickUnitSource createIntegerTickUnits() {

    TickUnits units = new TickUnits();
    DecimalFormat df0 = new DecimalFormat(""0"");
    DecimalFormat df1 = new DecimalFormat(""#,##0"");
    units.add(new NumberTickUnit(1, df0));
    units.add(new NumberTickUnit(2, df0));
    units.add(new NumberTickUnit(5, df0));
    units.add(new NumberTickUnit(10, df0));
    units.add(new NumberTickUnit(20, df0));
    units.add(new NumberTickUnit(50, df0));
    units.add(new NumberTickUnit(100, df0));
    units.add(new NumberTickUnit(200, df0));
    units.add(new NumberTickUnit(500, df0));
    units.add(new NumberTickUnit(1000, df1));
    units.add(new NumberTickUnit(2000, df1));
    units.add(new NumberTickUnit(5000, df1));
    units.add(new NumberTickUnit(10000, df1));
    units.add(new NumberTickUnit(20000, df1));
    units.add(new NumberTickUnit(50000, df1));
    units.add(new NumberTickUnit(100000, df1));
    units.add(new NumberTickUnit(200000, df1));
    units.add(new NumberTickUnit(500000, df1));
    units.add(new NumberTickUnit(1000000, df1));
    units.add(new NumberTickUnit(2000000, df1));
    units.add(new NumberTickUnit(5000000, df1));
    units.add(new NumberTickUnit(10000000, df1));
    units.add(new NumberTickUnit(20000000, df1));
    units.add(new NumberTickUnit(50000000, df1));
    units.add(new NumberTickUnit(100000000, df1));
    units.add(new NumberTickUnit(200000000, df1));
    units.add(new NumberTickUnit(500000000, df1));
    units.add(new NumberTickUnit(1000000000, df1));
    units.add(new NumberTickUnit(2000000000, df1));
    units.add(new NumberTickUnit(5000000000.0, df1));
    units.add(new NumberTickUnit(10000000000.0, df1));

    return units;

}
```

---

**Code Snippet 2: Method: createIntegerTickUnits (Lines: 918-956)**

```java
public static TickUnitSource createIntegerTickUnits(Locale locale) {

    TickUnits units = new TickUnits();

    NumberFormat numberFormat = NumberFormat.getNumberInstance(locale);

    units.add(new NumberTickUnit(1,              numberFormat));
    units.add(new NumberTickUnit(2,              numberFormat));
    units.add(new NumberTickUnit(5,              numberFormat));
    units.add(new NumberTickUnit(10,             numberFormat));
    units.add(new NumberTickUnit(20,             numberFormat));
    units.add(new NumberTickUnit(50,             numberFormat));
    units.add(new NumberTickUnit(100,            numberFormat));
    units.add(new NumberTickUnit(200,            numberFormat));
    units.add(new NumberTickUnit(500,            numberFormat));
    units.add(new NumberTickUnit(1000,           numberFormat));
    units.add(new NumberTickUnit(2000,           numberFormat));
    units.add(new NumberTickUnit(5000,           numberFormat));
    units.add(new NumberTickUnit(10000,          numberFormat));
    units.add(new NumberTickUnit(20000,          numberFormat));
    units.add(new NumberTickUnit(50000,          numberFormat));
    units.add(new NumberTickUnit(100000,         numberFormat));
    units.add(new NumberTickUnit(200000,         numberFormat));
    units.add(new NumberTickUnit(500000,         numberFormat));
    units.add(new NumberTickUnit(1000000,        numberFormat));
    units.add(new NumberTickUnit(2000000,        numberFormat));
    units.add(new NumberTickUnit(5000000,        numberFormat));
    units.add(new NumberTickUnit(10000000,       numberFormat));
    units.add(new NumberTickUnit(20000000,       numberFormat));
    units.add(new NumberTickUnit(50000000,       numberFormat));
    units.add(new NumberTickUnit(100000000,      numberFormat));
    units.add(new NumberTickUnit(200000000,      numberFormat));
    units.add(new NumberTickUnit(500000000,      numberFormat));
    units.add(new NumberTickUnit(1000000000,     numberFormat));
    units.add(new NumberTickUnit(2000000000,     numberFormat));
    units.add(new NumberTickUnit(5000000000.0,   numberFormat));
    units.add(new NumberTickUnit(10000000000.0,  numberFormat));

    return units;

}
```

---

**Clone Type:** Type-2 (Identical except for variable names, literals, types).","**1. Extracted Method:**

```java
private static TickUnitSource createIntegerTickUnitsInternal(NumberFormat format) {

    TickUnits units = new TickUnits();

    units.add(new NumberTickUnit(1,              format));
    units.add(new NumberTickUnit(2,              format));
    units.add(new NumberTickUnit(5,              format));
    units.add(new NumberTickUnit(10,             format));
    units.add(new NumberTickUnit(20,             format));
    units.add(new NumberTickUnit(50,             format));
    units.add(new NumberTickUnit(100,            format));
    units.add(new NumberTickUnit(200,            format));
    units.add(new NumberTickUnit(500,            format));
    units.add(new NumberTickUnit(1000,           format));
    units.add(new NumberTickUnit(2000,           format));
    units.add(new NumberTickUnit(5000,           format));
    units.add(new NumberTickUnit(10000,          format));
    units.add(new NumberTickUnit(20000,          format));
    units.add(new NumberTickUnit(50000,          format));
    units.add(new NumberTickUnit(100000,         format));
    units.add(new NumberTickUnit(200000,         format));
    units.add(new NumberTickUnit(500000,         format));
    units.add(new NumberTickUnit(1000000,        format));
    units.add(new NumberTickUnit(2000000,        format));
    units.add(new NumberTickUnit(5000000,        format));
    units.add(new NumberTickUnit(10000000,       format));
    units.add(new NumberTickUnit(20000000,       format));
    units.add(new NumberTickUnit(50000000,       format));
    units.add(new NumberTickUnit(100000000,      format));
    units.add(new NumberTickUnit(200000000,      format));
    units.add(new NumberTickUnit(500000000,      format));
    units.add(new NumberTickUnit(1000000000,     format));
    units.add(new NumberTickUnit(2000000000,     format));
    units.add(new NumberTickUnit(5000000000.0,   format));
    units.add(new NumberTickUnit(10000000000.0,  format));

    return units;

}
```

---

**2. Method Calls Replacing the Clones:**

**For Code Snippet 1:**

```java
public static TickUnitSource createIntegerTickUnits() {
    return createIntegerTickUnitsInternal(new DecimalFormat(""0""));
}
```

**For Code Snippet 2:**

```java
public static TickUnitSource createIntegerTickUnits(Locale locale) {
    return createIntegerTickUnitsInternal(NumberFormat.getNumberInstance(locale));
}
```",Type-2
166-1-2,src,org.jfree.chart.renderer.category,BarRenderer,calculateBarWidth,521,555,src,org.jfree.chart.renderer.category,GroupedStackedBarRenderer,calculateBarWidth,130,167,Type 3,"### Code Snippet 1: `calculateBarWidth` from `BarRenderer.java`
```java
protected void calculateBarWidth(CategoryPlot plot,
                                 Rectangle2D dataArea,
                                 int rendererIndex,
                                 CategoryItemRendererState state) {

    CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);
    CategoryDataset dataset = plot.getDataset(rendererIndex);
    if (dataset != null) {
        int columns = dataset.getColumnCount();
        int rows = dataset.getRowCount();
        double space = 0.0;
        PlotOrientation orientation = plot.getOrientation();
        if (orientation == PlotOrientation.HORIZONTAL) {
            space = dataArea.getHeight();
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            space = dataArea.getWidth();
        }
        double maxWidth = space * getMaximumBarWidth();
        double categoryMargin = 0.0;
        double currentItemMargin = 0.0;
        if (columns > 1) {
            categoryMargin = domainAxis.getCategoryMargin();
        }
        if (rows > 1) {
            currentItemMargin = getItemMargin();
        }
        double used = space * (1 - domainAxis.getLowerMargin()
                                 - domainAxis.getUpperMargin()
                                 - categoryMargin - currentItemMargin);
        if ((rows * columns) > 0) {
            state.setBarWidth(Math.min(used / (rows * columns), maxWidth));
        }
        else {
            state.setBarWidth(Math.min(used, maxWidth));
        }
    }
}
```

---

### Code Snippet 2: `calculateBarWidth` from `GroupedStackedBarRenderer.java`
```java
protected void calculateBarWidth(CategoryPlot plot,
                                 Rectangle2D dataArea,
                                 int rendererIndex,
                                 CategoryItemRendererState state) {

    // calculate the bar width
    CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex);
    CategoryDataset data = plot.getDataset(rendererIndex);
    if (data != null) {
        PlotOrientation orientation = plot.getOrientation();
        double space = 0.0;
        if (orientation == PlotOrientation.HORIZONTAL) {
            space = dataArea.getHeight();
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            space = dataArea.getWidth();
        }
        double maxWidth = space * getMaximumBarWidth();
        int groups = this.seriesToGroupMap.getGroupCount();
        int categories = data.getColumnCount();
        int columns = groups * categories;
        double categoryMargin = 0.0;
        double itemMargin = 0.0;
        if (categories > 1) {
            categoryMargin = xAxis.getCategoryMargin();
        }
        if (groups > 1) {
            itemMargin = getItemMargin();
        }

        double used = space * (1 - xAxis.getLowerMargin()
                                 - xAxis.getUpperMargin()
                                 - categoryMargin - itemMargin);
        if (columns > 0) {
            state.setBarWidth(Math.min(used / columns, maxWidth));
        }
        else {
            state.setBarWidth(Math.min(used, maxWidth));
        }
    }
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the handling of `seriesToGroupMap` in the second snippet and the use of `xAxis` instead of `domainAxis`.","### 1. Extracted Method (to be placed in the superclass `AbstractCategoryItemRenderer`)
```java
protected double calculateBarWidthInternal(CategoryPlot plot,
                                           Rectangle2D dataArea,
                                           CategoryAxis axis,
                                           CategoryDataset dataset,
                                           int groups,
                                           double maximumBarWidth,
                                           double itemMargin) {
    PlotOrientation orientation = plot.getOrientation();
    double space = 0.0;
    if (orientation == PlotOrientation.HORIZONTAL) {
        space = dataArea.getHeight();
    } else if (orientation == PlotOrientation.VERTICAL) {
        space = dataArea.getWidth();
    }
    double maxWidth = space * maximumBarWidth;
    int categories = dataset.getColumnCount();
    int columns = groups * categories;
    double categoryMargin = 0.0;
    if (categories > 1) {
        categoryMargin = axis.getCategoryMargin();
    }
    double used = space * (1 - axis.getLowerMargin()
                             - axis.getUpperMargin()
                             - categoryMargin - itemMargin);
    if (columns > 0) {
        return Math.min(used / columns, maxWidth);
    } else {
        return Math.min(used, maxWidth);
    }
}
```

---

### 2. Refactored Method in `BarRenderer.java`
```java
protected void calculateBarWidth(CategoryPlot plot,
                                 Rectangle2D dataArea,
                                 int rendererIndex,
                                 CategoryItemRendererState state) {

    CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);
    CategoryDataset dataset = plot.getDataset(rendererIndex);
    if (dataset != null) {
        int rows = dataset.getRowCount();
        int groups = rows; // In BarRenderer, groups are equivalent to rows
        double itemMargin = getItemMargin();
        double barWidth = calculateBarWidthInternal(plot, dataArea, domainAxis, dataset, groups, getMaximumBarWidth(), itemMargin);
        state.setBarWidth(barWidth);
    }
}
```

---

### 3. Refactored Method in `GroupedStackedBarRenderer.java`
```java
protected void calculateBarWidth(CategoryPlot plot,
                                 Rectangle2D dataArea,
                                 int rendererIndex,
                                 CategoryItemRendererState state) {

    CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex);
    CategoryDataset data = plot.getDataset(rendererIndex);
    if (data != null) {
        int groups = this.seriesToGroupMap.getGroupCount();
        double itemMargin = getItemMargin();
        double barWidth = calculateBarWidthInternal(plot, dataArea, xAxis, data, groups, getMaximumBarWidth(), itemMargin);
        state.setBarWidth(barWidth);
    }
}
```",Type-3
166-2-3,src,org.jfree.chart.renderer.category,GroupedStackedBarRenderer,calculateBarWidth,130,167,src,org.jfree.chart.renderer.category,LevelRenderer,calculateItemWidth,182,215,Type 3,"### Code Snippet 1: `calculateBarWidth` (GroupedStackedBarRenderer.java)
```java
protected void calculateBarWidth(CategoryPlot plot,
                                 Rectangle2D dataArea,
                                 int rendererIndex,
                                 CategoryItemRendererState state) {

    // calculate the bar width
    CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex);
    CategoryDataset data = plot.getDataset(rendererIndex);
    if (data != null) {
        PlotOrientation orientation = plot.getOrientation();
        double space = 0.0;
        if (orientation == PlotOrientation.HORIZONTAL) {
            space = dataArea.getHeight();
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            space = dataArea.getWidth();
        }
        double maxWidth = space * getMaximumBarWidth();
        int groups = this.seriesToGroupMap.getGroupCount();
        int categories = data.getColumnCount();
        int columns = groups * categories;
        double categoryMargin = 0.0;
        double itemMargin = 0.0;
        if (categories > 1) {
            categoryMargin = xAxis.getCategoryMargin();
        }
        if (groups > 1) {
            itemMargin = getItemMargin();
        }

        double used = space * (1 - xAxis.getLowerMargin()
                                 - xAxis.getUpperMargin()
                                 - categoryMargin - itemMargin);
        if (columns > 0) {
            state.setBarWidth(Math.min(used / columns, maxWidth));
        }
        else {
            state.setBarWidth(Math.min(used, maxWidth));
        }
    }

}
```

---

### Code Snippet 2: `calculateItemWidth` (LevelRenderer.java)
```java
protected void calculateItemWidth(CategoryPlot plot,
                                  Rectangle2D dataArea,
                                  int rendererIndex,
                                  CategoryItemRendererState state) {

    CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);
    CategoryDataset dataset = plot.getDataset(rendererIndex);
    if (dataset != null) {
        int columns = dataset.getColumnCount();
        int rows = dataset.getRowCount();
        double space = 0.0;
        PlotOrientation orientation = plot.getOrientation();
        if (orientation == PlotOrientation.HORIZONTAL) {
            space = dataArea.getHeight();
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            space = dataArea.getWidth();
        }
        double maxWidth = space * getMaximumItemWidth();
        double categoryMargin = 0.0;
        double currentItemMargin = 0.0;
        if (columns > 1) {
            categoryMargin = domainAxis.getCategoryMargin();
        }
        if (rows > 1) {
            currentItemMargin = getItemMargin();
        }
        double used = space * (1 - domainAxis.getLowerMargin()
                                 - domainAxis.getUpperMargin()
                                 - categoryMargin - currentItemMargin);
        if ((rows * columns) > 0) {
            state.setBarWidth(Math.min(used / (rows * columns), maxWidth));
        }
        else {
            state.setBarWidth(Math.min(used, maxWidth));
        }
    }
}
```

---

### Clone Type:
The two code snippets exhibit **Type-3 Clone** characteristics. They are mostly similar but have some different statements, such as:
- The use of `seriesToGroupMap` in `calculateBarWidth` vs. `rows` in `calculateItemWidth`.
- The method names (`getMaximumBarWidth` vs. `getMaximumItemWidth`).
- The logic for calculating margins (`itemMargin` vs. `currentItemMargin`).
","### 1. Extracted Method (To be placed in the superclass `AbstractCategoryItemRenderer`)
```java
protected double calculateWidth(CategoryPlot plot,
                                Rectangle2D dataArea,
                                int rendererIndex,
                                CategoryItemRendererState state,
                                CategoryAxis axis,
                                CategoryDataset dataset,
                                double maxWidthFactor,
                                double lowerMargin,
                                double upperMargin,
                                double categoryMargin,
                                double itemMargin,
                                int totalItems) {

    if (dataset != null) {
        PlotOrientation orientation = plot.getOrientation();
        double space = 0.0;
        if (orientation == PlotOrientation.HORIZONTAL) {
            space = dataArea.getHeight();
        } else if (orientation == PlotOrientation.VERTICAL) {
            space = dataArea.getWidth();
        }
        double maxWidth = space * maxWidthFactor;
        double used = space * (1 - lowerMargin - upperMargin - categoryMargin - itemMargin);
        if (totalItems > 0) {
            state.setBarWidth(Math.min(used / totalItems, maxWidth));
        } else {
            state.setBarWidth(Math.min(used, maxWidth));
        }
    }
    return state.getBarWidth();
}
```

---

### 2. Refactored `calculateBarWidth` (GroupedStackedBarRenderer.java)
```java
protected void calculateBarWidth(CategoryPlot plot,
                                 Rectangle2D dataArea,
                                 int rendererIndex,
                                 CategoryItemRendererState state) {

    CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex);
    CategoryDataset data = plot.getDataset(rendererIndex);
    if (data != null) {
        int groups = this.seriesToGroupMap.getGroupCount();
        int categories = data.getColumnCount();
        int columns = groups * categories;
        double categoryMargin = (categories > 1) ? xAxis.getCategoryMargin() : 0.0;
        double itemMargin = (groups > 1) ? getItemMargin() : 0.0;

        calculateWidth(plot, dataArea, rendererIndex, state, xAxis, data,
                getMaximumBarWidth(), xAxis.getLowerMargin(), xAxis.getUpperMargin(),
                categoryMargin, itemMargin, columns);
    }
}
```

---

### 3. Refactored `calculateItemWidth` (LevelRenderer.java)
```java
protected void calculateItemWidth(CategoryPlot plot,
                                  Rectangle2D dataArea,
                                  int rendererIndex,
                                  CategoryItemRendererState state) {

    CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);
    CategoryDataset dataset = plot.getDataset(rendererIndex);
    if (dataset != null) {
        int columns = dataset.getColumnCount();
        int rows = dataset.getRowCount();
        int totalItems = rows * columns;
        double categoryMargin = (columns > 1) ? domainAxis.getCategoryMargin() : 0.0;
        double currentItemMargin = (rows > 1) ? getItemMargin() : 0.0;

        calculateWidth(plot, dataArea, rendererIndex, state, domainAxis, dataset,
                getMaximumItemWidth(), domainAxis.getLowerMargin(), domainAxis.getUpperMargin(),
                categoryMargin, currentItemMargin, totalItems);
    }
}
```",Type-3
182-1-3,src,org.jfree.chart,ChartFactory,createScatterPlot,1419,1450,src,org.jfree.chart,ChartFactory,createXYStepAreaChart,1758,1794,Type 3,"**Code Snippet 1: Method: createScatterPlot (Lines: 1419-1450)**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setAutoRangeIncludesZero(false);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createXYStepAreaChart (Lines: 1758-1794)**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator, 
            urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;
}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**.  
- They are mostly similar but have some different statements, such as the renderer type (`XYLineAndShapeRenderer` vs. `XYStepAreaRenderer`) and additional configurations in the second snippet (e.g., `plot.setDomainCrosshairVisible(false)` and `plot.setRangeCrosshairVisible(false)`).","**1. Extracted Method:**

```java
private static JFreeChart createXYChart(String title, String xAxisLabel, String yAxisLabel, 
                                        XYDataset dataset, PlotOrientation orientation, 
                                        boolean legend, boolean tooltips, boolean urls, 
                                        XYItemRenderer renderer, boolean setCrosshairs) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    if (setCrosshairs) {
        plot.setDomainCrosshairVisible(false);
        plot.setRangeCrosshairVisible(false);
    }

    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls:**

**For `createScatterPlot`:**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    return createXYChart(title, xAxisLabel, yAxisLabel, dataset, orientation, 
                         legend, tooltips, urls, renderer, false);
}
```

---

**For `createXYStepAreaChart`:**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, null, null);
    return createXYChart(title, xAxisLabel, yAxisLabel, dataset, orientation, 
                         legend, tooltips, urls, renderer, true);
}
```",Type-3
182-2-3,src,org.jfree.chart,ChartFactory,createStackedXYAreaChart,1601,1637,src,org.jfree.chart,ChartFactory,createXYStepAreaChart,1758,1794,Type 3,"**Code Snippet 1: Method: createStackedXYAreaChart (Lines: 1601-1637)**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  TableXYDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    xAxis.setLowerMargin(0.0);
    xAxis.setUpperMargin(0.0);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2(
            toolTipGenerator, urlGenerator);
    renderer.setOutline(true);
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    plot.setRangeAxis(yAxis);  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createXYStepAreaChart (Lines: 1758-1794)**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator, 
            urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;
}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**.  
- They are mostly similar but have some different statements, such as the renderer type (`StackedXYAreaRenderer2` vs. `XYStepAreaRenderer`), dataset type (`TableXYDataset` vs. `XYDataset`), and additional configurations like `plot.setDomainCrosshairVisible(false)` in the second snippet.","**1. Extracted Method:**

```java
private static JFreeChart createXYChart(String title,
                                        String xAxisLabel,
                                        String yAxisLabel,
                                        XYDataset dataset,
                                        PlotOrientation orientation,
                                        boolean legend,
                                        boolean tooltips,
                                        boolean urls,
                                        XYItemRenderer renderer,
                                        boolean setCrosshair) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    if (renderer instanceof StackedXYAreaRenderer2) {
        ((StackedXYAreaRenderer2) renderer).setToolTipGenerator(toolTipGenerator);
        ((StackedXYAreaRenderer2) renderer).setURLGenerator(urlGenerator);
        ((StackedXYAreaRenderer2) renderer).setOutline(true);
    } else if (renderer instanceof XYStepAreaRenderer) {
        ((XYStepAreaRenderer) renderer).setBaseToolTipGenerator(toolTipGenerator);
        ((XYStepAreaRenderer) renderer).setURLGenerator(urlGenerator);
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    if (setCrosshair) {
        plot.setDomainCrosshairVisible(false);
        plot.setRangeCrosshairVisible(false);
    }

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createStackedXYAreaChart`:**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  TableXYDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls) {

    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2();
    return createXYChart(title, xAxisLabel, yAxisLabel, dataset, orientation, legend, tooltips, urls, renderer, false);
}
```

---

**For `createXYStepAreaChart`:**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    XYStepAreaRenderer renderer = new XYStepAreaRenderer(XYStepAreaRenderer.AREA_AND_SHAPES);
    return createXYChart(title, xAxisLabel, yAxisLabel, dataset, orientation, legend, tooltips, urls, renderer, true);
}
```",Type-3
188-1-3,src,org.jfree.chart,ChartFactory,createScatterPlot,1419,1450,src,org.jfree.chart,ChartFactory,createXYStepChart,1704,1739,Type 3,"**Code Snippet 1: Method: createScatterPlot (Lines: 1419-1450)**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setAutoRangeIncludesZero(false);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createXYStepChart (Lines: 1704-1739)**

```java
public static JFreeChart createXYStepChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    DateAxis xAxis = new DateAxis(xAxisLabel);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer 
        = new XYStepRenderer(toolTipGenerator, urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Mostly similar but with some different statements)** clones.","**1. Extracted Method:**

```java
private static XYPlot createXYPlot(String xAxisLabel, String yAxisLabel, XYDataset dataset, 
                                   PlotOrientation orientation, boolean tooltips, boolean urls, 
                                   XYItemRenderer renderer) {
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    ValueAxis xAxis = (renderer instanceof XYStepRenderer) ? new DateAxis(xAxisLabel) : new NumberAxis(xAxisLabel);
    if (xAxis instanceof NumberAxis) {
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }

    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    if (renderer instanceof XYStepRenderer) {
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    } else {
        yAxis.setAutoRangeIncludesZero(false);
    }

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    if (renderer instanceof XYStepRenderer) {
        plot.setDomainCrosshairVisible(false);
        plot.setRangeCrosshairVisible(false);
    }

    return plot;
}
```

---

**2. Method Calls Replacing Clones:**

**For `createScatterPlot`:**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**For `createXYStepChart`:**

```java
public static JFreeChart createXYStepChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    XYItemRenderer renderer = new XYStepRenderer(null, null);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```",Type-3
188-1-4,src,org.jfree.chart,ChartFactory,createScatterPlot,1419,1450,src,org.jfree.chart,ChartFactory,createXYStepAreaChart,1758,1794,Type 3,"**Code Snippet 1: Method: createScatterPlot (Lines: 1419-1450)**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setAutoRangeIncludesZero(false);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createXYStepAreaChart (Lines: 1758-1794)**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator, 
            urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;
}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Mostly similar but with some different statements)** clones.","**1. Extracted Method:**

```java
private static XYPlot createXYPlot(String xAxisLabel, String yAxisLabel, XYDataset dataset, 
                                   PlotOrientation orientation, boolean tooltips, boolean urls, 
                                   XYItemRenderer renderer) {
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setAutoRangeIncludesZero(false);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    renderer.setBaseToolTipGenerator(toolTipGenerator);
    renderer.setURLGenerator(urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    return plot;
}
```

---

**2. Method Calls Replacing Clones:**

**For `createScatterPlot`:**

```java
public static JFreeChart createScatterPlot(String title, String xAxisLabel,
        String yAxisLabel, XYDataset dataset, PlotOrientation orientation,
        boolean legend, boolean tooltips, boolean urls) {

    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```

---

**For `createXYStepAreaChart`:**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, null, null);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);

    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```",Type-3
188-2-3,src,org.jfree.chart,ChartFactory,createStackedXYAreaChart,1601,1637,src,org.jfree.chart,ChartFactory,createXYStepChart,1704,1739,Type 3,"**Code Snippet 1: Method: createStackedXYAreaChart (Lines: 1601-1637)**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  TableXYDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    xAxis.setLowerMargin(0.0);
    xAxis.setUpperMargin(0.0);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2(
            toolTipGenerator, urlGenerator);
    renderer.setOutline(true);
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    plot.setRangeAxis(yAxis);  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Code Snippet 2: Method: createXYStepChart (Lines: 1704-1739)**

```java
public static JFreeChart createXYStepChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    DateAxis xAxis = new DateAxis(xAxisLabel);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer 
        = new XYStepRenderer(toolTipGenerator, urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**. They are mostly similar but contain some different statements, such as the use of different axis types (`NumberAxis` vs. `DateAxis`), renderer types (`StackedXYAreaRenderer2` vs. `XYStepRenderer`), and additional configurations like `setDomainCrosshairVisible` and `setRangeCrosshairVisible`.","**1. Extracted Method:**

```java
private static JFreeChart createXYChart(String title,
                                        String xAxisLabel,
                                        String yAxisLabel,
                                        XYDataset dataset,
                                        PlotOrientation orientation,
                                        boolean legend,
                                        boolean tooltips,
                                        boolean urls,
                                        ValueAxis xAxis,
                                        XYItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    ValueAxis yAxis = new NumberAxis(yAxisLabel);
    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    if (renderer instanceof XYStepRenderer) {
        ((XYStepRenderer) renderer).setBaseToolTipGenerator(toolTipGenerator);
        ((XYStepRenderer) renderer).setURLGenerator(urlGenerator);
    } else if (renderer instanceof StackedXYAreaRenderer2) {
        ((StackedXYAreaRenderer2) renderer).setToolTipGenerator(toolTipGenerator);
        ((StackedXYAreaRenderer2) renderer).setURLGenerator(urlGenerator);
        ((StackedXYAreaRenderer2) renderer).setOutline(true);
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    if (renderer instanceof XYStepRenderer) {
        plot.setDomainCrosshairVisible(false);
        plot.setRangeCrosshairVisible(false);
    }

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```

---

**2. Method Calls:**

**For `createStackedXYAreaChart`:**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  TableXYDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls) {

    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    xAxis.setLowerMargin(0.0);
    xAxis.setUpperMargin(0.0);

    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2();

    return createXYChart(title, xAxisLabel, yAxisLabel, dataset, orientation, legend, tooltips, urls, xAxis, renderer);
}
```

---

**For `createXYStepChart`:**

```java
public static JFreeChart createXYStepChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    DateAxis xAxis = new DateAxis(xAxisLabel);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

    XYStepRenderer renderer = new XYStepRenderer();

    return createXYChart(title, xAxisLabel, yAxisLabel, dataset, orientation, legend, tooltips, urls, xAxis, renderer);
}
```",Type-3
188-2-4,src,org.jfree.chart,ChartFactory,createStackedXYAreaChart,1601,1637,src,org.jfree.chart,ChartFactory,createXYStepAreaChart,1758,1794,Type 3,"**Code Snippet 1: Method: createStackedXYAreaChart (Lines: 1601-1637)**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  TableXYDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    xAxis.setLowerMargin(0.0);
    xAxis.setUpperMargin(0.0);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2(
            toolTipGenerator, urlGenerator);
    renderer.setOutline(true);
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);

    plot.setRangeAxis(yAxis);  // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

**Code Snippet 2: Method: createXYStepAreaChart (Lines: 1758-1794)**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }
    XYItemRenderer renderer = new XYStepAreaRenderer(
            XYStepAreaRenderer.AREA_AND_SHAPES, toolTipGenerator, 
            urlGenerator);

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);
    plot.setRenderer(renderer);
    plot.setOrientation(orientation);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**

```java
private static XYPlot createXYPlot(String xAxisLabel, String yAxisLabel, 
                                   XYDataset dataset, PlotOrientation orientation, 
                                   boolean tooltips, boolean urls, 
                                   XYItemRenderer renderer) {
    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);

    XYToolTipGenerator toolTipGenerator = null;
    if (tooltips) {
        toolTipGenerator = new StandardXYToolTipGenerator();
    }

    XYURLGenerator urlGenerator = null;
    if (urls) {
        urlGenerator = new StandardXYURLGenerator();
    }

    if (renderer instanceof StackedXYAreaRenderer2) {
        ((StackedXYAreaRenderer2) renderer).setToolTipGenerator(toolTipGenerator);
        ((StackedXYAreaRenderer2) renderer).setURLGenerator(urlGenerator);
        ((StackedXYAreaRenderer2) renderer).setOutline(true);
    } else if (renderer instanceof XYStepAreaRenderer) {
        ((XYStepAreaRenderer) renderer).setToolTipGenerator(toolTipGenerator);
        ((XYStepAreaRenderer) renderer).setURLGenerator(urlGenerator);
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    return plot;
}
```

**2. Method Calls:**

**For `createStackedXYAreaChart`:**

```java
public static JFreeChart createStackedXYAreaChart(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  TableXYDataset dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls) {

    StackedXYAreaRenderer2 renderer = new StackedXYAreaRenderer2();
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);
    plot.setRangeAxis(plot.getRangeAxis()); // forces recalculation of the axis range

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```

**For `createXYStepAreaChart`:**

```java
public static JFreeChart createXYStepAreaChart(String title,
                                               String xAxisLabel,
                                               String yAxisLabel,
                                               XYDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    XYStepAreaRenderer renderer = new XYStepAreaRenderer(XYStepAreaRenderer.AREA_AND_SHAPES);
    XYPlot plot = createXYPlot(xAxisLabel, yAxisLabel, dataset, orientation, tooltips, urls, renderer);
    plot.setDomainCrosshairVisible(false);
    plot.setRangeCrosshairVisible(false);

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    return chart;
}
```",Type-3
210-1-2,src,org.jfree.chart,ChartFactory,createStackedBarChart,854,886,src,org.jfree.chart,ChartFactory,createAreaChart,1038,1071,Type 3,"**Code Snippet 1: Method: createStackedBarChart (Lines: 854-886)**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

    StackedBarRenderer renderer = new StackedBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createAreaChart (Lines: 1038-1071)**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);

    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    AreaRenderer renderer = new AreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:** Type-3 (Mostly similar but with some different statements).","**1. Extracted Method:**

```java
private static JFreeChart createCategoryChart(String title,
                                              String axisLabel1,
                                              String axisLabel2,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(axisLabel1);
    if (renderer instanceof AreaRenderer) {
        categoryAxis.setCategoryMargin(0.0);
    }
    ValueAxis valueAxis = new NumberAxis(axisLabel2);

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls:**

**For `createStackedBarChart`:**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    StackedBarRenderer renderer = new StackedBarRenderer();
    return createCategoryChart(title, domainAxisLabel, rangeAxisLabel, dataset, orientation, legend, tooltips, urls, renderer);
}
```

---

**For `createAreaChart`:**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    AreaRenderer renderer = new AreaRenderer();
    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation, legend, tooltips, urls, renderer);
}
```",Type-3
210-1-5,src,org.jfree.chart,ChartFactory,createStackedBarChart,854,886,src,org.jfree.chart,ChartFactory,createHistogram,2024,2052,Type 3,"**Code Snippet 1: Method: createStackedBarChart (Lines: 854-886)**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);

    StackedBarRenderer renderer = new StackedBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createHistogram (Lines: 2024-2052)**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    XYItemRenderer renderer = new XYBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**.  
- They are mostly similar in structure and logic but differ in specific details such as the dataset type (`CategoryDataset` vs. `IntervalXYDataset`), axis types (`CategoryAxis` vs. `NumberAxis`), renderer types (`StackedBarRenderer` vs. `XYBarRenderer`), and some method calls.","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title,
                                      String xAxisLabel,
                                      String yAxisLabel,
                                      Object dataset,
                                      PlotOrientation orientation,
                                      boolean legend,
                                      boolean tooltips,
                                      boolean urls,
                                      ValueAxis xAxis,
                                      ValueAxis yAxis,
                                      Object renderer,
                                      Object plot) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (xAxis instanceof NumberAxis) {
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }

    if (renderer instanceof StackedBarRenderer && tooltips) {
        ((StackedBarRenderer) renderer).setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    } else if (renderer instanceof XYBarRenderer && tooltips) {
        ((XYBarRenderer) renderer).setBaseToolTipGenerator(
                new StandardXYToolTipGenerator());
    }

    if (renderer instanceof StackedBarRenderer && urls) {
        ((StackedBarRenderer) renderer).setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    } else if (renderer instanceof XYBarRenderer && urls) {
        ((XYBarRenderer) renderer).setURLGenerator(
                new StandardXYURLGenerator());
    }

    if (plot instanceof CategoryPlot) {
        ((CategoryPlot) plot).setOrientation(orientation);
    } else if (plot instanceof XYPlot) {
        ((XYPlot) plot).setOrientation(orientation);
    }

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            (org.jfree.chart.plot.Plot) plot, legend);

    return chart;
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createStackedBarChart`:**

```java
public static JFreeChart createStackedBarChart(String title,
                                               String domainAxisLabel,
                                               String rangeAxisLabel,
                                               CategoryDataset dataset,
                                               PlotOrientation orientation,
                                               boolean legend,
                                               boolean tooltips,
                                               boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);
    ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);
    StackedBarRenderer renderer = new StackedBarRenderer();
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);

    return createChart(title, domainAxisLabel, rangeAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer, plot);
}
```

---

**For `createHistogram`:**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);
    XYBarRenderer renderer = new XYBarRenderer();
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);

    return createChart(title, xAxisLabel, yAxisLabel, dataset, orientation,
            legend, tooltips, urls, xAxis, yAxis, renderer, plot);
}
```",Type-3
210-2-3,src,org.jfree.chart,ChartFactory,createAreaChart,1038,1071,src,org.jfree.chart,ChartFactory,createStackedAreaChart,1096,1127,Type 3,"**Code Snippet 1: Method: createAreaChart (Lines: 1038-1071)**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);

    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    AreaRenderer renderer = new AreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

**Code Snippet 2: Method: createStackedAreaChart (Lines: 1096-1127)**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, 
            plot, legend);

    return chart;

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and types).","**1. Extracted Method:**

```java
private static JFreeChart createAreaChartBase(String title,
                                              String categoryAxisLabel,
                                              String valueAxisLabel,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;
}
```

**2. Method Calls Replacing the Clones:**

**For `createAreaChart`:**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    AreaRenderer renderer = new AreaRenderer();
    return createAreaChartBase(title, categoryAxisLabel, valueAxisLabel, dataset, 
            orientation, legend, tooltips, urls, renderer);
}
```

**For `createStackedAreaChart`:**

```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    return createAreaChartBase(title, categoryAxisLabel, valueAxisLabel, dataset, 
            orientation, legend, tooltips, urls, renderer);
}
```",Type-2
210-2-4,src,org.jfree.chart,ChartFactory,createAreaChart,1038,1071,src,org.jfree.chart,ChartFactory,createLineChart3D,1205,1235,Type 3,"**Code Snippet 1: Method: createAreaChart (Lines: 1038-1071)**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);

    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    AreaRenderer renderer = new AreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createLineChart3D (Lines: 1205-1235)**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

    LineRenderer3D renderer = new LineRenderer3D();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `CategoryAxis` vs. `CategoryAxis3D`, `ValueAxis` vs. `NumberAxis3D`, and `AreaRenderer` vs. `LineRenderer3D`.","**1. Extracted Method:**

```java
private static JFreeChart createCategoryChart(String title,
                                              String categoryAxisLabel,
                                              String valueAxisLabel,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryAxis categoryAxis,
                                              ValueAxis valueAxis,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);

    return chart;
}
```

---

**2. Method Calls:**

**For `createAreaChart`:**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);
    AreaRenderer renderer = new AreaRenderer();

    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```

**For `createLineChart3D`:**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);
    LineRenderer3D renderer = new LineRenderer3D();

    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation,
            legend, tooltips, urls, categoryAxis, valueAxis, renderer);
}
```",Type-3
210-3-5,src,org.jfree.chart,ChartFactory,createStackedAreaChart,1096,1127,src,org.jfree.chart,ChartFactory,createHistogram,2024,2052,Type 3,"### Code Snippet 1: Method `createStackedAreaChart` (Lines 1096-1127)
```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    StackedAreaRenderer renderer = new StackedAreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, 
            plot, legend);

    return chart;

}
```

---

### Code Snippet 2: Method `createHistogram` (Lines 2024-2052)
```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    XYItemRenderer renderer = new XYBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

### Clone Type:
The two code snippets exhibit **Type-3 Clone** because they are mostly similar but contain some different statements, such as the use of different axis types (`CategoryAxis` vs. `NumberAxis`), renderer types (`StackedAreaRenderer` vs. `XYBarRenderer`), and dataset types (`CategoryDataset` vs. `IntervalXYDataset`).","### 1. Extracted Method
```java
private static JFreeChart createChart(String title,
                                      String xAxisLabel,
                                      String yAxisLabel,
                                      Object dataset,
                                      PlotOrientation orientation,
                                      boolean legend,
                                      boolean tooltips,
                                      boolean urls,
                                      ValueAxis xAxis,
                                      ValueAxis yAxis,
                                      Object renderer,
                                      boolean isCategoryPlot) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (tooltips && renderer instanceof CategoryItemRenderer) {
        ((CategoryItemRenderer) renderer).setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    } else if (tooltips && renderer instanceof XYItemRenderer) {
        ((XYItemRenderer) renderer).setBaseToolTipGenerator(
                new StandardXYToolTipGenerator());
    }

    if (urls && renderer instanceof CategoryItemRenderer) {
        ((CategoryItemRenderer) renderer).setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    } else if (urls && renderer instanceof XYItemRenderer) {
        ((XYItemRenderer) renderer).setURLGenerator(
                new StandardXYURLGenerator());
    }

    if (isCategoryPlot) {
        CategoryPlot plot = new CategoryPlot((CategoryDataset) dataset, 
                                             (CategoryAxis) xAxis, 
                                             yAxis, 
                                             (CategoryItemRenderer) renderer);
        plot.setOrientation(orientation);
        return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    } else {
        XYPlot plot = new XYPlot((IntervalXYDataset) dataset, 
                                 xAxis, 
                                 yAxis, 
                                 (XYItemRenderer) renderer);
        plot.setOrientation(orientation);
        return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    }
}
```

---

### 2. Method Calls Replacing the Clones

#### Refactored `createStackedAreaChart`
```java
public static JFreeChart createStackedAreaChart(String title,
                                                String categoryAxisLabel,
                                                String valueAxisLabel,
                                                CategoryDataset dataset,
                                                PlotOrientation orientation,
                                                boolean legend,
                                                boolean tooltips,
                                                boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);
    StackedAreaRenderer renderer = new StackedAreaRenderer();

    return createChart(title, categoryAxisLabel, valueAxisLabel, dataset, 
                       orientation, legend, tooltips, urls, 
                       categoryAxis, valueAxis, renderer, true);
}
```

---

#### Refactored `createHistogram`
```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);
    XYItemRenderer renderer = new XYBarRenderer();

    return createChart(title, xAxisLabel, yAxisLabel, dataset, 
                       orientation, legend, tooltips, urls, 
                       xAxis, yAxis, renderer, false);
}
```",Type-3
210-4-5,src,org.jfree.chart,ChartFactory,createLineChart3D,1205,1235,src,org.jfree.chart,ChartFactory,createHistogram,2024,2052,Type 3,"**Code Snippet 1 - Method: createLineChart3D (Lines: 1205-1235)**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);

    LineRenderer3D renderer = new LineRenderer3D();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

**Code Snippet 2 - Method: createHistogram (Lines: 2024-2052)**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    XYItemRenderer renderer = new XYBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

**Clone Type:**  
The two code snippets exhibit **Type-3 (Mostly similar but with some different statements)** clones.","**1. Extracted Method**

```java
private static JFreeChart createChart(String title,
                                      ValueAxis xAxis,
                                      ValueAxis yAxis,
                                      Plot plot,
                                      PlotOrientation orientation,
                                      boolean legend,
                                      boolean tooltips,
                                      boolean urls,
                                      XYToolTipGenerator xyToolTipGenerator,
                                      XYURLGenerator xyUrlGenerator,
                                      CategoryToolTipGenerator categoryToolTipGenerator,
                                      CategoryURLGenerator categoryUrlGenerator) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    if (plot instanceof XYPlot) {
        XYItemRenderer renderer = ((XYPlot) plot).getRenderer();
        if (tooltips && renderer != null && xyToolTipGenerator != null) {
            renderer.setBaseToolTipGenerator(xyToolTipGenerator);
        }
        if (urls && renderer != null && xyUrlGenerator != null) {
            renderer.setURLGenerator(xyUrlGenerator);
        }
    } else if (plot instanceof CategoryPlot) {
        CategoryItemRenderer renderer = ((CategoryPlot) plot).getRenderer();
        if (tooltips && renderer != null && categoryToolTipGenerator != null) {
            renderer.setBaseToolTipGenerator(categoryToolTipGenerator);
        }
        if (urls && renderer != null && categoryUrlGenerator != null) {
            renderer.setBaseItemURLGenerator(categoryUrlGenerator);
        }
    }

    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls**

**For `createLineChart3D`**

```java
public static JFreeChart createLineChart3D(String title,
                                           String categoryAxisLabel,
                                           String valueAxisLabel,
                                           CategoryDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);
    LineRenderer3D renderer = new LineRenderer3D();
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);

    return createChart(title, categoryAxis, valueAxis, plot, orientation, legend, tooltips, urls,
            null, null, new StandardCategoryToolTipGenerator(), new StandardCategoryURLGenerator());
}
```

**For `createHistogram`**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);
    XYBarRenderer renderer = new XYBarRenderer();
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);

    return createChart(title, xAxis, yAxis, plot, orientation, legend, tooltips, urls,
            new StandardXYToolTipGenerator(), new StandardXYURLGenerator(), null, null);
}
```",Type-3
211-1-2,src,org.jfree.chart,ChartFactory,createAreaChart,1038,1071,src,org.jfree.chart,ChartFactory,createLineChart,1151,1181,Type 3,"**Code Snippet 1: Method: createAreaChart (Lines: 1038-1071)**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    categoryAxis.setCategoryMargin(0.0);

    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    AreaRenderer renderer = new AreaRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createLineChart (Lines: 1151-1181)**

```java
public static JFreeChart createLineChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    LineAndShapeRenderer renderer = new LineAndShapeRenderer(true, false);
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
These two code snippets are **Type-3 clones** (mostly similar but with some different statements).","**1. Extracted Method:**

```java
private static JFreeChart createCategoryChart(String title,
                                              String categoryAxisLabel,
                                              String valueAxisLabel,
                                              CategoryDataset dataset,
                                              PlotOrientation orientation,
                                              boolean legend,
                                              boolean tooltips,
                                              boolean urls,
                                              CategoryItemRenderer renderer) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(new StandardCategoryURLGenerator());
    }

    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, renderer);
    plot.setOrientation(orientation);
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createAreaChart`:**

```java
public static JFreeChart createAreaChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    AreaRenderer renderer = new AreaRenderer();
    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation, legend, tooltips, urls, renderer);
}
```

**For `createLineChart`:**

```java
public static JFreeChart createLineChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    LineAndShapeRenderer renderer = new LineAndShapeRenderer(true, false);
    return createCategoryChart(title, categoryAxisLabel, valueAxisLabel, dataset, orientation, legend, tooltips, urls, renderer);
}
```",Type-3
211-2-3,src,org.jfree.chart,ChartFactory,createLineChart,1151,1181,src,org.jfree.chart,ChartFactory,createHistogram,2024,2052,Type 3,"**Code Snippet 1: Method: createLineChart (Lines: 1151-1181)**

```java
public static JFreeChart createLineChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    LineAndShapeRenderer renderer = new LineAndShapeRenderer(true, false);
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createHistogram (Lines: 2024-2052)**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    XYItemRenderer renderer = new XYBarRenderer();
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);
    return chart;

}
```

---

**Clone Type:**  
The two code snippets exhibit **Type-3 (Near-Miss Clone)**.  
- They are mostly similar in structure and logic but differ in specific details such as the dataset type, axis types, renderer type, and tooltip/url generator implementations.","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title,
                                      String xAxisLabel,
                                      String yAxisLabel,
                                      Object dataset,
                                      PlotOrientation orientation,
                                      boolean legend,
                                      boolean tooltips,
                                      boolean urls,
                                      boolean isCategoryPlot,
                                      boolean isLineChart) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    ValueAxis xAxis;
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    if (isCategoryPlot) {
        xAxis = new CategoryAxis(xAxisLabel);
    } else {
        xAxis = new NumberAxis(xAxisLabel);
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }

    Object renderer;
    if (isLineChart) {
        renderer = isCategoryPlot
                ? new LineAndShapeRenderer(true, false)
                : new XYLineAndShapeRenderer(true, false);
    } else {
        renderer = new XYBarRenderer();
    }

    if (tooltips) {
        if (isCategoryPlot) {
            ((CategoryItemRenderer) renderer).setBaseToolTipGenerator(
                    new StandardCategoryToolTipGenerator());
        } else {
            ((XYItemRenderer) renderer).setBaseToolTipGenerator(
                    new StandardXYToolTipGenerator());
        }
    }

    if (urls) {
        if (isCategoryPlot) {
            ((CategoryItemRenderer) renderer).setBaseItemURLGenerator(
                    new StandardCategoryURLGenerator());
        } else {
            ((XYItemRenderer) renderer).setURLGenerator(
                    new StandardXYURLGenerator());
        }
    }

    if (isCategoryPlot) {
        CategoryPlot plot = new CategoryPlot((CategoryDataset) dataset,
                (CategoryAxis) xAxis, yAxis, (CategoryItemRenderer) renderer);
        plot.setOrientation(orientation);
        return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    } else {
        XYPlot plot = new XYPlot((IntervalXYDataset) dataset, xAxis, yAxis,
                (XYItemRenderer) renderer);
        plot.setOrientation(orientation);
        return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
    }
}
```

---

**2. Method Calls:**

**For `createLineChart`:**

```java
public static JFreeChart createLineChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {
    return createChart(title, categoryAxisLabel, valueAxisLabel, dataset,
            orientation, legend, tooltips, urls, true, true);
}
```

**For `createHistogram`:**

```java
public static JFreeChart createHistogram(String title,
                                         String xAxisLabel,
                                         String yAxisLabel,
                                         IntervalXYDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {
    return createChart(title, xAxisLabel, yAxisLabel, dataset,
            orientation, legend, tooltips, urls, false, false);
}
```",Type-3
230-1-2,src,org.jfree.chart.axis,CategoryAxis,draw,846,868,src,org.jfree.chart.axis,NumberAxis,draw,646,678,Type 3,"### Code Snippet 1 (CategoryAxis.java, method `draw`, lines 846-868):
```java
public AxisState draw(Graphics2D g2,
                      double cursor,
                      Rectangle2D plotArea,
                      Rectangle2D dataArea,
                      RectangleEdge edge,
                      PlotRenderingInfo plotState) {

    // if the axis is not visible, don't draw it...
    if (!isVisible()) {
        return new AxisState(cursor);
    }

    if (isAxisLineVisible()) {
        drawAxisLine(g2, cursor, dataArea, edge);
    }

    // draw the category labels and axis label
    AxisState state = new AxisState(cursor);
    state = drawCategoryLabels(g2, plotArea, dataArea, edge, state,
            plotState);
    state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state);

    return state;

}
```

---

### Code Snippet 2 (NumberAxis.java, method `draw`, lines 646-678):
```java
public AxisState draw(Graphics2D g2,
                      double cursor,
                      Rectangle2D plotArea,
                      Rectangle2D dataArea,
                      RectangleEdge edge,
                      PlotRenderingInfo plotState) {

    AxisState state = null;
    // if the axis is not visible, don't draw it...
    if (!isVisible()) {
        state = new AxisState(cursor);
        // even though the axis is not visible, we need ticks for the
        // gridlines...
        List ticks = refreshTicks(g2, state, dataArea, edge);
        state.setTicks(ticks);
        return state;
    }

    // draw the tick marks and labels...
    state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge);

    // draw the axis label...
    state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state);

    return state;

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** (e.g., `drawCategoryLabels` vs. `drawTickMarksAndLabels`, handling of `refreshTicks`, etc.).","### 1. Extracted Method (To be placed in the common superclass `Axis`):
```java
protected AxisState drawAxisCommon(Graphics2D g2,
                                   double cursor,
                                   Rectangle2D plotArea,
                                   Rectangle2D dataArea,
                                   RectangleEdge edge,
                                   PlotRenderingInfo plotState,
                                   boolean isAxisLineVisible,
                                   boolean isVisible,
                                   AxisState initialState,
                                   Function<AxisState, AxisState> drawLabelsFunction) {

    // if the axis is not visible, don't draw it...
    if (!isVisible) {
        return initialState;
    }

    if (isAxisLineVisible) {
        drawAxisLine(g2, cursor, dataArea, edge);
    }

    // draw the labels and axis label
    AxisState state = drawLabelsFunction.apply(initialState);
    state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state);

    return state;
}
```

---

### 2. Refactored Method Call in `CategoryAxis.java`:
```java
@Override
public AxisState draw(Graphics2D g2,
                      double cursor,
                      Rectangle2D plotArea,
                      Rectangle2D dataArea,
                      RectangleEdge edge,
                      PlotRenderingInfo plotState) {

    return drawAxisCommon(
        g2,
        cursor,
        plotArea,
        dataArea,
        edge,
        plotState,
        isAxisLineVisible(),
        isVisible(),
        new AxisState(cursor),
        (state) -> drawCategoryLabels(g2, plotArea, dataArea, edge, state, plotState)
    );
}
```

---

### 3. Refactored Method Call in `NumberAxis.java`:
```java
@Override
public AxisState draw(Graphics2D g2,
                      double cursor,
                      Rectangle2D plotArea,
                      Rectangle2D dataArea,
                      RectangleEdge edge,
                      PlotRenderingInfo plotState) {

    return drawAxisCommon(
        g2,
        cursor,
        plotArea,
        dataArea,
        edge,
        plotState,
        isAxisLineVisible(),
        isVisible(),
        new AxisState(cursor),
        (state) -> drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge)
    );
}
```",Type-3
242-3-5,src,org.jfree.chart.axis,CyclicNumberAxis,equals,1178,1209,src,org.jfree.chart.renderer.category,ScatterRenderer,equals,487,517,Type 3,"```java
// Code snippet from CyclicNumberAxis.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CyclicNumberAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CyclicNumberAxis that = (CyclicNumberAxis) obj;      
    if (this.period != that.period) {
        return false;
    }
    if (this.offset != that.offset) {
        return false;
    }
    if (!PaintUtilities.equal(this.advanceLinePaint, 
            that.advanceLinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.advanceLineStroke, 
            that.advanceLineStroke)) {
        return false;
    }
    if (this.advanceLineVisible != that.advanceLineVisible) {
        return false;
    }
    if (this.boundMappedToLastCycle != that.boundMappedToLastCycle) {
        return false;
    }
    return true;
}
```

```java
// Code snippet from ScatterRenderer.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ScatterRenderer)) {
        return false;
    }
    ScatterRenderer that = (ScatterRenderer) obj;
    if (!ObjectUtilities.equal(this.seriesShapesFilled,
            that.seriesShapesFilled)) {
        return false;
    }
    if (this.baseShapesFilled != that.baseShapesFilled) {
        return false;
    }
    if (this.useFillPaint != that.useFillPaint) {
        return false;
    }
    if (this.drawOutlines != that.drawOutlines) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (this.useSeriesOffset != that.useSeriesOffset) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractSuperClass)
protected boolean equalsHelper(Object obj, Object that, Object[] fields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (fields[i] instanceof Boolean) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored equals method in CyclicNumberAxis.java
public boolean equals(Object obj) {
    if (!(obj instanceof CyclicNumberAxis)) {
        return false;
    }
    CyclicNumberAxis that = (CyclicNumberAxis) obj;
    return equalsHelper(
        obj,
        that,
        new Object[]{this.period, this.offset, this.advanceLinePaint, this.advanceLineStroke, this.advanceLineVisible, this.boundMappedToLastCycle},
        new Object[]{that.period, that.offset, that.advanceLinePaint, that.advanceLineStroke, that.advanceLineVisible, that.boundMappedToLastCycle}
    );
}
```

```java
// 3. Refactored equals method in ScatterRenderer.java
public boolean equals(Object obj) {
    if (!(obj instanceof ScatterRenderer)) {
        return false;
    }
    ScatterRenderer that = (ScatterRenderer) obj;
    return equalsHelper(
        obj,
        that,
        new Object[]{this.seriesShapesFilled, this.baseShapesFilled, this.useFillPaint, this.drawOutlines, this.useOutlinePaint, this.useSeriesOffset, this.itemMargin},
        new Object[]{that.seriesShapesFilled, that.baseShapesFilled, that.useFillPaint, that.drawOutlines, that.useOutlinePaint, that.useSeriesOffset, that.itemMargin}
    );
}
```",Type-3
242-4-5,src,org.jfree.chart.plot.dial,ArcDialFrame,equals,423,452,src,org.jfree.chart.renderer.category,ScatterRenderer,equals,487,517,Type 3,"```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ArcDialFrame)) {
        return false;
    }
    ArcDialFrame that = (ArcDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.startAngle != that.startAngle) {
        return false;
    }
    if (this.extent != that.extent) {
        return false;
    }
    if (this.innerRadius != that.innerRadius) {
        return false;
    }
    if (this.outerRadius != that.outerRadius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj the object (<code>null</code> permitted).
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ScatterRenderer)) {
        return false;
    }
    ScatterRenderer that = (ScatterRenderer) obj;
    if (!ObjectUtilities.equal(this.seriesShapesFilled,
            that.seriesShapesFilled)) {
        return false;
    }
    if (this.baseShapesFilled != that.baseShapesFilled) {
        return false;
    }
    if (this.useFillPaint != that.useFillPaint) {
        return false;
    }
    if (this.drawOutlines != that.drawOutlines) {
        return false;
    }
    if (this.useOutlinePaint != that.useOutlinePaint) {
        return false;
    }
    if (this.useSeriesOffset != that.useSeriesOffset) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param equalityChecks  the equality checks to perform.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityCheck[] equalityChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    for (EqualityCheck check : equalityChecks) {
        if (!check.isEqual(obj)) {
            return false;
        }
    }
    return super.equals(obj);
}

/**
 * Functional interface for equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean isEqual(Object obj);
}
```

---

### 2. Refactored `equals` Method in `ArcDialFrame`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ArcDialFrame.class, new EqualityCheck[] {
        o -> PaintUtilities.equal(this.backgroundPaint, ((ArcDialFrame) o).backgroundPaint),
        o -> PaintUtilities.equal(this.foregroundPaint, ((ArcDialFrame) o).foregroundPaint),
        o -> this.startAngle == ((ArcDialFrame) o).startAngle,
        o -> this.extent == ((ArcDialFrame) o).extent,
        o -> this.innerRadius == ((ArcDialFrame) o).innerRadius,
        o -> this.outerRadius == ((ArcDialFrame) o).outerRadius,
        o -> this.stroke.equals(((ArcDialFrame) o).stroke)
    });
}
```

---

### 3. Refactored `equals` Method in `ScatterRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj the object (<code>null</code> permitted).
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ScatterRenderer.class, new EqualityCheck[] {
        o -> ObjectUtilities.equal(this.seriesShapesFilled, ((ScatterRenderer) o).seriesShapesFilled),
        o -> this.baseShapesFilled == ((ScatterRenderer) o).baseShapesFilled,
        o -> this.useFillPaint == ((ScatterRenderer) o).useFillPaint,
        o -> this.drawOutlines == ((ScatterRenderer) o).drawOutlines,
        o -> this.useOutlinePaint == ((ScatterRenderer) o).useOutlinePaint,
        o -> this.useSeriesOffset == ((ScatterRenderer) o).useSeriesOffset,
        o -> this.itemMargin == ((ScatterRenderer) o).itemMargin
    });
}
```",Type-3
257-1-2,src,org.jfree.chart,ChartFactory,createLineChart,1151,1181,src,org.jfree.chart,ChartFactory,createXYLineChart,1657,1685,Type 3,"**Code Snippet 1: Method: createLineChart (Lines: 1151-1181)**

```java
public static JFreeChart createLineChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);
    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);

    LineAndShapeRenderer renderer = new LineAndShapeRenderer(true, false);
    if (tooltips) {
        renderer.setBaseToolTipGenerator(
                new StandardCategoryToolTipGenerator());
    }
    if (urls) {
        renderer.setBaseItemURLGenerator(
                new StandardCategoryURLGenerator());
    }
    CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, 
            renderer);
    plot.setOrientation(orientation);
    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Code Snippet 2: Method: createXYLineChart (Lines: 1657-1685)**

```java
public static JFreeChart createXYLineChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }
    NumberAxis xAxis = new NumberAxis(xAxisLabel);
    xAxis.setAutoRangeIncludesZero(false);
    NumberAxis yAxis = new NumberAxis(yAxisLabel);
    XYItemRenderer renderer = new XYLineAndShapeRenderer(true, false);
    XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
    plot.setOrientation(orientation);
    if (tooltips) {
        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());
    }
    if (urls) {
        renderer.setURLGenerator(new StandardXYURLGenerator());
    }

    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,
            plot, legend);

    return chart;

}
```

---

**Clone Type:**  
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `CategoryAxis` and `NumberAxis` in the first snippet versus `NumberAxis` in the second, and the use of `CategoryPlot` versus `XYPlot`.","**1. Extracted Method:**

```java
private static JFreeChart createLineChartInternal(String title,
                                                  String xAxisLabel,
                                                  String yAxisLabel,
                                                  Object dataset,
                                                  PlotOrientation orientation,
                                                  boolean legend,
                                                  boolean tooltips,
                                                  boolean urls,
                                                  boolean isCategoryPlot) {

    if (orientation == null) {
        throw new IllegalArgumentException(""Null 'orientation' argument."");
    }

    ValueAxis xAxis = isCategoryPlot ? new CategoryAxis(xAxisLabel) : new NumberAxis(xAxisLabel);
    if (!isCategoryPlot) {
        ((NumberAxis) xAxis).setAutoRangeIncludesZero(false);
    }
    ValueAxis yAxis = new NumberAxis(yAxisLabel);

    Object renderer = isCategoryPlot ? new LineAndShapeRenderer(true, false) : new XYLineAndShapeRenderer(true, false);
    if (tooltips) {
        if (isCategoryPlot) {
            ((LineAndShapeRenderer) renderer).setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());
        } else {
            ((XYLineAndShapeRenderer) renderer).setBaseToolTipGenerator(new StandardXYToolTipGenerator());
        }
    }
    if (urls) {
        if (isCategoryPlot) {
            ((LineAndShapeRenderer) renderer).setBaseItemURLGenerator(new StandardCategoryURLGenerator());
        } else {
            ((XYLineAndShapeRenderer) renderer).setURLGenerator(new StandardXYURLGenerator());
        }
    }

    Object plot = isCategoryPlot
            ? new CategoryPlot((CategoryDataset) dataset, (CategoryAxis) xAxis, yAxis, (LineAndShapeRenderer) renderer)
            : new XYPlot((XYDataset) dataset, xAxis, yAxis, (XYItemRenderer) renderer);

    if (!isCategoryPlot) {
        ((XYPlot) plot).setOrientation(orientation);
    } else {
        ((CategoryPlot) plot).setOrientation(orientation);
    }

    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, (Plot) plot, legend);
}
```

---

**2. Method Calls Replacing the Clones:**

**For `createLineChart`:**

```java
public static JFreeChart createLineChart(String title,
                                         String categoryAxisLabel,
                                         String valueAxisLabel,
                                         CategoryDataset dataset,
                                         PlotOrientation orientation,
                                         boolean legend,
                                         boolean tooltips,
                                         boolean urls) {
    return createLineChartInternal(title, categoryAxisLabel, valueAxisLabel, dataset, orientation, legend, tooltips, urls, true);
}
```

**For `createXYLineChart`:**

```java
public static JFreeChart createXYLineChart(String title,
                                           String xAxisLabel,
                                           String yAxisLabel,
                                           XYDataset dataset,
                                           PlotOrientation orientation,
                                           boolean legend,
                                           boolean tooltips,
                                           boolean urls) {
    return createLineChartInternal(title, xAxisLabel, yAxisLabel, dataset, orientation, legend, tooltips, urls, false);
}
```",Type-3
274-1-2,src,org.jfree.chart.annotations,XYDrawableAnnotation,equals,150,179,src,org.jfree.chart.axis,CategoryLabelPosition,equals,235,261,Type 3,"### Code Snippet 1 (from `XYDrawableAnnotation` class, `equals` method):

```java
/**
 * Tests this annotation for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == this) { // simple case
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYDrawableAnnotation)) {
        return false;
    }
    XYDrawableAnnotation that = (XYDrawableAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (this.width != that.width) {
        return false;
    }
    if (this.height != that.height) {
        return false;
    }
    if (!ObjectUtilities.equal(this.drawable, that.drawable)) {
        return false;
    }
    // seem to be the same...
    return true;

}
```

---

### Code Snippet 2 (from `CategoryLabelPosition` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPosition)) {
        return false;
    }
    CategoryLabelPosition that = (CategoryLabelPosition) obj;
    if (!this.categoryAnchor.equals(that.categoryAnchor)) {
        return false;
    }
    if (!this.labelAnchor.equals(that.labelAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (this.widthType != that.widthType) {
        return false;
    }
    if (this.widthRatio != that.widthRatio) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`x`, `y`, `width`, `height`, `drawable` in the first snippet vs. `categoryAnchor`, `labelAnchor`, `rotationAnchor`, `angle`, `widthType`, `widthRatio` in the second snippet) and the use of `ObjectUtilities.equal` in the first snippet versus direct `.equals` calls in the second snippet.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare against.
 * @param fields  the fields to compare.
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean fieldsEqual(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (Double.compare((Double) thisField, (Double) thatField) != 0) {
                return false;
            }
        } else if (thisField instanceof Float && thatField instanceof Float) {
            if (Float.compare((Float) thisField, (Float) thatField) != 0) {
                return false;
            }
        } else if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYDrawableAnnotation`:

```java
/**
 * Tests this annotation for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (!super.equals(obj)) {
        return false;
    }
    XYDrawableAnnotation that = (XYDrawableAnnotation) obj;
    return fieldsEqual(obj, new Object[][] {
        { this.x, that.x },
        { this.y, that.y },
        { this.width, that.width },
        { this.height, that.height },
        { this.drawable, that.drawable }
    });
}
```

---

### 3. Refactored `equals` Method in `CategoryLabelPosition`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return fieldsEqual(obj, new Object[][] {
        { this.categoryAnchor, ((CategoryLabelPosition) obj).categoryAnchor },
        { this.labelAnchor, ((CategoryLabelPosition) obj).labelAnchor },
        { this.rotationAnchor, ((CategoryLabelPosition) obj).rotationAnchor },
        { this.angle, ((CategoryLabelPosition) obj).angle },
        { this.widthType, ((CategoryLabelPosition) obj).widthType },
        { this.widthRatio, ((CategoryLabelPosition) obj).widthRatio }
    });
}
```",Type-3
274-2-3,src,org.jfree.chart.axis,CategoryLabelPosition,equals,235,261,src,org.jfree.chart.axis,ColorBar,equals,431,458,Type 3,"### Code Snippet 1 (from `CategoryLabelPosition` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPosition)) {
        return false;
    }
    CategoryLabelPosition that = (CategoryLabelPosition) obj;
    if (!this.categoryAnchor.equals(that.categoryAnchor)) {
        return false;
    }
    if (!this.labelAnchor.equals(that.labelAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (this.widthType != that.widthType) {
        return false;
    }
    if (this.widthRatio != that.widthRatio) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `ColorBar` class, `equals` method):

```java
/**
 * Tests this object for equality with another.
 * 
 * @param obj  the object to test against.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ColorBar)) {
        return false;   
    }
    ColorBar that = (ColorBar) obj;
    if (!this.axis.equals(that.axis)) {
        return false;
    }
    if (this.colorBarThickness != that.colorBarThickness) {
        return false;
    }
    if (this.colorBarThicknessPercent != that.colorBarThicknessPercent) {
        return false;
    }
    if (!this.colorPalette.equals(that.colorPalette)) {
        return false;
    }
    if (this.colorBarLength != that.colorBarLength) {
        return false;
    }
    if (this.outerGap != that.outerGap) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific logic).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on their fields.
 * 
 * @param obj  the object to test against.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean areFieldsEqual(Object obj, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[0];
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
    }
}
```",Type-3
274-2-4,src,org.jfree.chart.axis,CategoryLabelPosition,equals,235,261,src,org.jfree.chart.axis,MarkerAxisBand,equals,233,259,Type 3,"### Code Snippet 1: `equals` method from `CategoryLabelPosition` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPosition)) {
        return false;
    }
    CategoryLabelPosition that = (CategoryLabelPosition) obj;
    if (!this.categoryAnchor.equals(that.categoryAnchor)) {
        return false;
    }
    if (!this.labelAnchor.equals(that.labelAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (this.widthType != that.widthType) {
        return false;
    }
    if (this.widthRatio != that.widthRatio) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `MarkerAxisBand` class
```java
/**
 * Tests this axis for equality with another object.  Note that the axis 
 * that the band belongs to is ignored in the test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MarkerAxisBand)) {
        return false;
    }
    MarkerAxisBand that = (MarkerAxisBand) obj;
    if (this.topOuterGap != that.topOuterGap) {
        return false;
    }
    if (this.topInnerGap != that.topInnerGap) {
        return false;
    }
    if (this.bottomInnerGap != that.bottomInnerGap) {
        return false;
    }
    if (this.bottomOuterGap != that.bottomOuterGap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.font, that.font)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.markers, that.markers)) {
        return false;
    }
    return true;
}
```

---

### Clone Type
The two code snippets represent **Type-3 clones**. They are **mostly similar but with some different statements**. Specifically:
- The fields being compared differ (`categoryAnchor`, `labelAnchor`, etc., in `CategoryLabelPosition` vs. `topOuterGap`, `font`, etc., in `MarkerAxisBand`).
- The utility method `ObjectUtilities.equal` is used in `MarkerAxisBand` but not in `CategoryLabelPosition`.
","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality by checking their respective fields.
 *
 * @param obj  the object to compare with.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean areFieldsEqual(Object obj, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryLabelPosition`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof CategoryLabelPosition)) {
        return false;
    }
    CategoryLabelPosition that = (CategoryLabelPosition) obj;
    return areFieldsEqual(obj,
        this.categoryAnchor.equals(that.categoryAnchor),
        this.labelAnchor.equals(that.labelAnchor),
        this.rotationAnchor.equals(that.rotationAnchor),
        this.angle == that.angle,
        this.widthType == that.widthType,
        this.widthRatio == that.widthRatio
    );
}
```

---

### 3. Refactored `equals` Method in `MarkerAxisBand`
```java
/**
 * Tests this axis for equality with another object.  Note that the axis 
 * that the band belongs to is ignored in the test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof MarkerAxisBand)) {
        return false;
    }
    MarkerAxisBand that = (MarkerAxisBand) obj;
    return areFieldsEqual(obj,
        this.topOuterGap == that.topOuterGap,
        this.topInnerGap == that.topInnerGap,
        this.bottomInnerGap == that.bottomInnerGap,
        this.bottomOuterGap == that.bottomOuterGap,
        ObjectUtilities.equal(this.font, that.font),
        ObjectUtilities.equal(this.markers, that.markers)
    );
}
```",Type-3
274-2-5,src,org.jfree.chart.axis,CategoryLabelPosition,equals,235,261,src,org.jfree.chart.plot.dial,StandardDialRange,equals,350,376,Type 3,"### Code Snippet 1 (CategoryLabelPosition.java, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPosition)) {
        return false;
    }
    CategoryLabelPosition that = (CategoryLabelPosition) obj;
    if (!this.categoryAnchor.equals(that.categoryAnchor)) {
        return false;
    }
    if (!this.labelAnchor.equals(that.labelAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (this.widthType != that.widthType) {
        return false;
    }
    if (this.widthRatio != that.widthRatio) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (StandardDialRange.java, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialRange)) {
        return false;
    }
    StandardDialRange that = (StandardDialRange) obj;
    if (this.scaleIndex != that.scaleIndex) {
        return false;
    }
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.innerRadius != that.innerRadius) {
        return false;
    }
    if (this.outerRadius != that.outerRadius) {
        return false;
    }
    return super.equals(obj); 
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on their properties.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param properties  the properties to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areObjectsEqual(Object obj, Class<?> instanceClass, Object... properties) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] otherProperties = extractProperties(obj, properties.length);
    for (int i = 0; i < properties.length; i++) {
        if (properties[i] instanceof Double) {
            if ((double) properties[i] != (double) otherProperties[i]) {
                return false;
            }
        } else if (properties[i] instanceof Float) {
            if ((float) properties[i] != (float) otherProperties[i]) {
                return false;
            }
        } else if (!properties[i].equals(otherProperties[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the properties of an object for comparison.
 * 
 * @param obj  the object.
 * @param propertyCount  the number of properties to extract.
 * 
 * @return An array of property values.
 */
protected Object[] extractProperties(Object obj, int propertyCount) {
    // This method should be overridden in subclasses to extract the specific properties.
    throw new UnsupportedOperationException(""Subclasses must implement this method."");
}
```

---

### 2. Updated `equals` Method in `CategoryLabelPosition.java`:

```java
@Override
protected Object[] extractProperties(Object obj, int propertyCount) {
    CategoryLabelPosition that = (CategoryLabelPosition) obj;
    return new Object[] {
        that.categoryAnchor,
        that.labelAnchor,
        that.rotationAnchor,
        that.angle,
        that.widthType,
        that.widthRatio
    };
}

@Override
public boolean equals(Object obj) {
    return areObjectsEqual(obj, CategoryLabelPosition.class,
        this.categoryAnchor,
        this.labelAnchor,
        this.rotationAnchor,
        this.angle,
        this.widthType,
        this.widthRatio
    );
}
```

---

### 3. Updated `equals` Method in `StandardDialRange.java`:

```java
@Override
protected Object[] extractProperties(Object obj, int propertyCount) {
    StandardDialRange that = (StandardDialRange) obj;
    return new Object[] {
        that.scaleIndex,
        that.lowerBound,
        that.upperBound,
        that.paint,
        that.innerRadius,
        that.outerRadius
    };
}

@Override
public boolean equals(Object obj) {
    return areObjectsEqual(obj, StandardDialRange.class,
        this.scaleIndex,
        this.lowerBound,
        this.upperBound,
        this.paint,
        this.innerRadius,
        this.outerRadius
    );
}
```",Type-3
274-3-5,src,org.jfree.chart.axis,ColorBar,equals,431,458,src,org.jfree.chart.plot.dial,StandardDialRange,equals,350,376,Type 3,"### Code Snippet 1: `equals` method in `ColorBar` class
```java
/**
 * Tests this object for equality with another.
 * 
 * @param obj  the object to test against.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ColorBar)) {
        return false;   
    }
    ColorBar that = (ColorBar) obj;
    if (!this.axis.equals(that.axis)) {
        return false;
    }
    if (this.colorBarThickness != that.colorBarThickness) {
        return false;
    }
    if (this.colorBarThicknessPercent != that.colorBarThicknessPercent) {
        return false;
    }
    if (!this.colorPalette.equals(that.colorPalette)) {
        return false;
    }
    if (this.colorBarLength != that.colorBarLength) {
        return false;
    }
    if (this.outerGap != that.outerGap) {
        return false;
    }
    return true;
    
}
```

### Code Snippet 2: `equals` method in `StandardDialRange` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialRange)) {
        return false;
    }
    StandardDialRange that = (StandardDialRange) obj;
    if (this.scaleIndex != that.scaleIndex) {
        return false;
    }
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.innerRadius != that.innerRadius) {
        return false;
    }
    if (this.outerRadius != that.outerRadius) {
        return false;
    }
    return super.equals(obj); 
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`axis`, `colorBarThickness`, etc., in `ColorBar` vs. `scaleIndex`, `lowerBound`, etc., in `StandardDialRange`) and the use of `PaintUtilities.equal` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with another.
 * 
 * @param obj  the object to test against.
 * @param fields  the fields to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Object[] fields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) thatFields[i]) != 0) {
                return false;
            }
        } else if (fields[i] instanceof Integer) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (fields[i] instanceof Paint) {
            if (!PaintUtilities.equal((Paint) fields[i], (Paint) thatFields[i])) {
                return false;
            }
        } else {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ColorBar` Class
```java
/**
 * Tests this object for equality with another.
 * 
 * @param obj  the object to test against.
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[]{this.axis, this.colorBarThickness, this.colorBarThicknessPercent, 
                     this.colorPalette, this.colorBarLength, this.outerGap},
        new Object[]{((ColorBar) obj).axis, ((ColorBar) obj).colorBarThickness, 
                     ((ColorBar) obj).colorBarThicknessPercent, ((ColorBar) obj).colorPalette, 
                     ((ColorBar) obj).colorBarLength, ((ColorBar) obj).outerGap});
}
```

---

### 3. Refactored `equals` Method in `StandardDialRange` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[]{this.scaleIndex, this.lowerBound, this.upperBound, 
                     this.paint, this.innerRadius, this.outerRadius},
        new Object[]{((StandardDialRange) obj).scaleIndex, ((StandardDialRange) obj).lowerBound, 
                     ((StandardDialRange) obj).upperBound, ((StandardDialRange) obj).paint, 
                     ((StandardDialRange) obj).innerRadius, ((StandardDialRange) obj).outerRadius});
}
```",Type-3
278-1-2,src,org.jfree.chart.needle,MeterNeedle,equals,355,384,src,org.jfree.chart.plot.dial,ArcDialFrame,equals,423,452,Type 3,"### Code Snippet 1 (MeterNeedle.java, `equals` method, lines 355-384):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MeterNeedle)) {
        return false;
    }
    MeterNeedle that = (MeterNeedle) obj;
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.highlightPaint, that.highlightPaint)) {
        return false;
    }
    if (this.size != that.size) {
        return false;
    }
    if (this.rotateX != that.rotateX) {
        return false;
    }
    if (this.rotateY != that.rotateY) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (ArcDialFrame.java, `equals` method, lines 423-452):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ArcDialFrame)) {
        return false;
    }
    ArcDialFrame that = (ArcDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.startAngle != that.startAngle) {
        return false;
    }
    if (this.extent != that.extent) {
        return false;
    }
    if (this.innerRadius != that.innerRadius) {
        return false;
    }
    if (this.outerRadius != that.outerRadius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements and fields being compared.","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractDialLayer` or a new utility class):
```java
protected boolean commonEquals(Object obj, Paint outlinePaint, Paint fillPaint, Paint highlightPaint, Stroke outlineStroke, double rotateX, double rotateY, int size, Paint backgroundPaint, Paint foregroundPaint, double startAngle, double extent, double innerRadius, double outerRadius, Stroke stroke, boolean isMeterNeedle) {
    if (obj == this) {
        return true;
    }
    if (isMeterNeedle && !(obj instanceof MeterNeedle)) {
        return false;
    }
    if (!isMeterNeedle && !(obj instanceof ArcDialFrame)) {
        return false;
    }
    if (isMeterNeedle) {
        MeterNeedle that = (MeterNeedle) obj;
        if (!PaintUtilities.equal(outlinePaint, that.outlinePaint)) {
            return false;
        }
        if (!ObjectUtilities.equal(outlineStroke, that.outlineStroke)) {
            return false;
        }
        if (!PaintUtilities.equal(fillPaint, that.fillPaint)) {
            return false;
        }
        if (!PaintUtilities.equal(highlightPaint, that.highlightPaint)) {
            return false;
        }
        if (size != that.size) {
            return false;
        }
        if (rotateX != that.rotateX) {
            return false;
        }
        if (rotateY != that.rotateY) {
            return false;
        }
    } else {
        ArcDialFrame that = (ArcDialFrame) obj;
        if (!PaintUtilities.equal(backgroundPaint, that.backgroundPaint)) {
            return false;
        }
        if (!PaintUtilities.equal(foregroundPaint, that.foregroundPaint)) {
            return false;
        }
        if (startAngle != that.startAngle) {
            return false;
        }
        if (extent != that.extent) {
            return false;
        }
        if (innerRadius != that.innerRadius) {
            return false;
        }
        if (outerRadius != that.outerRadius) {
            return false;
        }
        if (!stroke.equals(that.stroke)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MeterNeedle.java`:
```java
@Override
public boolean equals(Object obj) {
    return commonEquals(obj, this.outlinePaint, this.fillPaint, this.highlightPaint, this.outlineStroke, this.rotateX, this.rotateY, this.size, null, null, 0, 0, 0, 0, null, true);
}
```

---

### 3. Refactored `equals` Method in `ArcDialFrame.java`:
```java
@Override
public boolean equals(Object obj) {
    return commonEquals(obj, null, null, null, null, 0, 0, 0, this.backgroundPaint, this.foregroundPaint, this.startAngle, this.extent, this.innerRadius, this.outerRadius, this.stroke, false) && super.equals(obj);
}
```",Type-3
292-1-6,src,org.jfree.chart.annotations,XYImageAnnotation,equals,244,269,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,Type 3,"```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    // seems to be the same...
    return true;
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYAreaRenderer)) {
        return false;   
    }
    XYAreaRenderer that = (XYAreaRenderer) obj;
    if (this.plotArea != that.plotArea) {
        return false;   
    }
    if (this.plotLines != that.plotLines) {
        return false;   
    }
    if (this.plotShapes != that.plotShapes) {
        return false;   
    }
    if (this.showOutline != that.showOutline) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;   
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","### 1. Extracted Method (to be placed in the superclass `AbstractXYAnnotation` or a common superclass):
```java
/**
 * Tests two objects for equality based on their specific properties.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check against.
 * @param properties  the properties to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... properties) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] otherProperties = ((AbstractXYAnnotation) obj).getProperties();
    for (int i = 0; i < properties.length; i++) {
        if (!ObjectUtilities.equal(properties[i], otherProperties[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Returns the properties of the current instance for equality comparison.
 * Subclasses must override this method to provide their specific properties.
 * 
 * @return An array of properties.
 */
protected Object[] getProperties() {
    return new Object[0]; // Default implementation, to be overridden.
}
```

### 2. Refactored `equals` Method in `XYImageAnnotation`:
```java
@Override
protected Object[] getProperties() {
    return new Object[] { this.x, this.y, this.image, this.anchor };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYImageAnnotation.class, this.x, this.y, this.image, this.anchor);
}
```

### 3. Refactored `equals` Method in `XYAreaRenderer`:
```java
@Override
protected Object[] getProperties() {
    return new Object[] { this.plotArea, this.plotLines, this.plotShapes, this.showOutline, this.legendArea };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYAreaRenderer.class, this.plotArea, this.plotLines, this.plotShapes, this.showOutline, this.legendArea);
}
```",Type-3
292-1-7,src,org.jfree.chart.annotations,XYImageAnnotation,equals,244,269,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,Type 3,"### Code Snippet 1: `equals` method from `XYImageAnnotation` class
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    // seems to be the same...
    return true;
}
```

---

### Code Snippet 2: `equals` method from `XYStepAreaRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the superclass `AbstractXYAnnotation`)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check against.
 * @param superEqualsResult  the result of calling super.equals(obj).
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!superEqualsResult) {
        return false;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((AbstractXYAnnotation) obj).getFieldsForEquality();
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Returns the fields to be used for equality comparison.
 * Subclasses must override this method to provide their specific fields.
 *
 * @return An array of fields for equality comparison.
 */
protected Object[] getFieldsForEquality() {
    return new Object[0];
}
```

---

### 2. Updated `equals` Method in `XYImageAnnotation`
```java
@Override
protected Object[] getFieldsForEquality() {
    return new Object[] { this.x, this.y, this.image, this.anchor };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYImageAnnotation.class, super.equals(obj), this.x, this.y, this.image, this.anchor);
}
```

---

### 3. Updated `equals` Method in `XYStepAreaRenderer`
```java
@Override
protected Object[] getFieldsForEquality() {
    return new Object[] { this.showOutline, this.shapesVisible, this.shapesFilled, this.plotArea, this.rangeBase };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYStepAreaRenderer.class, super.equals(obj), this.showOutline, this.shapesVisible, this.shapesFilled, this.plotArea, this.rangeBase);
}
```",Type-3
292-1-8,src,org.jfree.chart.annotations,XYImageAnnotation,equals,244,269,src,org.jfree.data,ComparableObjectSeries,equals,396,419,Type 3,"### Code Snippet 1: `equals` method from `XYImageAnnotation` class
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    // seems to be the same...
    return true;
}
```

---

### Code Snippet 2: `equals` method from `ComparableObjectSeries` class
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`x`, `y`, `image`, `anchor` in `XYImageAnnotation` vs. `maximumItemCount`, `autoSort`, `allowDuplicateXValues`, `data` in `ComparableObjectSeries`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param fields  the fields to compare for equality.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (Object[] field : fields) {
        if (!ObjectUtilities.equal(field[0], field[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYImageAnnotation`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    return equalsHelper(obj, new Object[][] {
        {this.x, that.x},
        {this.y, that.y},
        {this.image, that.image},
        {this.anchor, that.anchor}
    });
}
```

---

### 3. Refactored `equals` Method in `ComparableObjectSeries`
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    return equalsHelper(obj, new Object[][] {
        {this.maximumItemCount, that.maximumItemCount},
        {this.autoSort, that.autoSort},
        {this.allowDuplicateXValues, that.allowDuplicateXValues},
        {this.data, that.data}
    });
}
```",Type-3
292-1-9,src,org.jfree.chart.annotations,XYImageAnnotation,equals,244,269,src,org.jfree.data.time,Millisecond,equals,292,315,Type 3,"### Code Snippet 1: `equals` method from `XYImageAnnotation` class
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    // seems to be the same...
    return true;
}
```

---

### Code Snippet 2: `equals` method from `Millisecond` class
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Millisecond object
 * representing the same millisecond as this instance.
 *
 * @param obj  the object to compare
 *
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`x`, `y`, `image`, `anchor` in `XYImageAnnotation` vs. `millisecond`, `second`, `minute`, `hour`, `day` in `Millisecond`) and the use of `ObjectUtilities.equal` in one snippet but not the other.","### 1. Extracted Method (to be placed in the superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare.
 * @param fields  the fields to compare.
 * @return true if all fields are equal, false otherwise.
 */
protected boolean compareFields(Object obj, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```",Type-3
292-1-10,src,org.jfree.chart.annotations,XYImageAnnotation,equals,244,269,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (XYImageAnnotation.java, lines 244-269)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    // seems to be the same...
    return true;
}
```

### Code Snippet 2 (XYSeries.java, lines 685-708)
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYImageAnnotation` and `XYSeries`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param additionalChecks  a lambda function for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `XYImageAnnotation.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, XYImageAnnotation.class, (other) -> {
        XYImageAnnotation that = (XYImageAnnotation) other;
        return this.x == that.x
            && this.y == that.y
            && ObjectUtilities.equal(this.image, that.image)
            && this.anchor.equals(that.anchor);
    });
}
```

---

### 3. Refactored `equals` Method in `XYSeries.java`
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, XYSeries.class, (other) -> {
        XYSeries that = (XYSeries) other;
        return this.maximumItemCount == that.maximumItemCount
            && this.autoSort == that.autoSort
            && this.allowDuplicateXValues == that.allowDuplicateXValues
            && ObjectUtilities.equal(this.data, that.data);
    });
}
```",Type-3
292-2-6,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,Type 3,"```java
// Code Snippet 1: PieSectionEntity.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

```java
// Code Snippet 2: XYAreaRenderer.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYAreaRenderer)) {
        return false;   
    }
    XYAreaRenderer that = (XYAreaRenderer) obj;
    if (this.plotArea != that.plotArea) {
        return false;   
    }
    if (this.plotLines != that.plotLines) {
        return false;   
    }
    if (this.plotShapes != that.plotShapes) {
        return false;   
    }
    if (this.showOutline != that.showOutline) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;   
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractEntity or a similar superclass)
protected boolean baseEquals(Object obj, Class<?> clazz, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored PieSectionEntity.equals() method
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, PieSectionEntity.class, 
        new Object[] { this.dataset, this.pieIndex, this.sectionIndex, this.sectionKey }, 
        new Object[] { ((PieSectionEntity) obj).dataset, ((PieSectionEntity) obj).pieIndex, 
                       ((PieSectionEntity) obj).sectionIndex, ((PieSectionEntity) obj).sectionKey })
        && super.equals(obj);
}
```

```java
// 3. Refactored XYAreaRenderer.equals() method
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, XYAreaRenderer.class, 
        new Object[] { this.plotArea, this.plotLines, this.plotShapes, this.showOutline, this.legendArea }, 
        new Object[] { ((XYAreaRenderer) obj).plotArea, ((XYAreaRenderer) obj).plotLines, 
                       ((XYAreaRenderer) obj).plotShapes, ((XYAreaRenderer) obj).showOutline, 
                       ((XYAreaRenderer) obj).legendArea });
}
```",Type-3
292-2-7,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,Type 3,"### Code Snippet 1: `equals` method from `PieSectionEntity` class
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `XYStepAreaRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass, e.g., `ChartEntity`):
```java
/**
 * Tests for equality with an arbitrary object based on provided parameters.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return superEquals;
}
```

---

### 2. Refactored `equals` Method in `PieSectionEntity`:
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        PieSectionEntity.class,
        super.equals(obj),
        this.dataset, ((PieSectionEntity) obj).dataset,
        this.pieIndex, ((PieSectionEntity) obj).pieIndex,
        this.sectionIndex, ((PieSectionEntity) obj).sectionIndex,
        this.sectionKey, ((PieSectionEntity) obj).sectionKey
    );
}
```

---

### 3. Refactored `equals` Method in `XYStepAreaRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYStepAreaRenderer.class,
        super.equals(obj),
        this.showOutline, ((XYStepAreaRenderer) obj).showOutline,
        this.shapesVisible, ((XYStepAreaRenderer) obj).shapesVisible,
        this.shapesFilled, ((XYStepAreaRenderer) obj).shapesFilled,
        this.plotArea, ((XYStepAreaRenderer) obj).plotArea,
        this.rangeBase, ((XYStepAreaRenderer) obj).rangeBase
    );
}
```",Type-3
292-2-8,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.data,ComparableObjectSeries,equals,396,419,Type 3,"### Code Snippet 1 (PieSectionEntity.java, lines 207-227)
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (ComparableObjectSeries.java, lines 396-419)
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific fields being compared (`dataset`, `pieIndex`, `sectionIndex`, `sectionKey` in the first snippet vs. `maximumItemCount`, `autoSort`, `allowDuplicateXValues`, `data` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass `Series`)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj);
    if (fields.length != thatFields.length) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields of the given object for comparison.
 *
 * @param obj  the object whose fields are to be extracted.
 * 
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj) {
    // This method should be overridden in subclasses to extract the relevant fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Updated `equals` Method in `PieSectionEntity.java`
```java
@Override
protected Object[] extractFields(Object obj) {
    PieSectionEntity that = (PieSectionEntity) obj;
    return new Object[] { that.dataset, that.pieIndex, that.sectionIndex, that.sectionKey };
}

/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.dataset, this.pieIndex, this.sectionIndex, this.sectionKey);
}
```

---

### 3. Updated `equals` Method in `ComparableObjectSeries.java`
```java
@Override
protected Object[] extractFields(Object obj) {
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    return new Object[] { that.maximumItemCount, that.autoSort, that.allowDuplicateXValues, that.data };
}

/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.maximumItemCount, this.autoSort, this.allowDuplicateXValues, this.data);
}
```",Type-3
292-2-9,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.data.time,Millisecond,equals,292,315,Type 3,"### Code Snippet 1: `equals` method from `PieSectionEntity` class
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `Millisecond` class
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Millisecond object
 * representing the same millisecond as this instance.
 *
 * @param obj  the object to compare
 *
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes (`PieSectionEntity` and `Millisecond`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `ChartEntity`):
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare.
 * @param fields  the fields to compare.
 * @return true if all fields are equal, false otherwise.
 */
protected boolean areFieldsEqual(Object obj, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[0];
    for (int i = 0; i < fields.length; i++) {
        if (!Objects.equals(fields[i],otherFields[i]))",Type-3
292-2-10,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (PieSectionEntity.java, lines 207-227)
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYSeries.java, lines 685-708)
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`PieSectionEntity` and `XYSeries`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `ChartEntity`)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = ((ChartEntity) clazz.cast(obj)).getFieldsForEquality();
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Returns the fields to be used for equality checks.
 * Subclasses must override this method to provide their specific fields.
 *
 * @return An array of fields for equality checks.
 */
protected Object[] getFieldsForEquality() {
    return new Object[0];
}
```

---

### 2. Refactored `equals` Method in `PieSectionEntity`
```java
@Override
protected Object[] getFieldsForEquality() {
    return new Object[] { this.dataset, this.pieIndex, this.sectionIndex, this.sectionKey };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, PieSectionEntity.class, super.equals(obj), this.dataset, this.pieIndex, this.sectionIndex, this.sectionKey);
}
```

---

### 3. Refactored `equals` Method in `XYSeries`
```java
@Override
protected Object[] getFieldsForEquality() {
    return new Object[] { this.maximumItemCount, this.autoSort, this.allowDuplicateXValues, this.data };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSeries.class, super.equals(obj), this.maximumItemCount, this.autoSort, this.allowDuplicateXValues, this.data);
}
```",Type-3
292-3-4,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,equals,844,867,Type 3,"### Code Snippet 1: `CombinedDomainXYPlot.equals` Method (Lines 670-698)
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

---

### Code Snippet 2: `BoxAndWhiskerRenderer.equals` Method (Lines 844-867)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj;
    if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) {
        return false;
    }
    if (this.fillBox != that.fillBox) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** and logic specific to their respective classes (`CombinedDomainXYPlot` and `BoxAndWhiskerRenderer`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality between two objects.
 *
 * @param obj  the object to compare.
 * @param instanceClass  the class of the current instance.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param additionalChecks  a runnable that performs additional equality checks.
 *
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean baseEquals(Object obj, Class<?> instanceClass, boolean superEqualsResult, Runnable additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    additionalChecks.run();
    return true;
}
```

---

### 2. Refactored `CombinedDomainXYPlot.equals` Method
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return baseEquals(obj, CombinedDomainXYPlot.class, super.equals(obj), () -> {
        CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
        if (this.totalWeight != p.totalWeight || this.gap != p.gap || !ObjectUtilities.equal(this.subplots, p.subplots)) {
            throw new RuntimeException(""Objects are not equal"");
        }
    });
}
```

---

### 3. Refactored `BoxAndWhiskerRenderer.equals` Method
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return baseEquals(obj, BoxAndWhiskerRenderer.class, super.equals(obj), () -> {
        BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj;
        if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint) || this.fillBox != that.fillBox
                || this.itemMargin != that.itemMargin || this.maximumBarWidth != that.maximumBarWidth) {
            throw new RuntimeException(""Objects are not equal"");
        }
    });
}
```",Type-3
292-3-5,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,Type 3,"### Code Snippet 1: `CombinedDomainXYPlot.equals` Method
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

---

### Code Snippet 2: `GanttRenderer.equals` Method
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets represent **Type-3 clones**. They are mostly similar but contain some different statements and logic specific to their respective classes (`CombinedDomainXYPlot` and `GanttRenderer`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality between two objects.
 *
 * @param obj  the object to compare.
 * @param instanceClass  the class of the current instance.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param additionalChecks  a lambda for additional equality checks specific to the subclass.
 *
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean baseEquals(Object obj, Class<?> instanceClass, boolean superEqualsResult, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    return additionalChecks.check(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored `CombinedDomainXYPlot.equals` Method
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, CombinedDomainXYPlot.class, super.equals(obj), other -> {
        CombinedDomainXYPlot p = (CombinedDomainXYPlot) other;
        return this.totalWeight == p.totalWeight
                && this.gap == p.gap
                && ObjectUtilities.equal(this.subplots, p.subplots);
    });
}
```

---

### 3. Refactored `GanttRenderer.equals` Method
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, GanttRenderer.class, super.equals(obj), other -> {
        GanttRenderer that = (GanttRenderer) other;
        return PaintUtilities.equal(this.completePaint, that.completePaint)
                && PaintUtilities.equal(this.incompletePaint, that.incompletePaint)
                && this.startPercent == that.startPercent
                && this.endPercent == that.endPercent;
    });
}
```",Type-3
292-3-6,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,Type 3,"### Code Snippet 1 (CombinedDomainXYPlot.java, lines 670-698)
```java
    /**
     * Tests this plot for equality with another object.
     *
     * @param obj  the other object.
     *
     * @return <code>true</code> or <code>false</code>.
     */
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        if (!(obj instanceof CombinedDomainXYPlot)) {
            return false;
        }
        if (!super.equals(obj)) {
            return false;
        }

        CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
        if (this.totalWeight != p.totalWeight) {
            return false;
        }
        if (this.gap != p.gap) {
            return false;
        }
        if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
            return false;
        }

        return true;
    }
```

### Code Snippet 2 (XYAreaRenderer.java, lines 587-610)
```java
    /**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (<code>null</code> permitted).
     * 
     * @return A boolean.
     */
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;   
        }
        if (!(obj instanceof XYAreaRenderer)) {
            return false;   
        }
        XYAreaRenderer that = (XYAreaRenderer) obj;
        if (this.plotArea != that.plotArea) {
            return false;   
        }
        if (this.plotLines != that.plotLines) {
            return false;   
        }
        if (this.plotShapes != that.plotShapes) {
            return false;   
        }
        if (this.showOutline != that.showOutline) {
            return false;   
        }
        if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
            return false;   
        }
        return true;
    }
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing specific fields.
 *
 * @param obj  the object to compare with.
 * @param instanceClass  the class of the instance.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `CombinedDomainXYPlot.java`
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedDomainXYPlot.class,
        super.equals(obj),
        this.totalWeight,
        this.gap,
        this.subplots,
        new Object[] {
            ((CombinedDomainXYPlot) obj).totalWeight,
            ((CombinedDomainXYPlot) obj).gap,
            ((CombinedDomainXYPlot) obj).subplots
        }
    );
}
```

---

### 3. Refactored Method in `XYAreaRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYAreaRenderer.class,
        true,
        this.plotArea,
        this.plotLines,
        this.plotShapes,
        this.showOutline,
        this.legendArea,
        new Object[] {
            ((XYAreaRenderer) obj).plotArea,
            ((XYAreaRenderer) obj).plotLines,
            ((XYAreaRenderer) obj).plotShapes,
            ((XYAreaRenderer) obj).showOutline,
            ((XYAreaRenderer) obj).legendArea
        }
    );
}
```",Type-3
292-3-7,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,Type 3,"### Code Snippet 1: `CombinedDomainXYPlot.equals` Method (Lines 670-698)
```java
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

### Code Snippet 2: `XYStepAreaRenderer.equals` Method (Lines 536-559)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractXYItemRenderer`)
```java
protected boolean baseEquals(Object obj, Object thisInstance, Class<?> clazz, Object... fields) {
    if (obj == thisInstance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    Object other = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object otherField = fields[i + 1];
        if (thisField instanceof Double && otherField instanceof Double) {
            if (Double.compare((Double) thisField, (Double) otherField) != 0) {
                return false;
            }
        } else if (!ObjectUtilities.equal(thisField, otherField)) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `CombinedDomainXYPlot.equals` Method
```java
public boolean equals(Object obj) {
    return baseEquals(obj, this, CombinedDomainXYPlot.class,
        this.totalWeight, ((CombinedDomainXYPlot) obj).totalWeight,
        this.gap, ((CombinedDomainXYPlot) obj).gap,
        this.subplots, ((CombinedDomainXYPlot) obj).subplots);
}
```

### 3. Refactored `XYStepAreaRenderer.equals` Method
```java
public boolean equals(Object obj) {
    return baseEquals(obj, this, XYStepAreaRenderer.class,
        this.showOutline, ((XYStepAreaRenderer) obj).showOutline,
        this.shapesVisible, ((XYStepAreaRenderer) obj).shapesVisible,
        this.shapesFilled, ((XYStepAreaRenderer) obj).shapesFilled,
        this.plotArea, ((XYStepAreaRenderer) obj).plotArea,
        this.rangeBase, ((XYStepAreaRenderer) obj).rangeBase);
}
```",Type-3
292-3-8,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.data,ComparableObjectSeries,equals,396,419,Type 3,"### Code Snippet 1 (from `CombinedDomainXYPlot` class, lines 670-698):
```java
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

### Code Snippet 2 (from `ComparableObjectSeries` class, lines 396-419):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields like `totalWeight`, `gap`, `subplots` in the first snippet and `maximumItemCount`, `autoSort`, `allowDuplicateXValues`, `data` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass, e.g., `Series`):
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CombinedDomainXYPlot`:
```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedDomainXYPlot.class,
        new Object[]{this.totalWeight, this.gap, this.subplots},
        new Object[]{((CombinedDomainXYPlot) obj).totalWeight, ((CombinedDomainXYPlot) obj).gap, ((CombinedDomainXYPlot) obj).subplots}
    );
}
```

---

### 3. Refactored `equals` Method in `ComparableObjectSeries`:
```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        ComparableObjectSeries.class,
        new Object[]{this.maximumItemCount, this.autoSort, this.allowDuplicateXValues, this.data},
        new Object[]{((ComparableObjectSeries) obj).maximumItemCount, ((ComparableObjectSeries) obj).autoSort, ((ComparableObjectSeries) obj).allowDuplicateXValues, ((ComparableObjectSeries) obj).data}
    );
}
```",Type-3
292-3-9,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.data.time,Millisecond,equals,292,315,Type 3,"### Code Snippet 1: `CombinedDomainXYPlot.equals` Method
```java
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

### Code Snippet 2: `Millisecond.equals` Method
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes (`CombinedDomainXYPlot` and `Millisecond`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Object thisInstance, Class<?> expectedClass, 
                             int[] intFieldsThis, int[] intFieldsOther, 
                             Object[] objectFieldsThis, Object[] objectFieldsOther) {
    if (obj == thisInstance) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    Object other = expectedClass.cast(obj);

    for (int i = 0; i < intFieldsThis.length; i++) {
        if (intFieldsThis[i] != intFieldsOther[i]) {
            return false;
        }
    }

    for (int i = 0; i < objectFieldsThis.length; i++) {
        if (!objectFieldsThis[i].equals(objectFieldsOther[i])) {
            return false;
        }
    }

    return true;
}
```

---

### 2. Refactored `CombinedDomainXYPlot.equals` Method
```java
public boolean equals(Object obj) {
    return baseEquals(
        obj, 
        this, 
        CombinedDomainXYPlot.class, 
        new int[]{this.totalWeight}, 
        new int[]{((CombinedDomainXYPlot) obj).totalWeight}, 
        new Object[]{this.subplots}, 
        new Object[]{((CombinedDomainXYPlot) obj).subplots}
    );
}
```

---

### 3. Refactored `Millisecond.equals` Method
```java
public boolean equals(Object obj) {
    return baseEquals(
        obj, 
        this, 
        Millisecond.class, 
        new int[]{this.millisecond, this.second, this.minute, this.hour}, 
        new int[]{((Millisecond) obj).millisecond, ((Millisecond) obj).second, 
                  ((Millisecond) obj).minute, ((Millisecond) obj).hour}, 
        new Object[]{this.day}, 
        new Object[]{((Millisecond) obj).day}
    );
}
```",Type-3
292-3-10,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (CombinedDomainXYPlot.java, lines 670-698)
```java
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

### Code Snippet 2 (XYSeries.java, lines 685-708)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and variable names.","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    Object[] otherAttributes = (Object[]) attributes[attributes.length - 1];
    for (int i = 0; i < attributes.length - 1; i++) {
        if (!ObjectUtilities.equal(attributes[i], otherAttributes[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `CombinedDomainXYPlot.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, CombinedDomainXYPlot.class, 
        this.totalWeight, this.gap, this.subplots, 
        new Object[] { ((CombinedDomainXYPlot) obj).totalWeight, 
                       ((CombinedDomainXYPlot) obj).gap, 
                       ((CombinedDomainXYPlot) obj).subplots });
}
```

---

### 3. Refactored Code in `XYSeries.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, XYSeries.class, 
        this.maximumItemCount, this.autoSort, this.allowDuplicateXValues, this.data, 
        new Object[] { ((XYSeries) obj).maximumItemCount, 
                       ((XYSeries) obj).autoSort, 
                       ((XYSeries) obj).allowDuplicateXValues, 
                       ((XYSeries) obj).data });
}
```",Type-3
292-4-6,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,equals,844,867,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,Type 3,"### Code Snippet 1 (BoxAndWhiskerRenderer.java, lines 844-867)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj;
    if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) {
        return false;
    }
    if (this.fillBox != that.fillBox) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYAreaRenderer.java, lines 587-610)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYAreaRenderer)) {
        return false;   
    }
    XYAreaRenderer that = (XYAreaRenderer) obj;
    if (this.plotArea != that.plotArea) {
        return false;   
    }
    if (this.plotLines != that.plotLines) {
        return false;   
    }
    if (this.plotShapes != that.plotShapes) {
        return false;   
    }
    if (this.showOutline != that.showOutline) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class-specific fields being compared (`artifactPaint`, `fillBox`, `itemMargin`, etc., in the first snippet and `plotArea`, `plotLines`, `plotShapes`, etc., in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (fields[i] instanceof Boolean) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (fields[i] instanceof Double) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        }
    }
}
```",Type-3
292-4-7,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,equals,844,867,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,Type 3,"### Code Snippet 1: `equals` method from `BoxAndWhiskerRenderer` (lines 844-867)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj;
    if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) {
        return false;
    }
    if (this.fillBox != that.fillBox) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `XYStepAreaRenderer` (lines 536-559)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but have **different statements** (e.g., different fields being compared: `artifactPaint`, `fillBox`, `itemMargin`, `maximumBarWidth` in the first snippet vs. `showOutline`, `shapesVisible`, `shapesFilled`, `plotArea`, `rangeBase` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractRenderer`)
```java
/**
 * Compares the specified fields of two renderers for equality.
 *
 * @param obj  the object to compare to.
 * @param fields  the fields to compare.
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean rendererFieldsEqual(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        if (!field[0].equals(field[1])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `BoxAndWhiskerRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return rendererFieldsEqual(obj, new Object[][] {
        {this.artifactPaint, ((BoxAndWhiskerRenderer) obj).artifactPaint},
        {this.fillBox, ((BoxAndWhiskerRenderer) obj).fillBox},
        {this.itemMargin, ((BoxAndWhiskerRenderer) obj).itemMargin},
        {this.maximumBarWidth, ((BoxAndWhiskerRenderer) obj).maximumBarWidth}
    });
}
```

---

### 3. Refactored `equals` Method in `XYStepAreaRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return rendererFieldsEqual(obj, new Object[][] {
        {this.showOutline, ((XYStepAreaRenderer) obj).showOutline},
        {this.shapesVisible, ((XYStepAreaRenderer) obj).shapesVisible},
        {this.shapesFilled, ((XYStepAreaRenderer) obj).shapesFilled},
        {this.plotArea, ((XYStepAreaRenderer) obj).plotArea},
        {this.rangeBase, ((XYStepAreaRenderer) obj).rangeBase}
    });
}
```",Type-3
292-4-9,src,org.jfree.chart.renderer.category,BoxAndWhiskerRenderer,equals,844,867,src,org.jfree.data.time,Millisecond,equals,292,315,Type 3,"```java
// Code Snippet 1: BoxAndWhiskerRenderer.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj;
    if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) {
        return false;
    }
    if (this.fillBox != that.fillBox) {
        return false;
    }
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maximumBarWidth != that.maximumBarWidth) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: Millisecond.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractCategoryItemRenderer or RegularTimePeriod)
protected boolean areFieldsEqual(Object obj, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (fields.length != otherFields.length) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] == null) {
            if (otherFields[i] != null) {
                return false;
            }
        } else if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored BoxAndWhiskerRenderer.equals() method
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof BoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BoxAndWhiskerRenderer that = (BoxAndWhiskerRenderer) obj;
    return areFieldsEqual(obj, 
        new Object[]{this.artifactPaint, this.fillBox, this.itemMargin, this.maximumBarWidth},
        new Object[]{that.artifactPaint, that.fillBox, that.itemMargin, that.maximumBarWidth});
}
```

```java
// 3. Refactored Millisecond.equals() method
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    return areFieldsEqual(obj, 
        new Object[]{this.millisecond, this.second, this.minute, this.hour, this.day},
        new Object[]{that.millisecond, that.second, that.minute, that.hour, that.day});
}
```",Type-3
292-5-6,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,Type 3,"### Code Snippet 1 (GanttRenderer.java, lines 558-578):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYAreaRenderer.java, lines 587-610):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYAreaRenderer)) {
        return false;   
    }
    XYAreaRenderer that = (XYAreaRenderer) obj;
    if (this.plotArea != that.plotArea) {
        return false;   
    }
    if (this.plotLines != that.plotLines) {
        return false;   
    }
    if (this.plotShapes != that.plotShapes) {
        return false;   
    }
    if (this.showOutline != that.showOutline) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`GanttRenderer` and `XYAreaRenderer`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two renderers for equality based on their specific properties.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param properties  the properties to compare.
 * @return A boolean indicating equality.
 */
protected boolean rendererEquals(Object obj, Class<?> clazz, Object... properties) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatProperties = (Object[]) properties[properties.length - 1];
    for (int i = 0; i < properties.length - 1; i++) {
        if (!Objects.equals(properties[i], thatProperties[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `GanttRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(obj, GanttRenderer.class, 
        this.completePaint, this.incompletePaint, this.startPercent, this.endPercent, 
        new Object[] { ((GanttRenderer) obj).completePaint, ((GanttRenderer) obj).incompletePaint, 
                       ((GanttRenderer) obj).startPercent, ((GanttRenderer) obj).endPercent });
}
```

---

### 3. Refactored `equals` Method in `XYAreaRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(obj, XYAreaRenderer.class, 
        this.plotArea, this.plotLines, this.plotShapes, this.showOutline, this.legendArea, 
        new Object[] { ((XYAreaRenderer) obj).plotArea, ((XYAreaRenderer) obj).plotLines, 
                       ((XYAreaRenderer) obj).plotShapes, ((XYAreaRenderer) obj).showOutline, 
                       ((XYAreaRenderer) obj).legendArea });
}
```",Type-3
292-5-7,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,Type 3,"### Code Snippet 1: `equals` method from `GanttRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `XYStepAreaRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different fields being compared, such as `completePaint` vs. `showOutline`).","### 1. Extracted Method (to be placed in the superclass `AbstractRenderer` or a relevant common superclass):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean rendererEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

### 2. Refactored `equals` Method in `GanttRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(obj, GanttRenderer.class, completePaint, incompletePaint, startPercent, endPercent);
}
```

### 3. Refactored `equals` Method in `XYStepAreaRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(obj, XYStepAreaRenderer.class, showOutline, shapesVisible, shapesFilled, plotArea, rangeBase);
}
```",Type-3
292-5-8,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.data,ComparableObjectSeries,equals,396,419,Type 3,"### Code Snippet 1 (from `GanttRenderer` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `ComparableObjectSeries` class, `equals` method):

```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and compare different fields specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass, e.g., `Series`):

```java
/**
 * Tests two objects for equality by comparing their fields.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param instanceClass  the class of the instance being compared.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results for field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `GanttRenderer`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        GanttRenderer.class,
        super.equals(obj),
        PaintUtilities.equal(this.completePaint, ((GanttRenderer) obj).completePaint),
        PaintUtilities.equal(this.incompletePaint, ((GanttRenderer) obj).incompletePaint),
        this.startPercent == ((GanttRenderer) obj).startPercent,
        this.endPercent == ((GanttRenderer) obj).endPercent
    );
}
```

---

### 3. Refactored `equals` Method in `ComparableObjectSeries`:

```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        ComparableObjectSeries.class,
        super.equals(obj),
        this.maximumItemCount == ((ComparableObjectSeries) obj).maximumItemCount,
        this.autoSort == ((ComparableObjectSeries) obj).autoSort,
        this.allowDuplicateXValues == ((ComparableObjectSeries) obj).allowDuplicateXValues,
        ObjectUtilities.equal(this.data, ((ComparableObjectSeries) obj).data)
    );
}
```",Type-3
292-5-9,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.data.time,Millisecond,equals,292,315,Type 3,"### Code Snippet 1 (from `GanttRenderer` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `Millisecond` class, `equals` method):

```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Millisecond object
 * representing the same millisecond as this instance.
 *
 * @param obj  the object to compare
 *
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar in structure and logic but differ in the specific fields and methods being compared (`completePaint`, `incompletePaint`, `startPercent`, `endPercent` in `GanttRenderer` vs. `millisecond`, `second`, `minute`, `hour`, `day` in `Millisecond`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare.
 * @param fields  the fields to compare.
 * @return true if all fields are equal, false otherwise.
 */
protected boolean compareFields(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || this.getClass() != obj.getClass()) {
        return false;
    }
    for (Object[] fieldPair : fields) {
        Object field1 = fieldPair[0];
        Object field2 = fieldPair[1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `GanttRenderer`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        { this.completePaint, ((GanttRenderer) obj).completePaint },
        { this.incompletePaint, ((GanttRenderer) obj).incompletePaint },
        { this.startPercent, ((GanttRenderer) obj).startPercent },
        { this.endPercent, ((GanttRenderer) obj).endPercent }
    }) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `Millisecond`:

```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Millisecond object
 * representing the same millisecond as this instance.
 *
 * @param obj  the object to compare
 *
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
public boolean equals(Object obj) {
    return compareFields(obj, new Object[][] {
        { this.millisecond, ((Millisecond) obj).millisecond },
        { this.second, ((Millisecond) obj).second },
        { this.minute, ((Millisecond) obj).minute },
        { this.hour, ((Millisecond) obj).hour },
        { this.day, ((Millisecond) obj).day }
    });
}
```",Type-3
292-5-10,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (GanttRenderer.java, equals method, lines 558-578):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYSeries.java, equals method, lines 685-708):
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes (`GanttRenderer` and `XYSeries`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param additionalChecks  a lambda or functional interface for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `GanttRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, GanttRenderer.class, other -> {
        GanttRenderer that = (GanttRenderer) other;
        return PaintUtilities.equal(this.completePaint, that.completePaint)
                && PaintUtilities.equal(this.incompletePaint, that.incompletePaint)
                && this.startPercent == that.startPercent
                && this.endPercent == that.endPercent;
    });
}
```

---

### 3. Refactored `equals` Method in `XYSeries.java`:
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSeries.class, other -> {
        XYSeries that = (XYSeries) other;
        return this.maximumItemCount == that.maximumItemCount
                && this.autoSort == that.autoSort
                && this.allowDuplicateXValues == that.allowDuplicateXValues
                && ObjectUtilities.equal(this.data, that.data);
    });
}
```",Type-3
292-6-8,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,src,org.jfree.data,ComparableObjectSeries,equals,396,419,Type 3,"### Code Snippet 1: `equals` method from `XYAreaRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYAreaRenderer)) {
        return false;   
    }
    XYAreaRenderer that = (XYAreaRenderer) obj;
    if (this.plotArea != that.plotArea) {
        return false;   
    }
    if (this.plotLines != that.plotLines) {
        return false;   
    }
    if (this.plotShapes != that.plotShapes) {
        return false;   
    }
    if (this.showOutline != that.showOutline) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `ComparableObjectSeries` class
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific fields being compared (`plotArea`, `plotLines`, etc., in `XYAreaRenderer` vs. `maximumItemCount`, `autoSort`, etc., in `ComparableObjectSeries`) and the utility methods used (`ShapeUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass `Series`)
```java
/**
 * Tests two objects for equality by comparing their fields.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        if (!field[0].equals(field[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYAreaRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.plotArea, ((XYAreaRenderer) obj).plotArea },
        { this.plotLines, ((XYAreaRenderer) obj).plotLines },
        { this.plotShapes, ((XYAreaRenderer) obj).plotShapes },
        { this.showOutline, ((XYAreaRenderer) obj).showOutline },
        { this.legendArea, ((XYAreaRenderer) obj).legendArea }
    });
}
```

---

### 3. Refactored `equals` Method in `ComparableObjectSeries`
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.maximumItemCount, ((ComparableObjectSeries) obj).maximumItemCount },
        { this.autoSort, ((ComparableObjectSeries) obj).autoSort },
        { this.allowDuplicateXValues, ((ComparableObjectSeries) obj).allowDuplicateXValues },
        { this.data, ((ComparableObjectSeries) obj).data }
    });
}
```",Type-3
292-6-10,src,org.jfree.chart.renderer.xy,XYAreaRenderer,equals,587,610,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (XYAreaRenderer.java, lines 587-610)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYAreaRenderer)) {
        return false;   
    }
    XYAreaRenderer that = (XYAreaRenderer) obj;
    if (this.plotArea != that.plotArea) {
        return false;   
    }
    if (this.plotLines != that.plotLines) {
        return false;   
    }
    if (this.plotShapes != that.plotShapes) {
        return false;   
    }
    if (this.showOutline != that.showOutline) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (XYSeries.java, lines 685-708)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 instanceof Boolean || field1 instanceof Integer) {
            if (!field1.equals(field2)) {
                return false;
            }
        } else if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYAreaRenderer.java`
```java
public boolean equals(Object obj) {
    return baseEquals(obj, XYAreaRenderer.class,
        this.plotArea, ((XYAreaRenderer) obj).plotArea,
        this.plotLines, ((XYAreaRenderer) obj).plotLines,
        this.plotShapes, ((XYAreaRenderer) obj).plotShapes,
        this.showOutline, ((XYAreaRenderer) obj).showOutline,
        this.legendArea, ((XYAreaRenderer) obj).legendArea
    );
}
```

---

### 3. Refactored `equals` Method in `XYSeries.java`
```java
public boolean equals(Object obj) {
    return baseEquals(obj, XYSeries.class,
        this.maximumItemCount, ((XYSeries) obj).maximumItemCount,
        this.autoSort, ((XYSeries) obj).autoSort,
        this.allowDuplicateXValues, ((XYSeries) obj).allowDuplicateXValues,
        this.data, ((XYSeries) obj).data
    ) && super.equals(obj);
}
```",Type-3
292-7-8,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,src,org.jfree.data,ComparableObjectSeries,equals,396,419,Type 3,"### Code Snippet 1: `equals` method from `XYStepAreaRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `ComparableObjectSeries` class
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`showOutline`, `shapesVisible`, etc., in the first snippet vs. `maximumItemCount`, `autoSort`, etc., in the second snippet) and the use of `ObjectUtilities.equal` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare against.
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the fields are equal.
 */
protected boolean compareFields(Object obj, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!java.util.Objects.equals(fields[i], otherFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `XYStepAreaRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return compareFields(obj, 
        new Object[] { this.showOutline, this.shapesVisible, this.shapesFilled, this.plotArea, this.rangeBase },
        new Object[] { ((XYStepAreaRenderer) obj).showOutline, ((XYStepAreaRenderer) obj).shapesVisible, 
                       ((XYStepAreaRenderer) obj).shapesFilled, ((XYStepAreaRenderer) obj).plotArea, 
                       ((XYStepAreaRenderer) obj).rangeBase });
}
```

---

### 3. Refactored `equals` Method in `ComparableObjectSeries`
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return compareFields(obj, 
        new Object[] { this.maximumItemCount, this.autoSort, this.allowDuplicateXValues, this.data },
        new Object[] { ((ComparableObjectSeries) obj).maximumItemCount, ((ComparableObjectSeries) obj).autoSort, 
                       ((ComparableObjectSeries) obj).allowDuplicateXValues, ((ComparableObjectSeries) obj).data });
}
```",Type-3
292-7-10,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (from `XYStepAreaRenderer` class, `equals` method, lines 536-559):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `XYSeries` class, `equals` method, lines 685-708):
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYStepAreaRenderer` and `XYSeries`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer` or `Series`):
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param classType  the expected class type of the object.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean comparisons for instance-specific fields.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> classType, boolean superEqualsResult, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYStepAreaRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYStepAreaRenderer.class,
        super.equals(obj),
        this.showOutline == ((XYStepAreaRenderer) obj).showOutline,
        this.shapesVisible == ((XYStepAreaRenderer) obj).shapesVisible,
        this.shapesFilled == ((XYStepAreaRenderer) obj).shapesFilled,
        this.plotArea == ((XYStepAreaRenderer) obj).plotArea,
        this.rangeBase == ((XYStepAreaRenderer) obj).rangeBase
    );
}
```

---

### 3. Refactored `equals` Method in `XYSeries`:
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYSeries.class,
        super.equals(obj),
        this.maximumItemCount == ((XYSeries) obj).maximumItemCount,
        this.autoSort == ((XYSeries) obj).autoSort,
        this.allowDuplicateXValues == ((XYSeries) obj).allowDuplicateXValues,
        ObjectUtilities.equal(this.data, ((XYSeries) obj).data)
    );
}
```",Type-3
292-8-9,src,org.jfree.data,ComparableObjectSeries,equals,396,419,src,org.jfree.data.time,Millisecond,equals,292,315,Type 3,"### Code Snippet 1: `equals` method from `ComparableObjectSeries` class
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality 
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ComparableObjectSeries that = (ComparableObjectSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `Millisecond` class
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Millisecond object
 * representing the same millisecond as this instance.
 *
 * @param obj  the object to compare
 *
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`maximumItemCount`, `autoSort`, `allowDuplicateXValues`, etc., in the first snippet vs. `millisecond`, `second`, `minute`, etc., in the second snippet) and the use of `ObjectUtilities.equal` in the first snippet versus `this.day.equals` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare against.
 * @param fields  the fields to compare.
 * @return true if all fields are equal, false otherwise.
 */
protected boolean compareFieldsForEquality(Object obj, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[0];
    for (int i = 1; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) return false;
    }
    return true;
}
```

",Type-3
292-9-10,src,org.jfree.data.time,Millisecond,equals,292,315,src,org.jfree.data.xy,XYSeries,equals,685,708,Type 3,"### Code Snippet 1 (Method `equals` from `Millisecond` class, lines 292-315):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Millisecond object
 * representing the same millisecond as this instance.
 *
 * @param obj  the object to compare
 *
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Millisecond)) {
        return false;
    }
    Millisecond that = (Millisecond) obj;
    if (this.millisecond != that.millisecond) {
        return false;
    }
    if (this.second != that.second) {
        return false;
    }
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (Method `equals` from `XYSeries` class, lines 685-708):
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYSeries that = (XYSeries) obj;
    if (this.maximumItemCount != that.maximumItemCount) {
        return false;
    }
    if (this.autoSort != that.autoSort) {
        return false;
    }
    if (this.allowDuplicateXValues != that.allowDuplicateXValues) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`Millisecond` and `XYSeries`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `RegularTimePeriod`):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Millisecond` Class:
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare.
 * @return <code>true</code> if milliseconds and seconds of this and object
 *      are the same.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Millisecond.class,
        this.millisecond, ((Millisecond) obj).millisecond,
        this.second, ((Millisecond) obj).second,
        this.minute, ((Millisecond) obj).minute,
        this.hour, ((Millisecond) obj).hour,
        this.day, ((Millisecond) obj).day
    );
}
```

---

### 3. Refactored `equals` Method in `XYSeries` Class:
```java
/**
 * Tests this series for equality with an arbitrary object.
 *
 * @param obj  the object to test against for equality
 *             (<code>null</code> permitted).
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYSeries.class,
        this.maximumItemCount, ((XYSeries) obj).maximumItemCount,
        this.autoSort, ((XYSeries) obj).autoSort,
        this.allowDuplicateXValues, ((XYSeries) obj).allowDuplicateXValues,
        this.data, ((XYSeries) obj).data
    ) && super.equals(obj);
}
```",Type-3
293-1-2,src,org.jfree.chart.plot,CombinedDomainXYPlot,equals,670,698,src,org.jfree.chart.title,Title,equals,374,397,Type 3,"### Code Snippet 1 (CombinedDomainXYPlot.java, lines 670-698)
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }

    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    if (this.totalWeight != p.totalWeight) {
        return false;
    }
    if (this.gap != p.gap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subplots, p.subplots)) {
        return false;
    }

    return true;
}
```

---

### Code Snippet 2 (Title.java, lines 374-397)
```java
/**
 * Tests an object for equality with this title.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Title)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;   
    }
    Title that = (Title) obj;
    if (this.position != that.position) {
        return false;
    }
    if (this.horizontalAlignment != that.horizontalAlignment) {
        return false;
    }
    if (this.verticalAlignment != that.verticalAlignment) {
        return false;
    }
    if (this.notify != that.notify) {
        return false;
    }
    return true;
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`totalWeight`, `gap`, `subplots` in the first snippet vs. `position`, `horizontalAlignment`, `verticalAlignment`, `notify` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare.
 * @param fields  the fields to compare.
 *
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !super.equals(obj)) {
        return false;
    }
    for (Object[] field : fields) {
        if (!ObjectUtilities.equal(field[0], field[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `CombinedDomainXYPlot.java`
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof CombinedDomainXYPlot)) {
        return false;
    }
    CombinedDomainXYPlot p = (CombinedDomainXYPlot) obj;
    return equalsHelper(obj, new Object[][] {
        {this.totalWeight, p.totalWeight},
        {this.gap, p.gap},
        {this.subplots, p.subplots}
    });
}
```

---

### 3. Refactored Code in `Title.java`
```java
/**
 * Tests an object for equality with this title.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof Title)) {
        return false;
    }
    Title that = (Title) obj;
    return equalsHelper(obj, new Object[][] {
        {this.position, that.position},
        {this.horizontalAlignment, that.horizontalAlignment},
        {this.verticalAlignment, that.verticalAlignment},
        {this.notify, that.notify}
    });
}
```",Type-3
296-1-2,src,org.jfree.chart.annotations,CategoryLineAnnotation,equals,335,361,src,org.jfree.chart.block,BorderArrangement,equals,505,528,Type 3,"### Code Snippet 1 (CategoryLineAnnotation.java, equals method, lines 335-361):
```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLineAnnotation)) {
        return false;
    }
    CategoryLineAnnotation that = (CategoryLineAnnotation) obj;
    if (!this.category1.equals(that.getCategory1())) {
        return false;
    }
    if (this.value1 != that.getValue1()) {
        return false;
    }
    if (!this.category2.equals(that.getCategory2())) {
        return false;
    }
    if (this.value2 != that.getValue2()) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (BorderArrangement.java, equals method, lines 505-528):
```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BorderArrangement)) {
        return false;
    }
    BorderArrangement that = (BorderArrangement) obj;
    if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific fields being compared (`category1`, `value1`, etc., in the first snippet vs. `topBlock`, `bottomBlock`, etc., in the second snippet) and the utility methods used (`PaintUtilities.equal` in the first snippet vs. `ObjectUtilities.equal` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Compares two objects for equality by checking their respective fields.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean areFieldsEqual(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] fieldPair : fields) {
        Object field1 = fieldPair[0];
        Object field2 = fieldPair[1];
        if (field1 instanceof Double && field2 instanceof Double) {
            if (Double.compare((Double) field1, (Double) field2) != 0) {
                return false;
            }
        } else if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryLineAnnotation.java`:
```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return areFieldsEqual(obj, new Object[][] {
        {this.category1, ((CategoryLineAnnotation) obj).getCategory1()},
        {this.value1, ((CategoryLineAnnotation) obj).getValue1()},
        {this.category2, ((CategoryLineAnnotation) obj).getCategory2()},
        {this.value2, ((CategoryLineAnnotation) obj).getValue2()},
        {this.paint, ((CategoryLineAnnotation) obj).getPaint()},
        {this.stroke, ((CategoryLineAnnotation) obj).getStroke()}
    });
}
```

---

### 3. Refactored `equals` Method in `BorderArrangement.java`:
```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areFieldsEqual(obj, new Object[][] {
        {this.topBlock, ((BorderArrangement) obj).topBlock},
        {this.bottomBlock, ((BorderArrangement) obj).bottomBlock},
        {this.leftBlock, ((BorderArrangement) obj).leftBlock},
        {this.rightBlock, ((BorderArrangement) obj).rightBlock},
        {this.centerBlock, ((BorderArrangement) obj).centerBlock}
    });
}
```",Type-3
296-1-3,src,org.jfree.chart.annotations,CategoryLineAnnotation,equals,335,361,src,org.jfree.chart.entity,CategoryItemEntity,equals,355,383,Type 3,"### Code Snippet 1 (from `CategoryLineAnnotation` class, `equals` method):

```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLineAnnotation)) {
        return false;
    }
    CategoryLineAnnotation that = (CategoryLineAnnotation) obj;
    if (!this.category1.equals(that.getCategory1())) {
        return false;
    }
    if (this.value1 != that.getValue1()) {
        return false;
    }
    if (!this.category2.equals(that.getCategory2())) {
        return false;
    }
    if (this.value2 != that.getValue2()) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `CategoryItemEntity` class, `equals` method):

```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!(obj instanceof CategoryItemEntity)) {
        return false;
    }
    CategoryItemEntity that = (CategoryItemEntity) obj;
    if (!this.rowKey.equals(that.rowKey)) {
        return false;
    }
    if (!this.columnKey.equals(that.columnKey)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    
    // check the deprecated fields
    if (this.categoryIndex != that.categoryIndex) {
        return false;   
    }
    if (this.series != that.series) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.category, that.category)) {
        return false;   
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`category1`, `value1`, etc., in the first snippet vs. `rowKey`, `columnKey`, etc., in the second snippet) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass, e.g., `ChartEntity`):

```java
/**
 * Compares two objects for equality based on the provided parameters.
 *
 * @param obj  the object to compare with.
 * @param category1  the first category (nullable).
 * @param value1  the first value.
 * @param category2  the second category (nullable).
 * @param value2  the second value.
 * @param paint  the paint object (nullable).
 * @param stroke  the stroke object (nullable).
 * @param rowKey  the row key (nullable).
 * @param columnKey  the column key (nullable).
 * @param dataset  the dataset (nullable).
 * @param categoryIndex  the category index.
 * @param series  the series index.
 * @param category  the category object (nullable).
 * @return true if the objects are equal, false otherwise.
 */
protected boolean compareObjectsForEquality(Object obj, 
        Comparable category1, double value1, Comparable category2, double value2, 
        Paint paint, Stroke stroke, Comparable rowKey, Comparable columnKey, 
        CategoryDataset dataset, int categoryIndex, int series, Object category) {
    if (obj == this) {
        return true;
    }
    if (obj == null) {
        return false;
    }
    if (obj instanceof CategoryLineAnnotation) {
        CategoryLineAnnotation that = (CategoryLineAnnotation) obj;
        if (!category1.equals(that.getCategory1())) {
            return false;
        }
        if (value1 != that.getValue1()) {
            return false;
        }
        if (!category2.equals(that.getCategory2())) {
            return false;
        }
        if (value2 != that.getValue2()) {
            return false;
        }
        if (!PaintUtilities.equal(paint, that.getPaint())) {
            return false;
        }
        if (!ObjectUtilities.equal(stroke, that.getStroke())) {
            return false;
        }
        return true;
    } else if (obj instanceof CategoryItemEntity) {
        CategoryItemEntity that = (CategoryItemEntity) obj;
        if (!rowKey.equals(that.getRowKey())) {
            return false;
        }
        if (!columnKey.equals(that.getColumnKey())) {
            return false;
        }
        if (!ObjectUtilities.equal(dataset, that.getDataset())) {
            return false;
        }
        if (categoryIndex != that.getCategoryIndex()) {
            return false;
        }
        if (series != that.getSeries()) {
            return false;
        }
        if (!ObjectUtilities.equal(category, that.getCategory())) {
            return false;
        }
        return super.equals(obj);
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `CategoryLineAnnotation`:

```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return compareObjectsForEquality(obj, this.category1, this.value1, this.category2, 
            this.value2, this.paint, this.stroke, null, null, null, 0, 0, null);
}
```

---

### 3. Refactored `equals` Method in `CategoryItemEntity`:

```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return compareObjectsForEquality(obj, null, 0, null, 0, null, null, 
            this.rowKey, this.columnKey, this.dataset, this.categoryIndex, 
            this.series, this.category);
}
```",Type-3
296-1-4,src,org.jfree.chart.annotations,CategoryLineAnnotation,equals,335,361,src,org.jfree.chart.plot.dial,DialTextAnnotation,equals,323,349,Type 3,"### Code Snippet 1: `CategoryLineAnnotation.equals` Method
```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLineAnnotation)) {
        return false;
    }
    CategoryLineAnnotation that = (CategoryLineAnnotation) obj;
    if (!this.category1.equals(that.getCategory1())) {
        return false;
    }
    if (this.value1 != that.getValue1()) {
        return false;
    }
    if (!this.category2.equals(that.getCategory2())) {
        return false;
    }
    if (this.value2 != that.getValue2()) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `DialTextAnnotation.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialTextAnnotation)) {
        return false;
    }
    DialTextAnnotation that = (DialTextAnnotation) obj;
    if (!this.label.equals(that.label)) {
        return false;
    }
    if (!this.font.equals(that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`CategoryLineAnnotation` and `DialTextAnnotation`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Object category1, Object category2, double value1, double value2, Paint paint, Stroke stroke, String label, Font font, double radius, double angle, TextAnchor anchor) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    if (category1 != null && category2 != null) {
        if (!category1.equals(((CategoryLineAnnotation) obj).getCategory1())) {
            return false;
        }
        if (value1 != ((CategoryLineAnnotation) obj).getValue1()) {
            return false;
        }
        if (!category2.equals(((CategoryLineAnnotation) obj).getCategory2())) {
            return false;
        }
        if (value2 != ((CategoryLineAnnotation) obj).getValue2()) {
            return false;
        }
    }
    if (label != null && font != null) {
        DialTextAnnotation that = (DialTextAnnotation) obj;
        if (!label.equals(that.label)) {
            return false;
        }
        if (!font.equals(that.font)) {
            return false;
        }
        if (radius != that.radius) {
            return false;
        }
        if (angle != that.angle) {
            return false;
        }
        if (!anchor.equals(that.anchor)) {
            return false;
        }
    }
    if (!PaintUtilities.equal(paint, ((CategoryLineAnnotation) obj).paint)) {
        return false;
    }
    return true;
}
```",Type-3
296-1-5,src,org.jfree.chart.annotations,CategoryLineAnnotation,equals,335,361,src,org.jfree.chart.renderer.xy,XYDifferenceRenderer,equals,1164,1190,Type 3,"```java
// Code Snippet 1: CategoryLineAnnotation.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLineAnnotation)) {
        return false;
    }
    CategoryLineAnnotation that = (CategoryLineAnnotation) obj;
    if (!this.category1.equals(that.getCategory1())) {
        return false;
    }
    if (this.value1 != that.getValue1()) {
        return false;
    }
    if (!this.category2.equals(that.getCategory2())) {
        return false;
    }
    if (this.value2 != that.getValue2()) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: XYDifferenceRenderer.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYDifferenceRenderer)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    XYDifferenceRenderer that = (XYDifferenceRenderer) obj;
    if (!PaintUtilities.equal(this.positivePaint, that.positivePaint)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.negativePaint, that.negativePaint)) {
        return false;   
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;   
    }
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass
protected boolean areObjectsEqual(Object obj, Object category1, double value1, Object category2, double value2, Paint paint, Stroke stroke) {
    if (obj == this) {
        return true;
    }
    if (!(obj.getClass().equals(this.getClass()))) {
        return false;
    }
    try {
        Object thatCategory1 = obj.getClass().getMethod(""getCategory1"").invoke(obj);
        double thatValue1 = (double) obj.getClass().getMethod(""getValue1"").invoke(obj);
        Object thatCategory2 = obj.getClass().getMethod(""getCategory2"").invoke(obj);
        double thatValue2 = (double) obj.getClass().getMethod(""getValue2"").invoke(obj);
        Paint thatPaint = (Paint) obj.getClass().getMethod(""getPaint"").invoke(obj);
        Stroke thatStroke = (Stroke) obj.getClass().getMethod(""getStroke"").invoke(obj);

        if (!category1.equals(thatCategory1)) {
            return false;
        }
        if (value1 != thatValue1) {
            return false;
        }
        if (!category2.equals(thatCategory2)) {
            return false;
        }
        if (value2 != thatValue2) {
            return false;
        }
        if (!PaintUtilities.equal(paint, thatPaint)) {
            return false;
        }
        if (!ObjectUtilities.equal(stroke, thatStroke)) {
            return false;
        }
        return true;
    } catch (Exception e) {
        return false;
    }
}
```

```java
// 2. Refactored method in CategoryLineAnnotation
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(obj, this.category1, this.value1, this.category2, this.value2, this.paint, this.stroke);
}
```

```java
// 3. Refactored method in XYDifferenceRenderer
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(obj, this.positivePaint, 0, this.negativePaint, 0, this.legendLine, this.roundXCoordinates ? new BasicStroke(1.0f) : null);
}
```",Type-3
296-2-3,src,org.jfree.chart.block,BorderArrangement,equals,505,528,src,org.jfree.chart.entity,CategoryItemEntity,equals,355,383,Type 3,"### Code Snippet 1 (from `BorderArrangement` class, `equals` method):

```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BorderArrangement)) {
        return false;
    }
    BorderArrangement that = (BorderArrangement) obj;
    if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `CategoryItemEntity` class, `equals` method):

```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!(obj instanceof CategoryItemEntity)) {
        return false;
    }
    CategoryItemEntity that = (CategoryItemEntity) obj;
    if (!this.rowKey.equals(that.rowKey)) {
        return false;
    }
    if (!this.columnKey.equals(that.columnKey)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    
    // check the deprecated fields
    if (this.categoryIndex != that.categoryIndex) {
        return false;   
    }
    if (this.series != that.series) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.category, that.category)) {
        return false;   
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but contain some different statements and logic specific to their respective classes (`BorderArrangement` and `CategoryItemEntity`).","### 1. Extracted Method (to be placed in the common superclass):

```java
protected boolean areObjectsEqual(Object obj, Object topBlock, Object bottomBlock, Object leftBlock, Object rightBlock, Object centerBlock, Object rowKey, Object columnKey, Object dataset, int categoryIndex, int series, Object category) {
    if (obj == this) {
        return true;
    }
    if (!(obj.getClass().equals(this.getClass()))) {
        return false;
    }
    if (!ObjectUtilities.equal(topBlock, getFieldValue(obj, ""topBlock""))) {
        return false;
    }
    if (!ObjectUtilities.equal(bottomBlock, getFieldValue(obj, ""bottomBlock""))) {
        return false;
    }
    if (!ObjectUtilities.equal(leftBlock, getFieldValue(obj, ""leftBlock""))) {
        return false;
    }
    if (!ObjectUtilities.equal(rightBlock, getFieldValue(obj, ""rightBlock""))) {
        return false;
    }
    if (!ObjectUtilities.equal(centerBlock, getFieldValue(obj, ""centerBlock""))) {
        return false;
    }
    if (!ObjectUtilities.equal(rowKey, getFieldValue(obj, ""rowKey""))) {
        return false;
    }
    if (!ObjectUtilities.equal(columnKey, getFieldValue(obj, ""columnKey""))) {
        return false;
    }
    if (!ObjectUtilities.equal(dataset, getFieldValue(obj, ""dataset""))) {
        return false;
    }
    if (categoryIndex != getFieldValue(obj, ""categoryIndex"")) {
        return false;
    }
    if (series != getFieldValue(obj, ""series"")) {
        return false;
    }
    if (!ObjectUtilities.equal(category, getFieldValue(obj, ""category""))) {
        return false;
    }
    return true;
}
```

",Type-3
296-2-4,src,org.jfree.chart.block,BorderArrangement,equals,505,528,src,org.jfree.chart.plot.dial,DialTextAnnotation,equals,323,349,Type 3,"### Code Snippet 1: `equals` method from `BorderArrangement` class
```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BorderArrangement)) {
        return false;
    }
    BorderArrangement that = (BorderArrangement) obj;
    if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `DialTextAnnotation` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialTextAnnotation)) {
        return false;
    }
    DialTextAnnotation that = (DialTextAnnotation) obj;
    if (!this.label.equals(that.label)) {
        return false;
    }
    if (!this.font.equals(that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and utility methods used for comparison).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality by checking their respective fields.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areFieldsEqual(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] fieldPair : fields) {
        Object field1 = fieldPair[0];
        Object field2 = fieldPair[1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `BorderArrangement` Class
```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, new Object[][] {
        { this.topBlock, ((BorderArrangement) obj).topBlock },
        { this.bottomBlock, ((BorderArrangement) obj).bottomBlock },
        { this.leftBlock, ((BorderArrangement) obj).leftBlock },
        { this.rightBlock, ((BorderArrangement) obj).rightBlock },
        { this.centerBlock, ((BorderArrangement) obj).centerBlock }
    });
}
```

---

### 3. Refactored `equals` Method in `DialTextAnnotation` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, new Object[][] {
        { this.label, ((DialTextAnnotation) obj).label },
        { this.font, ((DialTextAnnotation) obj).font },
        { this.paint, ((DialTextAnnotation) obj).paint },
        { this.radius, ((DialTextAnnotation) obj).radius },
        { this.angle, ((DialTextAnnotation) obj).angle },
        { this.anchor, ((DialTextAnnotation) obj).anchor }
    }) && super.equals(obj);
}
```",Type-3
296-2-5,src,org.jfree.chart.block,BorderArrangement,equals,505,528,src,org.jfree.chart.renderer.xy,XYDifferenceRenderer,equals,1164,1190,Type 3,"### Code Snippet 1 (BorderArrangement.java, lines 505-528)
```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BorderArrangement)) {
        return false;
    }
    BorderArrangement that = (BorderArrangement) obj;
    if (!ObjectUtilities.equal(this.topBlock, that.topBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.bottomBlock, that.bottomBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.leftBlock, that.leftBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.rightBlock, that.rightBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.centerBlock, that.centerBlock)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYDifferenceRenderer.java, lines 1164-1190)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */    
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYDifferenceRenderer)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    XYDifferenceRenderer that = (XYDifferenceRenderer) obj;
    if (!PaintUtilities.equal(this.positivePaint, that.positivePaint)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.negativePaint, that.negativePaint)) {
        return false;   
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;   
    }
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality by comparing their fields using utility methods.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param topBlock  the top block of the current object.
 * @param bottomBlock  the bottom block of the current object.
 * @param leftBlock  the left block of the current object.
 * @param rightBlock  the right block of the current object.
 * @param centerBlock  the center block of the current object.
 * @param positivePaint  the positive paint of the current object.
 * @param negativePaint  the negative paint of the current object.
 * @param shapesVisible  the shapes visibility flag of the current object.
 * @param legendLine  the legend line of the current object.
 * @param roundXCoordinates  the round X coordinates flag of the current object.
 * @param superEquals  the result of calling super.equals(obj) (if applicable).
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, 
                          Object topBlock, Object bottomBlock, Object leftBlock, 
                          Object rightBlock, Object centerBlock, 
                          Object positivePaint, Object negativePaint, 
                          boolean shapesVisible, Object legendLine, 
                          boolean roundXCoordinates, boolean superEquals) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!ObjectUtilities.equal(topBlock, ((BorderArrangement) obj).topBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(bottomBlock, ((BorderArrangement) obj).bottomBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(leftBlock, ((BorderArrangement) obj).leftBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(rightBlock, ((BorderArrangement) obj).rightBlock)) {
        return false;
    }
    if (!ObjectUtilities.equal(centerBlock, ((BorderArrangement) obj).centerBlock)) {
        return false;
    }
    if (!PaintUtilities.equal(positivePaint, ((XYDifferenceRenderer) obj).positivePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(negativePaint, ((XYDifferenceRenderer) obj).negativePaint)) {
        return false;
    }
    if (shapesVisible != ((XYDifferenceRenderer) obj).shapesVisible) {
        return false;
    }
    if (!ShapeUtilities.equal(legendLine, ((XYDifferenceRenderer) obj).legendLine)) {
        return false;
    }
    if (roundXCoordinates != ((XYDifferenceRenderer) obj).roundXCoordinates) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored Method in `BorderArrangement.java`
```java
/**
 * Tests this arrangement for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof BorderArrangement)) {
        return false;
    }
    return isEqual(obj, this.topBlock, this.bottomBlock, this.leftBlock, 
                   this.rightBlock, this.centerBlock, null, null, 
                   false, null, false, true);
}
```

---

### 3. Refactored Method in `XYDifferenceRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */    
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof XYDifferenceRenderer)) {
        return false;
    }
    return isEqual(obj, null, null, null, null, null, 
                   this.positivePaint, this.negativePaint, 
                   this.shapesVisible, this.legendLine, 
                   this.roundXCoordinates, super.equals(obj));
}
```",Type-3
304-1-3,src,org.jfree.chart.axis,MarkerAxisBand,equals,233,259,src,org.jfree.chart.plot.dial,DialTextAnnotation,equals,323,349,Type 3,"### Code Snippet 1: `equals` method in `MarkerAxisBand` class
```java
/**
 * Tests this axis for equality with another object.  Note that the axis 
 * that the band belongs to is ignored in the test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MarkerAxisBand)) {
        return false;
    }
    MarkerAxisBand that = (MarkerAxisBand) obj;
    if (this.topOuterGap != that.topOuterGap) {
        return false;
    }
    if (this.topInnerGap != that.topInnerGap) {
        return false;
    }
    if (this.bottomInnerGap != that.bottomInnerGap) {
        return false;
    }
    if (this.bottomOuterGap != that.bottomOuterGap) {
        return false;
    }
    if (!ObjectUtilities.equal(this.font, that.font)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.markers, that.markers)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method in `DialTextAnnotation` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialTextAnnotation)) {
        return false;
    }
    DialTextAnnotation that = (DialTextAnnotation) obj;
    if (!this.label.equals(that.label)) {
        return false;
    }
    if (!this.font.equals(that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but contain different statements and logic specific to their respective classes (`MarkerAxisBand` and `DialTextAnnotation`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Utility method to test equality of two objects based on provided attributes.
 *
 * @param obj  the object to compare with.
 * @param clazz  the class type to check.
 * @param doubleFields  the array of double fields to compare.
 * @param objectFields  the array of object fields to compare.
 *
 * @return <code>true</code> if equal, <code>false</code> otherwise.
 */
protected boolean isEqual(Object obj, Class<?> clazz, double[] doubleFields, Object[] objectFields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < doubleFields.length; i += 2) {
        if (doubleFields[i] != doubleFields[i + 1]) {
            return false;
        }
    }
    for (int i = 0; i < objectFields.length; i += 2) {
        if (!ObjectUtilities.equal(objectFields[i], objectFields[i + 1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MarkerAxisBand` Class
```java
/**
 * Tests this axis for equality with another object. Note that the axis
 * that the band belongs to is ignored in the test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(
        obj,
        MarkerAxisBand.class,
        new double[]{
            this.topOuterGap, ((MarkerAxisBand) obj).topOuterGap,
            this.topInnerGap, ((MarkerAxisBand) obj).topInnerGap,
            this.bottomInnerGap, ((MarkerAxisBand) obj).bottomInnerGap,
            this.bottomOuterGap, ((MarkerAxisBand) obj).bottomOuterGap
        },
        new Object[]{
            this.font, ((MarkerAxisBand) obj).font,
            this.markers, ((MarkerAxisBand) obj).markers
        }
    );
}
```

---

### 3. Refactored `equals` Method in `DialTextAnnotation` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(
        obj,
        DialTextAnnotation.class,
        new double[]{
            this.radius, ((DialTextAnnotation) obj).radius,
            this.angle, ((DialTextAnnotation) obj).angle
        },
        new Object[]{
            this.label, ((DialTextAnnotation) obj).label,
            this.font, ((DialTextAnnotation) obj).font,
            this.paint, ((DialTextAnnotation) obj).paint,
            this.anchor, ((DialTextAnnotation) obj).anchor
        }
    ) && super.equals(obj);
}
```",Type-3
304-2-3,src,org.jfree.chart.plot,RingPlot,equals,466,493,src,org.jfree.chart.plot.dial,DialTextAnnotation,equals,323,349,Type 3,"### Code Snippet 1: `equals` method in `RingPlot` class (lines 466-493)
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof RingPlot)) {
        return false;
    }
    RingPlot that = (RingPlot) obj;
    if (this.separatorsVisible != that.separatorsVisible) {
        return false;
    }
    if (!ObjectUtilities.equal(this.separatorStroke, 
            that.separatorStroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.separatorPaint, that.separatorPaint)) {
        return false;
    }
    if (this.innerSeparatorExtension != that.innerSeparatorExtension) {
        return false;
    }
    if (this.outerSeparatorExtension != that.outerSeparatorExtension) {
        return false;
    }
    if (this.sectionDepth != that.sectionDepth) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `DialTextAnnotation` class (lines 323-349)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialTextAnnotation)) {
        return false;
    }
    DialTextAnnotation that = (DialTextAnnotation) obj;
    if (!this.label.equals(that.label)) {
        return false;
    }
    if (!this.font.equals(that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`separatorsVisible`, `separatorStroke`, etc., in `RingPlot` vs. `label`, `font`, etc., in `DialTextAnnotation`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing specified fields.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[] fields, Object[] thatFields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) thatFields[i]) != 0) {
                return false;
            }
        } else if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `RingPlot` Class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[] {
            this.separatorsVisible, 
            this.separatorStroke, 
            this.separatorPaint, 
            this.innerSeparatorExtension, 
            this.outerSeparatorExtension, 
            this.sectionDepth
        }, 
        new Object[] {
            ((RingPlot) obj).separatorsVisible, 
            ((RingPlot) obj).separatorStroke, 
            ((RingPlot) obj).separatorPaint, 
            ((RingPlot) obj).innerSeparatorExtension, 
            ((RingPlot) obj).outerSeparatorExtension, 
            ((RingPlot) obj).sectionDepth
        }
    );
}
```

---

### 3. Refactored `equals` Method in `DialTextAnnotation` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[] {
            this.label, 
            this.font, 
            this.paint, 
            this.radius, 
            this.angle, 
            this.anchor
        }, 
        new Object[] {
            ((DialTextAnnotation) obj).label, 
            ((DialTextAnnotation) obj).font, 
            ((DialTextAnnotation) obj).paint, 
            ((DialTextAnnotation) obj).radius, 
            ((DialTextAnnotation) obj).angle, 
            ((DialTextAnnotation) obj).anchor
        }
    );
}
```",Type-3
305-1-4,src,org.jfree.chart.axis,NumberAxis,equals,1324,1351,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1: `equals` method from `NumberAxis` class (lines 1324-1351)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberAxis that = (NumberAxis) obj;
    if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {
        return false;
    }
    if (this.autoRangeStickyZero != that.autoRangeStickyZero) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormatOverride,
            that.numberFormatOverride)) {
        return false;
    }
    if (!this.rangeType.equals(that.rangeType)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `HighLowRenderer` class (lines 479-505)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`NumberAxis` and `HighLowRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass)
```java
protected boolean equalsHelper(Object obj, Object thisInstance, Class<?> clazz, boolean[] booleanFields, Object[] objectFields, Object[] otherObjectFields) {
    if (thisInstance == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < booleanFields.length; i++) {
        if (booleanFields[i] != ((boolean[]) otherObjectFields[0])[i]) {
            return false;
        }
    }
    for (int i = 0; i < objectFields.length; i++) {
        if (!ObjectUtilities.equal(objectFields[i], ((Object[]) otherObjectFields[1])[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `NumberAxis` Class
```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        NumberAxis.class,
        new boolean[]{this.autoRangeIncludesZero, this.autoRangeStickyZero},
        new Object[]{this.tickUnit, this.numberFormatOverride, this.rangeType},
        new Object[]{
            new boolean[]{((NumberAxis) obj).autoRangeIncludesZero, ((NumberAxis) obj).autoRangeStickyZero},
            new Object[]{((NumberAxis) obj).tickUnit, ((NumberAxis) obj).numberFormatOverride, ((NumberAxis) obj).rangeType}
        }
    );
}
```

---

### 3. Refactored `equals` Method in `HighLowRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        HighLowRenderer.class,
        new boolean[]{this.drawOpenTicks, this.drawCloseTicks},
        new Object[]{this.openTickPaint, this.closeTickPaint, this.tickLength},
        new Object[]{
            new boolean[]{((HighLowRenderer) obj).drawOpenTicks, ((HighLowRenderer) obj).drawCloseTicks},
            new Object[]{((HighLowRenderer) obj).openTickPaint, ((HighLowRenderer) obj).closeTickPaint, ((HighLowRenderer) obj).tickLength}
        }
    );
}
```",Type-3
305-2-4,src,org.jfree.chart.plot,MultiplePiePlot,equals,560,587,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1 (MultiplePiePlot.java, `equals` method, lines 560-587):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MultiplePiePlot)) {
        return false;
    }
    MultiplePiePlot that = (MultiplePiePlot) obj;
    if (this.dataExtractOrder != that.dataExtractOrder) {
        return false;
    }
    if (this.limit != that.limit) {
        return false;
    }
    if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
        return false;
    }
    if (!PaintUtilities.equal(this.aggregatedItemsPaint,
            that.aggregatedItemsPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (HighLowRenderer.java, `equals` method, lines 479-505):
```java
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and variable names.","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean baseEquals(Object obj, Object thisInstance, Class<?> clazz, 
                             boolean[] booleanFields, Object[] objectFields, 
                             double[] doubleFields) {
    if (thisInstance == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);

    for (int i = 0; i < booleanFields.length; i++) {
        if (booleanFields[i] != ((boolean[]) booleanFields)[i]) {
            return false;
        }
    }

    for (int i = 0; i < doubleFields.length; i++) {
        if (doubleFields[i] != ((double[]) doubleFields)[i]) {
            return false;
        }
    }

    for (int i = 0; i < objectFields.length; i++) {
        if (!ObjectUtilities.equal(objectFields[i], ((Object[]) objectFields)[i])) {
            return false;
        }
    }

    return super.equals(obj);
}
```

",Type-3
305-3-4,src,org.jfree.chart.plot.dial,DialTextAnnotation,equals,323,349,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1: `equals` method from `DialTextAnnotation` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialTextAnnotation)) {
        return false;
    }
    DialTextAnnotation that = (DialTextAnnotation) obj;
    if (!this.label.equals(that.label)) {
        return false;
    }
    if (!this.font.equals(that.font)) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `HighLowRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractDialLayer` or `AbstractXYItemRenderer`):
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... attributes) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = attributes[i + 1];
        if (thisAttribute instanceof Double) {
            if (Double.compare((Double) thisAttribute, (Double) thatAttribute) != 0) {
                return false;
            }
        } else if (thisAttribute instanceof Paint) {
            if (!PaintUtilities.equal((Paint) thisAttribute, (Paint) thatAttribute)) {
                return false;
            }
        } else if (!thisAttribute.equals(thatAttribute)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `DialTextAnnotation`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DialTextAnnotation.class,
        this.label, ((DialTextAnnotation) obj).label,
        this.font, ((DialTextAnnotation) obj).font,
        this.paint, ((DialTextAnnotation) obj).paint,
        this.radius, ((DialTextAnnotation) obj).radius,
        this.angle, ((DialTextAnnotation) obj).angle,
        this.anchor, ((DialTextAnnotation) obj).anchor
    );
}
```

---

### 3. Refactored `equals` Method in `HighLowRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, HighLowRenderer.class,
        this.drawOpenTicks, ((HighLowRenderer) obj).drawOpenTicks,
        this.drawCloseTicks, ((HighLowRenderer) obj).drawCloseTicks,
        this.openTickPaint, ((HighLowRenderer) obj).openTickPaint,
        this.closeTickPaint, ((HighLowRenderer) obj).closeTickPaint,
        this.tickLength, ((HighLowRenderer) obj).tickLength
    );
}
```",Type-3
305-4-5,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,src,org.jfree.chart.renderer.xy,XYDifferenceRenderer,equals,1164,1190,Type 3,"```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */    
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof XYDifferenceRenderer)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    XYDifferenceRenderer that = (XYDifferenceRenderer) obj;
    if (!PaintUtilities.equal(this.positivePaint, that.positivePaint)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.negativePaint, that.negativePaint)) {
        return false;   
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;   
    }
    if (!ShapeUtilities.equal(this.legendLine, that.legendLine)) {
        return false;   
    }
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (to be placed in the superclass `AbstractXYItemRenderer`):
```java
/**
 * Tests two renderers for equality based on their specific properties.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param drawOpenTicks  the drawOpenTicks flag (specific to HighLowRenderer).
 * @param drawCloseTicks  the drawCloseTicks flag (specific to HighLowRenderer).
 * @param openTickPaint  the openTickPaint (specific to HighLowRenderer).
 * @param closeTickPaint  the closeTickPaint (specific to HighLowRenderer).
 * @param tickLength  the tickLength (specific to HighLowRenderer).
 * @param positivePaint  the positivePaint (specific to XYDifferenceRenderer).
 * @param negativePaint  the negativePaint (specific to XYDifferenceRenderer).
 * @param shapesVisible  the shapesVisible flag (specific to XYDifferenceRenderer).
 * @param legendLine  the legendLine (specific to XYDifferenceRenderer).
 * @param roundXCoordinates  the roundXCoordinates flag (specific to XYDifferenceRenderer).
 * @return A boolean indicating equality.
 */
protected boolean rendererEquals(Object obj,
                                 boolean drawOpenTicks,
                                 boolean drawCloseTicks,
                                 Paint openTickPaint,
                                 Paint closeTickPaint,
                                 double tickLength,
                                 Paint positivePaint,
                                 Paint negativePaint,
                                 boolean shapesVisible,
                                 Shape legendLine,
                                 boolean roundXCoordinates) {
    if (this == obj) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (obj instanceof HighLowRenderer) {
        HighLowRenderer that = (HighLowRenderer) obj;
        return drawOpenTicks == that.drawOpenTicks
                && drawCloseTicks == that.drawCloseTicks
                && PaintUtilities.equal(openTickPaint, that.openTickPaint)
                && PaintUtilities.equal(closeTickPaint, that.closeTickPaint)
                && tickLength == that.tickLength;
    } else if (obj instanceof XYDifferenceRenderer) {
        XYDifferenceRenderer that = (XYDifferenceRenderer) obj;
        return PaintUtilities.equal(positivePaint, that.positivePaint)
                && PaintUtilities.equal(negativePaint, that.negativePaint)
                && shapesVisible == that.shapesVisible
                && ShapeUtilities.equal(legendLine, that.legendLine)
                && roundXCoordinates == that.roundXCoordinates;
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `HighLowRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(obj,
                          this.drawOpenTicks,
                          this.drawCloseTicks,
                          this.openTickPaint,
                          this.closeTickPaint,
                          this.tickLength,
                          null, // positivePaint not applicable
                          null, // negativePaint not applicable
                          false, // shapesVisible not applicable
                          null, // legendLine not applicable
                          false); // roundXCoordinates not applicable
}
```

---

### 3. Refactored `equals` Method in `XYDifferenceRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */    
@Override
public boolean equals(Object obj) {
    return rendererEquals(obj,
                          false, // drawOpenTicks not applicable
                          false, // drawCloseTicks not applicable
                          null, // openTickPaint not applicable
                          null, // closeTickPaint not applicable
                          0.0, // tickLength not applicable
                          this.positivePaint,
                          this.negativePaint,
                          this.shapesVisible,
                          this.legendLine,
                          this.roundXCoordinates);
}
```",Type-3
307-1-4,src,org.jfree.chart.plot,CategoryPlot,drawRangeCrosshair,3338,3360,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawDomainLine,937,960,Type 3,"### Code Snippet 1: `drawRangeCrosshair` Method (CategoryPlot.java)
```java
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    if (!axis.getRange().contains(value)) {
        return;
    }
    Line2D line = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        double xx = axis.valueToJava2D(value, dataArea,
                RectangleEdge.BOTTOM);
        line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                dataArea.getMaxY());
    }
    else {
        double yy = axis.valueToJava2D(value, dataArea,
                RectangleEdge.LEFT);
        line = new Line2D.Double(dataArea.getMinX(), yy,
                dataArea.getMaxX(), yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);

}
```

---

### Code Snippet 2: `drawDomainLine` Method (AbstractXYItemRenderer.java)
```java
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea,
            plot.getDomainAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(),
                v);
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v,
                dataArea.getMaxY());
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);

}
```

---

### Clone Type:
The two code snippets represent **Type-3 Clones**.  
- **Reason**: The methods are mostly similar in structure and logic but have some differences in variable names, method parameters, and specific logic (e.g., `drawRangeCrosshair` uses `RectangleEdge` while `drawDomainLine` uses `plot.getDomainAxisEdge()`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Plot`):
```java
protected void drawLine(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, 
        double value, ValueAxis axis, RectangleEdge edge, Paint paint, Stroke stroke) {

    if (!axis.getRange().contains(value)) {
        return;
    }

    Line2D line = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        double coord = axis.valueToJava2D(value, dataArea, edge);
        line = new Line2D.Double(dataArea.getMinX(), coord, dataArea.getMaxX(), coord);
    } else if (orientation == PlotOrientation.VERTICAL) {
        double coord = axis.valueToJava2D(value, dataArea, edge);
        line = new Line2D.Double(coord, dataArea.getMinY(), coord, dataArea.getMaxY());
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);
}
```

---

### 2. Refactored `drawRangeCrosshair` Method (CategoryPlot.java):
```java
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    drawLine(g2, dataArea, orientation, value, axis, 
            (orientation == PlotOrientation.HORIZONTAL) ? RectangleEdge.BOTTOM : RectangleEdge.LEFT, 
            paint, stroke);
}
```

---

### 3. Refactored `drawDomainLine` Method (AbstractXYItemRenderer.java):
```java
public void drawDomainLine(Graphics2D g2, XYPlot plot, ValueAxis axis,
        Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {

    drawLine(g2, dataArea, plot.getOrientation(), value, axis, 
            plot.getDomainAxisEdge(), paint, stroke);
}
```",Type-3
307-1-5,src,org.jfree.chart.plot,CategoryPlot,drawRangeCrosshair,3338,3360,src,org.jfree.chart.renderer.xy,AbstractXYItemRenderer,drawRangeLine,976,1003,Type 3,"### Code Snippet 1: `drawRangeCrosshair` Method (CategoryPlot.java)
```java
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    if (!axis.getRange().contains(value)) {
        return;
    }
    Line2D line = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        double xx = axis.valueToJava2D(value, dataArea,
                RectangleEdge.BOTTOM);
        line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                dataArea.getMaxY());
    }
    else {
        double yy = axis.valueToJava2D(value, dataArea,
                RectangleEdge.LEFT);
        line = new Line2D.Double(dataArea.getMinX(), yy,
                dataArea.getMaxX(), yy);
    }
    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);

}
```

---

### Code Snippet 2: `drawRangeLine` Method (AbstractXYItemRenderer.java)
```java
public void drawRangeLine(Graphics2D g2,
                          XYPlot plot,
                          ValueAxis axis,
                          Rectangle2D dataArea,
                          double value,
                          Paint paint,
                          Stroke stroke) {

    Range range = axis.getRange();
    if (!range.contains(value)) {
        return;
    }

    PlotOrientation orientation = plot.getOrientation();
    Line2D line = null;
    double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
    if (orientation == PlotOrientation.HORIZONTAL) {
        line = new Line2D.Double(v, dataArea.getMinY(), v,
                dataArea.getMaxY());
    }
    else if (orientation == PlotOrientation.VERTICAL) {
        line = new Line2D.Double(dataArea.getMinX(), v,
                dataArea.getMaxX(), v);
    }

    g2.setPaint(paint);
    g2.setStroke(stroke);
    g2.draw(line);

}
```

---

### Clone Type:
The two code snippets represent **Type-3 Clones**.  
- **Reason**: The methods are mostly similar in structure and logic but have some differences in variable names, method parameters, and additional functionality (e.g., `drawRangeLine` uses `XYPlot` and `plot.getRangeAxisEdge()`, while `drawRangeCrosshair` uses `RectangleEdge.LEFT` or `RectangleEdge.BOTTOM`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected void drawRangeLineCommon(Graphics2D g2,
                                   Rectangle2D dataArea,
                                   PlotOrientation orientation,
                                   double value,
                                   ValueAxis axis,
                                   Stroke stroke,
                                   Paint paint,
                                   RectangleEdge rangeAxisEdge) {

    if (!axis.getRange().contains(value)) {
        return;
    }

    Line2D line = null;
    if (orientation == PlotOrientation.HORIZONTAL) {
        double v = axis.valueToJava2D(value, dataArea, rangeAxisEdge);
        line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY());
    } else if (orientation == PlotOrientation.VERTICAL) {
        double v = axis.valueToJava2D(value, dataArea, rangeAxisEdge);
        line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v);
    }

    g2.setStroke(stroke);
    g2.setPaint(paint);
    g2.draw(line);
}
```

---

### 2. Refactored `drawRangeCrosshair` Method (CategoryPlot.java)
```java
protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea,
        PlotOrientation orientation, double value, ValueAxis axis,
        Stroke stroke, Paint paint) {

    RectangleEdge rangeAxisEdge = (orientation == PlotOrientation.HORIZONTAL)
            ? RectangleEdge.BOTTOM : RectangleEdge.LEFT;

    drawRangeLineCommon(g2, dataArea, orientation, value, axis, stroke, paint, rangeAxisEdge);
}
```

---

### 3. Refactored `drawRangeLine` Method (AbstractXYItemRenderer.java)
```java
public void drawRangeLine(Graphics2D g2,
                          XYPlot plot,
                          ValueAxis axis,
                          Rectangle2D dataArea,
                          double value,
                          Paint paint,
                          Stroke stroke) {

    RectangleEdge rangeAxisEdge = plot.getRangeAxisEdge();
    PlotOrientation orientation = plot.getOrientation();

    drawRangeLineCommon(g2, dataArea, orientation, value, axis, stroke, paint, rangeAxisEdge);
}
```",Type-3
308-1-2,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.axis,DateAxis,equals,1744,1769,Type 3,"### Code Snippet 1: `equals` method from `XYPolygonAnnotation` class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

---

### Code Snippet 2: `equals` method from `DateAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateAxis)) {
        return false;
    }
    DateAxis that = (DateAxis) obj;
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormatOverride,
            that.dateFormatOverride)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickMarkPosition,
            that.tickMarkPosition)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timeline, that.timeline)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYPolygonAnnotation` and `DateAxis`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param superEquals  the result of calling super.equals(obj).
 * @param fieldComparisons  an array of boolean results for field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, boolean superEquals, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYPolygonAnnotation` Class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    return equalsHelper(
        obj,
        super.equals(obj),
        Arrays.equals(this.polygon, that.polygon),
        ObjectUtilities.equal(this.stroke, that.stroke),
        PaintUtilities.equal(this.outlinePaint, that.outlinePaint),
        PaintUtilities.equal(this.fillPaint, that.fillPaint)
    );
}
```

---

### 3. Refactored `equals` Method in `DateAxis` Class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof DateAxis)) {
        return false;
    }
    DateAxis that = (DateAxis) obj;
    return equalsHelper(
        obj,
        super.equals(obj),
        ObjectUtilities.equal(this.tickUnit, that.tickUnit),
        ObjectUtilities.equal(this.dateFormatOverride, that.dateFormatOverride),
        ObjectUtilities.equal(this.tickMarkPosition, that.tickMarkPosition),
        ObjectUtilities.equal(this.timeline, that.timeline)
    );
}
```",Type-3
308-1-3,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.axis,NumberAxis,equals,1324,1351,Type 3,"### Code Snippet 1: `equals` method from `XYPolygonAnnotation` class (lines 273-298)
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

---

### Code Snippet 2: `equals` method from `NumberAxis` class (lines 1324-1351)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberAxis that = (NumberAxis) obj;
    if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {
        return false;
    }
    if (this.autoRangeStickyZero != that.autoRangeStickyZero) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormatOverride,
            that.numberFormatOverride)) {
        return false;
    }
    if (!this.rangeType.equals(that.rangeType)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYPolygonAnnotation` and `NumberAxis`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        otherFields[i] = fields[i] instanceof Object[] ? Arrays.copyOf((Object[]) fields[i], ((Object[]) fields[i]).length) : fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Object[]) {
            if (!Arrays.equals((Object[]) fields[i], (Object[]) otherFields[i])) {
                return false;
            }
        } else if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYPolygonAnnotation` Class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYPolygonAnnotation.class,
        super.equals(obj),
        this.polygon,
        this.stroke,
        this.outlinePaint,
        this.fillPaint
    );
}
```

---

### 3. Refactored `equals` Method in `NumberAxis` Class
```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        NumberAxis.class,
        super.equals(obj),
        this.autoRangeIncludesZero,
        this.autoRangeStickyZero,
        this.tickUnit,
        this.numberFormatOverride,
        this.rangeType
    );
}
```",Type-3
308-1-4,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.plot,MultiplePiePlot,equals,560,587,Type 3,"### Code Snippet 1: `equals` method from `XYPolygonAnnotation` class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

---

### Code Snippet 2: `equals` method from `MultiplePiePlot` class
```java
/**
 * Tests this plot for equality with an arbitrary object.  Note that the
 * plot's dataset is not considered in the equality test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if this plot is equal to <code>obj</code>, and
 *     <code>false</code> otherwise.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MultiplePiePlot)) {
        return false;
    }
    MultiplePiePlot that = (MultiplePiePlot) obj;
    if (this.dataExtractOrder != that.dataExtractOrder) {
        return false;
    }
    if (this.limit != that.limit) {
        return false;
    }
    if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
        return false;
    }
    if (!PaintUtilities.equal(this.aggregatedItemsPaint,
            that.aggregatedItemsPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYPolygonAnnotation` and `MultiplePiePlot`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param polygon  the polygon array.
 * @param stroke  the stroke object.
 * @param outlinePaint  the outline paint object.
 * @param fillPaint  the fill paint object.
 * @param additionalChecks  a runnable for additional equality checks specific to the subclass.
 * @return true if the objects are equal, false otherwise.
 */
protected boolean equalsHelper(Object obj, double[] polygon, Object stroke, Object outlinePaint, Object fillPaint, Runnable additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    additionalChecks.run();
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYPolygonAnnotation` Class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, this.polygon, this.stroke, this.outlinePaint, this.fillPaint, () -> {
        if (!(obj instanceof XYPolygonAnnotation)) {
            throw new AssertionError(false);
        }
        XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
        if (!Arrays.equals(this.polygon, that.polygon)) {
            throw new AssertionError(false);
        }
        if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
            throw new AssertionError(false);
        }
        if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
            throw new AssertionError(false);
        }
        if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
            throw new AssertionError(false);
        }
    });
}
```

---

### 3. Refactored `equals` Method in `MultiplePiePlot` Class
```java
/**
 * Tests this plot for equality with an arbitrary object.  Note that the
 * plot's dataset is not considered in the equality test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if this plot is equal to <code>obj</code>, and
 *     <code>false</code> otherwise.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, null, null, this.aggregatedItemsPaint, null, () -> {
        if (!(obj instanceof MultiplePiePlot)) {
            throw new AssertionError(false);
        }
        MultiplePiePlot that = (MultiplePiePlot) obj;
        if (this.dataExtractOrder != that.dataExtractOrder) {
            throw new AssertionError(false);
        }
        if (this.limit != that.limit) {
            throw new AssertionError(false);
        }
        if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
            throw new AssertionError(false);
        }
        if (!PaintUtilities.equal(this.aggregatedItemsPaint, that.aggregatedItemsPaint)) {
            throw new AssertionError(false);
        }
        if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
            throw new AssertionError(false);
        }
    });
}
```",Type-3
308-1-5,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.renderer.category,WaterfallBarRenderer,equals,470,496,Type 3,"### Code Snippet 1: `equals` method from `XYPolygonAnnotation` (lines 273-298)
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

---

### Code Snippet 2: `equals` method from `WaterfallBarRenderer` (lines 470-496)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof WaterfallBarRenderer)) {
        return false;
    }
    WaterfallBarRenderer that = (WaterfallBarRenderer) obj;
    if (!PaintUtilities.equal(this.firstBarPaint, that.firstBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.lastBarPaint, that.lastBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.positiveBarPaint,
            that.positiveBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.negativeBarPaint,
            that.negativeBarPaint)) {
        return false;
    }
    return true;

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific checks).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof double[] && otherFields[i] instanceof double[]) {
            if (!Arrays.equals((double[]) fields[i], (double[]) otherFields[i])) {
                return false;
            }
        } else if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `XYPolygonAnnotation`
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYPolygonAnnotation.class, this.polygon, this.stroke, this.outlinePaint, this.fillPaint);
}
```

### 3. Refactored `equals` Method in `WaterfallBarRenderer`
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, WaterfallBarRenderer.class, this.firstBarPaint, this.lastBarPaint, this.positiveBarPaint, this.negativeBarPaint);
}
```",Type-3
308-1-6,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1 (XYPolygonAnnotation.java, equals method, lines 273-298):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

### Code Snippet 2 (HighLowRenderer.java, equals method, lines 479-505):
```java
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass `AbstractXYAnnotation` or `AbstractXYItemRenderer`):
```java
protected boolean equalsHelper(Object obj, Object thisObj, Class<?> clazz, Object[] fields, Object[] otherFields) {
    if (thisObj == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof double[] && otherFields[i] instanceof double[]) {
            if (!Arrays.equals((double[]) fields[i], (double[]) otherFields[i])) {
                return false;
            }
        } else if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYPolygonAnnotation`:
```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        XYPolygonAnnotation.class,
        new Object[]{this.polygon, this.stroke, this.outlinePaint, this.fillPaint},
        new Object[]{((XYPolygonAnnotation) obj).polygon, ((XYPolygonAnnotation) obj).stroke, ((XYPolygonAnnotation) obj).outlinePaint, ((XYPolygonAnnotation) obj).fillPaint}
    );
}
```

---

### 3. Refactored `equals` Method in `HighLowRenderer`:
```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        HighLowRenderer.class,
        new Object[]{this.drawOpenTicks, this.drawCloseTicks, this.openTickPaint, this.closeTickPaint, this.tickLength},
        new Object[]{((HighLowRenderer) obj).drawOpenTicks, ((HighLowRenderer) obj).drawCloseTicks, ((HighLowRenderer) obj).openTickPaint, ((HighLowRenderer) obj).closeTickPaint, ((HighLowRenderer) obj).tickLength}
    );
}
```",Type-3
308-2-3,src,org.jfree.chart.axis,DateAxis,equals,1744,1769,src,org.jfree.chart.axis,NumberAxis,equals,1324,1351,Type 3,"### Code Snippet 1 (DateAxis.java, `equals` method, lines 1744-1769):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateAxis)) {
        return false;
    }
    DateAxis that = (DateAxis) obj;
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormatOverride,
            that.dateFormatOverride)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickMarkPosition,
            that.tickMarkPosition)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timeline, that.timeline)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (NumberAxis.java, `equals` method, lines 1324-1351):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberAxis that = (NumberAxis) obj;
    if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {
        return false;
    }
    if (this.autoRangeStickyZero != that.autoRangeStickyZero) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormatOverride,
            that.numberFormatOverride)) {
        return false;
    }
    if (!this.rangeType.equals(that.rangeType)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`tickUnit`, `dateFormatOverride`, `tickMarkPosition`, `timeline`, `rangeType`, etc.) and the class type checks (`DateAxis` vs. `NumberAxis`).","### 1. Extracted Method (To be placed in the common superclass `ValueAxis`):
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object tickUnit, Object formatOverride, Object... additionalFields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    ValueAxis that = (ValueAxis) obj;
    if (!ObjectUtilities.equal(tickUnit, additionalFields[0])) {
        return false;
    }
    if (!ObjectUtilities.equal(formatOverride, additionalFields[1])) {
        return false;
    }
    for (int i = 2; i < additionalFields.length; i += 2) {
        if (!ObjectUtilities.equal(additionalFields[i], additionalFields[i + 1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DateAxis`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, DateAxis.class, this.tickUnit, this.dateFormatOverride, 
        this.tickMarkPosition, ((DateAxis) obj).tickMarkPosition, 
        this.timeline, ((DateAxis) obj).timeline);
}
```

---

### 3. Refactored `equals` Method in `NumberAxis`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberAxis.class, this.tickUnit, this.numberFormatOverride, 
        this.autoRangeIncludesZero, ((NumberAxis) obj).autoRangeIncludesZero, 
        this.autoRangeStickyZero, ((NumberAxis) obj).autoRangeStickyZero, 
        this.rangeType, ((NumberAxis) obj).rangeType);
}
```",Type-3
308-2-4,src,org.jfree.chart.axis,DateAxis,equals,1744,1769,src,org.jfree.chart.plot,MultiplePiePlot,equals,560,587,Type 3,"### Code Snippet 1: `equals` method from `DateAxis` class (lines 1744-1769)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateAxis)) {
        return false;
    }
    DateAxis that = (DateAxis) obj;
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormatOverride,
            that.dateFormatOverride)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickMarkPosition,
            that.tickMarkPosition)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timeline, that.timeline)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `MultiplePiePlot` class (lines 560-587)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MultiplePiePlot)) {
        return false;
    }
    MultiplePiePlot that = (MultiplePiePlot) obj;
    if (this.dataExtractOrder != that.dataExtractOrder) {
        return false;
    }
    if (this.limit != that.limit) {
        return false;
    }
    if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
        return false;
    }
    if (!PaintUtilities.equal(this.aggregatedItemsPaint,
            that.aggregatedItemsPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`tickUnit`, `dateFormatOverride`, etc., in `DateAxis` vs. `dataExtractOrder`, `limit`, etc., in `MultiplePiePlot`) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass `Plot`):
```java
protected boolean equalsHelper(Object obj, Object[] thisFields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || this.getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < thisFields.length; i++) {
        if (!ObjectUtilities.equal(thisFields[i], thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` method in `DateAxis` class:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[]{this.tickUnit, this.dateFormatOverride, this.tickMarkPosition, this.timeline}, 
        new Object[]{((DateAxis) obj).tickUnit, ((DateAxis) obj).dateFormatOverride, ((DateAxis) obj).tickMarkPosition, ((DateAxis) obj).timeline});
}
```

---

### 3. Refactored `equals` method in `MultiplePiePlot` class:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[]{this.dataExtractOrder, this.limit, this.aggregatedItemsKey, this.aggregatedItemsPaint, this.pieChart}, 
        new Object[]{((MultiplePiePlot) obj).dataExtractOrder, ((MultiplePiePlot) obj).limit, ((MultiplePiePlot) obj).aggregatedItemsKey, ((MultiplePiePlot) obj).aggregatedItemsPaint, ((MultiplePiePlot) obj).pieChart});
}
```",Type-3
308-2-6,src,org.jfree.chart.axis,DateAxis,equals,1744,1769,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1: `equals` method in `DateAxis` class (lines 1744-1769)

```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateAxis)) {
        return false;
    }
    DateAxis that = (DateAxis) obj;
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormatOverride,
            that.dateFormatOverride)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickMarkPosition,
            that.tickMarkPosition)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timeline, that.timeline)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)

---

### Code Snippet 2: `equals` method in `HighLowRenderer` class (lines 479-505)

```java
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (to be placed in the common superclass)

```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `DateAxis` Class

```java
public boolean equals(Object obj) {
    return equalsHelper(obj, DateAxis.class,
        this.tickUnit, ((DateAxis) obj).tickUnit,
        this.dateFormatOverride, ((DateAxis) obj).dateFormatOverride,
        this.tickMarkPosition, ((DateAxis) obj).tickMarkPosition,
        this.timeline, ((DateAxis) obj).timeline
    );
}
```

---

### 3. Refactored `equals` Method in `HighLowRenderer` Class

```java
public boolean equals(Object obj) {
    return equalsHelper(obj, HighLowRenderer.class,
        this.drawOpenTicks, ((HighLowRenderer) obj).drawOpenTicks,
        this.drawCloseTicks, ((HighLowRenderer) obj).drawCloseTicks,
        this.openTickPaint, ((HighLowRenderer) obj).openTickPaint,
        this.closeTickPaint, ((HighLowRenderer) obj).closeTickPaint,
        this.tickLength, ((HighLowRenderer) obj).tickLength
    );
}
```",Type-2
308-3-5,src,org.jfree.chart.axis,NumberAxis,equals,1324,1351,src,org.jfree.chart.renderer.category,WaterfallBarRenderer,equals,470,496,Type 3,"### Code Snippet 1: `equals` method from `NumberAxis` class (lines 1324-1351)

```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberAxis that = (NumberAxis) obj;
    if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {
        return false;
    }
    if (this.autoRangeStickyZero != that.autoRangeStickyZero) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormatOverride,
            that.numberFormatOverride)) {
        return false;
    }
    if (!this.rangeType.equals(that.rangeType)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `WaterfallBarRenderer` class (lines 470-496)

```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof WaterfallBarRenderer)) {
        return false;
    }
    WaterfallBarRenderer that = (WaterfallBarRenderer) obj;
    if (!PaintUtilities.equal(this.firstBarPaint, that.firstBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.lastBarPaint, that.lastBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.positiveBarPaint,
            that.positiveBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.negativeBarPaint,
            that.negativeBarPaint)) {
        return false;
    }
    return true;

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different fields (`autoRangeIncludesZero`, `firstBarPaint`, etc.) and utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)

```java
/**
 * Tests for equality between two objects by comparing specific fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `NumberAxis` Class

```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        NumberAxis.class,
        super.equals(obj),
        this.autoRangeIncludesZero == ((NumberAxis) obj).autoRangeIncludesZero,
        this.autoRangeStickyZero == ((NumberAxis) obj).autoRangeStickyZero,
        ObjectUtilities.equal(this.tickUnit, ((NumberAxis) obj).tickUnit),
        ObjectUtilities.equal(this.numberFormatOverride, ((NumberAxis) obj).numberFormatOverride),
        this.rangeType.equals(((NumberAxis) obj).rangeType)
    );
}
```

---

### 3. Refactored `equals` Method in `WaterfallBarRenderer` Class

```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        WaterfallBarRenderer.class,
        super.equals(obj),
        PaintUtilities.equal(this.firstBarPaint, ((WaterfallBarRenderer) obj).firstBarPaint),
        PaintUtilities.equal(this.lastBarPaint, ((WaterfallBarRenderer) obj).lastBarPaint),
        PaintUtilities.equal(this.positiveBarPaint, ((WaterfallBarRenderer) obj).positiveBarPaint),
        PaintUtilities.equal(this.negativeBarPaint, ((WaterfallBarRenderer) obj).negativeBarPaint)
    );
}
```",Type-3
308-3-6,src,org.jfree.chart.axis,NumberAxis,equals,1324,1351,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1: `equals` method from `NumberAxis` class (lines 1324-1351)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberAxis)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberAxis that = (NumberAxis) obj;
    if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {
        return false;
    }
    if (this.autoRangeStickyZero != that.autoRangeStickyZero) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormatOverride,
            that.numberFormatOverride)) {
        return false;
    }
    if (!this.rangeType.equals(that.rangeType)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `HighLowRenderer` class (lines 479-505)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`NumberAxis` and `HighLowRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param superEquals  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results for field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, boolean superEquals, boolean... fieldComparisons) {
    if (this == obj) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `NumberAxis` Class
```java
/**
 * Tests the axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof NumberAxis)) {
        return false;
    }
    NumberAxis that = (NumberAxis) obj;
    return equalsHelper(
        obj,
        super.equals(obj),
        this.autoRangeIncludesZero == that.autoRangeIncludesZero,
        this.autoRangeStickyZero == that.autoRangeStickyZero,
        ObjectUtilities.equal(this.tickUnit, that.tickUnit),
        ObjectUtilities.equal(this.numberFormatOverride, that.numberFormatOverride),
        this.rangeType.equals(that.rangeType)
    );
}
```

---

### 3. Refactored `equals` Method in `HighLowRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    return equalsHelper(
        obj,
        super.equals(obj),
        this.drawOpenTicks == that.drawOpenTicks,
        this.drawCloseTicks == that.drawCloseTicks,
        PaintUtilities.equal(this.openTickPaint, that.openTickPaint),
        PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint),
        this.tickLength == that.tickLength
    );
}
```",Type-3
308-4-5,src,org.jfree.chart.plot,MultiplePiePlot,equals,560,587,src,org.jfree.chart.renderer.category,WaterfallBarRenderer,equals,470,496,Type 3,"### Code Snippet 1: `equals` method from `MultiplePiePlot` class (lines 560-587)
```java
/**
 * Tests this plot for equality with an arbitrary object.  Note that the
 * plot's dataset is not considered in the equality test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if this plot is equal to <code>obj</code>, and
 *     <code>false</code> otherwise.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MultiplePiePlot)) {
        return false;
    }
    MultiplePiePlot that = (MultiplePiePlot) obj;
    if (this.dataExtractOrder != that.dataExtractOrder) {
        return false;
    }
    if (this.limit != that.limit) {
        return false;
    }
    if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
        return false;
    }
    if (!PaintUtilities.equal(this.aggregatedItemsPaint,
            that.aggregatedItemsPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `WaterfallBarRenderer` class (lines 470-496)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof WaterfallBarRenderer)) {
        return false;
    }
    WaterfallBarRenderer that = (WaterfallBarRenderer) obj;
    if (!PaintUtilities.equal(this.firstBarPaint, that.firstBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.lastBarPaint, that.lastBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.positiveBarPaint,
            that.positiveBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.negativeBarPaint,
            that.negativeBarPaint)) {
        return false;
    }
    return true;

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** and logic specific to their respective classes (`MultiplePiePlot` and `WaterfallBarRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractRenderer` or another appropriate superclass)
```java
/**
 * Tests an object for equality with this instance, based on provided parameters.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param classType  the expected class type for comparison.
 * @param superEquals  the result of the superclass's equals method.
 * @param paintFields  an array of Paint fields to compare.
 * @param otherPaintFields  an array of Paint fields from the other object to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> classType, boolean superEquals, Paint[] paintFields, Paint[] otherPaintFields) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    for (int i = 0; i < paintFields.length; i++) {
        if (!PaintUtilities.equal(paintFields[i], otherPaintFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MultiplePiePlot` Class
```java
/**
 * Tests this plot for equality with an arbitrary object. Note that the
 * plot's dataset is not considered in the equality test.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if this plot is equal to <code>obj</code>, and
 *     <code>false</code> otherwise.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MultiplePiePlot.class,
        super.equals(obj),
        new Paint[] { this.aggregatedItemsPaint },
        new Paint[] { ((MultiplePiePlot) obj).aggregatedItemsPaint }
    ) &&
    this.dataExtractOrder == ((MultiplePiePlot) obj).dataExtractOrder &&
    this.limit == ((MultiplePiePlot) obj).limit &&
    this.aggregatedItemsKey.equals(((MultiplePiePlot) obj).aggregatedItemsKey) &&
    ObjectUtilities.equal(this.pieChart, ((MultiplePiePlot) obj).pieChart);
}
```

---

### 3. Refactored `equals` Method in `WaterfallBarRenderer` Class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        WaterfallBarRenderer.class,
        super.equals(obj),
        new Paint[] { this.firstBarPaint, this.lastBarPaint, this.positiveBarPaint, this.negativeBarPaint },
        new Paint[] { ((WaterfallBarRenderer) obj).firstBarPaint, ((WaterfallBarRenderer) obj).lastBarPaint, ((WaterfallBarRenderer) obj).positiveBarPaint, ((WaterfallBarRenderer) obj).negativeBarPaint }
    );
}
```",Type-3
308-4-6,src,org.jfree.chart.plot,MultiplePiePlot,equals,560,587,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1 (from `MultiplePiePlot` class, `equals` method):

```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MultiplePiePlot)) {
        return false;
    }
    MultiplePiePlot that = (MultiplePiePlot) obj;
    if (this.dataExtractOrder != that.dataExtractOrder) {
        return false;
    }
    if (this.limit != that.limit) {
        return false;
    }
    if (!this.aggregatedItemsKey.equals(that.aggregatedItemsKey)) {
        return false;
    }
    if (!PaintUtilities.equal(this.aggregatedItemsPaint,
            that.aggregatedItemsPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.pieChart, that.pieChart)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `HighLowRenderer` class, `equals` method):

```java
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`dataExtractOrder`, `limit`, `aggregatedItemsKey`, etc., in the first snippet vs. `drawOpenTicks`, `drawCloseTicks`, etc., in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):

```java
protected boolean baseEquals(Object obj, Object thisInstance, Class<?> clazz, Object[] fields, Object[] otherFields) {
    if (thisInstance == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (!fields[i].equals(otherFields[i])) {
                return false;
            }
        } else if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MultiplePiePlot`:

```java
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        this,
        MultiplePiePlot.class,
        new Object[]{this.dataExtractOrder, this.limit, this.aggregatedItemsKey},
        new Object[] {other.dataExtractOrder,other.limit,other.aggregratedItemsKey}
    )
}
```",Type-3
308-5-6,src,org.jfree.chart.renderer.category,WaterfallBarRenderer,equals,470,496,src,org.jfree.chart.renderer.xy,HighLowRenderer,equals,479,505,Type 3,"### Code Snippet 1 (WaterfallBarRenderer.java, equals method):

```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof WaterfallBarRenderer)) {
        return false;
    }
    WaterfallBarRenderer that = (WaterfallBarRenderer) obj;
    if (!PaintUtilities.equal(this.firstBarPaint, that.firstBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.lastBarPaint, that.lastBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.positiveBarPaint,
            that.positiveBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.negativeBarPaint,
            that.negativeBarPaint)) {
        return false;
    }
    return true;

}
```

---

### Code Snippet 2 (HighLowRenderer.java, equals method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof HighLowRenderer)) {
        return false;
    }
    HighLowRenderer that = (HighLowRenderer) obj;
    if (this.drawOpenTicks != that.drawOpenTicks) {
        return false;
    }
    if (this.drawCloseTicks != that.drawCloseTicks) {
        return false;
    }
    if (!PaintUtilities.equal(this.openTickPaint, that.openTickPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.closeTickPaint, that.closeTickPaint)) {
        return false;
    }
    if (this.tickLength != that.tickLength) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific fields being compared (`firstBarPaint`, `lastBarPaint`, etc., in the first snippet vs. `drawOpenTicks`, `drawCloseTicks`, etc., in the second snippet).","### 1. Extracted Method (To be placed in the common superclass):

```java
/**
 * Compares the equality of two objects based on the provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check.
 * @param superEquals  the result of the superclass's equals method.
 * @param paintFields  the array of Paint fields to compare.
 * @param booleanFields  the array of boolean fields to compare.
 * @param doubleFields  the array of double fields to compare.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Paint[] paintFields, boolean[] booleanFields, double[] doubleFields) {
    if (this == obj) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);

    // Compare Paint fields
    if (paintFields != null) {
        for (int i = 0; i < paintFields.length; i++) {
            if (!PaintUtilities.equal(paintFields[i], ((Paint[]) paintFields)[i])) {
                return false;
            }
        }
    }

    // Compare boolean fields
    if (booleanFields != null) {
        for (int i = 0; i < booleanFields.length; i++) {
            if (booleanFields[i] != ((boolean[]) booleanFields)[i]) {
                return false;
            }
        }
    }

    // Compare double fields
    if (doubleFields != null) {
        for (int i = 0; i < doubleFields.length; i++) {
            if (doubleFields[i] != ((double[]) doubleFields)[i]) {
                return false;
            }
        }
    }

    return true;
}
```

---

### 2. Refactored Method Calls (Replacing the clones in the original files):

#### In `WaterfallBarRenderer.java`:

```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        WaterfallBarRenderer.class,
        super.equals(obj),
        new Paint[]{this.firstBarPaint, this.lastBarPaint, this.positiveBarPaint, this.negativeBarPaint},
        null,
        null
    );
}
```

---

#### In `HighLowRenderer.java`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        HighLowRenderer.class,
        super.equals(obj),
        new Paint[]{this.openTickPaint, this.closeTickPaint},
        new boolean[]{this.drawOpenTicks, this.drawCloseTicks},
        new double[]{this.tickLength}
    );
}
```",Type-3
322-1-3,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.axis,DateAxis,equals,1744,1769,Type 3,"### Code Snippet 1 (from `XYPolygonAnnotation` class, lines 273-298):
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

### Code Snippet 2 (from `DateAxis` class, lines 1744-1769):
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateAxis)) {
        return false;
    }
    DateAxis that = (DateAxis) obj;
    if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormatOverride,
            that.dateFormatOverride)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.tickMarkPosition,
            that.tickMarkPosition)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.timeline, that.timeline)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYPolygonAnnotation` and `DateAxis`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYAnnotation` or another appropriate superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `XYPolygonAnnotation`:
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYPolygonAnnotation.class, super.equals(obj),
        this.polygon, this.stroke, this.outlinePaint, this.fillPaint);
}
```

### 3. Refactored `equals` Method in `DateAxis`:
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DateAxis.class, super.equals(obj),
        this.tickUnit, this.dateFormatOverride, this.tickMarkPosition, this.timeline);
}
```",Type-3
322-1-5,src,org.jfree.chart.annotations,XYPolygonAnnotation,equals,273,298,src,org.jfree.chart.renderer.category,WaterfallBarRenderer,equals,470,496,Type 3,"### Code Snippet 1: `equals` method from `XYPolygonAnnotation` class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYPolygonAnnotation)) {
        return false;
    }
    XYPolygonAnnotation that = (XYPolygonAnnotation) obj;
    if (!Arrays.equals(this.polygon, that.polygon)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    // seem to be the same
    return true;
}
```

---

### Code Snippet 2: `equals` method from `WaterfallBarRenderer` class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof WaterfallBarRenderer)) {
        return false;
    }
    WaterfallBarRenderer that = (WaterfallBarRenderer) obj;
    if (!PaintUtilities.equal(this.firstBarPaint, that.firstBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.lastBarPaint, that.lastBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.positiveBarPaint,
            that.positiveBarPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.negativeBarPaint,
            that.negativeBarPaint)) {
        return false;
    }
    return true;

}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific fields being compared (`polygon`, `stroke`, `outlinePaint`, `fillPaint` in the first snippet vs. `firstBarPaint`, `lastBarPaint`, `positiveBarPaint`, `negativeBarPaint` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality by checking their fields using the provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param superEquals  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!superEquals) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYPolygonAnnotation` Class
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYPolygonAnnotation.class,
        super.equals(obj),
        Arrays.equals(this.polygon, ((XYPolygonAnnotation) obj).polygon),
        ObjectUtilities.equal(this.stroke, ((XYPolygonAnnotation) obj).stroke),
        PaintUtilities.equal(this.outlinePaint, ((XYPolygonAnnotation) obj).outlinePaint),
        PaintUtilities.equal(this.fillPaint, ((XYPolygonAnnotation) obj).fillPaint)
    );
}
```

---

### 3. Refactored `equals` Method in `WaterfallBarRenderer` Class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        WaterfallBarRenderer.class,
        super.equals(obj),
        PaintUtilities.equal(this.firstBarPaint, ((WaterfallBarRenderer) obj).firstBarPaint),
        PaintUtilities.equal(this.lastBarPaint, ((WaterfallBarRenderer) obj).lastBarPaint),
        PaintUtilities.equal(this.positiveBarPaint, ((WaterfallBarRenderer) obj).positiveBarPaint),
        PaintUtilities.equal(this.negativeBarPaint, ((WaterfallBarRenderer) obj).negativeBarPaint)
    );
}
```",Type-3
332-1-3,src,org.jfree.chart.annotations,XYImageAnnotation,equals,244,269,src,org.jfree.data.category,DefaultIntervalCategoryDataset,equals,711,733,Type 3,"### Code Snippet 1 (from `XYImageAnnotation` class, `equals` method):

```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    // now try to reject equality...
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYImageAnnotation)) {
        return false;
    }
    XYImageAnnotation that = (XYImageAnnotation) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    if (!this.anchor.equals(that.anchor)) {
        return false;
    }
    // seems to be the same...
    return true;
}
```

---

### Code Snippet 2 (from `DefaultIntervalCategoryDataset` class, `equals` method):

```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultIntervalCategoryDataset)) {
        return false;
    }
    DefaultIntervalCategoryDataset that 
            = (DefaultIntervalCategoryDataset) obj;
    if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {
        return false;
    }
    if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {
        return false;
    }
    if (!equal(this.startData, that.startData)) {
        return false;
    }
    if (!equal(this.endData, that.endData)) {
        return false;
    }
    // seem to be the same...
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`x`, `y`, `image`, `anchor` in the first snippet vs. `seriesKeys`, `categoryKeys`, `startData`, `endData` in the second snippet) and the use of utility methods (`ObjectUtilities.equal` vs. `Arrays.equals` and `equal`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality by comparing their fields.
 * 
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] fieldPair : fields) {
        Object field1 = fieldPair[0];
        Object field2 = fieldPair[1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYImageAnnotation`:

```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.x, ((XYImageAnnotation) obj).x },
        { this.y, ((XYImageAnnotation) obj).y },
        { this.image, ((XYImageAnnotation) obj).image },
        { this.anchor, ((XYImageAnnotation) obj).anchor }
    });
}
```

---

### 3. Refactored `equals` Method in `DefaultIntervalCategoryDataset`:

```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.seriesKeys, ((DefaultIntervalCategoryDataset) obj).seriesKeys },
        { this.categoryKeys, ((DefaultIntervalCategoryDataset) obj).categoryKeys },
        { this.startData, ((DefaultIntervalCategoryDataset) obj).startData },
        { this.endData, ((DefaultIntervalCategoryDataset) obj).endData }
    });
}
```",Type-3
332-2-3,src,org.jfree.chart.renderer.xy,XYBoxAndWhiskerRenderer,equals,782,805,src,org.jfree.data.category,DefaultIntervalCategoryDataset,equals,711,733,Type 3,"### Code Snippet 1: `equals` method from `XYBoxAndWhiskerRenderer` class
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYBoxAndWhiskerRenderer that = (XYBoxAndWhiskerRenderer) obj;
    if (this.boxWidth != that.getBoxWidth()) {
        return false;
    }
    if (!PaintUtilities.equal(this.boxPaint, that.boxPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) {
        return false;
    }
    if (this.fillBox != that.fillBox) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `DefaultIntervalCategoryDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultIntervalCategoryDataset)) {
        return false;
    }
    DefaultIntervalCategoryDataset that 
            = (DefaultIntervalCategoryDataset) obj;
    if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {
        return false;
    }
    if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {
        return false;
    }
    if (!equal(this.startData, that.startData)) {
        return false;
    }
    if (!equal(this.endData, that.endData)) {
        return false;
    }
    // seem to be the same...
    return true;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements and logic specific to their respective classes (`XYBoxAndWhiskerRenderer` and `DefaultIntervalCategoryDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param properties  an array of property pairs to compare for equality.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object[][] properties) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (Object[] property : properties) {
        if (!java.util.Objects.equals(property[0], property[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYBoxAndWhiskerRenderer`
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYBoxAndWhiskerRenderer.class,
        super.equals(obj),
        new Object[][] {
            { this.boxWidth, ((XYBoxAndWhiskerRenderer) obj).getBoxWidth() },
            { this.boxPaint, ((XYBoxAndWhiskerRenderer) obj).boxPaint },
            { this.artifactPaint, ((XYBoxAndWhiskerRenderer) obj).artifactPaint },
            { this.fillBox, ((XYBoxAndWhiskerRenderer) obj).fillBox }
        }
    );
}
```

---

### 3. Refactored `equals` Method in `DefaultIntervalCategoryDataset`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        DefaultIntervalCategoryDataset.class,
        true,
        new Object[][] {
            { this.seriesKeys, ((DefaultIntervalCategoryDataset) obj).seriesKeys },
            { this.categoryKeys, ((DefaultIntervalCategoryDataset) obj).categoryKeys },
            { this.startData, ((DefaultIntervalCategoryDataset) obj).startData },
            { this.endData, ((DefaultIntervalCategoryDataset) obj).endData }
        }
    );
}
```",Type-3
342-1-2,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.axis,DateTickUnit,equals,388,408,Type 3,"### Code Snippet 1: `equals` method from `CategoryLabelPositions` class (lines 418-442)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

---

### Code Snippet 2: `equals` method from `DateTickUnit` class (lines 388-408)
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    DateTickUnit that = (DateTickUnit) obj;
    if (this.unit != that.unit) {
        return false;
    }
    if (this.count != that.count) {
        return false;
    }
    if (!ObjectUtilities.equal(this.formatter, that.formatter)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**.  
- They are **mostly similar** in structure and logic but have **different statements** (e.g., different fields and method calls like `positionForAxisAtTop` vs. `unit`, `ObjectUtilities.equal`, and `super.equals`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality based on the provided fields.
 *
 * @param obj  the object to compare.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean areObjectsEqual(Object obj, Class<?> clazz, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null ? thatField != null : !thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryLabelPositions` Class
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        CategoryLabelPositions.class,
        this.positionForAxisAtTop, ((CategoryLabelPositions) obj).positionForAxisAtTop,
        this.positionForAxisAtBottom, ((CategoryLabelPositions) obj).positionForAxisAtBottom,
        this.positionForAxisAtLeft, ((CategoryLabelPositions) obj).positionForAxisAtLeft,
        this.positionForAxisAtRight, ((CategoryLabelPositions) obj).positionForAxisAtRight
    );
}
```

---

### 3. Refactored `equals` Method in `DateTickUnit` Class
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        DateTickUnit.class,
        this.unit, ((DateTickUnit) obj).unit,
        this.count, ((DateTickUnit) obj).count,
        this.formatter, ((DateTickUnit) obj).formatter
    ) && super.equals(obj);
}
```",Type-3
342-1-7,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.plot,IntervalMarker,equals,197,218,Type 3,"### Code Snippet 1: `equals` method from `CategoryLabelPositions` class
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

---

### Code Snippet 2: `equals` method from `IntervalMarker` class
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof IntervalMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    IntervalMarker that = (IntervalMarker) obj;
    if (this.startValue != that.startValue) {
        return false;   
    }
    if (this.endValue != that.endValue) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer, 
            that.gradientPaintTransformer)) {
        return false;   
    }
    return true;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific fields being compared (`positionForAxisAtTop`, `startValue`, etc.) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areFieldsEqual(Object obj, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || this.getClass() != obj.getClass()) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[0];
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

",Type-3
342-1-8,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.renderer,LookupPaintScale,equals,332,352,Type 3,"### Code Snippet 1 (from `CategoryLabelPositions` class, `equals` method):

```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

---

### Code Snippet 2 (from `LookupPaintScale` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`positionForAxisAtTop`, `positionForAxisAtBottom`, etc., in the first snippet vs. `lowerBound`, `upperBound`, etc., in the second snippet) and the use of `PaintUtilities.equal` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Compares two objects for equality by checking their respective fields.
 *
 * @param obj  the object to compare with.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected static boolean areFieldsEqual(Object obj, Object instance, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryLabelPositions`:

```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(
        obj,
        this,
        CategoryLabelPositions.class,
        this.positionForAxisAtTop.equals(((CategoryLabelPositions) obj).positionForAxisAtTop),
        this.positionForAxisAtBottom.equals(((CategoryLabelPositions) obj).positionForAxisAtBottom),
        this.positionForAxisAtLeft.equals(((CategoryLabelPositions) obj).positionForAxisAtLeft),
        this.positionForAxisAtRight.equals(((CategoryLabelPositions) obj).positionForAxisAtRight)
    );
}
```

---

### 3. Refactored `equals` Method in `LookupPaintScale`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(
        obj,
        this,
        LookupPaintScale.class,
        this.lowerBound == ((LookupPaintScale) obj).lowerBound,
        this.upperBound == ((LookupPaintScale) obj).upperBound,
        PaintUtilities.equal(this.defaultPaint, ((LookupPaintScale) obj).defaultPaint),
        this.lookupTable.equals(((LookupPaintScale) obj).lookupTable)
    );
}
```",Type-3
342-1-9,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,Type 3,"### Code Snippet 1 (CategoryLabelPositions.java, lines 418-442)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

### Code Snippet 2 (XYBlockRenderer.java, lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Types:
- **Code Snippet 1 and Code Snippet 2 are Type-3 clones.**  
  They are mostly similar but have some different statements, such as the fields being compared (`positionForAxisAtTop`, `blockHeight`, etc.) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areFieldsEqual(Object obj, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || this.getClass() != obj.getClass()) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `CategoryLabelPositions.java`
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, 
        this.positionForAxisAtTop, 
        this.positionForAxisAtBottom, 
        this.positionForAxisAtLeft, 
        this.positionForAxisAtRight,
        new Object[] {
            ((CategoryLabelPositions) obj).positionForAxisAtTop,
            ((CategoryLabelPositions) obj).positionForAxisAtBottom,
            ((CategoryLabelPositions) obj).positionForAxisAtLeft,
            ((CategoryLabelPositions) obj).positionForAxisAtRight
        }
    );
}
```

---

### 3. Refactored Code in `XYBlockRenderer.java`
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, 
        this.blockHeight, 
        this.blockWidth, 
        this.blockAnchor, 
        this.paintScale,
        new Object[] {
            ((XYBlockRenderer) obj).blockHeight,
            ((XYBlockRenderer) obj).blockWidth,
            ((XYBlockRenderer) obj).blockAnchor,
            ((XYBlockRenderer) obj).paintScale
        }
    ) && super.equals(obj);
}
```",Type-3
342-1-10,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"```java
// Code Snippet 1: Method equals in CategoryLabelPositions.java
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

```java
// Code Snippet 2: Method equals in XYErrorRenderer.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass
protected boolean areEqual(Object obj, Object thisInstance, Class<?> clazz, 
                           Object top, Object bottom, Object left, Object right) {
    if (obj == thisInstance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    if (!top.equals(getFieldValue(that, ""positionForAxisAtTop""))) {
        return false;
    }
    if (!bottom.equals(getFieldValue(that, ""positionForAxisAtBottom""))) {
        return false;
    }
    if (!left.equals(getFieldValue(that, ""positionForAxisAtLeft""))) {
        return false;
    }
    if (!right.equals(getFieldValue(that, ""positionForAxisAtRight""))) {
        return false;
    }
    return true;
}

// Helper method to access private fields via reflection
private Object getFieldValue(Object instance, String fieldName) {
    try {
        java.lang.reflect.Field field = instance.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        return field.get(instance);
    } catch (Exception e) {
        throw new RuntimeException(""Error accessing field: "" + fieldName, e);
    }
}
```

```java
// 2. Refactored equals method in CategoryLabelPositions.java
public boolean equals(Object obj) {
    return areEqual(obj, this, CategoryLabelPositions.class, 
                    this.positionForAxisAtTop, this.positionForAxisAtBottom, 
                    this.positionForAxisAtLeft, this.positionForAxisAtRight);
}
```

```java
// 2. Refactored equals method in XYErrorRenderer.java
public boolean equals(Object obj) {
    if (!areEqual(obj, this, XYErrorRenderer.class, 
                  this.drawXError, this.drawYError, 
                  this.capLength, this.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```",Type-3
342-1-12,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.util,LogFormat,equals,190,210,Type 3,"### Code Snippet 1 (from `CategoryLabelPositions` class, `equals` method):

```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

---

### Code Snippet 2 (from `LogFormat` class, `equals` method):

```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`positionForAxisAtTop`, `positionForAxisAtBottom`, etc., in the first snippet vs. `base`, `baseLabel`, etc., in the second snippet) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areFieldsEqual(Object obj, Object[] fields, Object[] otherFields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || this.getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryLabelPositions`:

```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(
        obj,
        new Object[] {
            this.positionForAxisAtTop,
            this.positionForAxisAtBottom,
            this.positionForAxisAtLeft,
            this.positionForAxisAtRight
        },
        new Object[] {
            ((CategoryLabelPositions) obj).positionForAxisAtTop,
            ((CategoryLabelPositions) obj).positionForAxisAtBottom,
            ((CategoryLabelPositions) obj).positionForAxisAtLeft,
            ((CategoryLabelPositions) obj).positionForAxisAtRight
        }
    );
}
```

---

### 3. Refactored `equals` Method in `LogFormat`:

```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(
        obj,
        new Object[] {
            this.base,
            this.baseLabel,
            this.baseLog,
            this.showBase
        },
        new Object[] {
            ((LogFormat) obj).base,
            ((LogFormat) obj).baseLabel,
            ((LogFormat) obj).baseLog,
            ((LogFormat) obj).showBase
        }
    ) && super.equals(obj);
}
```",Type-3
342-1-13,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1: `equals` method from `CategoryLabelPositions` class
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

---

### Code Snippet 2: `equals` method from `TimeTableXYDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the equality of two objects based on their respective fields.
 *
 * @param obj  the object to compare with.
 * @param top  the top position field of the current object.
 * @param bottom  the bottom position field of the current object.
 * @param left  the left position field of the current object.
 * @param right  the right position field of the current object.
 * @param additionalChecks  a lambda or functional interface for additional equality checks.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Object top, Object bottom, Object left, Object right, EqualityChecker additionalChecks) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!top.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!bottom.equals(that.positionForAxisAtBottom)) {
        return false;
    }
    if (!left.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!right.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return additionalChecks.check(that);
}
```

",Type-3
342-1-14,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.data.xy,DefaultTableXYDataset,equals,491,511,Type 3,"```java
// Code Snippet 1: Method equals in CategoryLabelPositions.java
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

```java
// Code Snippet 2: Method equals in DefaultTableXYDataset.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultTableXYDataset)) {
        return false;
    }
    DefaultTableXYDataset that = (DefaultTableXYDataset) obj;
    if (this.autoPrune != that.autoPrune) {
        return false;
    }
    if (this.propagateEvents != that.propagateEvents) {
        return false;
    }
    if (!this.intervalDelegate.equals(that.intervalDelegate)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass
protected boolean areObjectsEqual(Object obj, Object instance, Class<?> clazz, Object... fields) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored equals method in CategoryLabelPositions.java
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        this,
        CategoryLabelPositions.class,
        this.positionForAxisAtTop, ((CategoryLabelPositions) obj).positionForAxisAtTop,
        this.positionForAxisAtBottom, ((CategoryLabelPositions) obj).positionForAxisAtBottom,
        this.positionForAxisAtLeft, ((CategoryLabelPositions) obj).positionForAxisAtLeft,
        this.positionForAxisAtRight, ((CategoryLabelPositions) obj).positionForAxisAtRight
    );
}
```

```java
// 3. Refactored equals method in DefaultTableXYDataset.java
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        this,
        DefaultTableXYDataset.class,
        this.autoPrune, ((DefaultTableXYDataset) obj).autoPrune,
        this.propagateEvents, ((DefaultTableXYDataset) obj).propagateEvents,
        this.intervalDelegate, ((DefaultTableXYDataset) obj).intervalDelegate,
        this.data, ((DefaultTableXYDataset) obj).data
    );
}
```",Type-3
342-2-3,src,org.jfree.chart.axis,DateTickUnit,equals,388,408,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,Type 3,"### Code Snippet 1: `equals` method in `DateTickUnit` class (lines 388-408)
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    DateTickUnit that = (DateTickUnit) obj;
    if (this.unit != that.unit) {
        return false;
    }
    if (this.count != that.count) {
        return false;
    }
    if (!ObjectUtilities.equal(this.formatter, that.formatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method in `ItemLabelPosition` class (lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**.  
- **Reason**: The methods are mostly similar in structure and logic but differ in the specific fields and objects being compared (`unit`, `count`, `formatter` in `DateTickUnit` vs. `itemLabelAnchor`, `textAnchor`, `rotationAnchor`, `angle` in `ItemLabelPosition`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) otherFields[i]) != 0) {
                return false;
            }
        } else if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object.
 * @param fieldCount  the number of fields to extract.
 *
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For now, it is a placeholder.
    return new Object[fieldCount];
}
```

---

### 2. Refactored `equals` Method in `DateTickUnit` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DateTickUnit.class, this.unit, this.count, this.formatter);
}
```

---

### 3. Refactored `equals` Method in `ItemLabelPosition` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ItemLabelPosition.class, this.itemLabelAnchor, this.textAnchor, this.rotationAnchor, this.angle);
}
```",Type-3
342-2-10,src,org.jfree.chart.axis,DateTickUnit,equals,388,408,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (DateTickUnit.java, lines 388-408)
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    DateTickUnit that = (DateTickUnit) obj;
    if (this.unit != that.unit) {
        return false;
    }
    if (this.count != that.count) {
        return false;
    }
    if (!ObjectUtilities.equal(this.formatter, that.formatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific fields being compared (`unit`, `count`, `formatter` in the first snippet vs. `drawXError`, `drawYError`, `capLength`, `errorPaint` in the second snippet) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing specified fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean equalsHelper(Object obj, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `DateTickUnit.java`
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[]{this.unit, this.count, this.formatter},
        new Object[] {other.unit,other.count",Type-3
342-2-11,src,org.jfree.chart.axis,DateTickUnit,equals,388,408,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,Type 3,"### Code Snippet 1 (from `DateTickUnit` class, lines 388-408):
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DateTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    DateTickUnit that = (DateTickUnit) obj;
    if (this.unit != that.unit) {
        return false;
    }
    if (this.count != that.count) {
        return false;
    }
    if (!ObjectUtilities.equal(this.formatter, that.formatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `TimeSeriesURLGenerator` class, lines 202-222):
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but have **different statements** (e.g., the fields being compared and the use of `super.equals(obj)` in the first snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DateTickUnit`:
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        DateTickUnit.class,
        this.unit, ((DateTickUnit) obj).unit,
        this.count, ((DateTickUnit) obj).count,
        this.formatter, ((DateTickUnit) obj).formatter
    ) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `TimeSeriesURLGenerator`:
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        TimeSeriesURLGenerator.class,
        this.dateFormat, ((TimeSeriesURLGenerator) obj).dateFormat,
        this.itemParameterName, ((TimeSeriesURLGenerator) obj).itemParameterName,
        this.prefix, ((TimeSeriesURLGenerator) obj).prefix,
        this.seriesParameterName, ((TimeSeriesURLGenerator) obj).seriesParameterName
    );
}
```",Type-3
342-3-4,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,equals,629,649,Type 3,"### Code Snippet 1 (ItemLabelPosition.java, lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (CombinedDomainCategoryPlot.java, lines 629-649)
```java
/**
 * Tests the plot for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedDomainCategoryPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedDomainCategoryPlot plot = (CombinedDomainCategoryPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, plot.subplots)) {
        return false;
    }
    if (this.totalWeight != plot.totalWeight) {
        return false;
    }
    if (this.gap != plot.gap) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance for comparison.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if ((double) thisField != (double) thatField) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `ItemLabelPosition.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ItemLabelPosition.class,
        this.itemLabelAnchor, ((ItemLabelPosition) obj).itemLabelAnchor,
        this.textAnchor, ((ItemLabelPosition) obj).textAnchor,
        this.rotationAnchor, ((ItemLabelPosition) obj).rotationAnchor,
        this.angle, ((ItemLabelPosition) obj).angle
    );
}
```

---

#### In `CombinedDomainCategoryPlot.java`
```java
/**
 * Tests the plot for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, CombinedDomainCategoryPlot.class,
        super.equals(obj), true,
        this.subplots, ((CombinedDomainCategoryPlot) obj).subplots,
        this.totalWeight, ((CombinedDomainCategoryPlot) obj).totalWeight,
        this.gap, ((CombinedDomainCategoryPlot) obj).gap
    );
}
```",Type-3
342-3-5,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,equals,498,518,Type 3,"### Code Snippet 1 (ItemLabelPosition.java, lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (CombinedRangeCategoryPlot.java, lines 498-518)
```java
/** 
 * Tests the plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeCategoryPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeCategoryPlot that = (CombinedRangeCategoryPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;       
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * 
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 instanceof Double && field2 instanceof Double) {
            if ((double) field1 != (double) field2) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `ItemLabelPosition.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ItemLabelPosition.class, 
        this.itemLabelAnchor, ((ItemLabelPosition) obj).itemLabelAnchor,
        this.textAnchor, ((ItemLabelPosition) obj).textAnchor,
        this.rotationAnchor, ((ItemLabelPosition) obj).rotationAnchor,
        this.angle, ((ItemLabelPosition) obj).angle
    );
}
```

---

### 3. Refactored Method in `CombinedRangeCategoryPlot.java`
```java
/** 
 * Tests the plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return isEqual(obj, CombinedRangeCategoryPlot.class, 
        super.equals(obj), true,
        this.subplots, ((CombinedRangeCategoryPlot) obj).subplots,
        this.totalWeight, ((CombinedRangeCategoryPlot) obj).totalWeight,
        this.gap, ((CombinedRangeCategoryPlot) obj).gap
    );
}
```",Type-3
342-3-6,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.plot,CombinedRangeXYPlot,equals,650,672,Type 3,"### Code Snippet 1 (ItemLabelPosition.java, lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (CombinedRangeXYPlot.java, lines 650-672)
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEquals  the result of the superclass's equals method (if applicable).
 * @param fields  the fields to compare for equality.
 * 
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `ItemLabelPosition.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        ItemLabelPosition.class,
        true,
        this.itemLabelAnchor, this.textAnchor, this.rotationAnchor, this.angle,
        new Object[] { ((ItemLabelPosition) obj).itemLabelAnchor, ((ItemLabelPosition) obj).textAnchor, 
                       ((ItemLabelPosition) obj).rotationAnchor, ((ItemLabelPosition) obj).angle }
    );
}
```

---

### 3. Refactored Method in `CombinedRangeXYPlot.java`
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedRangeXYPlot.class,
        super.equals(obj),
        this.subplots, this.totalWeight, this.gap,
        new Object[] { ((CombinedRangeXYPlot) obj).subplots, ((CombinedRangeXYPlot) obj).totalWeight, 
                       ((CombinedRangeXYPlot) obj).gap }
    );
}
```",Type-3
342-3-7,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.plot,IntervalMarker,equals,197,218,Type 3,"### Code Snippet 1 (from `ItemLabelPosition` class, `equals` method):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

---

### Code Snippet 2 (from `IntervalMarker` class, `equals` method):
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof IntervalMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    IntervalMarker that = (IntervalMarker) obj;
    if (this.startValue != that.startValue) {
        return false;   
    }
    if (this.endValue != that.endValue) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer, 
            that.gradientPaintTransformer)) {
        return false;   
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`ItemLabelPosition` and `IntervalMarker`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance for comparison.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> instanceClass, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `ItemLabelPosition`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, ItemLabelPosition.class, other -> {
        ItemLabelPosition that = (ItemLabelPosition) other;
        return this.itemLabelAnchor.equals(that.itemLabelAnchor)
            && this.textAnchor.equals(that.textAnchor)
            && this.rotationAnchor.equals(that.rotationAnchor)
            && this.angle == that.angle;
    });
}
```

---

### 3. Refactored `equals` Method in `IntervalMarker`:
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, IntervalMarker.class, other -> {
        if (!super.equals(other)) {
            return false;
        }
        IntervalMarker that = (IntervalMarker) other;
        return this.startValue == that.startValue
            && this.endValue == that.endValue
            && ObjectUtilities.equal(this.gradientPaintTransformer, that.gradientPaintTransformer);
    });
}
```",Type-3
342-3-9,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,Type 3,"### Code Snippet 1 (ItemLabelPosition.java, lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (XYBlockRenderer.java, lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and fields being compared.","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean areFieldsEqual(Object obj, Class<?> clazz, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (!fields[i].equals(otherFields[i])) {
                return false;
            }
        } else if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `ItemLabelPosition.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, ItemLabelPosition.class, 
        new Object[]{this.itemLabelAnchor, this.textAnchor, this.rotationAnchor, this.angle}, 
        new Object[]{that.itemLabelAnchor, that.textAnchor, that.rotationAnchor, that.angle});
}
```

---

### 3. Refactored Code in `XYBlockRenderer.java`
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, XYBlockRenderer.class, 
        new Object[]{this.blockHeight, this.blockWidth, this.blockAnchor, this.paintScale}, 
        new Object[]{that.blockHeight, that.blockWidth, that.blockAnchor, that.paintScale});
}
```",Type-3
342-3-10,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (ItemLabelPosition.java, lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different fields and method calls).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `ItemLabelPosition.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ItemLabelPosition.class, 
        this.itemLabelAnchor, ((ItemLabelPosition) obj).itemLabelAnchor,
        this.textAnchor, ((ItemLabelPosition) obj).textAnchor,
        this.rotationAnchor, ((ItemLabelPosition) obj).rotationAnchor,
        this.angle, ((ItemLabelPosition) obj).angle
    );
}
```

---

#### In `XYErrorRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYErrorRenderer.class, 
        this.drawXError, ((XYErrorRenderer) obj).drawXError,
        this.drawYError, ((XYErrorRenderer) obj).drawYError,
        this.capLength, ((XYErrorRenderer) obj).capLength,
        this.errorPaint, ((XYErrorRenderer) obj).errorPaint
    ) && super.equals(obj);
}
```",Type-3
342-3-12,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.util,LogFormat,equals,190,210,Type 3,"### Code Snippet 1 (from `ItemLabelPosition` class, `equals` method):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

---

### Code Snippet 2 (from `LogFormat` class, `equals` method):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and logic specific to their respective classes).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance for comparison.
 * @param fields  the fields to compare.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if ((double) thisField != (double) thatField) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ItemLabelPosition`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ItemLabelPosition.class, 
        this.itemLabelAnchor, ((ItemLabelPosition) obj).itemLabelAnchor,
        this.textAnchor, ((ItemLabelPosition) obj).textAnchor,
        this.rotationAnchor, ((ItemLabelPosition) obj).rotationAnchor,
        this.angle, ((ItemLabelPosition) obj).angle
    );
}
```

---

### 3. Refactored `equals` Method in `LogFormat`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LogFormat.class, 
        this.base, ((LogFormat) obj).base,
        this.baseLabel, ((LogFormat) obj).baseLabel,
        this.baseLog, ((LogFormat) obj).baseLog,
        this.showBase, ((LogFormat) obj).showBase
    ) && super.equals(obj);
}
```",Type-3
342-3-13,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1 (from `ItemLabelPosition` class, `equals` method):

```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

---

### Code Snippet 2 (from `TimeTableXYDataset` class, `equals` method):

```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass):

```java
protected boolean areObjectsEqual(Object obj, Object thisObj, Class<?> clazz, Object[] thisFields, Object[] thatFields) {
    if (obj == thisObj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < thisFields.length; i++) {
        if (thisFields[i] == null) {
            if (thatFields[i] != null) {
                return false;
            }
        } else if (!thisFields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ItemLabelPosition`:

```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        this,
        ItemLabelPosition.class,
        new Object[]{this.itemLabelAnchor, this.textAnchor, this.rotationAnchor, this.angle},
        new Object[]{((ItemLabelPosition) obj).itemLabelAnchor, ((ItemLabelPosition) obj).textAnchor, ((ItemLabelPosition) obj).rotationAnchor, ((ItemLabelPosition) obj).angle}
    );
}
```

---

### 3. Refactored `equals` Method in `TimeTableXYDataset`:

```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        this,
        TimeTableXYDataset.class,
        new Object[]{this.domainIsPointsInTime, this.xPosition, this.workingCalendar.getTimeZone(), this.values},
        new Object[]{((TimeTableXYDataset) obj).domainIsPointsInTime, ((TimeTableXYDataset) obj).xPosition, ((TimeTableXYDataset) obj).workingCalendar.getTimeZone(), ((TimeTableXYDataset) obj).values}
    );
}
```",Type-3
342-3-14,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.data.xy,DefaultTableXYDataset,equals,491,511,Type 3,"### Code Snippet 1 (from `ItemLabelPosition` class, lines 171-191):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (from `DefaultTableXYDataset` class, lines 491-511):
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultTableXYDataset)) {
        return false;
    }
    DefaultTableXYDataset that = (DefaultTableXYDataset) obj;
    if (this.autoPrune != that.autoPrune) {
        return false;
    }
    if (this.propagateEvents != that.propagateEvents) {
        return false;
    }
    if (!this.intervalDelegate.equals(that.intervalDelegate)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance for comparison.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if ((double) thisField != (double) thatField) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `ItemLabelPosition`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ItemLabelPosition.class, 
        this.itemLabelAnchor, ((ItemLabelPosition) obj).itemLabelAnchor,
        this.textAnchor, ((ItemLabelPosition) obj).textAnchor,
        this.rotationAnchor, ((ItemLabelPosition) obj).rotationAnchor,
        this.angle, ((ItemLabelPosition) obj).angle
    );
}
```

---

### 3. Refactored Method in `DefaultTableXYDataset`:
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultTableXYDataset.class, 
        this.autoPrune, ((DefaultTableXYDataset) obj).autoPrune,
        this.propagateEvents, ((DefaultTableXYDataset) obj).propagateEvents,
        this.intervalDelegate, ((DefaultTableXYDataset) obj).intervalDelegate,
        this.data, ((DefaultTableXYDataset) obj).data
    );
}
```",Type-3
342-4-10,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,equals,629,649,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1: `CombinedDomainCategoryPlot.equals` Method
```java
/**
 * Tests the plot for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedDomainCategoryPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedDomainCategoryPlot plot = (CombinedDomainCategoryPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, plot.subplots)) {
        return false;
    }
    if (this.totalWeight != plot.totalWeight) {
        return false;
    }
    if (this.gap != plot.gap) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `XYErrorRenderer.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`subplots`, `totalWeight`, `gap` in the first snippet vs. `drawXError`, `drawYError`, `capLength`, `errorPaint` in the second snippet) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (To be placed in the superclass)
```java
/**
 * Tests for equality with an arbitrary object by comparing specified fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `CombinedDomainCategoryPlot.equals` Method
```java
/**
 * Tests the plot for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedDomainCategoryPlot.class,
        super.equals(obj),
        this.subplots, this.totalWeight, this.gap,
        new Object[] { ((CombinedDomainCategoryPlot) obj).subplots, ((CombinedDomainCategoryPlot) obj).totalWeight, ((CombinedDomainCategoryPlot) obj).gap }
    );
}
```

---

### 3. Refactored `XYErrorRenderer.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYErrorRenderer.class,
        super.equals(obj),
        this.drawXError, this.drawYError, this.capLength, this.errorPaint,
        new Object[] { ((XYErrorRenderer) obj).drawXError, ((XYErrorRenderer) obj).drawYError, ((XYErrorRenderer) obj).capLength, ((XYErrorRenderer) obj).errorPaint }
    );
}
```",Type-3
342-4-12,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,equals,629,649,src,org.jfree.chart.util,LogFormat,equals,190,210,Type 3,"### Code Snippet 1: `CombinedDomainCategoryPlot.equals` Method
```java
/**
 * Tests the plot for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedDomainCategoryPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedDomainCategoryPlot plot = (CombinedDomainCategoryPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, plot.subplots)) {
        return false;
    }
    if (this.totalWeight != plot.totalWeight) {
        return false;
    }
    if (this.gap != plot.gap) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `LogFormat.equals` Method
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`subplots`, `totalWeight`, `gap` in the first snippet vs. `base`, `baseLabel`, `baseLog`, `showBase` in the second snippet) and the class types being checked (`CombinedDomainCategoryPlot` vs. `LogFormat`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object by comparing specified fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        otherFields[i] = fields[i] instanceof FieldWrapper
                ? ((FieldWrapper) fields[i]).getFieldValue(clazz.cast(obj))
                : fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

",Type-3
342-5-10,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,equals,498,518,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (CombinedRangeCategoryPlot.java, lines 498-518):
```java
/**
 * Tests the plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeCategoryPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeCategoryPlot that = (CombinedRangeCategoryPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;       
}
```

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`subplots`, `totalWeight`, `gap` in the first snippet vs. `drawXError`, `drawYError`, `capLength`, `errorPaint` in the second snippet) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * 
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored Code in `CombinedRangeCategoryPlot.java`:
```java
/**
 * Tests the plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedRangeCategoryPlot.class,
        super.equals(obj),
        this.subplots, this.totalWeight, this.gap,
        new Object[] { ((CombinedRangeCategoryPlot) obj).subplots, ((CombinedRangeCategoryPlot) obj).totalWeight, ((CombinedRangeCategoryPlot) obj).gap }
    );
}
```

### 3. Refactored Code in `XYErrorRenderer.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYErrorRenderer.class,
        super.equals(obj),
        this.drawXError, this.drawYError, this.capLength, this.errorPaint,
        new Object[] { ((XYErrorRenderer) obj).drawXError, ((XYErrorRenderer) obj).drawYError, ((XYErrorRenderer) obj).capLength, ((XYErrorRenderer) obj).errorPaint }
    );
}
```",Type-3
342-5-12,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,equals,498,518,src,org.jfree.chart.util,LogFormat,equals,190,210,Type 3,"### Code Snippet 1 (CombinedRangeCategoryPlot.java, lines 498-518):
```java
/**
 * Tests the plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CombinedRangeCategoryPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeCategoryPlot that = (CombinedRangeCategoryPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;       
}
```

### Code Snippet 2 (LogFormat.java, lines 190-210):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`CombinedRangeCategoryPlot` and `LogFormat`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `ObjectUtilities` or a new utility class):
```java
/**
 * Tests two objects for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * 
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `CombinedRangeCategoryPlot.java`:
```java
/**
 * Tests the plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedRangeCategoryPlot.class,
        super.equals(obj),
        this.subplots, this.totalWeight, this.gap,
        new Object[] { ((CombinedRangeCategoryPlot) obj).subplots, ((CombinedRangeCategoryPlot) obj).totalWeight, ((CombinedRangeCategoryPlot) obj).gap }
    );
}
```

---

### 3. Refactored Code in `LogFormat.java`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        LogFormat.class,
        super.equals(obj),
        this.base, this.baseLabel, this.baseLog, this.showBase,
        new Object[] { ((LogFormat) obj).base, ((LogFormat) obj).baseLabel, ((LogFormat) obj).baseLog, ((LogFormat) obj).showBase }
    );
}
```",Type-3
342-6-10,src,org.jfree.chart.plot,CombinedRangeXYPlot,equals,650,672,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1: `CombinedRangeXYPlot.equals` Method (Lines 650-672)
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `XYErrorRenderer.equals` Method (Lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific fields being compared (`subplots`, `totalWeight`, `gap` in the first snippet vs. `drawXError`, `drawYError`, `capLength`, `errorPaint` in the second snippet) and the utility methods used (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param instanceClass  the class of the current instance.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results for field comparisons.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `CombinedRangeXYPlot.equals` Method
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedRangeXYPlot.class,
        super.equals(obj),
        ObjectUtilities.equal(this.subplots, ((CombinedRangeXYPlot) obj).subplots),
        this.totalWeight == ((CombinedRangeXYPlot) obj).totalWeight,
        this.gap == ((CombinedRangeXYPlot) obj).gap
    );
}
```

---

### 3. Refactored `XYErrorRenderer.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYErrorRenderer.class,
        super.equals(obj),
        this.drawXError == ((XYErrorRenderer) obj).drawXError,
        this.drawYError == ((XYErrorRenderer) obj).drawYError,
        this.capLength == ((XYErrorRenderer) obj).capLength,
        PaintUtilities.equal(this.errorPaint, ((XYErrorRenderer) obj).errorPaint)
    );
}
```",Type-3
342-6-12,src,org.jfree.chart.plot,CombinedRangeXYPlot,equals,650,672,src,org.jfree.chart.util,LogFormat,equals,190,210,Type 3,"### Code Snippet 1: `equals` method in `CombinedRangeXYPlot` class
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof CombinedRangeXYPlot)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CombinedRangeXYPlot that = (CombinedRangeXYPlot) obj;
    if (!ObjectUtilities.equal(this.subplots, that.subplots)) {
        return false;
    }
    if (this.totalWeight != that.totalWeight) {
        return false;
    }
    if (this.gap != that.gap) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `LogFormat` class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`subplots`, `totalWeight`, `gap` in `CombinedRangeXYPlot` vs. `base`, `baseLabel`, `baseLog`, `showBase` in `LogFormat`) and the class types being checked (`CombinedRangeXYPlot` vs. `LogFormat`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with another object by comparing specified fields.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare.
 * @return <code>true</code> if equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CombinedRangeXYPlot`
```java
/**
 * Tests this plot for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        CombinedRangeXYPlot.class,
        super.equals(obj),
        this.subplots, this.totalWeight, this.gap,
        new Object[] { ((CombinedRangeXYPlot) obj).subplots, ((CombinedRangeXYPlot) obj).totalWeight, ((CombinedRangeXYPlot) obj).gap }
    );
}
```

---

### 3. Refactored `equals` Method in `LogFormat`
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        LogFormat.class,
        super.equals(obj),
        this.base, this.baseLabel, this.baseLog, this.showBase,
        new Object[] { ((LogFormat) obj).base, ((LogFormat) obj).baseLabel, ((LogFormat) obj).baseLog, ((LogFormat) obj).showBase }
    );
}
```",Type-3
342-7-10,src,org.jfree.chart.plot,IntervalMarker,equals,197,218,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (IntervalMarker.java, lines 197-218)
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof IntervalMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    IntervalMarker that = (IntervalMarker) obj;
    if (this.startValue != that.startValue) {
        return false;   
    }
    if (this.endValue != that.endValue) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer, 
            that.gradientPaintTransformer)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and utility methods being compared).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        otherFields[i] = fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (!fields[i].equals(otherFields[i])) {
                return false;
            }
        }
    }
    return true;
}
```

",Type-3
342-7-11,src,org.jfree.chart.plot,IntervalMarker,equals,197,218,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,Type 3,"### Code Snippet 1 (IntervalMarker.java, lines 197-218)
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof IntervalMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    IntervalMarker that = (IntervalMarker) obj;
    if (this.startValue != that.startValue) {
        return false;   
    }
    if (this.endValue != that.endValue) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.gradientPaintTransformer, 
            that.gradientPaintTransformer)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (TimeSeriesURLGenerator.java, lines 202-222)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`IntervalMarker` and `TimeSeriesURLGenerator`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `IntervalMarker.java`
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, IntervalMarker.class, (other) -> {
        if (!super.equals(other)) {
            return false;
        }
        IntervalMarker that = (IntervalMarker) other;
        if (this.startValue != that.startValue) {
            return false;
        }
        if (this.endValue != that.endValue) {
            return false;
        }
        return ObjectUtilities.equal(this.gradientPaintTransformer, that.gradientPaintTransformer);
    });
}
```

---

### 3. Refactored `equals` Method in `TimeSeriesURLGenerator.java`
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TimeSeriesURLGenerator.class, (other) -> {
        TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) other;
        if (!this.dateFormat.equals(that.dateFormat)) {
            return false;
        }
        if (!this.itemParameterName.equals(that.itemParameterName)) {
            return false;
        }
        if (!this.prefix.equals(that.prefix)) {
            return false;
        }
        return this.seriesParameterName.equals(that.seriesParameterName);
    });
}
```",Type-3
342-8-10,src,org.jfree.chart.renderer,LookupPaintScale,equals,332,352,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (LookupPaintScale.java, lines 332-352)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., different fields and method calls).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests an instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param fields  the fields to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!Objects.equals(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### LookupPaintScale.java
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LookupPaintScale.class, 
        this.lowerBound, this.upperBound, this.defaultPaint, this.lookupTable, 
        new Object[] { ((LookupPaintScale) obj).lowerBound, 
                       ((LookupPaintScale) obj).upperBound, 
                       ((LookupPaintScale) obj).defaultPaint, 
                       ((LookupPaintScale) obj).lookupTable });
}
```

---

#### XYErrorRenderer.java
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYErrorRenderer.class, 
        this.drawXError, this.drawYError, this.capLength, this.errorPaint, 
        new Object[] { ((XYErrorRenderer) obj).drawXError, 
                       ((XYErrorRenderer) obj).drawYError, 
                       ((XYErrorRenderer) obj).capLength, 
                       ((XYErrorRenderer) obj).errorPaint }) 
        && super.equals(obj);
}
```",Type-3
342-8-11,src,org.jfree.chart.renderer,LookupPaintScale,equals,332,352,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, lines 332-352):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `TimeSeriesURLGenerator` class, lines 202-222):
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific logic).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on provided fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LookupPaintScale`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        LookupPaintScale.class,
        this.lowerBound,
        this.upperBound,
        this.defaultPaint,
        this.lookupTable,
        new Object[] {
            ((LookupPaintScale) obj).lowerBound,
            ((LookupPaintScale) obj).upperBound,
            ((LookupPaintScale) obj).defaultPaint,
            ((LookupPaintScale) obj).lookupTable
        }
    );
}
```

---

### 3. Refactored `equals` Method in `TimeSeriesURLGenerator`:
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        TimeSeriesURLGenerator.class,
        this.dateFormat,
        this.itemParameterName,
        this.prefix,
        this.seriesParameterName,
        new Object[] {
            ((TimeSeriesURLGenerator) obj).dateFormat,
            ((TimeSeriesURLGenerator) obj).itemParameterName,
            ((TimeSeriesURLGenerator) obj).prefix,
            ((TimeSeriesURLGenerator) obj).seriesParameterName
        }
    );
}
```",Type-3
342-8-13,src,org.jfree.chart.renderer,LookupPaintScale,equals,332,352,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1: `equals` method from `LookupPaintScale` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `TimeTableXYDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param bounds  an array of doubles representing bounds to compare.
 * @param paints  an array of Paint objects to compare.
 * @param tables  an array of objects (e.g., lookup tables) to compare.
 * @param additionalChecks  a lambda or functional interface for additional checks.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, double[] bounds, Paint[] paints, Object[] tables, 
                          java.util.function.Function<Object, Boolean> additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (bounds != null) {
        for (int i = 0; i < bounds.length; i += 2) {
            if (bounds[i] != bounds[i + 1]) {
                return false;
            }
        }
    }
    if (paints != null) {
        for (int i = 0; i < paints.length; i += 2) {
            if (!PaintUtilities.equal(paints[i], paints[i + 1])) {
                return false;
            }
        }
    }
    if (tables != null) {
        for (int i = 0; i < tables.length; i += 2) {
            if (!tables[i].equals(tables[i + 1])) {
                return false;
            }
        }
    }
    if (additionalChecks != null) {
        return additionalChecks.apply(obj);
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LookupPaintScale` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        LookupPaintScale.class,
        new double[]{this.lowerBound, ((LookupPaintScale) obj).lowerBound, 
                     this.upperBound, ((LookupPaintScale) obj).upperBound},
        new Paint[]{this.defaultPaint, ((LookupPaintScale) obj).defaultPaint},
        new Object[]{this.lookupTable, ((LookupPaintScale) obj).lookupTable},
        null
    );
}
```

---

### 3. Refactored `equals` Method in `TimeTableXYDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        TimeTableXYDataset.class,
        null,
        null,
        new Object[]{this.values, ((TimeTableXYDataset) obj).values},
        (other) -> {
            TimeTableXYDataset that = (TimeTableXYDataset) other;
            return this.domainIsPointsInTime == that.domainIsPointsInTime
                && this.xPosition == that.xPosition
                && this.workingCalendar.getTimeZone().equals(that.workingCalendar.getTimeZone());
        }
    );
}
```",Type-3
342-9-10,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1: `equals` method from `XYBlockRenderer` (lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `XYErrorRenderer` (lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`blockHeight`, `blockWidth`, etc., in `XYBlockRenderer` vs. `drawXError`, `drawYError`, etc., in `XYErrorRenderer`) and the utility method used (`this.blockAnchor.equals` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object by comparing specified fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance type.
 * @param fields  the fields to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (fields[i] instanceof Double) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        }
    }
}
```",Type-3
342-9-11,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,Type 3,"### Code Snippet 1 (XYBlockRenderer.java, lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (TimeSeriesURLGenerator.java, lines 202-222)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and fields specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored Method Calls

#### In `XYBlockRenderer.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBlockRenderer.class,
        this.blockHeight, ((XYBlockRenderer) obj).blockHeight,
        this.blockWidth, ((XYBlockRenderer) obj).blockWidth,
        this.blockAnchor, ((XYBlockRenderer) obj).blockAnchor,
        this.paintScale, ((XYBlockRenderer) obj).paintScale
    ) && super.equals(obj);
}
```

#### In `TimeSeriesURLGenerator.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TimeSeriesURLGenerator.class,
        this.dateFormat, ((TimeSeriesURLGenerator) obj).dateFormat,
        this.itemParameterName, ((TimeSeriesURLGenerator) obj).itemParameterName,
        this.prefix, ((TimeSeriesURLGenerator) obj).prefix,
        this.seriesParameterName, ((TimeSeriesURLGenerator) obj).seriesParameterName
    );
}
```",Type-3
342-9-13,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1: `equals` method in `XYBlockRenderer` (lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `TimeTableXYDataset` (lines 549-571)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1 (`XYBlockRenderer.equals`)**: **Type-3 Clone** (Mostly similar but with some different statements).
- **Code Snippet 2 (`TimeTableXYDataset.equals`)**: **Type-3 Clone** (Mostly similar but with some different statements).","### 1. Extracted Method (to be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Object instance, double blockHeight, double blockWidth, Object blockAnchor, Object paintScale, boolean domainIsPointsInTime, Object xPosition, Object workingCalendar, Object values) {
    if (obj == instance) {
        return true;
    }
    if (instance instanceof XYBlockRenderer && !(obj instanceof XYBlockRenderer)) {
        return false;
    }
    if (instance instanceof TimeTableXYDataset && !(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    if (instance instanceof XYBlockRenderer) {
        XYBlockRenderer that = (XYBlockRenderer) obj;
        if (blockHeight != that.blockHeight) {
            return false;
        }
        if (blockWidth != that.blockWidth) {
            return false;
        }
        if (!blockAnchor.equals(that.blockAnchor)) {
            return false;
        }
        if (!paintScale.equals(that.paintScale)) {
            return false;
        }
        return super.equals(obj);
    } else if (instance instanceof TimeTableXYDataset) {
        TimeTableXYDataset that = (TimeTableXYDataset) obj;
        if (domainIsPointsInTime != that.domainIsPointsInTime) {
            return false;
        }
        if (!xPosition.equals(that.xPosition)) {
            return false;
        }
        if (!workingCalendar.equals(that.workingCalendar)) {
            return false;
        }
        if (!values.equals(that.values)) {
            return false;
        }
        return true;
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `XYBlockRenderer`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this, this.blockHeight, this.blockWidth, this.blockAnchor, this.paintScale, false, null, null, null);
}
```

---

### 3. Refactored `equals` Method in `TimeTableXYDataset`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this, 0.0, 0.0, null, null, this.domainIsPointsInTime, this.xPosition, this.workingCalendar.getTimeZone(), this.values);
}
```",Type-3
342-10-11,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,Type 3,"### Code Snippet 1 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (TimeSeriesURLGenerator.java, lines 202-222)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`drawXError`, `drawYError`, `capLength`, etc., in the first snippet vs. `dateFormat`, `itemParameterName`, etc., in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param fields  the fields to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `XYErrorRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYErrorRenderer.class, 
        this.drawXError, ((XYErrorRenderer) obj).drawXError,
        this.drawYError, ((XYErrorRenderer) obj).drawYError,
        this.capLength, ((XYErrorRenderer) obj).capLength,
        this.errorPaint, ((XYErrorRenderer) obj).errorPaint
    ) && super.equals(obj);
}
```

---

#### In `TimeSeriesURLGenerator.java`
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, TimeSeriesURLGenerator.class, 
        this.dateFormat, ((TimeSeriesURLGenerator) obj).dateFormat,
        this.itemParameterName, ((TimeSeriesURLGenerator) obj).itemParameterName,
        this.prefix, ((TimeSeriesURLGenerator) obj).prefix,
        this.seriesParameterName, ((TimeSeriesURLGenerator) obj).seriesParameterName
    );
}
```",Type-3
342-10-13,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1 (XYErrorRenderer.java, `equals` method, lines 355-375):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (TimeTableXYDataset.java, `equals` method, lines 549-571):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`XYErrorRenderer` and `TimeTableXYDataset`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects by comparing specified fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check.
 * @param fieldComparisons  an array of boolean comparisons for fields.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYErrorRenderer.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYErrorRenderer.class,
        this.drawXError == ((XYErrorRenderer) obj).drawXError,
        this.drawYError == ((XYErrorRenderer) obj).drawYError,
        this.capLength == ((XYErrorRenderer) obj).capLength,
        PaintUtilities.equal(this.errorPaint, ((XYErrorRenderer) obj).errorPaint),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `TimeTableXYDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        TimeTableXYDataset.class,
        this.domainIsPointsInTime == ((TimeTableXYDataset) obj).domainIsPointsInTime,
        this.xPosition == ((TimeTableXYDataset) obj).xPosition,
        this.workingCalendar.getTimeZone().equals(
            ((TimeTableXYDataset) obj).workingCalendar.getTimeZone()
        ),
        this.values.equals(((TimeTableXYDataset) obj).values)
    );
}
```",Type-3
342-10-14,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,src,org.jfree.data.xy,DefaultTableXYDataset,equals,491,511,Type 3,"### Code Snippet 1 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultTableXYDataset.java, lines 491-511)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultTableXYDataset)) {
        return false;
    }
    DefaultTableXYDataset that = (DefaultTableXYDataset) obj;
    if (this.autoPrune != that.autoPrune) {
        return false;
    }
    if (this.propagateEvents != that.propagateEvents) {
        return false;
    }
    if (!this.intervalDelegate.equals(that.intervalDelegate)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`drawXError`, `drawYError`, etc., in the first snippet vs. `autoPrune`, `propagateEvents`, etc., in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param fieldComparisons  an array of boolean comparisons for instance-specific fields.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean compareFieldsForEquality(Object obj, boolean[] fieldComparisons) {
    if (obj == this) {
        return true;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `XYErrorRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    boolean[] fieldComparisons = new boolean[] {
        this.drawXError == that.drawXError,
        this.drawYError == that.drawYError,
        this.capLength == that.capLength,
        PaintUtilities.equal(this.errorPaint, that.errorPaint),
        super.equals(obj)
    };
    return compareFieldsForEquality(obj, fieldComparisons);
}
```

---

### 3. Refactored Code in `DefaultTableXYDataset.java`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof DefaultTableXYDataset)) {
        return false;
    }
    DefaultTableXYDataset that = (DefaultTableXYDataset) obj;
    boolean[] fieldComparisons = new boolean[] {
        this.autoPrune == that.autoPrune,
        this.propagateEvents == that.propagateEvents,
        this.intervalDelegate.equals(that.intervalDelegate),
        ObjectUtilities.equal(this.data, that.data)
    };
    return compareFieldsForEquality(obj, fieldComparisons);
}
```",Type-3
342-11-12,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,src,org.jfree.chart.util,LogFormat,equals,190,210,Type 3,"### Code Snippet 1 (from `TimeSeriesURLGenerator` class, `equals` method):

```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `LogFormat` class, `equals` method):

```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`TimeSeriesURLGenerator` and `LogFormat`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on provided parameters.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areObjectsEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (Double.compare((Double) thisField, (Double) thatField) != 0) {
                return false;
            }
        } else if (thisField instanceof Boolean && thatField instanceof Boolean) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `TimeSeriesURLGenerator`:

```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(obj, TimeSeriesURLGenerator.class, 
        this.dateFormat, ((TimeSeriesURLGenerator) obj).dateFormat,
        this.itemParameterName, ((TimeSeriesURLGenerator) obj).itemParameterName,
        this.prefix, ((TimeSeriesURLGenerator) obj).prefix,
        this.seriesParameterName, ((TimeSeriesURLGenerator) obj).seriesParameterName
    );
}
```

---

### 3. Refactored `equals` Method in `LogFormat`:

```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areObjectsEqual(obj, LogFormat.class, 
        this.base, ((LogFormat) obj).base,
        this.baseLabel, ((LogFormat) obj).baseLabel,
        this.baseLog, ((LogFormat) obj).baseLog,
        this.showBase, ((LogFormat) obj).showBase
    ) && super.equals(obj);
}
```",Type-3
342-11-13,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1 (TimeSeriesURLGenerator.java, lines 202-222)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TimeTableXYDataset.java, lines 549-571)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1 and Code Snippet 2 are Type-3 clones.**  
  They are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `TimeSeriesURLGenerator.java`
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TimeSeriesURLGenerator.class, 
        this.dateFormat, 
        this.itemParameterName, 
        this.prefix, 
        this.seriesParameterName
    );
}
```

---

### 3. Refactored Code in `TimeTableXYDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TimeTableXYDataset.class, 
        this.domainIsPointsInTime, 
        this.xPosition, 
        this.workingCalendar.getTimeZone(), 
        this.values
    );
}
```",Type-3
342-11-14,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,src,org.jfree.data.xy,DefaultTableXYDataset,equals,491,511,Type 3,"### Code Snippet 1 (TimeSeriesURLGenerator.java, lines 202-222)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (DefaultTableXYDataset.java, lines 491-511)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultTableXYDataset)) {
        return false;
    }
    DefaultTableXYDataset that = (DefaultTableXYDataset) obj;
    if (this.autoPrune != that.autoPrune) {
        return false;
    }
    if (this.propagateEvents != that.propagateEvents) {
        return false;
    }
    if (!this.intervalDelegate.equals(that.intervalDelegate)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `TimeSeriesURLGenerator.java`
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TimeSeriesURLGenerator.class,
        this.dateFormat, ((TimeSeriesURLGenerator) obj).dateFormat,
        this.itemParameterName, ((TimeSeriesURLGenerator) obj).itemParameterName,
        this.prefix, ((TimeSeriesURLGenerator) obj).prefix,
        this.seriesParameterName, ((TimeSeriesURLGenerator) obj).seriesParameterName
    );
}
```

---

### 3. Refactored Method in `DefaultTableXYDataset.java`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultTableXYDataset.class,
        this.autoPrune, ((DefaultTableXYDataset) obj).autoPrune,
        this.propagateEvents, ((DefaultTableXYDataset) obj).propagateEvents,
        this.intervalDelegate, ((DefaultTableXYDataset) obj).intervalDelegate,
        this.data, ((DefaultTableXYDataset) obj).data
    );
}
```",Type-3
342-12-13,src,org.jfree.chart.util,LogFormat,equals,190,210,src,org.jfree.data.time,TimeTableXYDataset,equals,549,571,Type 3,"### Code Snippet 1: `LogFormat.equals` Method
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LogFormat)) {
        return false;
    }
    LogFormat that = (LogFormat) obj;
    if (this.base != that.base) {
        return false;
    }
    if (!this.baseLabel.equals(that.baseLabel)) {
        return false;
    }
    if (this.baseLog != that.baseLog) {
        return false;
    }
    if (this.showBase != that.showBase) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, or types)

---

### Code Snippet 2: `TimeTableXYDataset.equals` Method
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeTableXYDataset)) {
        return false;
    }
    TimeTableXYDataset that = (TimeTableXYDataset) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (!this.workingCalendar.getTimeZone().equals(
        that.workingCalendar.getTimeZone())
    ) {
        return false;
    }
    if (!this.values.equals(that.values)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) thatFields[i]) != 0) {
                return false;
            }
        } else if (fields[i] instanceof Boolean || fields[i] instanceof Enum) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (fields[i] != null && !fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For simplicity, assume it is implemented
    // correctly in the superclass.
    return new Object[fieldCount];
}
```

---

### 2. Refactored `LogFormat.equals` Method
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LogFormat.class, this.base, this.baseLabel, this.baseLog, this.showBase);
}
```

---

### 3. Refactored `TimeTableXYDataset.equals` Method
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TimeTableXYDataset.class, this.domainIsPointsInTime, this.xPosition, 
                   this.workingCalendar.getTimeZone(), this.values);
}
```",Type-2
349-1-2,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,add,169,188,src,org.jfree.chart.plot,CombinedDomainXYPlot,add,264,288,Type 3,"### Code Snippet 1 (CombinedDomainCategoryPlot.java, method `add`, lines 169-188):
```java
/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <br><br>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <br><br>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight < 1) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    subplot.setDomainAxis(null);
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    this.totalWeight += weight;
    CategoryAxis axis = getDomainAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Code Snippet 2 (CombinedDomainXYPlot.java, method `add`, lines 264-288):
```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(XYPlot subplot) {
    // defer argument checking
    add(subplot, 1);
}

/**
 * Adds a subplot with the specified weight and sends a
 * {@link PlotChangeEvent} to all registered listeners.  The weight
 * determines how much space is allocated to the subplot relative to all
 * the other subplots.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(XYPlot subplot, int weight) {

    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }

    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0), false);
    subplot.setDomainAxis(null);
    subplot.addChangeListener(this);
    this.subplots.add(subplot);

    // keep track of total weights
    this.totalWeight += weight;

    ValueAxis axis = getDomainAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of `CategoryPlot` vs. `XYPlot`, `CategoryAxis` vs. `ValueAxis`, and minor differences in method calls (e.g., `setInsets` with an additional parameter in the second snippet).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Plot`):
```java
protected void addSubplot(Object subplot, int weight, List subplots, int totalWeight, ValueAxis domainAxis, Runnable fireChangeEvent) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight < 1) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }

    if (subplot instanceof Plot) {
        Plot plot = (Plot) subplot;
        plot.setParent(this);
        plot.setWeight(weight);
        plot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
        plot.setDomainAxis(null);
        plot.addChangeListener(this);
    }

    subplots.add(subplot);
    totalWeight += weight;

    if (domainAxis != null) {
        domainAxis.configure();
    }

    fireChangeEvent.run();
}
```

---

### 2. Refactored Code in `CombinedDomainCategoryPlot.java`:
```java
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

public void add(CategoryPlot subplot, int weight) {
    addSubplot(subplot, weight, this.subplots, this.totalWeight, getDomainAxis(), this::fireChangeEvent);
}
```

---

### 3. Refactored Code in `CombinedDomainXYPlot.java`:
```java
public void add(XYPlot subplot) {
    add(subplot, 1);
}

public void add(XYPlot subplot, int weight) {
    addSubplot(subplot, weight, this.subplots, this.totalWeight, getDomainAxis(), this::fireChangeEvent);
}
```",Type-3
349-1-3,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,add,169,188,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,add,166,188,Type 3,"### Code Snippet 1 (from `CombinedDomainCategoryPlot` class, method `add`):

```java
/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <br><br>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <br><br>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight < 1) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    subplot.setDomainAxis(null);
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    this.totalWeight += weight;
    CategoryAxis axis = getDomainAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Code Snippet 2 (from `CombinedRangeCategoryPlot` class, method `add`):

```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a 
 * {@link PlotChangeEvent} to all registered listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis.  The range
 * axis for the subplot will be set to <code>null</code>.  
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    // defer argument checking
    add(subplot, 1);
}

/**
 * Adds a subplot and sends a {@link PlotChangeEvent} to all registered 
 * listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis.  The range
 * axis for the subplot will be set to <code>null</code>.  
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    subplot.setRangeAxis(null);
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    this.totalWeight += weight;
    
    // configure the range axis...
    ValueAxis axis = getRangeAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as handling the `domainAxis` in the first snippet and the `rangeAxis` in the second snippet.","### 1. Extracted Method (to be placed in the superclass `CategoryPlot`):

```java
/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 * @param subplots  the list of subplots.
 * @param totalWeight  the total weight of all subplots.
 * @param axis  the axis to configure (can be null).
 * @param isDomainAxis  true if configuring a domain axis, false for range axis.
 * @return The updated total weight.
 */
protected int addSubplot(CategoryPlot subplot, int weight, List subplots, int totalWeight, 
                         ValueAxis axis, boolean isDomainAxis) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight < 1) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    if (isDomainAxis) {
        subplot.setDomainAxis(null);
    } else {
        subplot.setRangeAxis(null);
    }
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    subplots.add(subplot);
    totalWeight += weight;
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
    return totalWeight;
}
```

---

### 2. Method Calls (to replace the clones in the original files):

#### In `CombinedDomainCategoryPlot` (method `add`):

```java
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

public void add(CategoryPlot subplot, int weight) {
    this.totalWeight = addSubplot(subplot, weight, this.subplots, this.totalWeight, 
                                  getDomainAxis(), true);
}
```

---

#### In `CombinedRangeCategoryPlot` (method `add`):

```java
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

public void add(CategoryPlot subplot, int weight) {
    this.totalWeight = addSubplot(subplot, weight, this.subplots, this.totalWeight, 
                                  getRangeAxis(), false);
}
```",Type-3
349-2-3,src,org.jfree.chart.plot,CombinedDomainXYPlot,add,264,288,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,add,166,188,Type 3,"### Code Snippet 1 (CombinedDomainXYPlot.java, method `add`):

```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(XYPlot subplot) {
    // defer argument checking
    add(subplot, 1);
}

/**
 * Adds a subplot with the specified weight and sends a
 * {@link PlotChangeEvent} to all registered listeners.  The weight
 * determines how much space is allocated to the subplot relative to all
 * the other subplots.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(XYPlot subplot, int weight) {

    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }

    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0), false);
    subplot.setDomainAxis(null);
    subplot.addChangeListener(this);
    this.subplots.add(subplot);

    // keep track of total weights
    this.totalWeight += weight;

    ValueAxis axis = getDomainAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Code Snippet 2 (CombinedRangeCategoryPlot.java, method `add`):

```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis.  The range
 * axis for the subplot will be set to <code>null</code>.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    // defer argument checking
    add(subplot, 1);
}

/**
 * Adds a subplot and sends a {@link PlotChangeEvent} to all registered
 * listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis.  The range
 * axis for the subplot will be set to <code>null</code>.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    subplot.setRangeAxis(null);
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    this.totalWeight += weight;

    // configure the range axis...
    ValueAxis axis = getRangeAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `XYPlot` vs. `CategoryPlot`, `setDomainAxis(null)` vs. `setRangeAxis(null)`, and the handling of orientation in the second snippet.","### 1. Extracted Method (to be placed in the superclass `Plot`):

```java
/**
 * Adds a subplot with the specified weight and sends a {@link PlotChangeEvent}
 * to all registered listeners. The weight determines how much space is allocated
 * to the subplot relative to all the other subplots.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 * @param subplots  the list of subplots.
 * @param totalWeight  the total weight of all subplots (passed as a single-element array to allow modification).
 * @param axis  the axis to configure.
 * @param setAxis  a lambda to set the axis (e.g., domain or range) to null for the subplot.
 * @param fireChangeEvent  a runnable to fire a change event.
 */
protected void addSubplot(Plot subplot, int weight, List subplots, int[] totalWeight, 
                          ValueAxis axis, Runnable setAxis, Runnable fireChangeEvent) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }

    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    setAxis.run(); // Set the specific axis (domain or range) to null
    subplot.addChangeListener(this);
    subplots.add(subplot);

    // keep track of total weights
    totalWeight[0] += weight;

    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent.run();
}
```

---

### 2. Refactored Method Calls in `CombinedDomainXYPlot.java`:

```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>. You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(XYPlot subplot) {
    add(subplot, 1);
}

/**
 * Adds a subplot with the specified weight and sends a
 * {@link PlotChangeEvent} to all registered listeners. The weight
 * determines how much space is allocated to the subplot relative to all
 * the other subplots.
 * <P>
 * The domain axis for the subplot will be set to <code>null</code>. You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(XYPlot subplot, int weight) {
    addSubplot(
        subplot, 
        weight, 
        this.subplots, 
        new int[] { this.totalWeight }, 
        getDomainAxis(), 
        () -> subplot.setDomainAxis(null), 
        this::fireChangeEvent
    );
}
```

---

### 3. Refactored Method Calls in `CombinedRangeCategoryPlot.java`:

```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis. The range
 * axis for the subplot will be set to <code>null</code>.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

/**
 * Adds a subplot and sends a {@link PlotChangeEvent} to all registered
 * listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis. The range
 * axis for the subplot will be set to <code>null</code>.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    addSubplot(
        subplot, 
        weight, 
        this.subplots, 
        new int[] { this.totalWeight }, 
        getRangeAxis(), 
        () -> subplot.setRangeAxis(null), 
        this::fireChangeEvent
    );
}
```",Type-3
350-1-2,src,org.jfree.chart.axis,CategoryLabelPositions,equals,418,442,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,Type 3,"### Code Snippet 1 (CategoryLabelPositions.java, lines 418-442)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (this == obj) {
        return true;
    }
    if (!(obj instanceof CategoryLabelPositions)) {
        return false;
    }

    CategoryLabelPositions that = (CategoryLabelPositions) obj;
    if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {
        return false;
    }
    if (!this.positionForAxisAtBottom.equals(
            that.positionForAxisAtBottom)) {
        return false;
    }
    if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {
        return false;
    }
    if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {
        return false;
    }

    return true;

}
```

### Code Snippet 2 (XYBlockRenderer.java, lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Types:
- **Code Snippet 1 and Code Snippet 2 are Type-3 clones.**
","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare with.
 * @param top  the top position field of the current object.
 * @param bottom  the bottom position field of the current object.
 * @param left  the left position field of the current object.
 * @param right  the right position field of the current object.
 * @param height  the height field of the current object.
 * @param width  the width field of the current object.
 * @param anchor  the anchor field of the current object.
 * @param scale  the scale field of the current object.
 * @param clazz  the class type to check against.
 * @return A boolean indicating equality.
 */
protected boolean areFieldsEqual(Object obj, 
        Object top, Object bottom, Object left, Object right, 
        double height, double width, Object anchor, Object scale, 
        Class<?> clazz) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (clazz == CategoryLabelPositions.class) {
        CategoryLabelPositions that = (CategoryLabelPositions) obj;
        return top.equals(that.positionForAxisAtTop)
                && bottom.equals(that.positionForAxisAtBottom)
                && left.equals(that.positionForAxisAtLeft)
                && right.equals(that.positionForAxisAtRight);
    } else if (clazz == XYBlockRenderer.class) {
        XYBlockRenderer that = (XYBlockRenderer) obj;
        return height == that.blockHeight
                && width == that.blockWidth
                && anchor.equals(that.blockAnchor)
                && scale.equals(that.paintScale)
                && super.equals(obj);
    }
    return false;
}
```

---

### 2. Refactored Method in `CategoryLabelPositions.java`
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areFieldsEqual(obj, 
        this.positionForAxisAtTop, this.positionForAxisAtBottom, 
        this.positionForAxisAtLeft, this.positionForAxisAtRight, 
        0.0, 0.0, null, null, CategoryLabelPositions.class);
}
```

---

### 3. Refactored Method in `XYBlockRenderer.java`
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areFieldsEqual(obj, 
        null, null, null, null, 
        this.blockHeight, this.blockWidth, 
        this.blockAnchor, this.paintScale, XYBlockRenderer.class);
}
```",Type-3
350-2-3,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,src,org.jfree.chart.urls,TimeSeriesURLGenerator,equals,202,222,Type 3,"### Code Snippet 1 (XYBlockRenderer.java, lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (TimeSeriesURLGenerator.java, lines 202-222)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesURLGenerator)) {
        return false;
    }
    TimeSeriesURLGenerator that = (TimeSeriesURLGenerator) obj;
    if (!this.dateFormat.equals(that.dateFormat)) {
        return false;
    }
    if (!this.itemParameterName.equals(that.itemParameterName)) {
        return false;
    }
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.seriesParameterName.equals(that.seriesParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and fields being compared.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality by comparing their fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `XYBlockRenderer.java`
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYBlockRenderer.class,
        this.blockHeight == ((XYBlockRenderer) obj).blockHeight,
        this.blockWidth == ((XYBlockRenderer) obj).blockWidth,
        this.blockAnchor.equals(((XYBlockRenderer) obj).blockAnchor),
        this.paintScale.equals(((XYBlockRenderer) obj).paintScale),
        super.equals(obj)
    );
}
```

---

### 3. Refactored Method in `TimeSeriesURLGenerator.java`
```java
/**
 * Tests this generator for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        TimeSeriesURLGenerator.class,
        this.dateFormat.equals(((TimeSeriesURLGenerator) obj).dateFormat),
        this.itemParameterName.equals(((TimeSeriesURLGenerator) obj).itemParameterName),
        this.prefix.equals(((TimeSeriesURLGenerator) obj).prefix),
        this.seriesParameterName.equals(((TimeSeriesURLGenerator) obj).seriesParameterName)
    );
}
```",Type-3
356-1-2,src,org.jfree.chart.renderer.xy,XYBoxAndWhiskerRenderer,equals,782,805,src,org.jfree.data.gantt,Task,equals,219,240,Type 3,"### Code Snippet 1: `equals` method in `XYBoxAndWhiskerRenderer` class
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBoxAndWhiskerRenderer)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    XYBoxAndWhiskerRenderer that = (XYBoxAndWhiskerRenderer) obj;
    if (this.boxWidth != that.getBoxWidth()) {
        return false;
    }
    if (!PaintUtilities.equal(this.boxPaint, that.boxPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.artifactPaint, that.artifactPaint)) {
        return false;
    }
    if (this.fillBox != that.fillBox) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `Task` class
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof Task)) {
        return false;
    }
    Task that = (Task) object;
    if (!ObjectUtilities.equal(this.description, that.description)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.duration, that.duration)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.percentComplete, 
            that.percentComplete)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subtasks, that.subtasks)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different fields (`boxWidth`, `boxPaint`, `artifactPaint`, `fillBox` in the first snippet vs. `description`, `duration`, `percentComplete`, `subtasks` in the second snippet) and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on their fields.
 *
 * @param obj  the object to compare with.
 * @param fields  the array of field values to compare.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        if (!field[0].equals(field[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYBoxAndWhiskerRenderer` Class
```java
/**
 * Tests this renderer for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.boxWidth, ((XYBoxAndWhiskerRenderer) obj).getBoxWidth() },
        { this.boxPaint, ((XYBoxAndWhiskerRenderer) obj).boxPaint },
        { this.artifactPaint, ((XYBoxAndWhiskerRenderer) obj).artifactPaint },
        { this.fillBox, ((XYBoxAndWhiskerRenderer) obj).fillBox }
    });
}
```

---

### 3. Refactored `equals` Method in `Task` Class
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object object) {
    return equalsHelper(object, new Object[][] {
        { this.description, ((Task) object).description },
        { this.duration, ((Task) object).duration },
        { this.percentComplete, ((Task) object).percentComplete },
        { this.subtasks, ((Task) object).subtasks }
    });
}
```",Type-3
371-1-2,src,org.jfree.chart.renderer.xy,XYStepAreaRenderer,equals,536,559,src,org.jfree.chart.title,Title,equals,374,397,Type 3,"### Code Snippet 1 (from `XYStepAreaRenderer` class, `equals` method, lines 536-559):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYStepAreaRenderer)) {
        return false;
    }
    XYStepAreaRenderer that = (XYStepAreaRenderer) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (this.shapesVisible != that.shapesVisible) {
        return false;
    }
    if (this.shapesFilled != that.shapesFilled) {
        return false;
    }
    if (this.plotArea != that.plotArea) {
        return false;
    }
    if (this.rangeBase != that.rangeBase) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `Title` class, `equals` method, lines 374-397):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Title)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;   
    }
    Title that = (Title) obj;
    if (this.position != that.position) {
        return false;
    }
    if (this.horizontalAlignment != that.horizontalAlignment) {
        return false;
    }
    if (this.verticalAlignment != that.verticalAlignment) {
        return false;
    }
    if (this.notify != that.notify) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields being compared (`showOutline`, `shapesVisible`, etc., in the first snippet vs. `position`, `horizontalAlignment`, etc., in the second snippet).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass):
```java
protected boolean equalsHelper(Object obj, Object[] thisFields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < thisFields.length; i++) {
        if (!thisFields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYStepAreaRenderer`:
```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        new Object[]{this.showOutline, this.shapesVisible, this.shapesFilled, this.plotArea, this.rangeBase},
        new Object[]{((XYStepAreaRenderer) obj).showOutline, ((XYStepAreaRenderer) obj).shapesVisible, ((XYStepAreaRenderer) obj).shapesFilled, ((XYStepAreaRenderer) obj).plotArea, ((XYStepAreaRenderer) obj).rangeBase}
    );
}
```

---

### 3. Refactored `equals` Method in `Title`:
```java
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        new Object[]{this.position, this.horizontalAlignment, this.verticalAlignment, this.notify},
        new Object[]{((Title) obj).position, ((Title) obj).horizontalAlignment, ((Title) obj).verticalAlignment, ((Title) obj).notify}
    );
}
```",Type-3
371-2-4,src,org.jfree.chart.title,Title,equals,374,397,src,org.jfree.data.xy,XYInterval,equals,138,161,Type 3,"### Code Snippet 1: `equals` method from `Title` class (lines 374-397)
```java
/**
 * Tests an object for equality with this title.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Title)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;   
    }
    Title that = (Title) obj;
    if (this.position != that.position) {
        return false;
    }
    if (this.horizontalAlignment != that.horizontalAlignment) {
        return false;
    }
    if (this.verticalAlignment != that.verticalAlignment) {
        return false;
    }
    if (this.notify != that.notify) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `XYInterval` class (lines 138-161)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYInterval)) {
        return false;
    }
    XYInterval that = (XYInterval) obj;
    if (this.xLow != that.xLow) {
        return false;
    }
    if (this.xHigh != that.xHigh) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    if (this.yLow != that.yLow) {
        return false;
    }
    if (this.yHigh != that.yHigh) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** in structure and logic but differ in the specific fields being compared (`position`, `horizontalAlignment`, `verticalAlignment`, `notify` in `Title` vs. `xLow`, `xHigh`, `y`, `yLow`, `yHigh` in `XYInterval`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the fields of two objects for equality.
 *
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean fieldsEqual(Object obj, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `Title`
```java
@Override
public boolean equals(Object obj) {
    return fieldsEqual(obj, position, horizontalAlignment, verticalAlignment, notify);
}
```

### 3. Refactored `equals` Method in `XYInterval`
```java
@Override
public boolean equals(Object obj) {
    return fieldsEqual(obj, xLow,xHight",Type-3
372-1-4,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","1. **Extracted Method (to be placed in the superclass):**

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

2. **Refactored `equals` method in `PieSectionEntity`:**

```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, PieSectionEntity.class, 
        this.dataset, ((PieSectionEntity) obj).dataset,
        this.pieIndex, ((PieSectionEntity) obj).pieIndex,
        this.sectionIndex, ((PieSectionEntity) obj).sectionIndex,
        this.sectionKey, ((PieSectionEntity) obj).sectionKey);
}
```

3. **Refactored `equals` method in `XYErrorRenderer`:**

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYErrorRenderer.class, 
        this.drawXError, ((XYErrorRenderer) obj).drawXError,
        this.drawYError, ((XYErrorRenderer) obj).drawYError,
        this.capLength, ((XYErrorRenderer) obj).capLength,
        this.errorPaint, ((XYErrorRenderer) obj).errorPaint);
}
```",Type-3
372-2-4,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (GanttRenderer.java, lines 558-578)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields being compared, such as `completePaint` vs. `errorPaint`, and `startPercent` vs. `capLength`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class type to check.
 * @param paintFields  the paint fields to compare.
 * @param doubleFields  the double fields to compare.
 * @return A boolean.
 */
protected boolean rendererEquals(Object obj, Class<?> clazz, Paint[] paintFields, double[] doubleFields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < paintFields.length; i += 2) {
        if (!PaintUtilities.equal(paintFields[i], paintFields[i + 1])) {
            return false;
        }
    }
    for (int i = 0; i < doubleFields.length; i += 2) {
        if (doubleFields[i] != doubleFields[i + 1]) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored Method in `GanttRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(
        obj,
        GanttRenderer.class,
        new Paint[]{this.completePaint, ((GanttRenderer) obj).completePaint, this.incompletePaint, ((GanttRenderer) obj).incompletePaint},
        new double[]{this.startPercent, ((GanttRenderer) obj).startPercent, this.endPercent, ((GanttRenderer) obj).endPercent}
    );
}
```

---

### 3. Refactored Method in `XYErrorRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return rendererEquals(
        obj,
        XYErrorRenderer.class,
        new Paint[]{this.errorPaint, ((XYErrorRenderer) obj).errorPaint},
        new double[]{this.capLength, ((XYErrorRenderer) obj).capLength}
    );
}
```",Type-3
372-2-5,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,src,org.jfree.chart.title,Title,equals,374,397,Type 3,"### Code Snippet 1 (GanttRenderer.java, equals method, lines 558-578):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (Title.java, equals method, lines 374-397):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Title)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;   
    }
    Title that = (Title) obj;
    if (this.position != that.position) {
        return false;
    }
    if (this.horizontalAlignment != that.horizontalAlignment) {
        return false;
    }
    if (this.verticalAlignment != that.verticalAlignment) {
        return false;
    }
    if (this.notify != that.notify) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., different fields being compared and different class types).","### 1. Extracted Method (to be placed in the common superclass):
```java
protected boolean equalsHelper(Object obj, Object other, Object[] fieldsToCompare) {
    if (obj == other) {
        return true;
    }
    if (other == null || obj.getClass() != other.getClass()) {
        return false;
    }
    for (int i = 0; i < fieldsToCompare.length; i += 2) {
        if (!fieldsToCompare[i].equals(fieldsToCompare[i + 1])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `GanttRenderer.java`:
```java
public boolean equals(Object obj) {
    return equalsHelper(this, obj, new Object[]{
        this.completePaint, ((GanttRenderer) obj).completePaint,
        this.incompletePaint, ((GanttRenderer) obj).incompletePaint,
    });
}
```",Type-3
372-3-4,src,org.jfree.chart.renderer.xy,XYBlockRenderer,equals,404,424,src,org.jfree.chart.renderer.xy,XYErrorRenderer,equals,355,375,Type 3,"### Code Snippet 1 (XYBlockRenderer.java, lines 404-424)
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>XYBlockRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>XYBlockRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBlockRenderer)) {
        return false;
    }
    XYBlockRenderer that = (XYBlockRenderer) obj;
    if (this.blockHeight != that.blockHeight) {
        return false;
    }
    if (this.blockWidth != that.blockWidth) {
        return false;
    }
    if (!this.blockAnchor.equals(that.blockAnchor)) {
        return false;
    }
    if (!this.paintScale.equals(that.paintScale)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYErrorRenderer.java, lines 355-375)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYErrorRenderer)) {
        return false;
    }
    XYErrorRenderer that = (XYErrorRenderer) obj;
    if (this.drawXError != that.drawXError) {
        return false;
    }
    if (this.drawYError != that.drawYError) {
        return false;
    }
    if (this.capLength != that.capLength) {
        return false;
    }
    if (!PaintUtilities.equal(this.errorPaint, that.errorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`blockHeight`, `blockWidth`, `blockAnchor`, `paintScale` in the first snippet vs. `drawXError`, `drawYError`, `capLength`, `errorPaint` in the second snippet) and the utility method used (`PaintUtilities.equal` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object by comparing specified fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored Method in `XYBlockRenderer.java`
```java
/**
 * Tests this <code>XYBlockRenderer</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYBlockRenderer.class,
        this.blockHeight == ((XYBlockRenderer) obj).blockHeight,
        this.blockWidth == ((XYBlockRenderer) obj).blockWidth,
        this.blockAnchor.equals(((XYBlockRenderer) obj).blockAnchor),
        this.paintScale.equals(((XYBlockRenderer) obj).paintScale)
    );
}
```

---

### 3. Refactored Method in `XYErrorRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYErrorRenderer.class,
        this.drawXError == ((XYErrorRenderer) obj).drawXError,
        this.drawYError == ((XYErrorRenderer) obj).drawYError,
        this.capLength == ((XYErrorRenderer) obj).capLength,
        PaintUtilities.equal(this.errorPaint, ((XYErrorRenderer) obj).errorPaint)
    );
}
```",Type-3
402-1-2,src,org.jfree.chart.axis,SymbolAxis,equals,768,789,src,org.jfree.chart.axis,Tick,equals,142,162,Type 3,"### Code Snippet 1: `equals` method in `SymbolAxis` class (lines 768-789)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SymbolAxis)) {
        return false;
    }
    SymbolAxis that = (SymbolAxis) obj;
    if (!this.symbols.equals(that.symbols)) {
        return false;
    }
    if (this.gridBandsVisible != that.gridBandsVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandAlternatePaint, 
            that.gridBandAlternatePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `Tick` class (lines 142-162)
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different fields (`symbols`, `gridBandsVisible`, `gridBandPaint`, etc., in `SymbolAxis` vs. `text`, `textAnchor`, `rotationAnchor`, etc., in `Tick`) and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `Axis`):
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        if (!field[0].equals(field[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `SymbolAxis`:
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.symbols, ((SymbolAxis) obj).symbols },
        { this.gridBandsVisible, ((SymbolAxis) obj).gridBandsVisible },
        { PaintUtilities.equal(this.gridBandPaint, ((SymbolAxis) obj).gridBandPaint), true },
        { PaintUtilities.equal(this.gridBandAlternatePaint, ((SymbolAxis) obj).gridBandAlternatePaint), true },
        { super.equals(obj), true }
    });
}
```

---

### 3. Refactored `equals` Method in `Tick`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { ObjectUtilities.equal(this.text, ((Tick) obj).text), true },
        { ObjectUtilities.equal(this.textAnchor, ((Tick) obj).textAnchor), true },
        { ObjectUtilities.equal(this.rotationAnchor, ((Tick) obj).rotationAnchor), true },
        { this.angle == ((Tick) obj).angle, true }
    });
}
```",Type-3
402-1-6,src,org.jfree.chart.axis,SymbolAxis,equals,768,789,src,org.jfree.data.gantt,Task,equals,219,240,Type 3,"### Code Snippet 1: `equals` method in `SymbolAxis` class (lines 768-789)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SymbolAxis)) {
        return false;
    }
    SymbolAxis that = (SymbolAxis) obj;
    if (!this.symbols.equals(that.symbols)) {
        return false;
    }
    if (this.gridBandsVisible != that.gridBandsVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandAlternatePaint, 
            that.gridBandAlternatePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `Task` class (lines 219-240)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof Task)) {
        return false;
    }
    Task that = (Task) object;
    if (!ObjectUtilities.equal(this.description, that.description)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.duration, that.duration)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.percentComplete, 
            that.percentComplete)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subtasks, that.subtasks)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different fields (`symbols`, `gridBandsVisible`, `gridBandPaint`, etc., in `SymbolAxis` vs. `description`, `duration`, `percentComplete`, etc., in `Task`) and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractEqualityComparable`)
```java
protected boolean equalsHelper(Object obj, Object[] fields, Object[] thatFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `SymbolAxis` Class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[] { this.symbols, this.gridBandsVisible, this.gridBandPaint, this.gridBandAlternatePaint },
        new Object[] { ((SymbolAxis) obj).symbols, ((SymbolAxis) obj).gridBandsVisible, ((SymbolAxis) obj).gridBandPaint, ((SymbolAxis) obj).gridBandAlternatePaint }
    ) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `Task` Class
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object object) {
    return equalsHelper(object, 
        new Object[] { this.description, this.duration, this.percentComplete, this.subtasks },
        new Object[] { ((Task) object).description, ((Task) object).duration, ((Task) object).percentComplete, ((Task) object).subtasks }
    );
}
```",Type-3
402-2-3,src,org.jfree.chart.axis,Tick,equals,142,162,src,org.jfree.chart.plot.dial,DialCap,equals,262,282,Type 3,"### Code Snippet 1 (from `Tick.java`):

```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

---

### Code Snippet 2 (from `DialCap.java`):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialCap)) {
        return false;
    }
    DialCap that = (DialCap) obj;
    if (this.radius != that.radius) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!this.outlineStroke.equals(that.outlineStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the use of different fields (`text`, `textAnchor`, `rotationAnchor`, `angle` in `Tick` vs. `radius`, `fillPaint`, `outlinePaint`, `outlineStroke` in `DialCap`) and utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object otherField = field[1];
        if (thisField instanceof Double && otherField instanceof Double) {
            if (!((Double) thisField).equals((Double) otherField)) {
                return false;
            }
        } else if (thisField != null && !thisField.equals(otherField)) {
            return false;
        } else if (thisField == null && otherField != null) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Tick.java`:

```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.text, ((Tick) obj).text },
        { this.textAnchor, ((Tick) obj).textAnchor },
        { this.rotationAnchor, ((Tick) obj).rotationAnchor },
        { this.angle, ((Tick) obj).angle }
    });
}
```

---

### 3. Refactored `equals` Method in `DialCap.java`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.radius, ((DialCap) obj).radius },
        { this.fillPaint, ((DialCap) obj).fillPaint },
        { this.outlinePaint, ((DialCap) obj).outlinePaint },
        { this.outlineStroke, ((DialCap) obj).outlineStroke }
    });
}
```",Type-3
402-2-4,src,org.jfree.chart.axis,Tick,equals,142,162,src,org.jfree.chart.plot.dial,StandardDialFrame,equals,278,298,Type 3,"### Code Snippet 1 (Tick.java, `equals` method, lines 142-162):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (StandardDialFrame.java, `equals` method, lines 278-298):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialFrame)) {
        return false;
    }
    StandardDialFrame that = (StandardDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`Tick` and `StandardDialFrame`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects based on provided attributes.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param attributes  the attributes to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Object[][] attributes) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] attribute : attributes) {
        Object thisAttribute = attribute[0];
        Object otherAttribute = attribute[1];
        if (thisAttribute instanceof Double && otherAttribute instanceof Double) {
            if (!((Double) thisAttribute).equals((Double) otherAttribute)) {
                return false;
            }
        } else if (thisAttribute != null && !thisAttribute.equals(otherAttribute)) {
            return false;
        } else if (thisAttribute == null && otherAttribute != null) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Tick.java`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.text, ((Tick) obj).text },
        { this.textAnchor, ((Tick) obj).textAnchor },
        { this.rotationAnchor, ((Tick) obj).rotationAnchor },
        { this.angle, ((Tick) obj).angle }
    });
}
```

---

### 3. Refactored `equals` Method in `StandardDialFrame.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.backgroundPaint, ((StandardDialFrame) obj).backgroundPaint },
        { this.foregroundPaint, ((StandardDialFrame) obj).foregroundPaint },
        { this.radius, ((StandardDialFrame) obj).radius },
        { this.stroke, ((StandardDialFrame) obj).stroke }
    });
}
```",Type-3
402-2-5,src,org.jfree.chart.axis,Tick,equals,142,162,src,org.jfree.data.category,DefaultIntervalCategoryDataset,equals,711,733,Type 3,"### Code Snippet 1 (from `Tick.java`):

```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

---

### Code Snippet 2 (from `DefaultIntervalCategoryDataset.java`):

```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultIntervalCategoryDataset)) {
        return false;
    }
    DefaultIntervalCategoryDataset that 
            = (DefaultIntervalCategoryDataset) obj;
    if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {
        return false;
    }
    if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {
        return false;
    }
    if (!equal(this.startData, that.startData)) {
        return false;
    }
    if (!equal(this.endData, that.endData)) {
        return false;
    }
    // seem to be the same...
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and structure.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areFieldsEqual(Object obj, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().isInstance(obj)) {
        return false;
    }
    Object other = this.getClass().cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Tick.java`:

```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, this.text, ((Tick) obj).text, 
                               this.textAnchor, ((Tick) obj).textAnchor, 
                               this.rotationAnchor, ((Tick) obj).rotationAnchor, 
                               this.angle, ((Tick) obj).angle);
}
```

---

### 3. Refactored `equals` Method in `DefaultIntervalCategoryDataset.java`:

```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areFieldsEqual(obj, this.seriesKeys, ((DefaultIntervalCategoryDataset) obj).seriesKeys, 
                               this.categoryKeys, ((DefaultIntervalCategoryDataset) obj).categoryKeys, 
                               this.startData, ((DefaultIntervalCategoryDataset) obj).startData, 
                               this.endData, ((DefaultIntervalCategoryDataset) obj).endData);
}
```",Type-3
402-3-5,src,org.jfree.chart.plot.dial,DialCap,equals,262,282,src,org.jfree.data.category,DefaultIntervalCategoryDataset,equals,711,733,Type 3,"### Code Snippet 1 (DialCap.java, `equals` method, lines 262-282):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialCap)) {
        return false;
    }
    DialCap that = (DialCap) obj;
    if (this.radius != that.radius) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!this.outlineStroke.equals(that.outlineStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultIntervalCategoryDataset.java, `equals` method, lines 711-733):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultIntervalCategoryDataset)) {
        return false;
    }
    DefaultIntervalCategoryDataset that 
            = (DefaultIntervalCategoryDataset) obj;
    if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {
        return false;
    }
    if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {
        return false;
    }
    if (!equal(this.startData, that.startData)) {
        return false;
    }
    if (!equal(this.endData, that.endData)) {
        return false;
    }
    // seem to be the same...
    return true;
}
```

### Clone Type:
These two code snippets are **Type-4 clones** because they have different structures but achieve the same functionality: testing equality between objects.","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean equalsHelper(Object obj, Object thisInstance, Class<?> clazz, 
        Object[] fields, Object[] otherFields, boolean[] useEquals) {
    if (obj == thisInstance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i++) {
        if (useEquals[i]) {
            if (!fields[i].equals(otherFields[i])) {
                return false;
            }
        } else {
            if (!fields[i].equals(otherFields[i])) {
                return false;
            }
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DialCap.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        this,
        DialCap.class,
        new Object[]{this.radius, this.fillPaint, this.outlinePaint, this.outlineStroke},
        new Object[]{that,}
    )
}
```",Type-4
402-3-6,src,org.jfree.chart.plot.dial,DialCap,equals,262,282,src,org.jfree.data.gantt,Task,equals,219,240,Type 3,"### Code Snippet 1 (DialCap.java, `equals` method):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialCap)) {
        return false;
    }
    DialCap that = (DialCap) obj;
    if (this.radius != that.radius) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!this.outlineStroke.equals(that.outlineStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (Task.java, `equals` method):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof Task)) {
        return false;
    }
    Task that = (Task) object;
    if (!ObjectUtilities.equal(this.description, that.description)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.duration, that.duration)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.percentComplete, 
            that.percentComplete)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subtasks, that.subtasks)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`radius`, `fillPaint`, `outlinePaint`, etc., in `DialCap` vs. `description`, `duration`, `percentComplete`, etc., in `Task`) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (!ObjectUtilities.equal(thisField, thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DialCap.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.radius, ((DialCap) obj).radius },
        { this.fillPaint, ((DialCap) obj).fillPaint },
        { this.outlinePaint, ((DialCap) obj).outlinePaint },
        { this.outlineStroke, ((DialCap) obj).outlineStroke }
    });
}
```

---

### 3. Refactored `equals` Method in `Task.java`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object object) {
    return equalsHelper(object, new Object[][] {
        { this.description, ((Task) object).description },
        { this.duration, ((Task) object).duration },
        { this.percentComplete, ((Task) object).percentComplete },
        { this.subtasks, ((Task) object).subtasks }
    });
}
```",Type-3
402-4-5,src,org.jfree.chart.plot.dial,StandardDialFrame,equals,278,298,src,org.jfree.data.category,DefaultIntervalCategoryDataset,equals,711,733,Type 3,"### Code Snippet 1 (StandardDialFrame.java, lines 278-298)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialFrame)) {
        return false;
    }
    StandardDialFrame that = (StandardDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (DefaultIntervalCategoryDataset.java, lines 711-733)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultIntervalCategoryDataset)) {
        return false;
    }
    DefaultIntervalCategoryDataset that 
            = (DefaultIntervalCategoryDataset) obj;
    if (!Arrays.equals(this.seriesKeys, that.seriesKeys)) {
        return false;
    }
    if (!Arrays.equals(this.categoryKeys, that.categoryKeys)) {
        return false;
    }
    if (!equal(this.startData, that.startData)) {
        return false;
    }
    if (!equal(this.endData, that.endData)) {
        return false;
    }
    // seem to be the same...
    return true;
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields and methods being compared (`backgroundPaint`, `foregroundPaint`, `radius`, `stroke` in the first snippet vs. `seriesKeys`, `categoryKeys`, `startData`, `endData` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality by comparing their fields.
 *
 * @param obj  the object to compare with (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] field : fields) {
        Object thisField = field[0];
        Object thatField = field[1];
        if (thisField instanceof double[] && thatField instanceof double[]) {
            if (!Arrays.equals((double[]) thisField, (double[]) thatField)) {
                return false;
            }
        } else if (thisField instanceof Object[] && thatField instanceof Object[]) {
            if (!Arrays.equals((Object[]) thisField, (Object[]) thatField)) {
                return false;
            }
        } else if (thisField instanceof Number[][] && thatField instanceof Number[][]) {
            if (!equal((Number[][]) thisField, (Number[][]) thatField)) {
                return false;
            }
        } else if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `StandardDialFrame.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.backgroundPaint, ((StandardDialFrame) obj).backgroundPaint },
        { this.foregroundPaint, ((StandardDialFrame) obj).foregroundPaint },
        { this.radius, ((StandardDialFrame) obj).radius },
        { this.stroke, ((StandardDialFrame) obj).stroke }
    });
}
```

---

#### In `DefaultIntervalCategoryDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.seriesKeys, ((DefaultIntervalCategoryDataset) obj).seriesKeys },
        { this.categoryKeys, ((DefaultIntervalCategoryDataset) obj).categoryKeys },
        { this.startData, ((DefaultIntervalCategoryDataset) obj).startData },
        { this.endData, ((DefaultIntervalCategoryDataset) obj).endData }
    });
}
```",Type-3
402-4-6,src,org.jfree.chart.plot.dial,StandardDialFrame,equals,278,298,src,org.jfree.data.gantt,Task,equals,219,240,Type 3,"### Code Snippet 1 (from `StandardDialFrame` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialFrame)) {
        return false;
    }
    StandardDialFrame that = (StandardDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `Task` class, `equals` method):

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object object) {
    if (object == this) {
        return true;
    }
    if (!(object instanceof Task)) {
        return false;
    }
    Task that = (Task) object;
    if (!ObjectUtilities.equal(this.description, that.description)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.duration, that.duration)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.percentComplete, 
            that.percentComplete)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.subtasks, that.subtasks)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`), different fields being compared (`backgroundPaint`, `foregroundPaint`, `radius`, `stroke` vs. `description`, `duration`, `percentComplete`, `subtasks`), and different class-specific logic.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality by comparing their fields using the provided utility methods.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `StandardDialFrame`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardDialFrame.class,
        PaintUtilities.equal(this.backgroundPaint, ((StandardDialFrame) obj).backgroundPaint),
        PaintUtilities.equal(this.foregroundPaint, ((StandardDialFrame) obj).foregroundPaint),
        this.radius == ((StandardDialFrame) obj).radius,
        this.stroke.equals(((StandardDialFrame) obj).stroke),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `Task`:

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param object  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object object) {
    return equalsHelper(
        object,
        Task.class,
        ObjectUtilities.equal(this.description, ((Task) object).description),
        ObjectUtilities.equal(this.duration, ((Task) object).duration),
        ObjectUtilities.equal(this.percentComplete, ((Task) object).percentComplete),
        ObjectUtilities.equal(this.subtasks, ((Task) object).subtasks)
    );
}
```",Type-3
403-1-2,src,org.jfree.chart.plot,CombinedDomainCategoryPlot,add,169,188,src,org.jfree.chart.plot,CombinedRangeCategoryPlot,add,166,188,Type 3,"### Code Snippet 1 (from `CombinedDomainCategoryPlot` class, method `add`):

```java
/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <br><br>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 * <br><br>
 * The domain axis for the subplot will be set to <code>null</code>.  You
 * must ensure that the subplot has a non-null range axis.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight < 1) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    subplot.setDomainAxis(null);
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    this.totalWeight += weight;
    CategoryAxis axis = getDomainAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Code Snippet 2 (from `CombinedRangeCategoryPlot` class, method `add`):

```java
/**
 * Adds a subplot (with a default 'weight' of 1) and sends a 
 * {@link PlotChangeEvent} to all registered listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis.  The range
 * axis for the subplot will be set to <code>null</code>.  
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 */
public void add(CategoryPlot subplot) {
    // defer argument checking
    add(subplot, 1);
}

/**
 * Adds a subplot and sends a {@link PlotChangeEvent} to all registered 
 * listeners.
 * <br><br>
 * You must ensure that the subplot has a non-null domain axis.  The range
 * axis for the subplot will be set to <code>null</code>.  
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 */
public void add(CategoryPlot subplot, int weight) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight <= 0) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    // store the plot and its weight
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    subplot.setRangeAxis(null);
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    this.subplots.add(subplot);
    this.totalWeight += weight;
    
    // configure the range axis...
    ValueAxis axis = getRangeAxis();
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as handling `domainAxis` vs. `rangeAxis` and minor differences in logic.","### 1. Extracted Method (to be placed in the superclass `CategoryPlot`):

```java
/**
 * Adds a subplot to the combined chart and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param subplot  the subplot (<code>null</code> not permitted).
 * @param weight  the weight (must be >= 1).
 * @param subplots  the list of subplots.
 * @param totalWeight  the total weight of all subplots.
 * @param axis  the axis to configure (can be null).
 * @param isDomainAxis  true if configuring a domain axis, false for range axis.
 */
protected void addSubplot(CategoryPlot subplot, int weight, List subplots, 
                          int[] totalWeight, ValueAxis axis, boolean isDomainAxis) {
    if (subplot == null) {
        throw new IllegalArgumentException(""Null 'subplot' argument."");
    }
    if (weight < 1) {
        throw new IllegalArgumentException(""Require weight >= 1."");
    }
    subplot.setParent(this);
    subplot.setWeight(weight);
    subplot.setInsets(new RectangleInsets(0.0, 0.0, 0.0, 0.0));
    if (isDomainAxis) {
        subplot.setDomainAxis(null);
    } else {
        subplot.setRangeAxis(null);
    }
    subplot.setOrientation(getOrientation());
    subplot.addChangeListener(this);
    subplots.add(subplot);
    totalWeight[0] += weight;
    if (axis != null) {
        axis.configure();
    }
    fireChangeEvent();
}
```

---

### 2. Method Calls (to replace the clones in the original files):

#### In `CombinedDomainCategoryPlot`:

```java
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

public void add(CategoryPlot subplot, int weight) {
    addSubplot(subplot, weight, this.subplots, new int[]{this.totalWeight}, 
               getDomainAxis(), true);
}
```

---

#### In `CombinedRangeCategoryPlot`:

```java
public void add(CategoryPlot subplot) {
    add(subplot, 1);
}

public void add(CategoryPlot subplot, int weight) {
    addSubplot(subplot, weight, this.subplots, new int[]{this.totalWeight}, 
               getRangeAxis(), false);
}
```",Type-3
425-1-2,src,org.jfree.chart.plot,CategoryPlot,setRenderer,1383,1404,src,org.jfree.chart.plot,XYPlot,setDomainAxis,744,758,Type 3,"### Code Snippet 1: `setRenderer` Method from `CategoryPlot.java`

```java
/**
 * Sets the renderer at index 0 (sometimes referred to as the ""primary""
 * renderer) and sends a {@link PlotChangeEvent} to all registered
 * listeners.
 *
 * @param renderer  the renderer (<code>null</code> permitted.
 *
 * @see #getRenderer()
 */
public void setRenderer(CategoryItemRenderer renderer) {
    setRenderer(0, renderer, true);
}

/**
 * Sets the renderer at index 0 (sometimes referred to as the ""primary""
 * renderer) and, if requested, sends a {@link PlotChangeEvent} to all
 * registered listeners.
 * <p>
 * You can set the renderer to <code>null</code>, but this is not
 * recommended because:
 * <ul>
 *   <li>no data will be displayed;</li>
 *   <li>the plot background will not be painted;</li>
 * </ul>
 *
 * @param renderer  the renderer (<code>null</code> permitted).
 * @param notify  notify listeners?
 *
 * @see #getRenderer()
 */
public void setRenderer(CategoryItemRenderer renderer, boolean notify) {
    setRenderer(0, renderer, notify);
}

/**
 * Sets the renderer at the specified index and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the index.
 * @param renderer  the renderer (<code>null</code> permitted).
 *
 * @see #getRenderer(int)
 * @see #setRenderer(int, CategoryItemRenderer, boolean)
 */
public void setRenderer(int index, CategoryItemRenderer renderer) {
    setRenderer(index, renderer, true);
}

/**
 * Sets a renderer.  A {@link PlotChangeEvent} is sent to all registered
 * listeners.
 *
 * @param index  the index.
 * @param renderer  the renderer (<code>null</code> permitted).
 * @param notify  notify listeners?
 *
 * @see #getRenderer(int)
 */
public void setRenderer(int index, CategoryItemRenderer renderer,
                        boolean notify) {

    // stop listening to the existing renderer...
    CategoryItemRenderer existing
        = (CategoryItemRenderer) this.renderers.get(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }

    // register the new renderer...
    this.renderers.set(index, renderer);
    if (renderer != null) {
        renderer.setPlot(this);
        renderer.addChangeListener(this);
    }

    configureDomainAxes();
    configureRangeAxes();

    if (notify) {
        fireChangeEvent();
    }
}
```

### Code Snippet 2: `setDomainAxis` Method from `XYPlot.java`

```java
/**
 * Sets the domain axis for the plot and sends a {@link PlotChangeEvent}
 * to all registered listeners.
 *
 * @param axis  the new axis (<code>null</code> permitted).
 *
 * @see #getDomainAxis()
 * @see #setDomainAxis(int, ValueAxis)
 */
public void setDomainAxis(ValueAxis axis) {
    setDomainAxis(0, axis);
}

/**
 * Sets a domain axis and sends a {@link PlotChangeEvent} to all
 * registered listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis (<code>null</code> permitted).
 *
 * @see #getDomainAxis(int)
 * @see #setRangeAxis(int, ValueAxis)
 */
public void setDomainAxis(int index, ValueAxis axis) {
    setDomainAxis(index, axis, true);
}

/**
 * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis.
 * @param notify  notify listeners?
 *
 * @see #getDomainAxis(int)
 */
public void setDomainAxis(int index, ValueAxis axis, boolean notify) {
    ValueAxis existing = getDomainAxis(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }
    if (axis != null) {
        axis.setPlot(this);
    }
    this.domainAxes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    if (notify) {
        fireChangeEvent();
    }
}
```

### Clone Type:
The two code snippets represent **Type-3 Clones**. They are mostly similar but contain some different statements, such as the specific logic for handling `CategoryItemRenderer` in `setRenderer` and `ValueAxis` in `setDomainAxis`.","### 1. Extracted Method (To be placed in the common superclass `Plot`)

```java
protected void setAxis(ObjectList axes, int index, Axis axis, boolean notify, Plot plot, Runnable fireChangeEvent) {
    Axis existing = (Axis) axes.get(index);
    if (existing != null) {
        existing.removeChangeListener(plot);
    }
    if (axis != null) {
        axis.setPlot(plot);
    }
    axes.set(index, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(plot);
    }
    if (notify) {
        fireChangeEvent.run();
    }
}
```

---

### 2. Refactored Code in `CategoryPlot.java`

```java
/**
 * Sets the renderer at the specified index and sends a
 * {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the index.
 * @param renderer  the renderer (<code>null</code> permitted).
 *
 * @see #getRenderer(int)
 * @see #setRenderer(int, CategoryItemRenderer, boolean)
 */
public void setRenderer(int index, CategoryItemRenderer renderer, boolean notify) {
    setAxis(this.renderers, index, renderer, notify, this, this::fireChangeEvent);
    if (renderer != null) {
        renderer.setPlot(this);
    }
    configureDomainAxes();
    configureRangeAxes();
}
```

---

### 3. Refactored Code in `XYPlot.java`

```java
/**
 * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param index  the axis index.
 * @param axis  the axis.
 * @param notify  notify listeners?
 *
 * @see #getDomainAxis(int)
 */
public void setDomainAxis(int index, ValueAxis axis, boolean notify) {
    setAxis(this.domainAxes, index, axis, notify, this, this::fireChangeEvent);
}
```",Type-3
425-1-3,src,org.jfree.chart.plot,CategoryPlot,setRenderer,1383,1404,src,org.jfree.chart.plot,XYPlot,setRangeAxis,1094,1108,Type 3,"### Code Snippet 1: `setRenderer` method in `CategoryPlot.java`

```java
/**
 * Sets a renderer.  A {@link PlotChangeEvent} is sent to all registered
 * listeners.
 *
 * @param index  the index.
 * @param renderer  the renderer (<code>null</code> permitted).
 * @param notify  notify listeners?
 *
 * @see #getRenderer(int)
 */
public void setRenderer(int index, CategoryItemRenderer renderer,
                        boolean notify) {

    // stop listening to the existing renderer...
    CategoryItemRenderer existing
        = (CategoryItemRenderer) this.renderers.get(index);
    if (existing != null) {
        existing.removeChangeListener(this);
    }

    // register the new renderer...
    this.renderers.set(index, renderer);
    if (renderer != null) {
        renderer.setPlot(this);
        renderer.addChangeListener(this);
    }

    configureDomainAxes();
    configureRangeAxes();

    if (notify) {
        fireChangeEvent();
    }
}
```

---

### Code Snippet 2: `setRangeAxis` method in `XYPlot.java`

```java
/**
 * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to
 * all registered listeners.
 *
 * @param axis  the axis (<code>null</code> permitted).
 *
 * @see #getRangeAxis()
 * @see #setRangeAxis(int, ValueAxis)
 */
public void setRangeAxis(ValueAxis axis)  {

    if (axis != null) {
        axis.setPlot(this);
    }

    // plot is likely registered as a listener with the existing axis...
    ValueAxis existing = getRangeAxis();
    if (existing != null) {
        existing.removeChangeListener(this);
    }

    this.rangeAxes.set(0, axis);
    if (axis != null) {
        axis.configure();
        axis.addChangeListener(this);
    }
    fireChangeEvent();

}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass `Plot`)

```java
/**
 * Sets an axis or renderer for the plot and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param index  the index.
 * @param newObject  the new axis or renderer (<code>null</code> permitted).
 * @param existingObject  the existing axis or renderer (<code>null</code> permitted).
 * @param objectList  the list where the new object will be set.
 * @param configureCallback  a callback to configure the new object.
 * @param notify  notify listeners?
 */
protected <T> void setObject(int index, T newObject, T existingObject, ObjectList objectList, Runnable configureCallback, boolean notify) {
    if (existingObject != null && existingObject instanceof RendererChangeListener) {
        ((RendererChangeListener) existingObject).removeChangeListener(this);
    }

    if (newObject != null && newObject instanceof RendererChangeListener) {
        ((RendererChangeListener) newObject).addChangeListener(this);
    }

    objectList.set(index, newObject);

    if (configureCallback != null) {
        configureCallback.run();
    }

    if (notify) {
        fireChangeEvent();
    }
}
```

---

### 2. Refactored `setRenderer` in `CategoryPlot.java`

```java
/**
 * Sets a renderer. A {@link PlotChangeEvent} is sent to all registered listeners.
 *
 * @param index  the index.
 * @param renderer  the renderer (<code>null</code> permitted).
 * @param notify  notify listeners?
 *
 * @see #getRenderer(int)
 */
public void setRenderer(int index, CategoryItemRenderer renderer, boolean notify) {
    CategoryItemRenderer existing = (CategoryItemRenderer) this.renderers.get(index);
    setObject(index, renderer, existing, this.renderers, () -> {
        if (renderer != null) {
            renderer.setPlot(this);
        }
        configureDomainAxes();
        configureRangeAxes();
    }, notify);
}
```

---

### 3. Refactored `setRangeAxis` in `XYPlot.java`

```java
/**
 * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to all registered listeners.
 *
 * @param axis  the axis (<code>null</code> permitted).
 *
 * @see #getRangeAxis()
 * @see #setRangeAxis(int, ValueAxis)
 */
public void setRangeAxis(ValueAxis axis) {
    ValueAxis existing = getRangeAxis();
    setObject(0, axis, existing, this.rangeAxes, () -> {
        if (axis != null) {
            axis.setPlot(this);
            axis.configure();
        }
    }, true);
}
```",Type-3
426-1-2,src,org.jfree.chart.editor,DefaultNumberAxisEditor,actionPerformed,208,227,src,org.jfree.chart.editor,DefaultPlotEditor,actionPerformed,447,468,Type 3,"### Code Snippet 1 (DefaultNumberAxisEditor.java, actionPerformed method, lines 208-227):
```java
public void actionPerformed(ActionEvent event) {
    String command = event.getActionCommand();
    if (command.equals(""GridStroke"")) {
        attemptGridStrokeSelection();
    }
    else if (command.equals(""GridPaint"")) {
        attemptGridPaintSelection();
    }
    else if (command.equals(""AutoRangeOnOff"")) {
        toggleAutoRange();
    }
    else if (command.equals(""MinimumRange"")) {
        validateMinimum();
    }
    else if (command.equals(""MaximumRange"")) {
        validateMaximum();
    }
    else {
        // pass to the super-class for handling
        super.actionPerformed(event);
    }
}
```

---

### Code Snippet 2 (DefaultPlotEditor.java, actionPerformed method, lines 447-468):
```java
public void actionPerformed(ActionEvent event) {
    String command = event.getActionCommand();
    if (command.equals(""BackgroundPaint"")) {
        attemptBackgroundPaintSelection();
    }
    else if (command.equals(""OutlineStroke"")) {
        attemptOutlineStrokeSelection();
    }
    else if (command.equals(""OutlinePaint"")) {
        attemptOutlinePaintSelection();
    }
    else if (command.equals(""Orientation"")) {
        attemptOrientationSelection();
    }
    else if (command.equals(""DrawLines"")) {
        attemptDrawLinesSelection();
    }
    else if (command.equals(""DrawShapes"")) {
        attemptDrawShapesSelection();
    }
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different commands and method calls).","### 1. Extracted Method (To be placed in the superclass `DefaultAxisEditor`):
```java
protected void handleActionEvent(ActionEvent event, String[] commands, Runnable[] actions) {
    String command = event.getActionCommand();
    for (int i = 0; i < commands.length; i++) {
        if (command.equals(commands[i])) {
            actions[i].run();
            return;
        }
    }
}
```

---

### 2. Refactored Code in `DefaultNumberAxisEditor.java`:
```java
public void actionPerformed(ActionEvent event) {
    String[] commands = {
        ""GridStroke"", ""GridPaint"", ""AutoRangeOnOff"", ""MinimumRange"", ""MaximumRange""
    };
    Runnable[] actions = {
        this::attemptGridStrokeSelection,
        this::attemptGridPaintSelection,
        this::toggleAutoRange,
        this::validateMinimum,
        this::validateMaximum
    };
    handleActionEvent(event, commands, actions);
}
```

---

### 3. Refactored Code in `DefaultPlotEditor.java`:
```java
public void actionPerformed(ActionEvent event) {
    String[] commands = {
        ""BackgroundPaint"", ""OutlineStroke"", ""OutlinePaint"", ""Orientation"", ""DrawLines"", ""DrawShapes""
    };
    Runnable[] actions = {
        this::attemptBackgroundPaintSelection,
        this::attemptOutlineStrokeSelection,
        this::attemptOutlinePaintSelection,
        this::attemptOrientationSelection,
        this::attemptDrawLinesSelection,
        this::attemptDrawShapesSelection
    };
    handleActionEvent(event, commands, actions);
}
```",Type-3
453-1-2,src,org.jfree.chart.axis,MonthDateFormat,equals,229,249,src,org.jfree.chart.axis,SymbolAxis,equals,768,789,Type 3,"### Code Snippet 1 (from `MonthDateFormat` class, lines 229-249):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MonthDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    MonthDateFormat that = (MonthDateFormat) obj;
    if (!Arrays.equals(this.months, that.months)) {
        return false;
    }
    if (!Arrays.equals(this.showYear, that.showYear)) {
        return false;
    }
    if (!this.yearFormatter.equals(that.yearFormatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `SymbolAxis` class, lines 768-789):
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SymbolAxis)) {
        return false;
    }
    SymbolAxis that = (SymbolAxis) obj;
    if (!this.symbols.equals(that.symbols)) {
        return false;
    }
    if (this.gridBandsVisible != that.gridBandsVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandAlternatePaint, 
            that.gridBandAlternatePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific fields being compared (`months`, `showYear`, `yearFormatter` in `MonthDateFormat` vs. `symbols`, `gridBandsVisible`, `gridBandPaint`, `gridBandAlternatePaint` in `SymbolAxis`) and the use of `Arrays.equals` vs. `PaintUtilities.equal`.","### 1. Extracted Method (to be placed in the common superclass, e.g., `Axis` or `BaseClass`):
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object to compare.
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        Object field = fields[i];
        Object otherField = otherFields[i];
        if (field instanceof boolean) {
            if ((boolean) field != (boolean) otherField) {
                return false;
            }
        } else if (field instanceof Object[]) {
            if (!Arrays.equals((Object[]) field, (Object[]) otherField)) {
                return false;
            }
        } else if (field != null && !field.equals(otherField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MonthDateFormat`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MonthDateFormat.class, super.equals(obj), 
        this.months, this.showYear, this.yearFormatter, 
        new Object[] {((MonthDateFormat) obj).months, 
                      ((MonthDateFormat) obj).showYear, 
                      ((MonthDateFormat) obj).yearFormatter});
}
```

---

### 3. Refactored `equals` Method in `SymbolAxis`:
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SymbolAxis.class, super.equals(obj), 
        this.symbols, this.gridBandsVisible, this.gridBandPaint, this.gridBandAlternatePaint, 
        new Object[] {((SymbolAxis) obj).symbols, 
                      ((SymbolAxis) obj).gridBandsVisible, 
                      ((SymbolAxis) obj).gridBandPaint, 
                      ((SymbolAxis) obj).gridBandAlternatePaint});
}
```",Type-3
453-1-3,src,org.jfree.chart.axis,MonthDateFormat,equals,229,249,src,org.jfree.chart.axis,Tick,equals,142,162,Type 3,"### Code Snippet 1: `equals` method from `MonthDateFormat` class (lines 229-249)
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MonthDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    MonthDateFormat that = (MonthDateFormat) obj;
    if (!Arrays.equals(this.months, that.months)) {
        return false;
    }
    if (!Arrays.equals(this.showYear, that.showYear)) {
        return false;
    }
    if (!this.yearFormatter.equals(that.yearFormatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `Tick` class (lines 142-162)
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the use of `Arrays.equals` in the first snippet and `ObjectUtilities.equal` in the second snippet, as well as differences in the fields being compared (`months`, `showYear`, `yearFormatter` vs. `text`, `textAnchor`, `rotationAnchor`, `angle`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `org.jfree.chart.axis.AxisUtilities` or a new utility class)
```java
protected boolean areObjectsEqual(Object obj, Object[] fields, Object[] otherFields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || this.getClass() != obj.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!java.util.Objects.equals(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MonthDateFormat` Class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(obj, 
        new Object[] {this.months, this.showYear, this.yearFormatter, super.equals(obj)},
        new Object[] {((MonthDateFormat) obj).months, ((MonthDateFormat) obj).showYear, ((MonthDateFormat) obj).yearFormatter, super.equals(obj)});
}
```

---

### 3. Refactored `equals` Method in `Tick` Class
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(obj, 
        new Object[] {this.text, this.textAnchor, this.rotationAnchor, this.angle},
        new Object[] {((Tick) obj).text, ((Tick) obj).textAnchor, ((Tick) obj).rotationAnchor, ((Tick) obj).angle});
}
```",Type-3
453-1-4,src,org.jfree.chart.axis,MonthDateFormat,equals,229,249,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,Type 3,"### Code Snippet 1: `equals` method from `MonthDateFormat` class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MonthDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    MonthDateFormat that = (MonthDateFormat) obj;
    if (!Arrays.equals(this.months, that.months)) {
        return false;
    }
    if (!Arrays.equals(this.showYear, that.showYear)) {
        return false;
    }
    if (!this.yearFormatter.equals(that.yearFormatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `PieSectionEntity` class
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets represent **Type-3 clones**. They are mostly similar in structure and logic but differ in specific statements, such as the use of `Arrays.equals` in the first snippet versus `ObjectUtilities.equal` in the second, and the specific fields being compared (`months`, `showYear`, `yearFormatter` vs. `dataset`, `pieIndex`, `sectionIndex`, `sectionKey`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality by checking their fields.
 * 
 * @param obj  the object to compare.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] fieldPair : fields) {
        Object field1 = fieldPair[0];
        Object field2 = fieldPair[1];
        if (field1 instanceof int[]) {
            if (!Arrays.equals((int[]) field1, (int[]) field2)) {
                return false;
            }
        } else if (field1 instanceof boolean[]) {
            if (!Arrays.equals((boolean[]) field1, (boolean[]) field2)) {
                return false;
            }
        } else if (field1 instanceof Object[]) {
            if (!Arrays.equals((Object[]) field1, (Object[]) field2)) {
                return false;
            }
        } else {
            if (!field1.equals(field2)) {
                return false;
            }
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MonthDateFormat` Class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        {this.months, ((MonthDateFormat) obj).months},
        {this.showYear, ((MonthDateFormat) obj).showYear},
        {this.yearFormatter, ((MonthDateFormat) obj).yearFormatter}
    }) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `PieSectionEntity` Class
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        {this.dataset, ((PieSectionEntity) obj).dataset},
        {this.pieIndex, ((PieSectionEntity) obj).pieIndex},
        {this.sectionIndex, ((PieSectionEntity) obj).sectionIndex},
        {this.sectionKey, ((PieSectionEntity) obj).sectionKey}
    }) && super.equals(obj);
}
```",Type-3
453-1-5,src,org.jfree.chart.axis,MonthDateFormat,equals,229,249,src,org.jfree.chart.plot.dial,DialCap,equals,262,282,Type 3,"### Code Snippet 1: `equals` method from `MonthDateFormat` class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MonthDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    MonthDateFormat that = (MonthDateFormat) obj;
    if (!Arrays.equals(this.months, that.months)) {
        return false;
    }
    if (!Arrays.equals(this.showYear, that.showYear)) {
        return false;
    }
    if (!this.yearFormatter.equals(that.yearFormatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `DialCap` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialCap)) {
        return false;
    }
    DialCap that = (DialCap) obj;
    if (this.radius != that.radius) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!this.outlineStroke.equals(that.outlineStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to compare.
 * @param instanceClass  the class of the instance.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `MonthDateFormat` Class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MonthDateFormat.class, (other) -> {
        MonthDateFormat that = (MonthDateFormat) other;
        return Arrays.equals(this.months, that.months)
            && Arrays.equals(this.showYear, that.showYear)
            && this.yearFormatter.equals(that.yearFormatter);
    });
}
```

---

### 3. Refactored `equals` Method in `DialCap` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DialCap.class, (other) -> {
        DialCap that = (DialCap) other;
        return this.radius == that.radius
            && PaintUtilities.equal(this.fillPaint, that.fillPaint)
            && PaintUtilities.equal(this.outlinePaint, that.outlinePaint)
            && this.outlineStroke.equals(that.outlineStroke);
    });
}
```",Type-3
453-1-6,src,org.jfree.chart.axis,MonthDateFormat,equals,229,249,src,org.jfree.chart.plot.dial,StandardDialFrame,equals,278,298,Type 3,"### Code Snippet 1: `equals` method from `MonthDateFormat` class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MonthDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    MonthDateFormat that = (MonthDateFormat) obj;
    if (!Arrays.equals(this.months, that.months)) {
        return false;
    }
    if (!Arrays.equals(this.showYear, that.showYear)) {
        return false;
    }
    if (!this.yearFormatter.equals(that.yearFormatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `StandardDialFrame` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialFrame)) {
        return false;
    }
    StandardDialFrame that = (StandardDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality based on the provided parameters.
 *
 * @param obj  the object to compare.
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param arraysToCompare  an array of object arrays to compare using Arrays.equals.
 * @param objectsToCompare  an array of objects to compare using their equals method.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, 
                               Object[][] arraysToCompare, Object[] objectsToCompare) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (Object[] arrayPair : arraysToCompare) {
        if (!Arrays.equals((Object[]) arrayPair[0], (Object[]) arrayPair[1])) {
            return false;
        }
    }
    for (Object objectPair : objectsToCompare) {
        Object[] pair = (Object[]) objectPair;
        if (!pair[0].equals(pair[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MonthDateFormat` Class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MonthDateFormat.class,
        super.equals(obj),
        new Object[][] {
            { this.months, ((MonthDateFormat) obj).months },
            { this.showYear, ((MonthDateFormat) obj).showYear }
        },
        new Object[] {
            new Object[] { this.yearFormatter, ((MonthDateFormat) obj).yearFormatter }
        }
    );
}
```

---

### 3. Refactored `equals` Method in `StandardDialFrame` Class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardDialFrame.class,
        super.equals(obj),
        new Object[0][], // No arrays to compare
        new Object[] {
            new Object[] { this.backgroundPaint, ((StandardDialFrame) obj).backgroundPaint },
            new Object[] { this.foregroundPaint, ((StandardDialFrame) obj).foregroundPaint },
            new Object[] { this.stroke, ((StandardDialFrame) obj).stroke },
            new Object[] { this.radius, ((StandardDialFrame) obj).radius }
        }
    );
}
```",Type-3
453-1-7,src,org.jfree.chart.axis,MonthDateFormat,equals,229,249,src,org.jfree.chart.renderer.category,GanttRenderer,equals,558,578,Type 3,"```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MonthDateFormat)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    MonthDateFormat that = (MonthDateFormat) obj;
    if (!Arrays.equals(this.months, that.months)) {
        return false;
    }
    if (!Arrays.equals(this.showYear, that.showYear)) {
        return false;
    }
    if (!this.yearFormatter.equals(that.yearFormatter)) {
        return false;
    }
    return true;
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GanttRenderer)) {
        return false;
    }
    GanttRenderer that = (GanttRenderer) obj;
    if (!PaintUtilities.equal(this.completePaint, that.completePaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.incompletePaint, that.incompletePaint)) {
        return false;
    }
    if (this.startPercent != that.startPercent) {
        return false;
    }
    if (this.endPercent != that.endPercent) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","1. **Extracted Method (to be placed in the superclass):**

```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to compare.
 * @param clazz the expected class type.
 * @param superEqualsResult the result of the superclass's equals method.
 * @param fieldComparisons an array of boolean results for field comparisons.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEqualsResult, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

2. **Refactored `equals` method in `MonthDateFormat`:**

```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MonthDateFormat.class,
        super.equals(obj),
        Arrays.equals(this.months, ((MonthDateFormat) obj).months),
        Arrays.equals(this.showYear, ((MonthDateFormat) obj).showYear),
        this.yearFormatter.equals(((MonthDateFormat) obj).yearFormatter)
    );
}
```

3. **Refactored `equals` method in `GanttRenderer`:**

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        GanttRenderer.class,
        super.equals(obj),
        PaintUtilities.equal(this.completePaint, ((GanttRenderer) obj).completePaint),
        PaintUtilities.equal(this.incompletePaint, ((GanttRenderer) obj).incompletePaint),
        this.startPercent == ((GanttRenderer) obj).startPercent,
        this.endPercent == ((GanttRenderer) obj).endPercent
    );
}
```",Type-3
453-2-3,src,org.jfree.chart.axis,SymbolAxis,equals,768,789,src,org.jfree.chart.axis,Tick,equals,142,162,Type 3,"### Code Snippet 1: `equals` method in `SymbolAxis` class (lines 768-789)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SymbolAxis)) {
        return false;
    }
    SymbolAxis that = (SymbolAxis) obj;
    if (!this.symbols.equals(that.symbols)) {
        return false;
    }
    if (this.gridBandsVisible != that.gridBandsVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandAlternatePaint, 
            that.gridBandAlternatePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `Tick` class (lines 142-162)
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different fields (`symbols`, `gridBandsVisible`, `gridBandPaint`, etc., in `SymbolAxis` vs. `text`, `textAnchor`, `rotationAnchor`, etc., in `Tick`) and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `Axis` or another appropriate superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[] fields, Object[] otherFields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `SymbolAxis` Class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[] { this.symbols, this.gridBandsVisible, this.gridBandPaint, this.gridBandAlternatePaint },
        new Object[] { ((SymbolAxis) obj).symbols, ((SymbolAxis) obj).gridBandsVisible, ((SymbolAxis) obj).gridBandPaint, ((SymbolAxis) obj).gridBandAlternatePaint }
    ) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `Tick` Class
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[] { this.text, this.textAnchor, this.rotationAnchor, this.angle },
        new Object[] { ((Tick) obj).text, ((Tick) obj).textAnchor, ((Tick) obj).rotationAnchor, ((Tick) obj).angle }
    );
}
```",Type-3
453-2-4,src,org.jfree.chart.axis,SymbolAxis,equals,768,789,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,Type 3,"### Code Snippet 1: `equals` method from `SymbolAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SymbolAxis)) {
        return false;
    }
    SymbolAxis that = (SymbolAxis) obj;
    if (!this.symbols.equals(that.symbols)) {
        return false;
    }
    if (this.gridBandsVisible != that.gridBandsVisible) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandPaint, that.gridBandPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.gridBandAlternatePaint, 
            that.gridBandAlternatePaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `PieSectionEntity` class
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different fields (`symbols`, `gridBandsVisible`, `gridBandPaint`, etc., in `SymbolAxis` vs. `dataset`, `pieIndex`, `sectionIndex`, etc., in `PieSectionEntity`) and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `ChartEntity`)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `SymbolAxis`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SymbolAxis.class,
        this.symbols.equals(((SymbolAxis) obj).symbols),
        this.gridBandsVisible == ((SymbolAxis) obj).gridBandsVisible,
        PaintUtilities.equal(this.gridBandPaint, ((SymbolAxis) obj).gridBandPaint),
        PaintUtilities.equal(this.gridBandAlternatePaint, ((SymbolAxis) obj).gridBandAlternatePaint)
    );
}
```

---

### 3. Refactored `equals` Method in `PieSectionEntity`
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        PieSectionEntity.class,
        ObjectUtilities.equal(this.dataset, ((PieSectionEntity) obj).dataset),
        this.pieIndex == ((PieSectionEntity) obj).pieIndex,
        this.sectionIndex == ((PieSectionEntity) obj).sectionIndex,
        ObjectUtilities.equal(this.sectionKey, ((PieSectionEntity) obj).sectionKey)
    );
}
```",Type-3
453-3-4,src,org.jfree.chart.axis,Tick,equals,142,162,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,Type 3,"### Code Snippet 1 (from `Tick.java`):

```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

---

### Code Snippet 2 (from `PieSectionEntity.java`):

```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific logic).","### 1. Extracted Method (to be placed in the superclass, e.g., `ObjectUtilities` or a new utility class):

```java
/**
 * Compares two objects for equality based on the provided fields.
 * 
 * @param obj1  the first object.
 * @param obj2  the second object.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected static boolean areFieldsEqual(Object obj1, Object obj2, Object... fields) {
    if (obj1 == obj2) {
        return true;
    }
    if (obj2 == null || obj1.getClass() != obj2.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i += 2) {
        if (!ObjectUtilities.equal(fields[i], fields[i + 1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Tick.java`:

```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof Tick)) {
        return false;
    }
    Tick t = (Tick) obj;
    return areFieldsEqual(this, obj, 
        this.text, t.text, 
        this.textAnchor, t.textAnchor, 
        this.rotationAnchor, t.rotationAnchor, 
        this.angle, t.angle);
}
```

---

### 3. Refactored `equals` Method in `PieSectionEntity.java`:

```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    return areFieldsEqual(this, obj, 
        this.dataset, that.dataset, 
        this.pieIndex, that.pieIndex, 
        this.sectionIndex, that.sectionIndex, 
        this.sectionKey, that.sectionKey) && super.equals(obj);
}
```",Type-3
453-3-5,src,org.jfree.chart.axis,Tick,equals,142,162,src,org.jfree.chart.plot.dial,DialCap,equals,262,282,Type 3,"### Code Snippet 1 (from `Tick` class, lines 142-162):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (from `DialCap` class, lines 262-282):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialCap)) {
        return false;
    }
    DialCap that = (DialCap) obj;
    if (this.radius != that.radius) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!this.outlineStroke.equals(that.outlineStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`Tick` and `DialCap`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param properties  the properties to compare.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... properties) {
    if (this == obj) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] otherProperties = ((Object[]) instanceClass.cast(obj));
    for (int i = 0; i < properties.length; i++) {
        if (!ObjectUtilities.equal(properties[i], otherProperties[i])) {
            return false;
        }
    }
    return true;
}
```

",Type-3
453-3-6,src,org.jfree.chart.axis,Tick,equals,142,162,src,org.jfree.chart.plot.dial,StandardDialFrame,equals,278,298,Type 3,"### Code Snippet 1 (Tick.java, `equals` method, lines 142-162):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof Tick) {
        Tick t = (Tick) obj;   
        if (!ObjectUtilities.equal(this.text, t.text)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.textAnchor, t.textAnchor)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.rotationAnchor, t.rotationAnchor)) {
            return false;   
        }
        if (!(this.angle == t.angle)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (StandardDialFrame.java, `equals` method, lines 278-298):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialFrame)) {
        return false;
    }
    StandardDialFrame that = (StandardDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`Tick` and `StandardDialFrame`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects based on provided attributes.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param attributes  the attributes to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Object[][] attributes) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (Object[] attributePair : attributes) {
        Object thisAttribute = attributePair[0];
        Object otherAttribute = attributePair[1];
        if (thisAttribute instanceof Double && otherAttribute instanceof Double) {
            if (!((Double) thisAttribute).equals((Double) otherAttribute)) {
                return false;
            }
        } else if (thisAttribute != null && !thisAttribute.equals(otherAttribute)) {
            return false;
        } else if (thisAttribute == null && otherAttribute != null) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Tick.java`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.text, ((Tick) obj).text },
        { this.textAnchor, ((Tick) obj).textAnchor },
        { this.rotationAnchor, ((Tick) obj).rotationAnchor },
        { this.angle, ((Tick) obj).angle }
    });
}
```

---

### 3. Refactored `equals` Method in `StandardDialFrame.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, new Object[][] {
        { this.backgroundPaint, ((StandardDialFrame) obj).backgroundPaint },
        { this.foregroundPaint, ((StandardDialFrame) obj).foregroundPaint },
        { this.radius, ((StandardDialFrame) obj).radius },
        { this.stroke, ((StandardDialFrame) obj).stroke }
    }) && super.equals(obj);
}
```",Type-3
453-4-5,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.chart.plot.dial,DialCap,equals,262,282,Type 3,"```java
// Code Snippet 1: PieSectionEntity.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

```java
// Code Snippet 2: DialCap.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialCap)) {
        return false;
    }
    DialCap that = (DialCap) obj;
    if (this.radius != that.radius) {
        return false;
    }
    if (!PaintUtilities.equal(this.fillPaint, that.fillPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {
        return false;
    }
    if (!this.outlineStroke.equals(that.outlineStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractEntity or a new utility class)
protected boolean entityEquals(Object obj, Object dataset, Object sectionKey, int pieIndex, int sectionIndex, double radius, Object fillPaint, Object outlinePaint, Object outlineStroke) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof PieSectionEntity) {
        PieSectionEntity that = (PieSectionEntity) obj;
        if (!ObjectUtilities.equal(dataset, that.dataset)) {
            return false;
        }
        if (pieIndex != that.pieIndex) {
            return false;
        }
        if (sectionIndex != that.sectionIndex) {
            return false;
        }
        if (!ObjectUtilities.equal(sectionKey, that.sectionKey)) {
            return false;
        }
    } else if (obj instanceof DialCap) {
        DialCap that = (DialCap) obj;
        if (radius != that.radius) {
            return false;
        }
        if (!PaintUtilities.equal(fillPaint, that.fillPaint)) {
            return false;
        }
        if (!PaintUtilities.equal(outlinePaint, that.outlinePaint)) {
            return false;
        }
        if (!outlineStroke.equals(that.outlineStroke)) {
            return false;
        }
    } else {
        return false;
    }
    return super.equals(obj);
}
```

```java
// 2. Updated PieSectionEntity.equals() method
@Override
public boolean equals(Object obj) {
    return entityEquals(obj, this.dataset, this.sectionKey, this.pieIndex, this.sectionIndex, 0.0, null, null, null);
}
```

```java
// 3. Updated DialCap.equals() method
@Override
public boolean equals(Object obj) {
    return entityEquals(obj, null, null, 0, 0, this.radius, this.fillPaint, this.outlinePaint, this.outlineStroke);
}
```",Type-3
453-4-6,src,org.jfree.chart.entity,PieSectionEntity,equals,207,227,src,org.jfree.chart.plot.dial,StandardDialFrame,equals,278,298,Type 3,"### Code Snippet 1: `equals` method in `PieSectionEntity` class
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PieSectionEntity)) {
        return false;
    }
    PieSectionEntity that = (PieSectionEntity) obj;
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    if (this.pieIndex != that.pieIndex) {
        return false;
    }
    if (this.sectionIndex != that.sectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(this.sectionKey, that.sectionKey)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `StandardDialFrame` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardDialFrame)) {
        return false;
    }
    StandardDialFrame that = (StandardDialFrame) obj;
    if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(this.foregroundPaint, that.foregroundPaint)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    if (!this.stroke.equals(that.stroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`PieSectionEntity` and `StandardDialFrame`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `ChartEntity`):
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param dataset  the dataset of this instance.
 * @param otherDataset  the dataset of the other instance.
 * @param pieIndex  the pie index of this instance.
 * @param otherPieIndex  the pie index of the other instance.
 * @param sectionIndex  the section index of this instance.
 * @param otherSectionIndex  the section index of the other instance.
 * @param sectionKey  the section key of this instance.
 * @param otherSectionKey  the section key of the other instance.
 * @param backgroundPaint  the background paint of this instance.
 * @param otherBackgroundPaint  the background paint of the other instance.
 * @param foregroundPaint  the foreground paint of this instance.
 * @param otherForegroundPaint  the foreground paint of the other instance.
 * @param radius  the radius of this instance.
 * @param otherRadius  the radius of the other instance.
 * @param stroke  the stroke of this instance.
 * @param otherStroke  the stroke of the other instance.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Object dataset, Object otherDataset, 
        int pieIndex, int otherPieIndex, int sectionIndex, int otherSectionIndex, 
        Comparable sectionKey, Comparable otherSectionKey, 
        Paint backgroundPaint, Paint otherBackgroundPaint, 
        Paint foregroundPaint, Paint otherForegroundPaint, 
        double radius, double otherRadius, 
        Stroke stroke, Stroke otherStroke) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ChartEntity)) {
        return false;
    }
    if (!ObjectUtilities.equal(dataset, otherDataset)) {
        return false;
    }
    if (pieIndex != otherPieIndex) {
        return false;
    }
    if (sectionIndex != otherSectionIndex) {
        return false;
    }
    if (!ObjectUtilities.equal(sectionKey, otherSectionKey)) {
        return false;
    }
    if (!PaintUtilities.equal(backgroundPaint, otherBackgroundPaint)) {
        return false;
    }
    if (!PaintUtilities.equal(foregroundPaint, otherForegroundPaint)) {
        return false;
    }
    if (radius != otherRadius) {
        return false;
    }
    if (stroke != null ? !stroke.equals(otherStroke) : otherStroke != null) {
        return false;
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `PieSectionEntity`:
```java
/**
 * Tests this entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.dataset, ((PieSectionEntity) obj).dataset, 
            this.pieIndex, ((PieSectionEntity) obj).pieIndex, 
            this.sectionIndex, ((PieSectionEntity) obj).sectionIndex, 
            this.sectionKey, ((PieSectionEntity) obj).sectionKey, 
            null, null, null, null, 
            0.0, 0.0, null, null);
}
```

---

### 3. Refactored `equals` Method in `StandardDialFrame`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, null, null, 
            0, 0, 0, 0, 
            null, null, 
            this.backgroundPaint, ((StandardDialFrame) obj).backgroundPaint, 
            this.foregroundPaint, ((StandardDialFrame) obj).foregroundPaint, 
            this.radius, ((StandardDialFrame) obj).radius, 
            this.stroke, ((StandardDialFrame) obj).stroke);
}
```",Type-3
474-2-6,src,org.jfree.chart.axis,CategoryTick,equals,119,136,src,org.jfree.chart.urls,StandardXYURLGenerator,equals,155,174,Type 3,"### Code Snippet 1 (CategoryTick.java, lines 119-136)
```java
/**
 * Tests this category tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof CategoryTick && super.equals(obj)) {
        CategoryTick that = (CategoryTick) obj;   
        if (!ObjectUtilities.equal(this.category, that.category)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.label, that.label)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.labelAnchor, that.labelAnchor)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (StandardXYURLGenerator.java, lines 155-174)
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StandardXYURLGenerator)) {
        return false;
    }
    StandardXYURLGenerator that = (StandardXYURLGenerator) obj;
    if (!ObjectUtilities.equal(that.prefix, this.prefix)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.seriesParameterName, 
            this.seriesParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.itemParameterName, 
            this.itemParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class-specific fields (`category`, `label`, `labelAnchor` vs. `prefix`, `seriesParameterName`, `itemParameterName`) and the class type checks (`CategoryTick` vs. `StandardXYURLGenerator`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        if (!ObjectUtilities.equal(fields[i], fields[i + 1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `CategoryTick.java`
```java
/**
 * Tests this category tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryTick.class, 
        this.category, ((CategoryTick) obj).category,
        this.label, ((CategoryTick) obj).label,
        this.labelAnchor, ((CategoryTick) obj).labelAnchor);
}
```

---

#### In `StandardXYURLGenerator.java`
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardXYURLGenerator.class, 
        this.prefix, ((StandardXYURLGenerator) obj).prefix,
        this.seriesParameterName, ((StandardXYURLGenerator) obj).seriesParameterName,
        this.itemParameterName, ((StandardXYURLGenerator) obj).itemParameterName);
}
```",Type-3
475-1-2,src,org.jfree.chart.annotations,CategoryTextAnnotation,equals,228,248,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,Type 3,"### Code Snippet 1 (CategoryTextAnnotation.java, lines 228-248)
```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryTextAnnotation)) {
        return false;
    }
    CategoryTextAnnotation that = (CategoryTextAnnotation) obj;
    if (!super.equals(obj)) {
        return false;
    }
    if (!this.category.equals(that.getCategory())) {
        return false;
    }
    if (!this.categoryAnchor.equals(that.getCategoryAnchor())) {
        return false;
    }
    if (this.value != that.getValue()) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (ItemLabelPosition.java, lines 171-191)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`category`, `categoryAnchor`, `value` vs. `itemLabelAnchor`, `textAnchor`, `rotationAnchor`, `angle`) and the class types being checked (`CategoryTextAnnotation` vs. `ItemLabelPosition`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double) {
            if (Double.compare((Double) thisField, (Double) thatField) != 0) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `CategoryTextAnnotation.java`
```java
/**
 * Tests this object for equality with another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryTextAnnotation.class,
        super.equals(obj), super.equals(obj),
        this.category, ((CategoryTextAnnotation) obj).getCategory(),
        this.categoryAnchor, ((CategoryTextAnnotation) obj).getCategoryAnchor(),
        this.value, ((CategoryTextAnnotation) obj).getValue()
    );
}
```

---

#### In `ItemLabelPosition.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ItemLabelPosition.class,
        this.itemLabelAnchor, ((ItemLabelPosition) obj).getItemLabelAnchor(),
        this.textAnchor, ((ItemLabelPosition) obj).getTextAnchor(),
        this.rotationAnchor, ((ItemLabelPosition) obj).getRotationAnchor(),
        this.angle, ((ItemLabelPosition) obj).getAngle()
    );
}
```",Type-3
478-1-6,src,org.jfree.chart,ChartRenderingInfo,equals,190,207,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,Type 3,"### Code Snippet 1: `equals` method in `ChartRenderingInfo` class (lines 190-207)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartRenderingInfo)) {
        return false;
    }
    ChartRenderingInfo that = (ChartRenderingInfo) obj;
    if (!ObjectUtilities.equal(this.chartArea, that.chartArea)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.plotInfo, that.plotInfo)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.entities, that.entities)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method in `LegendItemEntity` class (lines 173-190)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the fields being compared (`chartArea`, `plotInfo`, `entities` vs. `seriesKey`, `seriesIndex`, `dataset`) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass, e.g., `ObjectUtilities` or a new utility class)
```java
/**
 * Tests two objects for equality by comparing their fields.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instance  the current instance.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
public static boolean areEqual(Object obj, Object instance, Object... fields) {
    if (obj == instance) {
        return true;
    }
    if (obj == null || !instance.getClass().isInstance(obj)) {
        return false;
    }
    Object[] otherFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        otherFields[i] = fields[i] instanceof FieldExtractor
                ? ((FieldExtractor) fields[i]).extract(obj)
                : fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (!Objects.equals(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```",Type-3
478-1-9,src,org.jfree.chart,ChartRenderingInfo,equals,190,207,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"```java
// Code Snippet 1: ChartRenderingInfo.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartRenderingInfo)) {
        return false;
    }
    ChartRenderingInfo that = (ChartRenderingInfo) obj;
    if (!ObjectUtilities.equal(this.chartArea, that.chartArea)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.plotInfo, that.plotInfo)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.entities, that.entities)) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: MinMaxCategoryRenderer.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractRenderer or a new utility class)
protected boolean areObjectsEqual(Object obj, Object instance, Class<?> clazz, Object... fields) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored ChartRenderingInfo.equals() method
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj, 
        this, 
        ChartRenderingInfo.class, 
        this.chartArea, ((ChartRenderingInfo) obj).chartArea, 
        this.plotInfo, ((ChartRenderingInfo) obj).plotInfo, 
        this.entities, ((ChartRenderingInfo) obj).entities
    );
}
```

```java
// 3. Refactored MinMaxCategoryRenderer.equals() method
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj, 
        this, 
        MinMaxCategoryRenderer.class, 
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines, 
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint, 
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke
    ) && super.equals(obj);
}
```",Type-3
478-2-6,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,Type 3,"### Code Snippet 1 (ExtendedCategoryAxis.java, lines 199-216)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (LegendItemEntity.java, lines 173-190)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific fields being compared (`sublabelFont`, `sublabelPaint`, `sublabels` vs. `seriesKey`, `seriesIndex`, `dataset`) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

### 2. Refactored Method Calls

#### In `ExtendedCategoryAxis.java`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class, 
        this.sublabelFont, this.sublabelPaint, this.sublabels, 
        new Object[] { that.sublabelFont, that.sublabelPaint, that.sublabels });
}
```

#### In `LegendItemEntity.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LegendItemEntity.class, 
        this.seriesKey, this.seriesIndex, this.dataset, 
        new Object[] { that.seriesKey, that.seriesIndex, that.dataset });
}
```",Type-3
478-2-9,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1: `equals` method from `ExtendedCategoryAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `MinMaxCategoryRenderer` class
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields being compared (`sublabelFont`, `sublabelPaint`, `sublabels` in `ExtendedCategoryAxis` vs. `plotLines`, `groupPaint`, `groupStroke` in `MinMaxCategoryRenderer`).","### 1. Extracted Method (to be placed in the superclass, e.g., `AbstractCategoryItemRenderer` or a new common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Paint) {
            if (!PaintUtilities.equal((Paint) thisField, (Paint) thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `ExtendedCategoryAxis`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class,
        this.sublabelFont, ((ExtendedCategoryAxis) obj).sublabelFont,
        this.sublabelPaint, ((ExtendedCategoryAxis) obj).sublabelPaint,
        this.sublabels, ((ExtendedCategoryAxis) obj).sublabels
    );
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class,
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke
    );
}
```",Type-3
478-2-11,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.urls,StandardXYURLGenerator,equals,155,174,Type 3,"### Code Snippet 1 (Method `equals` in `ExtendedCategoryAxis` class):
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (Method `equals` in `StandardXYURLGenerator` class):
```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StandardXYURLGenerator)) {
        return false;
    }
    StandardXYURLGenerator that = (StandardXYURLGenerator) obj;
    if (!ObjectUtilities.equal(that.prefix, this.prefix)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.seriesParameterName, 
            this.seriesParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.itemParameterName, 
            this.itemParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different class types (`ExtendedCategoryAxis` vs. `StandardXYURLGenerator`), different fields (`sublabelFont`, `sublabelPaint`, `sublabels` vs. `prefix`, `seriesParameterName`, `itemParameterName`), and different utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two objects for equality by comparing their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        otherFields[i] = fields[i] instanceof FieldExtractor
                ? ((FieldExtractor) fields[i]).extract(obj)
                : fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (!Objects.equals(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Method Calls (Replacing Clones in Original Files):
",Type-3
478-4-6,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,Type 3,"### Code Snippet 1 (from `LineBorder` class, `equals` method, lines 189-206):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `LegendItemEntity` class, `equals` method, lines 173-190):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`paint`, `stroke`, `insets` vs. `seriesKey`, `seriesIndex`, `dataset`) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass, e.g., `ObjectUtilities`):
```java
/**
 * Tests two objects for equality by comparing their fields.
 * 
 * @param obj  the object to test for equality.
 * @param instance  the current instance.
 * @param clazz  the expected class type.
 * @param fieldComparisons  an array of field comparison results.
 * 
 * @return A boolean indicating equality.
 */
public static boolean equalsHelper(Object obj, Object instance, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LineBorder`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return ObjectUtilities.equalsHelper(
        obj,
        this,
        LineBorder.class,
        PaintUtilities.equal(this.paint, ((LineBorder) obj).paint),
        ObjectUtilities.equal(this.stroke, ((LineBorder) obj).stroke),
        this.insets.equals(((LineBorder) obj).insets)
    );
}
```

---

### 3. Refactored `equals` Method in `LegendItemEntity`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return ObjectUtilities.equalsHelper(
        obj,
        this,
        LegendItemEntity.class,
        ObjectUtilities.equal(this.seriesKey, ((LegendItemEntity) obj).seriesKey),
        this.seriesIndex == ((LegendItemEntity) obj).seriesIndex,
        ObjectUtilities.equal(this.dataset, ((LegendItemEntity) obj).dataset),
        super.equals(obj)
    );
}
```",Type-3
478-4-9,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (LineBorder.java, `equals` method, lines 189-206):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (MinMaxCategoryRenderer.java, `equals` method, lines 434-451):
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different fields (`paint`, `stroke`, `insets` vs. `plotLines`, `groupPaint`, `groupStroke`) and the inclusion of a call to `super.equals(obj)` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on the provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance type.
 * @param paint1  the first paint object.
 * @param paint2  the second paint object.
 * @param stroke1  the first stroke object.
 * @param stroke2  the second stroke object.
 * @param insets1  the first insets object (can be null if not applicable).
 * @param insets2  the second insets object (can be null if not applicable).
 * @param additionalCheck  an additional boolean check for equality.
 * @param superEquals  a boolean indicating whether to call super.equals(obj).
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Paint paint1, Paint paint2, 
                          Stroke stroke1, Stroke stroke2, 
                          RectangleInsets insets1, RectangleInsets insets2, 
                          boolean additionalCheck, boolean superEquals) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!PaintUtilities.equal(paint1, paint2)) {
        return false;
    }
    if (!ObjectUtilities.equal(stroke1, stroke2)) {
        return false;
    }
    if (insets1 != null && insets2 != null && !insets1.equals(insets2)) {
        return false;
    }
    if (additionalCheck) {
        return false;
    }
    if (superEquals) {
        return super.equals(obj);
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LineBorder.java`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LineBorder.class, this.paint, ((LineBorder) obj).paint, 
                   this.stroke, ((LineBorder) obj).stroke, 
                   this.insets, ((LineBorder) obj).insets, 
                   false, false);
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return isEqual(obj, MinMaxCategoryRenderer.class, this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint, 
                   this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke, 
                   null, null, 
                   this.plotLines != ((MinMaxCategoryRenderer) obj).plotLines, true);
}
```",Type-3
478-4-11,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.urls,StandardXYURLGenerator,equals,155,174,Type 3,"### Code Snippet 1 (LineBorder.java, equals method):

```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (StandardXYURLGenerator.java, equals method):

```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StandardXYURLGenerator)) {
        return false;
    }
    StandardXYURLGenerator that = (StandardXYURLGenerator) obj;
    if (!ObjectUtilities.equal(that.prefix, this.prefix)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.seriesParameterName, 
            this.seriesParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.itemParameterName, 
            this.itemParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and utility methods).","### 1. Extracted Method (To be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areFieldsEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be overridden in subclasses to extract the required fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Updated `equals` Method in `LineBorder.java`:

```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areFieldsEqual(obj, LineBorder.class, this.paint, this.stroke, this.insets);
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    LineBorder that = (LineBorder) obj;
    return new Object[] { that.paint, that.stroke, that.insets };
}
```

---

### 3. Updated `equals` Method in `StandardXYURLGenerator.java`:

```java
/**
 * Tests this generator for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return areFieldsEqual(obj, StandardXYURLGenerator.class, this.prefix, this.seriesParameterName, this.itemParameterName);
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    StandardXYURLGenerator that = (StandardXYURLGenerator) obj;
    return new Object[] { that.prefix, that.seriesParameterName, that.itemParameterName };
}
```",Type-3
478-5-6,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,Type 3,"### Code Snippet 1: `equals` method in `ChartEntity` class (lines 369-386)
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method in `LegendItemEntity` class (lines 173-190)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**.  
- They are **mostly similar** but include **different statements** (e.g., `this.area`, `this.toolTipText`, `this.urlText` in `ChartEntity` vs. `this.seriesKey`, `this.seriesIndex`, `this.dataset` in `LegendItemEntity`).  
- The structure and logic are similar, but the specific fields and class types differ.","### 1. Extracted Method (to be placed in the superclass `ChartEntity`)
```java
/**
 * Tests two objects for equality based on provided fields.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((ChartEntity) clazz.cast(obj)).getFieldsForEquality();
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Returns an array of fields to be used for equality comparison.
 * Subclasses should override this method to provide their specific fields.
 * 
 * @return An array of fields for equality comparison.
 */
protected Object[] getFieldsForEquality() {
    return new Object[] { this.area, this.toolTipText, this.urlText };
}
```

---

### 2. Refactored `equals` Method in `ChartEntity`
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, ChartEntity.class, this.area, this.toolTipText, this.urlText);
}
```

---

### 3. Refactored `equals` Method in `LegendItemEntity`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, LegendItemEntity.class, this.seriesKey, this.seriesIndex, this.dataset);
}

/**
 * Returns an array of fields to be used for equality comparison.
 * 
 * @return An array of fields for equality comparison.
 */
@Override
protected Object[] getFieldsForEquality() {
    return new Object[] { this.seriesKey, this.seriesIndex, this.dataset };
}
```",Type-3
478-5-9,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1: `equals` method from `ChartEntity` class (lines 369-386)
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `MinMaxCategoryRenderer` class (lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**.  
- **Reason**: The methods are mostly similar in structure and logic but differ in the specific fields and utility methods being compared (`area`, `toolTipText`, `urlText` in `ChartEntity` vs. `plotLines`, `groupPaint`, `groupStroke` in `MinMaxCategoryRenderer`). Additionally, the second snippet calls `super.equals(obj)` at the end, which is absent in the first snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on the provided fields and utility methods.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class to check the instance type.
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    // Implementation to extract fields dynamically (e.g., via reflection).
    return null; // Placeholder for actual implementation.
}
```

### 2. Method Calls Replacing Clones in Original Files

#### In `ChartEntity` class:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ChartEntity.class, this.area, this.toolTipText, this.urlText);
}
```

#### In `MinMaxCategoryRenderer` class:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class, this.plotLines, this.groupPaint, this.groupStroke);
}
```",Type-3
478-6-7,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,Type 3,"### Code Snippet 1: `LegendItemEntity.equals` Method
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `AbstractCategoryItemLabelGenerator.equals` Method
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }
    
    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param classType  the class type to check against.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> classType, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    Object that = classType.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `LegendItemEntity.equals` Method
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LegendItemEntity.class, 
        this.seriesKey, ((LegendItemEntity) obj).seriesKey,
        this.seriesIndex, ((LegendItemEntity) obj).seriesIndex,
        this.dataset, ((LegendItemEntity) obj).dataset,
        this, obj);
}
```

---

### 3. Refactored `AbstractCategoryItemLabelGenerator.equals` Method
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, AbstractCategoryItemLabelGenerator.class, 
        this.labelFormat, ((AbstractCategoryItemLabelGenerator) obj).labelFormat,
        this.dateFormat, ((AbstractCategoryItemLabelGenerator) obj).dateFormat,
        this.numberFormat, ((AbstractCategoryItemLabelGenerator) obj).numberFormat);
}
```",Type-3
478-6-8,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,src,org.jfree.chart.plot,PlotRenderingInfo,equals,217,234,Type 3,"### Code Snippet 1: `equals` method from `LegendItemEntity` class
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `PlotRenderingInfo` class
```java
/**
 * Tests this instance for equality against an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (!(obj instanceof PlotRenderingInfo)) {
        return false;
    }
    PlotRenderingInfo that = (PlotRenderingInfo) obj;
    if (!ObjectUtilities.equal(this.dataArea, that.dataArea)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.plotArea, that.plotArea)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.subplotInfo, that.subplotInfo)) {
        return false;   
    }
    return true;   
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the fields being compared and the class types).","### 1. Extracted Method (to be placed in the common superclass, e.g., `ObjectUtilities` or a new utility class)
```java
/**
 * Compares two objects for equality by checking their fields.
 * 
 * @param obj1  the first object.
 * @param obj2  the second object.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected static boolean areFieldsEqual(Object obj1, Object obj2, Object... fields) {
    if (obj1 == obj2) {
        return true;
    }
    if (obj1 == null || obj2 == null || obj1.getClass() != obj2.getClass()) {
        return false;
    }
    for (int i = 0; i < fields.length; i += 2) {
        if (!ObjectUtilities.equal(fields[i], fields[i + 1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LegendItemEntity`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    return areFieldsEqual(this, that, 
        this.seriesKey, that.seriesKey, 
        this.seriesIndex, that.seriesIndex, 
        this.dataset, that.dataset
    ) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `PlotRenderingInfo`
```java
/**
 * Tests this instance for equality against an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!(obj instanceof PlotRenderingInfo)) {
        return false;
    }
    PlotRenderingInfo that = (PlotRenderingInfo) obj;
    return areFieldsEqual(this, that, 
        this.dataArea, that.dataArea, 
        this.plotArea, that.plotArea, 
        this.subplotInfo, that.subplotInfo
    );
}
```",Type-3
478-6-10,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,src,org.jfree.chart.urls,StandardCategoryURLGenerator,equals,175,195,Type 3,"### Code Snippet 1: `LegendItemEntity.equals` Method
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `StandardCategoryURLGenerator.equals` Method
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardCategoryURLGenerator)) {
        return false;
    }
    StandardCategoryURLGenerator that = (StandardCategoryURLGenerator) obj;
    if (!ObjectUtilities.equal(this.prefix, that.prefix)) {
        return false;
    }

    if (!ObjectUtilities.equal(this.seriesParameterName,
            that.seriesParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.categoryParameterName,
            that.categoryParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`seriesKey`, `seriesIndex`, `dataset` in the first snippet vs. `prefix`, `seriesParameterName`, `categoryParameterName` in the second snippet) and the class types being checked (`LegendItemEntity` vs. `StandardCategoryURLGenerator`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on their fields.
 *
 * @param obj  the object to compare with (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `LegendItemEntity.equals` Method
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LegendItemEntity.class, 
        this.seriesKey, this.seriesIndex, this.dataset, 
        new Object[] { ((LegendItemEntity) obj).seriesKey, 
                       ((LegendItemEntity) obj).seriesIndex, 
                       ((LegendItemEntity) obj).dataset });
}
```

---

### 3. Refactored `StandardCategoryURLGenerator.equals` Method
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardCategoryURLGenerator.class, 
        this.prefix, this.seriesParameterName, this.categoryParameterName, 
        new Object[] { ((StandardCategoryURLGenerator) obj).prefix, 
                       ((StandardCategoryURLGenerator) obj).seriesParameterName, 
                       ((StandardCategoryURLGenerator) obj).categoryParameterName });
}
```",Type-3
478-7-9,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (AbstractCategoryItemLabelGenerator.java, lines 277-296)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }
    
    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., different class names, fields, and utility methods).","### 1. Extracted Method (To be placed in the common superclass `AbstractCategoryItemLabelGenerator`)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param format  the format string to compare.
 * @param dateFormat  the date format to compare.
 * @param numberFormat  the number format to compare.
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, String format, 
                          Object dateFormat, Object numberFormat, 
                          EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!format.equals(((AbstractCategoryItemLabelGenerator) obj).labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(dateFormat, 
            ((AbstractCategoryItemLabelGenerator) obj).dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(numberFormat, 
            ((AbstractCategoryItemLabelGenerator) obj).numberFormat)) {
        return false;
    }
    return additionalChecks.check(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored Method Calls

#### In `AbstractCategoryItemLabelGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, AbstractCategoryItemLabelGenerator.class, 
                   this.labelFormat, this.dateFormat, this.numberFormat, 
                   o -> true);
}
```

---

#### In `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return isEqual(obj, MinMaxCategoryRenderer.class, """", null, null, 
                   o -> {
                       MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) o;
                       if (this.plotLines != that.plotLines) {
                           return false;
                       }
                       if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
                           return false;
                       }
                       if (!this.groupStroke.equals(that.groupStroke)) {
                           return false;
                       }
                       return super.equals(obj);
                   });
}
```",Type-3
478-8-9,src,org.jfree.chart.plot,PlotRenderingInfo,equals,217,234,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (from `PlotRenderingInfo` class, `equals` method):

```java
/**
 * Tests this instance for equality against an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (!(obj instanceof PlotRenderingInfo)) {
        return false;
    }
    PlotRenderingInfo that = (PlotRenderingInfo) obj;
    if (!ObjectUtilities.equal(this.dataArea, that.dataArea)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.plotArea, that.plotArea)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.subplotInfo, that.subplotInfo)) {
        return false;   
    }
    return true;   
}
```

---

### Code Snippet 2 (from `MinMaxCategoryRenderer` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on the provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `PlotRenderingInfo`:

```java
/**
 * Tests this instance for equality against an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, PlotRenderingInfo.class, 
        this.dataArea, ((PlotRenderingInfo) obj).dataArea,
        this.plotArea, ((PlotRenderingInfo) obj).plotArea,
        this.subplotInfo, ((PlotRenderingInfo) obj).subplotInfo);
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer`:

```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return isEqual(obj, MinMaxCategoryRenderer.class, 
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke)
        && super.equals(obj);
}
```",Type-3
478-9-10,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.urls,StandardCategoryURLGenerator,equals,175,195,Type 3,"### Code Snippet 1: `equals` method from `MinMaxCategoryRenderer` class
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `StandardCategoryURLGenerator` class
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardCategoryURLGenerator)) {
        return false;
    }
    StandardCategoryURLGenerator that = (StandardCategoryURLGenerator) obj;
    if (!ObjectUtilities.equal(this.prefix, that.prefix)) {
        return false;
    }

    if (!ObjectUtilities.equal(this.seriesParameterName,
            that.seriesParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.categoryParameterName,
            that.categoryParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`plotLines`, `groupPaint`, `groupStroke` in the first snippet and `prefix`, `seriesParameterName`, `categoryParameterName` in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `MinMaxCategoryRenderer`
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class,
            this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
            this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
            this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke,
            super.equals(obj), true);
}
```

---

### 3. Refactored `equals` Method in `StandardCategoryURLGenerator`
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardCategoryURLGenerator.class,
            this.prefix, ((StandardCategoryURLGenerator) obj).prefix,
            this.seriesParameterName, ((StandardCategoryURLGenerator) obj).seriesParameterName,
            this.categoryParameterName, ((StandardCategoryURLGenerator) obj).categoryParameterName);
}
```",Type-3
478-9-11,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.urls,StandardXYURLGenerator,equals,155,174,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (StandardXYURLGenerator.java, lines 155-174)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StandardXYURLGenerator)) {
        return false;
    }
    StandardXYURLGenerator that = (StandardXYURLGenerator) obj;
    if (!ObjectUtilities.equal(that.prefix, this.prefix)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.seriesParameterName, 
            this.seriesParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(that.itemParameterName, 
            this.itemParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class type checks, field comparisons, and utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `MinMaxCategoryRenderer.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MinMaxCategoryRenderer.class,
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke) 
        && super.equals(obj);
}
```

---

### 3. Refactored Method in `StandardXYURLGenerator.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, StandardXYURLGenerator.class,
        this.prefix, ((StandardXYURLGenerator) obj).prefix,
        this.seriesParameterName, ((StandardXYURLGenerator) obj).seriesParameterName,
        this.itemParameterName, ((StandardXYURLGenerator) obj).itemParameterName);
}
```",Type-3
518-1-9,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"```java
// Code snippet from ExtendedCategoryAxis.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

```java
// Code snippet from BarRenderer3D.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// Extracted method to be placed in the common superclass
protected boolean equalsHelper(Object obj, Object that, Object sublabelFont, Object sublabelPaint, Object sublabels) {
    if (obj == this) {
        return true;
    }
    if (!this.getClass().isInstance(that)) {
        return false;
    }
    if (!sublabelFont.equals(((ExtendedCategoryAxis) that).sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(sublabelPaint, ((ExtendedCategoryAxis) that).sublabelPaint)) {
        return false;
    }
    if (!sublabels.equals(((ExtendedCategoryAxis) that).sublabels)) {
        return false;
    }
    return super.equals(obj);
}

//Method Call",Type-3
518-1-10,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"### Code Snippet 1: `equals` method from `ExtendedCategoryAxis` (lines 199-216)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `LineRenderer3D` (lines 615-632)
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific checks).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Checks for equality between two objects based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (fields[i] != null && !fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `ExtendedCategoryAxis`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class, 
        this.sublabelFont, this.sublabelPaint, this.sublabels, 
        new Object[] { ((ExtendedCategoryAxis) obj).sublabelFont, 
                       ((ExtendedCategoryAxis) obj).sublabelPaint, 
                       ((ExtendedCategoryAxis) obj).sublabels });
}
```

---

### 3. Refactored `equals` Method in `LineRenderer3D`
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LineRenderer3D.class, 
        this.xOffset, this.yOffset, this.wallPaint, 
        new Object[] { ((LineRenderer3D) obj).xOffset, 
                       ((LineRenderer3D) obj).yOffset, 
                       ((LineRenderer3D) obj).wallPaint });
}
```",Type-3
518-1-11,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1: `equals` method from `ExtendedCategoryAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `MinMaxCategoryRenderer` class
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`sublabelFont`, `sublabelPaint`, `sublabels` in the first snippet vs. `plotLines`, `groupPaint`, `groupStroke` in the second snippet) and the class types being checked (`ExtendedCategoryAxis` vs. `MinMaxCategoryRenderer`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Paint) {
            if (!PaintUtilities.equal((Paint) thisField, (Paint) thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `ExtendedCategoryAxis`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class, 
        this.sublabelFont, ((ExtendedCategoryAxis) obj).sublabelFont,
        this.sublabelPaint, ((ExtendedCategoryAxis) obj).sublabelPaint,
        this.sublabels, ((ExtendedCategoryAxis) obj).sublabels);
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer`
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class, 
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke);
}
```",Type-3
518-1-12,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1: `equals` method from `ExtendedCategoryAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `XYDotRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific attributes being compared (`sublabelFont`, `sublabelPaint`, `sublabels` in the first snippet vs. `dotWidth`, `dotHeight`, `legendShape` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing specific attributes.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param attributes  the attributes to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatAttributes = ((Object[]) attributes[attributes.length - 1]);
    for (int i = 0; i < attributes.length - 1; i++) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = thatAttributes[i];
        if (thisAttribute instanceof Integer) {
            if (!thisAttribute.equals(thatAttribute)) {
                return false;
            }
        } else if (!thisAttribute.equals(thatAttribute)) {
            return false;
        }
    }
    return super.equals(obj);
}
```

### 2. Refactored `equals` Method in `ExtendedCategoryAxis`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class,
        this.sublabelFont, this.sublabelPaint, this.sublabelFont);
}
```

### Refactored",Type-3
518-1-13,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1 (ExtendedCategoryAxis.java, lines 199-216)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYLine3DRenderer.java, lines 237-254)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific checks).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method Calls

#### In `ExtendedCategoryAxis.java`
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class, (other) -> {
        ExtendedCategoryAxis that = (ExtendedCategoryAxis) other;
        if (!this.sublabelFont.equals(that.sublabelFont)) {
            return false;
        }
        if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
            return false;
        }
        if (!this.sublabels.equals(that.sublabels)) {
            return false;
        }
        return super.equals(obj);
    });
}
```

---

#### In `XYLine3DRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYLine3DRenderer.class, (other) -> {
        XYLine3DRenderer that = (XYLine3DRenderer) other;
        if (this.xOffset != that.xOffset) {
            return false;
        }
        if (this.yOffset != that.yOffset) {
            return false;
        }
        if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
            return false;
        }
        return super.equals(obj);
    });
}
```",Type-3
518-2-9,src,org.jfree.chart.axis,SubCategoryAxis,equals,400,417,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"### Code Snippet 1 (SubCategoryAxis.java, lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SubCategoryAxis && super.equals(obj)) {
        SubCategoryAxis axis = (SubCategoryAxis) obj;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    }
    return false;        
}
```

---

### Code Snippet 2 (BarRenderer3D.java, lines 726-743)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain different statements and logic specific to their respective classes (`SubCategoryAxis` and `BarRenderer3D`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param superEqualsResult  the result of calling super.equals(obj).
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj) || !superEqualsResult) {
        return false;
    }
    Object[] otherFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        otherFields[i] = fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) otherFields[i]) != 0) {
                return false;
            }
        } else if (fields[i] != null && !fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### SubCategoryAxis.java
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SubCategoryAxis.class,
        super.equals(obj),
        this.subCategories,
        this.subLabelFont,
        this.subLabelPaint
    );
}
```

---

#### BarRenderer3D.java
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        BarRenderer3D.class,
        super.equals(obj),
        this.xOffset,
        this.yOffset,
        this.wallPaint
    );
}
```",Type-3
518-2-10,src,org.jfree.chart.axis,SubCategoryAxis,equals,400,417,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"### Code Snippet 1 (SubCategoryAxis.java, lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SubCategoryAxis && super.equals(obj)) {
        SubCategoryAxis axis = (SubCategoryAxis) obj;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    }
    return false;        
}
```

### Code Snippet 2 (LineRenderer3D.java, lines 615-632)
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`SubCategoryAxis` and `LineRenderer3D`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Checks for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param superEqualsResult  the result of calling super.equals(obj).
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean checkEquality(Object obj, Class<?> instanceClass, boolean superEqualsResult, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj) || !superEqualsResult) {
        return false;
    }
    return additionalChecks.check((instanceClass.cast(obj)));
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker<T> {
    boolean check(T other);
}
```

---

### 2. Refactored Method in `SubCategoryAxis.java`
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return checkEquality(obj, SubCategoryAxis.class, super.equals(obj), other -> 
        this.subCategories.equals(other.subCategories) &&
        this.subLabelFont.equals(other.subLabelFont) &&
        this.subLabelPaint.equals(other.subLabelPaint)
    );
}
```

---

### 3. Refactored Method in `LineRenderer3D.java`
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return checkEquality(obj, LineRenderer3D.class, super.equals(obj), other -> 
        this.xOffset == other.xOffset &&
        this.yOffset == other.yOffset &&
        PaintUtilities.equal(this.wallPaint, other.wallPaint)
    );
}
```",Type-3
518-2-11,src,org.jfree.chart.axis,SubCategoryAxis,equals,400,417,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (SubCategoryAxis.java, lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SubCategoryAxis && super.equals(obj)) {
        SubCategoryAxis axis = (SubCategoryAxis) obj;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    }
    return false;        
}
```

### Code Snippet 2 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method in `SubCategoryAxis.java`
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SubCategoryAxis.class, (other) -> {
        SubCategoryAxis axis = (SubCategoryAxis) other;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;
        }
        return true;
    });
}
```

---

### 3. Refactored Method in `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class, (other) -> {
        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) other;
        if (this.plotLines != that.plotLines) {
            return false;
        }
        if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
            return false;
        }
        if (!this.groupStroke.equals(that.groupStroke)) {
            return false;
        }
        return true;
    });
}
```",Type-3
518-2-12,src,org.jfree.chart.axis,SubCategoryAxis,equals,400,417,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1 (SubCategoryAxis.java, lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SubCategoryAxis && super.equals(obj)) {
        SubCategoryAxis axis = (SubCategoryAxis) obj;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    }
    return false;        
}
```

### Code Snippet 2 (XYDotRenderer.java, lines 332-349)
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`SubCategoryAxis` and `XYDotRenderer`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param superEqualsResult  the result of calling super.equals(obj).
 * @param attributes  the attributes to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj) || !superEqualsResult) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = attributes[i + 1];
        if (thisAttribute instanceof Integer) {
            if (!thisAttribute.equals(thatAttribute)) {
                return false;
            }
        } else if (thisAttribute instanceof Paint || thisAttribute instanceof Shape) {
            if (!thisAttribute.equals(thatAttribute)) {
                return false;
            }
        } else if (!thisAttribute.equals(thatAttribute)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `SubCategoryAxis.java`
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SubCategoryAxis.class,
        super.equals(obj),
        this.subCategories, ((SubCategoryAxis) obj).subCategories,
        this.subLabelFont, ((SubCategoryAxis) obj).subLabelFont,
        this.subLabelPaint, ((SubCategoryAxis) obj).subLabelPaint
    );
}
```

---

### 3. Refactored Method in `XYDotRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYDotRenderer.class,
        super.equals(obj),
        this.dotWidth, ((XYDotRenderer) obj).dotWidth,
        this.dotHeight, ((XYDotRenderer) obj).dotHeight,
        this.legendShape, ((XYDotRenderer) obj).legendShape
    );
}
```",Type-3
518-2-13,src,org.jfree.chart.axis,SubCategoryAxis,equals,400,417,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1 (SubCategoryAxis.java, lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SubCategoryAxis && super.equals(obj)) {
        SubCategoryAxis axis = (SubCategoryAxis) obj;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    }
    return false;        
}
```

### Code Snippet 2 (XYLine3DRenderer.java, lines 237-254)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj) || !superEqualsResult) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method Calls

#### SubCategoryAxis.java
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SubCategoryAxis.class, super.equals(obj), (other) -> {
        SubCategoryAxis axis = (SubCategoryAxis) other;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    });
}
```

---

#### XYLine3DRenderer.java
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYLine3DRenderer.class, super.equals(obj), (other) -> {
        XYLine3DRenderer that = (XYLine3DRenderer) other;
        if (this.xOffset != that.xOffset) {
            return false;
        }
        if (this.yOffset != that.yOffset) {
            return false;
        }
        if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
            return false;
        }
        return true;
    });
}
```",Type-3
518-4-9,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","1. **Extracted Method (to be placed in the common superclass):**

```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param paint  the paint to compare.
 * @param stroke  the stroke to compare (can be null).
 * @param insets  the insets to compare (can be null).
 * @param wallPaint  the wall paint to compare (can be null).
 * @param xOffset  the x-offset to compare (for 3D objects, can be 0).
 * @param yOffset  the y-offset to compare (for 3D objects, can be 0).
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Paint paint, Stroke stroke, 
                          RectangleInsets insets, Paint wallPaint, double xOffset, double yOffset) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!PaintUtilities.equal(paint, ((LineBorder) obj).paint)) {
        return false;
    }
    if (stroke != null && !ObjectUtilities.equal(stroke, ((LineBorder) obj).stroke)) {
        return false;
    }
    if (insets != null && !insets.equals(((LineBorder) obj).insets)) {
        return false;
    }
    if (wallPaint != null && !PaintUtilities.equal(wallPaint, ((BarRenderer3D) obj).wallPaint)) {
        return false;
    }
    if (xOffset != 0 && xOffset != ((BarRenderer3D) obj).xOffset) {
        return false;
    }
    if (yOffset != 0 && yOffset != ((BarRenderer3D) obj).yOffset) {
        return false;
    }
    return true;
}
```

2. **Refactored `equals` method in `LineBorder`:**

```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, LineBorder.class, this.paint, this.stroke, this.insets, null, 0, 0);
}
```

3. **Refactored `equals` method in `BarRenderer3D`:**

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, BarRenderer3D.class, null, null, null, this.wallPaint, this.xOffset, this.yOffset) 
           && super.equals(obj);
}
```",Type-3
518-4-10,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"### Code Snippet 1 (LineBorder.java, equals method, lines 189-206):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (LineRenderer3D.java, equals method, lines 615-632):
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of different fields (`xOffset`, `yOffset`, `wallPaint` in `LineRenderer3D` vs. `paint`, `stroke`, `insets` in `LineBorder`) and the use of `super.equals(obj)` in `LineRenderer3D`.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Checks for equality between two objects based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For simplicity, assume reflection or other
    // mechanisms are used to extract the fields in the correct order.
    return new Object[fieldCount];
}
```

### 2. Refactored `equals` Method in `LineBorder.java`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LineBorder.class, this.paint, this.stroke, this.insets);
}
```

### 3. Refactored `equals` Method in `LineRenderer3D.java`:
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LineRenderer3D.class, this.xOffset, this.yOffset, this.wallPaint);
}
```",Type-3
518-4-11,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (LineBorder.java, `equals` method, lines 189-206):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (MinMaxCategoryRenderer.java, `equals` method, lines 434-451):
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different fields (`paint`, `stroke`, `insets` vs. `plotLines`, `groupPaint`, `groupStroke`) and the invocation of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects by comparing specific fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param paint  the paint field of this instance.
 * @param otherPaint  the paint field of the other instance.
 * @param stroke  the stroke field of this instance.
 * @param otherStroke  the stroke field of the other instance.
 * @param insets  the insets field of this instance (can be null if not applicable).
 * @param otherInsets  the insets field of the other instance (can be null if not applicable).
 * @param additionalCheck  a boolean result of any additional equality checks (e.g., super.equals()).
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Paint paint, Paint otherPaint, 
                          Stroke stroke, Stroke otherStroke, 
                          RectangleInsets insets, RectangleInsets otherInsets, 
                          boolean additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!PaintUtilities.equal(paint, otherPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(stroke, otherStroke)) {
        return false;
    }
    if (insets != null && otherInsets != null && !insets.equals(otherInsets)) {
        return false;
    }
    return additionalCheck;
}
```

---

### 2. Refactored `equals` Method in `LineBorder.java`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LineBorder.class, this.paint, ((LineBorder) obj).paint, 
                   this.stroke, ((LineBorder) obj).stroke, 
                   this.insets, ((LineBorder) obj).insets, true);
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return isEqual(obj, MinMaxCategoryRenderer.class, this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint, 
                   this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke, 
                   null, null, super.equals(obj) && this.plotLines == ((MinMaxCategoryRenderer) obj).plotLines);
}
```",Type-3
518-4-12,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1 (LineBorder.java, `equals` method, lines 189-206):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYDotRenderer.java, `equals` method, lines 332-349):
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific attributes being compared (`paint`, `stroke`, `insets` in `LineBorder` vs. `dotWidth`, `dotHeight`, `legendShape` in `XYDotRenderer`) and the use of different utility methods (`PaintUtilities.equal`, `ObjectUtilities.equal`, `ShapeUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractEqualityChecker`):
```java
/**
 * Compares two objects for equality based on their attributes.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param attributes  the attributes to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = attributes[i + 1];
        if (thisAttribute instanceof Comparable) {
            if (!thisAttribute.equals(thatAttribute)) {
                return false;
            }
        } else if (!thisAttribute.equals(thatAttribute)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LineBorder.java`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LineBorder.class, 
        this.paint, ((LineBorder) obj).paint,
        this.stroke, ((LineBorder) obj).stroke,
        this.insets, ((LineBorder) obj).insets
    );
}
```

---

### 3. Refactored `equals` Method in `XYDotRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYDotRenderer.class, 
        this.dotWidth, ((XYDotRenderer) obj).dotWidth,
        this.dotHeight, ((XYDotRenderer) obj).dotHeight,
        this.legendShape, ((XYDotRenderer) obj).legendShape
    ) && super.equals(obj);
}
```",Type-3
518-4-13,src,org.jfree.chart.block,LineBorder,equals,189,206,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1 (LineBorder.java, `equals` method, lines 189-206):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LineBorder)) {
        return false;   
    }
    LineBorder that = (LineBorder) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.stroke, that.stroke)) {
        return false;
    }
    if (!this.insets.equals(that.insets)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (XYLine3DRenderer.java, `equals` method, lines 237-254):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the comparison of different fields (`paint`, `stroke`, `insets` in the first snippet vs. `xOffset`, `yOffset`, `wallPaint` in the second snippet) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects by comparing specified fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) otherFields[i]) != 0) {
                return false;
            }
        } else if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the specified fields from the given object.
 * 
 * @param obj  the object.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For simplicity, assume it is implemented.
    return new Object[fieldCount];
}
```

---

### 2. Refactored `equals` Method in `LineBorder.java`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LineBorder.class, this.paint, this.stroke, this.insets);
}
```

---

### 3. Refactored `equals` Method in `XYLine3DRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYLine3DRenderer.class, this.xOffset, this.yOffset, this.wallPaint) 
           && super.equals(obj);
}
```",Type-3
518-5-9,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"### Code Snippet 1: `equals` method from `ChartEntity` class (lines 369-386)
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `BarRenderer3D` class (lines 726-743)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the comparison of different fields (`area`, `toolTipText`, `urlText` in `ChartEntity` vs. `xOffset`, `yOffset`, `wallPaint` in `BarRenderer3D`) and the use of different utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ChartEntity` Class
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ChartEntity.class, 
        this.area, ((ChartEntity) obj).area,
        this.toolTipText, ((ChartEntity) obj).toolTipText,
        this.urlText, ((ChartEntity) obj).urlText);
}
```

---

### 3. Refactored `equals` Method in `BarRenderer3D` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, BarRenderer3D.class, 
        this.xOffset, ((BarRenderer3D) obj).xOffset,
        this.yOffset, ((BarRenderer3D) obj).yOffset,
        this.wallPaint, ((BarRenderer3D) obj).wallPaint) 
        && super.equals(obj);
}
```",Type-3
518-5-10,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"### Code Snippet 1 (from `ChartEntity` class, `equals` method, lines 369-386):
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2 (from `LineRenderer3D` class, `equals` method, lines 615-632):
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements and logic specific to their respective classes (`ChartEntity` and `LineRenderer3D`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Checks for equality between two objects based on provided parameters.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 instanceof Double && field2 instanceof Double) {
            if (Double.compare((Double) field1, (Double) field2) != 0) {
                return false;
            }
        } else if (field1 != null ? !field1.equals(field2) : field2 != null) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ChartEntity`:
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ChartEntity.class, 
        this.area, ((ChartEntity) obj).area,
        this.toolTipText, ((ChartEntity) obj).toolTipText,
        this.urlText, ((ChartEntity) obj).urlText);
}
```

---

### 3. Refactored `equals` Method in `LineRenderer3D`:
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LineRenderer3D.class, 
        this.xOffset, ((LineRenderer3D) obj).xOffset,
        this.yOffset, ((LineRenderer3D) obj).yOffset,
        this.wallPaint, ((LineRenderer3D) obj).wallPaint) 
        && super.equals(obj);
}
```",Type-3
518-5-11,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1: `equals` method from `ChartEntity` class (lines 369-386)
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `MinMaxCategoryRenderer` class (lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** and logic specific to their respective classes (`ChartEntity` and `MinMaxCategoryRenderer`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on the provided parameters.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    Object[] fieldValues = new Object[fieldCount];
    // Logic to extract fields from the object (to be implemented based on the class structure)
    return fieldValues;
}
```

---

### 2. Refactored `equals` Method in `ChartEntity` Class
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, ChartEntity.class, this.area, this.toolTipText, this.urlText);
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer` Class
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MinMaxCategoryRenderer.class, this.plotLines, this.groupPaint, this.groupStroke);
}
```",Type-3
518-5-12,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1: `equals` method from `ChartEntity` class (lines 369-386)
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `XYDotRenderer` class (lines 332-349)
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but contain different statements and logic specific to their respective classes (`ChartEntity` and `XYDotRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractEntityRenderer`):
```java
/**
 * Tests two objects for equality based on their attributes.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check type.
 * @param attributes  the attributes to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = attributes[i + 1];
        if (thisAttribute instanceof Integer) {
            if (!thisAttribute.equals(thatAttribute)) {
                return false;
            }
        } else if (thisAttribute instanceof Shape) {
            if (!ShapeUtilities.equal((Shape) thisAttribute, (Shape) thatAttribute)) {
                return false;
            }
        } else {
            if (!ObjectUtilities.equal(thisAttribute, thatAttribute)) {
                return false;
            }
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ChartEntity`:
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ChartEntity.class, 
        this.area, ((ChartEntity) obj).area,
        this.toolTipText, ((ChartEntity) obj).toolTipText,
        this.urlText, ((ChartEntity) obj).urlText
    );
}
```

---

### 3. Refactored `equals` Method in `XYDotRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYDotRenderer.class, 
        this.dotWidth, ((XYDotRenderer) obj).dotWidth,
        this.dotHeight, ((XYDotRenderer) obj).dotHeight,
        this.legendShape, ((XYDotRenderer) obj).legendShape
    ) && super.equals(obj);
}
```",Type-3
518-5-13,src,org.jfree.chart.entity,ChartEntity,equals,369,386,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1: `equals` method in `ChartEntity` class (lines 369-386)
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ChartEntity)) {
        return false;   
    }
    ChartEntity that = (ChartEntity) obj;
    if (!this.area.equals(that.area)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.urlText, that.urlText)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method in `XYLine3DRenderer` class (lines 237-254)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** (e.g., the fields being compared, utility methods used, and the superclass call in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided fields and utility methods.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare.
 * @param utilities  the utility methods for comparison.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object[] fields, Object[] utilities) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i++) {
        if (!utilities[i].equals(fields[i], ((Object[]) that)[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ChartEntity` Class
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ChartEntity.class, 
        new Object[] { this.area, this.toolTipText, this.urlText }, 
        new Object[] { ObjectUtilities::equal, ObjectUtilities::equal });
}
```

---

### 3. Refactored `equals` Method in `XYLine3DRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYLine3DRenderer.class, 
        new Object[] { this.xOffset, this.yOffset, this.wallPaint }, 
        new Object[] { Double::equals, Double::equals, PaintUtilities::equal });
}
```",Type-3
518-6-9,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }
    
    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

Clone Type: **Type-3 (Mostly similar but with some different statements)**","1. **Extracted Method (to be placed in the superclass):**

```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * @return An array of extracted fields.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    Object[] extractedFields = new Object[fieldCount];
    // Logic to extract fields from the object (to be implemented as needed).
    return extractedFields;
}
```

2. **Method Calls (replacing the clones in the original files):**

**In `AbstractCategoryItemLabelGenerator`:**

```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, AbstractCategoryItemLabelGenerator.class, 
        this.labelFormat, this.dateFormat, this.numberFormat);
}
```

**In `BarRenderer3D`:**

```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, BarRenderer3D.class, 
        this.xOffset, this.yOffset, this.wallPaint);
}
```",Type-3
518-6-10,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"```java
// Code Snippet 1: AbstractCategoryItemLabelGenerator.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }

    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: LineRenderer3D.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass (e.g., AbstractCategoryItemLabelGenerator)
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 instanceof Number && field2 instanceof Number) {
            if (!field1.equals(field2)) {
                return false;
            }
        } else if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored equals() method in AbstractCategoryItemLabelGenerator
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, AbstractCategoryItemLabelGenerator.class, 
        this.labelFormat, ((AbstractCategoryItemLabelGenerator) obj).labelFormat,
        this.dateFormat, ((AbstractCategoryItemLabelGenerator) obj).dateFormat,
        this.numberFormat, ((AbstractCategoryItemLabelGenerator) obj).numberFormat);
}
```

```java
// 3. Refactored equals() method in LineRenderer3D
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, LineRenderer3D.class, 
        this.xOffset, ((LineRenderer3D) obj).xOffset,
        this.yOffset, ((LineRenderer3D) obj).yOffset,
        this.wallPaint, ((LineRenderer3D) obj).wallPaint) 
        && super.equals(obj);
}
```",Type-3
518-6-11,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1: AbstractCategoryItemLabelGenerator.equals()
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }
    
    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: MinMaxCategoryRenderer.equals()
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the superclass `AbstractCategoryItemRenderer`):
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return A boolean indicating equality.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `AbstractCategoryItemLabelGenerator`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, AbstractCategoryItemLabelGenerator.class, (other) -> {
        AbstractCategoryItemLabelGenerator that = (AbstractCategoryItemLabelGenerator) other;
        return this.labelFormat.equals(that.labelFormat)
            && ObjectUtilities.equal(this.dateFormat, that.dateFormat)
            && ObjectUtilities.equal(this.numberFormat, that.numberFormat);
    });
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer`:
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MinMaxCategoryRenderer.class, (other) -> {
        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) other;
        return this.plotLines == that.plotLines
            && PaintUtilities.equal(this.groupPaint, that.groupPaint)
            && this.groupStroke.equals(that.groupStroke)
            && super.equals(obj);
    });
}
```",Type-3
518-6-12,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1 (AbstractCategoryItemLabelGenerator.java, `equals` method, lines 277-296):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }
    
    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYDotRenderer.java, `equals` method, lines 332-349):
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific attributes being compared (`labelFormat`, `dateFormat`, `numberFormat` in the first snippet vs. `dotWidth`, `dotHeight`, `legendShape` in the second snippet) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass `AbstractXYItemRenderer`):
```java
/**
 * Compares the attributes of two objects for equality.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param classType  the expected class type of the object.
 * @param attributes  the attributes to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean attributesEqual(Object obj, Class<?> classType, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    Object[] thatAttributes = ((AbstractXYItemRenderer) obj).getAttributes();
    for (int i = 0; i < attributes.length; i++) {
        if (!Objects.equals(attributes[i], thatAttributes[i])) {
            return false;
        }
    }
    return true;
}
```

",Type-3
518-6-13,src,org.jfree.chart.labels,AbstractCategoryItemLabelGenerator,equals,277,296,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1: `equals` method from `AbstractCategoryItemLabelGenerator` (lines 277-296)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {
        return false;
    }
    
    AbstractCategoryItemLabelGenerator that 
        = (AbstractCategoryItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `XYLine3DRenderer` (lines 237-254)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but contain different statements and logic specific to their respective classes (`AbstractCategoryItemLabelGenerator` and `XYLine3DRenderer`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fieldComparisons  an array of field comparison results.
 *
 * @return A boolean indicating equality.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `AbstractCategoryItemLabelGenerator`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        AbstractCategoryItemLabelGenerator.class,
        this.labelFormat.equals(((AbstractCategoryItemLabelGenerator) obj).labelFormat),
        ObjectUtilities.equal(this.dateFormat, ((AbstractCategoryItemLabelGenerator) obj).dateFormat),
        ObjectUtilities.equal(this.numberFormat, ((AbstractCategoryItemLabelGenerator) obj).numberFormat)
    );
}
```

---

### 3. Refactored `equals` Method in `XYLine3DRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        XYLine3DRenderer.class,
        this.xOffset == ((XYLine3DRenderer) obj).xOffset,
        this.yOffset == ((XYLine3DRenderer) obj).yOffset,
        PaintUtilities.equal(this.wallPaint, ((XYLine3DRenderer) obj).wallPaint),
        super.equals(obj)
    );
}
```",Type-3
518-7-9,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,equals,244,261,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"### Code Snippet 1 (BubbleXYItemLabelGenerator.java, lines 244-261)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BubbleXYItemLabelGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (BarRenderer3D.java, lines 726-743)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and utility methods).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `BubbleXYItemLabelGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, BubbleXYItemLabelGenerator.class, super.equals(obj), this.zFormat, this.zDateFormat, 
        new Object[] { ((BubbleXYItemLabelGenerator) obj).zFormat, ((BubbleXYItemLabelGenerator) obj).zDateFormat });
}
```

---

### 3. Refactored Method in `BarRenderer3D.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, BarRenderer3D.class, super.equals(obj), this.xOffset, this.yOffset, this.wallPaint, 
        new Object[] { ((BarRenderer3D) obj).xOffset, ((BarRenderer3D) obj).yOffset, ((BarRenderer3D) obj).wallPaint });
}
```",Type-3
518-7-10,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,equals,244,261,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"### Code Snippet 1 (BubbleXYItemLabelGenerator.java, lines 244-261)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BubbleXYItemLabelGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (LineRenderer3D.java, lines 615-632)
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, field comparisons, and utility methods).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Checks for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean checkEquality(Object obj, Class<?> clazz, boolean superEquals, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `BubbleXYItemLabelGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(
        obj,
        BubbleXYItemLabelGenerator.class,
        super.equals(obj),
        ObjectUtilities.equal(this.zFormat, ((BubbleXYItemLabelGenerator) obj).zFormat),
        ObjectUtilities.equal(this.zDateFormat, ((BubbleXYItemLabelGenerator) obj).zDateFormat)
    );
}
```

---

#### In `LineRenderer3D.java`
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(
        obj,
        LineRenderer3D.class,
        super.equals(obj),
        this.xOffset == ((LineRenderer3D) obj).xOffset,
        this.yOffset == ((LineRenderer3D) obj).yOffset,
        PaintUtilities.equal(this.wallPaint, ((LineRenderer3D) obj).wallPaint)
    );
}
```",Type-3
518-7-11,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,equals,244,261,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (BubbleXYItemLabelGenerator.java, lines 244-261)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BubbleXYItemLabelGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`), different fields being compared (`zFormat`, `zDateFormat` vs. `plotLines`, `groupPaint`, `groupStroke`), and different class types (`BubbleXYItemLabelGenerator` vs. `MinMaxCategoryRenderer`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method in `BubbleXYItemLabelGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, BubbleXYItemLabelGenerator.class, (other) -> {
        BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) other;
        return ObjectUtilities.equal(this.zFormat, that.zFormat)
                && ObjectUtilities.equal(this.zDateFormat, that.zDateFormat);
    });
}
```

---

### 3. Refactored Method in `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MinMaxCategoryRenderer.class, (other) -> {
        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) other;
        return this.plotLines == that.plotLines
                && PaintUtilities.equal(this.groupPaint, that.groupPaint)
                && this.groupStroke.equals(that.groupStroke);
    });
}
```",Type-3
518-7-12,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,equals,244,261,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1 (BubbleXYItemLabelGenerator.java, lines 244-261)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BubbleXYItemLabelGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYDotRenderer.java, lines 332-349)
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass `AbstractXYItemLabelGenerator`)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEquals  the result of calling super.equals(obj).
 * @param attributes  the attributes to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttr = attributes[i];
        Object thatAttr = attributes[i + 1];
        if (!ObjectUtilities.equal(thisAttr, thatAttr)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `BubbleXYItemLabelGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        BubbleXYItemLabelGenerator.class,
        super.equals(obj),
        this.zFormat, ((BubbleXYItemLabelGenerator) obj).zFormat,
        this.zDateFormat, ((BubbleXYItemLabelGenerator) obj).zDateFormat
    );
}
```

---

### 3. Refactored Method in `XYDotRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYDotRenderer.class,
        super.equals(obj),
        this.dotWidth, ((XYDotRenderer) obj).dotWidth,
        this.dotHeight, ((XYDotRenderer) obj).dotHeight,
        this.legendShape, ((XYDotRenderer) obj).legendShape
    );
}
```",Type-3
518-7-13,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,equals,244,261,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"```java
// Code Snippet 1: BubbleXYItemLabelGenerator.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BubbleXYItemLabelGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: XYLine3DRenderer.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted method to be placed in the common superclass
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Updated BubbleXYItemLabelGenerator.equals() method
public boolean equals(Object obj) {
    return baseEquals(obj, BubbleXYItemLabelGenerator.class, 
        this.zFormat, ((BubbleXYItemLabelGenerator) obj).zFormat, 
        this.zDateFormat, ((BubbleXYItemLabelGenerator) obj).zDateFormat);
}
```

```java
// 3. Updated XYLine3DRenderer.equals() method
public boolean equals(Object obj) {
    return baseEquals(obj, XYLine3DRenderer.class, 
        this.xOffset, ((XYLine3DRenderer) obj).xOffset, 
        this.yOffset, ((XYLine3DRenderer) obj).yOffset, 
        this.wallPaint, ((XYLine3DRenderer) obj).wallPaint);
}
```",Type-3
518-8-9,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,equals,239,256,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,Type 3,"```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYZToolTipGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEqualsResult, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `StandardXYZToolTipGenerator`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardXYZToolTipGenerator.class,
        super.equals(obj),
        this.zFormat, this.zDateFormat,
        new Object[] { ((StandardXYZToolTipGenerator) obj).zFormat, ((StandardXYZToolTipGenerator) obj).zDateFormat }
    );
}
```

---

### 3. Refactored `equals` Method in `BarRenderer3D`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        BarRenderer3D.class,
        super.equals(obj),
        this.xOffset, this.yOffset, this.wallPaint,
        new Object[] { ((BarRenderer3D) obj).xOffset, ((BarRenderer3D) obj).yOffset, ((BarRenderer3D) obj).wallPaint }
    );
}
```",Type-3
518-8-10,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,equals,239,256,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,Type 3,"```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYZToolTipGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","1. **Extracted Method (to be placed in the superclass):**

```java
/**
 * Checks for equality between two objects based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results for field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean checkEquality(Object obj, Class<?> clazz, boolean superEquals, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

2. **Refactored `equals` method in `StandardXYZToolTipGenerator`:**

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(
        obj,
        StandardXYZToolTipGenerator.class,
        super.equals(obj),
        ObjectUtilities.equal(this.zFormat, ((StandardXYZToolTipGenerator) obj).zFormat),
        ObjectUtilities.equal(this.zDateFormat, ((StandardXYZToolTipGenerator) obj).zDateFormat)
    );
}
```

3. **Refactored `equals` method in `LineRenderer3D`:**

```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(
        obj,
        LineRenderer3D.class,
        super.equals(obj),
        this.xOffset == ((LineRenderer3D) obj).xOffset,
        this.yOffset == ((LineRenderer3D) obj).yOffset,
        PaintUtilities.equal(this.wallPaint, ((LineRenderer3D) obj).wallPaint)
    );
}
```",Type-3
518-8-11,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,equals,239,256,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (from `StandardXYZToolTipGenerator` class, `equals` method):

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYZToolTipGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `MinMaxCategoryRenderer` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the use of different utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`), different fields being compared (`zFormat`, `zDateFormat` vs. `plotLines`, `groupPaint`, `groupStroke`), and different class types (`StandardXYZToolTipGenerator` vs. `MinMaxCategoryRenderer`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param fieldComparisons  an array of boolean results for field comparisons.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEqualsResult, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `StandardXYZToolTipGenerator`:

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardXYZToolTipGenerator.class,
        super.equals(obj),
        ObjectUtilities.equal(this.zFormat, ((StandardXYZToolTipGenerator) obj).zFormat),
        ObjectUtilities.equal(this.zDateFormat, ((StandardXYZToolTipGenerator) obj).zDateFormat)
    );
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer`:

```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MinMaxCategoryRenderer.class,
        super.equals(obj),
        this.plotLines == ((MinMaxCategoryRenderer) obj).plotLines,
        PaintUtilities.equal(this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint),
        this.groupStroke.equals(((MinMaxCategoryRenderer) obj).groupStroke)
    );
}
```",Type-3
518-8-12,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,equals,239,256,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1 (StandardXYZToolTipGenerator.java, lines 239-256)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYZToolTipGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYDotRenderer.java, lines 332-349)
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific attributes being compared (`zFormat`, `zDateFormat` vs. `dotWidth`, `dotHeight`, `legendShape`) and the utility classes used (`ObjectUtilities` vs. `ShapeUtilities`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param attributes  the attributes to compare.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEqualsResult, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    Object[] otherAttributes = (Object[]) attributes[attributes.length - 1];
    for (int i = 0; i < attributes.length - 1; i++) {
        if (!ObjectUtilities.equal(attributes[i], otherAttributes[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `StandardXYZToolTipGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardXYZToolTipGenerator.class,
        super.equals(obj),
        this.zFormat, this.zDateFormat,
        new Object[] { ((StandardXYZToolTipGenerator) obj).zFormat, ((StandardXYZToolTipGenerator) obj).zDateFormat }
    );
}
```

---

### 3. Refactored Method in `XYDotRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYDotRenderer.class,
        super.equals(obj),
        this.dotWidth, this.dotHeight, this.legendShape,
        new Object[] { ((XYDotRenderer) obj).dotWidth, ((XYDotRenderer) obj).dotHeight, ((XYDotRenderer) obj).legendShape }
    );
}
```",Type-3
518-8-13,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,equals,239,256,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1 (StandardXYZToolTipGenerator.java, lines 239-256)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYZToolTipGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYLine3DRenderer.java, lines 237-254)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the use of different fields (`zFormat`, `zDateFormat` vs. `xOffset`, `yOffset`, `wallPaint`) and utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored Method in `StandardXYZToolTipGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardXYZToolTipGenerator.class,
        super.equals(obj),
        this.zFormat, this.zDateFormat,
        new Object[] { ((StandardXYZToolTipGenerator) obj).zFormat, ((StandardXYZToolTipGenerator) obj).zDateFormat }
    );
}
```

### 3. Refactored Method in `XYLine3DRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYLine3DRenderer.class,
        super.equals(obj),
        this.xOffset, this.yOffset, this.wallPaint,
        new Object[] { ((XYLine3DRenderer) obj).xOffset, ((XYLine3DRenderer) obj).yOffset, ((XYLine3DRenderer) obj).wallPaint }
    );
}
```",Type-3
518-9-11,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1: `equals` method from `BarRenderer3D` class (lines 726-743)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `MinMaxCategoryRenderer` class (lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of different fields (`xOffset`, `yOffset`, `wallPaint` in `BarRenderer3D` vs. `plotLines`, `groupPaint`, `groupStroke` in `MinMaxCategoryRenderer`) and the class type checks (`BarRenderer3D` vs. `MinMaxCategoryRenderer`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) thatFields[i]) != 0) {
                return false;
            }
        } else if (fields[i] instanceof Paint) {
            if (!PaintUtilities.equal((Paint) fields[i], (Paint) thatFields[i])) {
                return false;
            }
        } else if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 *
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For simplicity, assume reflection or other
    // mechanisms are used to extract the fields in the correct order.
    return new Object[fieldCount];
}
```

---

### 2. Refactored `equals` Method in `BarRenderer3D` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, BarRenderer3D.class, this.xOffset, this.yOffset, this.wallPaint);
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class, this.plotLines, this.groupPaint, this.groupStroke);
}
```",Type-3
518-9-14,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"### Code Snippet 1 (from `BarRenderer3D` class, lines 726-743):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `StandardPieURLGenerator` class, lines 161-179):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, 
            that.indexParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the class-specific fields (`xOffset`, `yOffset`, `wallPaint` in `BarRenderer3D` vs. `prefix`, `categoryParameterName`, `indexParameterName` in `StandardPieURLGenerator`) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fieldComparisons  an array of field comparison results.
 *
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `BarRenderer3D`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        BarRenderer3D.class,
        this.xOffset == ((BarRenderer3D) obj).xOffset,
        this.yOffset == ((BarRenderer3D) obj).yOffset,
        PaintUtilities.equal(this.wallPaint, ((BarRenderer3D) obj).wallPaint),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `StandardPieURLGenerator`:
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(
        obj,
        StandardPieURLGenerator.class,
        this.prefix.equals(((StandardPieURLGenerator) obj).prefix),
        this.categoryParameterName.equals(((StandardPieURLGenerator) obj).categoryParameterName),
        ObjectUtilities.equal(this.indexParameterName, ((StandardPieURLGenerator) obj).indexParameterName)
    );
}
```",Type-3
518-9-15,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1: `equals` method from `BarRenderer3D` class (lines 726-743)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `DefaultBoxAndWhiskerXYDataset` class (lines 520-538)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific fields being compared (`xOffset`, `yOffset`, `wallPaint` in the first snippet vs. `seriesKey`, `dates`, `items` in the second snippet) and the use of different utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `BarRenderer3D` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    return equalsHelper(obj,
        this.xOffset == that.xOffset,
        this.yOffset == that.yOffset,
        PaintUtilities.equal(this.wallPaint, that.wallPaint),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `DefaultBoxAndWhiskerXYDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that = (DefaultBoxAndWhiskerXYDataset) obj;
    return equalsHelper(obj,
        ObjectUtilities.equal(this.seriesKey, that.seriesKey),
        this.dates.equals(that.dates),
        this.items.equals(that.items)
    );
}
```",Type-3
518-10-11,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (from `LineRenderer3D` class, `equals` method):

```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `MinMaxCategoryRenderer` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of different fields (`xOffset`, `yOffset`, `wallPaint` vs. `plotLines`, `groupPaint`, `groupStroke`) and the class types being checked (`LineRenderer3D` vs. `MinMaxCategoryRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractCategoryItemRenderer`):

```java
/**
 * Checks for equality between two objects based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fieldComparisons  an array of boolean comparisons for instance-specific fields.
 *
 * @return A boolean indicating equality.
 */
protected boolean checkEquality(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `LineRenderer3D`:

```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return checkEquality(
        obj,
        LineRenderer3D.class,
        this.xOffset == ((LineRenderer3D) obj).xOffset,
        this.yOffset == ((LineRenderer3D) obj).yOffset,
        PaintUtilities.equal(this.wallPaint, ((LineRenderer3D) obj).wallPaint)
    );
}
```

---

### 3. Refactored `equals` Method in `MinMaxCategoryRenderer`:

```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return checkEquality(
        obj,
        MinMaxCategoryRenderer.class,
        this.plotLines == ((MinMaxCategoryRenderer) obj).plotLines,
        PaintUtilities.equal(this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint),
        this.groupStroke.equals(((MinMaxCategoryRenderer) obj).groupStroke)
    );
}
```",Type-3
518-10-14,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"```java
// Code Snippet 1: LineRenderer3D.equals() method
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

```java
// Code Snippet 2: StandardPieURLGenerator.equals() method
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, 
            that.indexParameterName)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","```java
// 1. Extracted method to be placed in the common superclass
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

```java
// 2. Refactored LineRenderer3D.equals() method
public boolean equals(Object obj) {
    return equalsHelper(obj, LineRenderer3D.class, this.xOffset, this.yOffset, this.wallPaint);
}
```

```java
// 3. Refactored StandardPieURLGenerator.equals() method
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardPieURLGenerator.class, this.prefix, this.categoryParameterName, this.indexParameterName);
}
```",Type-3
518-10-15,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1: `equals` method from `LineRenderer3D` class (start line 615, end line 632)
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `DefaultBoxAndWhiskerXYDataset` class (start line 520, end line 538)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`xOffset`, `yOffset`, `wallPaint` in the first snippet vs. `seriesKey`, `dates`, `items` in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Checks for equality between two objects by comparing their fields.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean checkEquality(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LineRenderer3D` Class
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    LineRenderer3D that = (obj instanceof LineRenderer3D) ? (LineRenderer3D) obj : null;
    return checkEquality(obj, LineRenderer3D.class,
            that != null && this.xOffset == that.xOffset,
            that != null && this.yOffset == that.yOffset,
            that != null && PaintUtilities.equal(this.wallPaint, that.wallPaint),
            super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `DefaultBoxAndWhiskerXYDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    DefaultBoxAndWhiskerXYDataset that = (obj instanceof DefaultBoxAndWhiskerXYDataset) 
            ? (DefaultBoxAndWhiskerXYDataset) obj : null;
    return checkEquality(obj, DefaultBoxAndWhiskerXYDataset.class,
            that != null && ObjectUtilities.equal(this.seriesKey, that.seriesKey),
            that != null && this.dates.equals(that.dates),
            that != null && this.items.equals(that.items));
}
```",Type-3
518-11-12,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYDotRenderer.java, lines 332-349)
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, attributes, and utility methods).","### 1. Extracted Method (To be placed in the common superclass, `AbstractXYItemRenderer`)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean condition1, boolean condition2, boolean condition3) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!condition1 || !condition2 || !condition3) {
        return false;
    }
    return super.equals(obj);
}
```

### 2. Refactored Code in `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MinMaxCategoryRenderer.class,
        this.plotLines == ((MinMaxCategoryRenderer) obj).plotLines,
        PaintUtilities.equal(this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint),
        this.groupStroke.equals(((MinMaxCategoryRenderer) obj).groupStroke)
    );
}
```

### 3. Refactored Code in `XYDotRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYDotRenderer.class,
        this.dotWidth == ((XYDotRenderer) obj).dotWidth,
        this.dotHeight == ((XYDotRenderer) obj).dotHeight,
        ShapeUtilities.equal(this.legendShape, ((XYDotRenderer) obj).legendShape)
    );
}
```",Type-3
518-11-13,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, equals method, lines 434-451):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYLine3DRenderer.java, equals method, lines 237-254):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements, such as the class type checks (`MinMaxCategoryRenderer` vs. `XYLine3DRenderer`), field comparisons (`plotLines`, `groupPaint`, `groupStroke` vs. `xOffset`, `yOffset`, `wallPaint`), and the specific fields being compared.","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        Object thisField = fields[i];
        Object thatField = thatFields[i];
        if (thisField instanceof Boolean) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (thisField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        }
    }
}
```",Type-3
518-11-14,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (StandardPieURLGenerator.java, lines 161-179)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, that.indexParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`plotLines`, `groupPaint`, `groupStroke` in the first snippet and `prefix`, `categoryParameterName`, `indexParameterName` in the second snippet) and the use of utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `MinMaxCategoryRenderer.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MinMaxCategoryRenderer.class,
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke
    ) && super.equals(obj);
}
```

#### In `StandardPieURLGenerator.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, StandardPieURLGenerator.class,
        this.prefix, ((StandardPieURLGenerator) obj).prefix,
        this.categoryParameterName, ((StandardPieURLGenerator) obj).categoryParameterName,
        this.indexParameterName, ((StandardPieURLGenerator) obj).indexParameterName
    );
}
```",Type-3
518-11-15,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultBoxAndWhiskerXYDataset.java, lines 520-538)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`plotLines`, `groupPaint`, `groupStroke` in the first snippet vs. `seriesKey`, `dates`, `items` in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MinMaxCategoryRenderer.class,
        new Object[]{this.plotLines, this.groupPaint, this.groupStroke},
        new Object[]{((MinMaxCategoryRenderer) obj).plotLines, 
                     ((MinMaxCategoryRenderer) obj).groupPaint, 
                     ((MinMaxCategoryRenderer) obj).groupStroke}
    ) && super.equals(obj);
}
```

---

### 3. Refactored Code in `DefaultBoxAndWhiskerXYDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        DefaultBoxAndWhiskerXYDataset.class,
        new Object[]{this.seriesKey, this.dates, this.items},
        new Object[]{((DefaultBoxAndWhiskerXYDataset) obj).seriesKey, 
                     ((DefaultBoxAndWhiskerXYDataset) obj).dates, 
                     ((DefaultBoxAndWhiskerXYDataset) obj).items}
    );
}
```",Type-3
518-12-14,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"### Code Snippet 1 (XYDotRenderer.java, `equals` method, lines 332-349):
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

---

### Code Snippet 2 (StandardPieURLGenerator.java, `equals` method, lines 161-179):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, 
            that.indexParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific attributes being compared (`dotWidth`, `dotHeight`, `legendShape` vs. `prefix`, `categoryParameterName`, `indexParameterName`) and the utility methods used (`ShapeUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests if this object is equal to another based on the provided attributes.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param attributes  the attributes to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = attributes[i + 1];
        if (thisAttribute == null) {
            if (thatAttribute != null) {
                return false;
            }
        } else if (!thisAttribute.equals(thatAttribute)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYDotRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYDotRenderer.class, 
        this.dotWidth, ((XYDotRenderer) obj).dotWidth,
        this.dotHeight, ((XYDotRenderer) obj).dotHeight,
        this.legendShape, ((XYDotRenderer) obj).legendShape,
        super.equals(obj), true
    );
}
```

---

### 3. Refactored `equals` Method in `StandardPieURLGenerator.java`:
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardPieURLGenerator.class, 
        this.prefix, ((StandardPieURLGenerator) obj).prefix,
        this.categoryParameterName, ((StandardPieURLGenerator) obj).categoryParameterName,
        this.indexParameterName, ((StandardPieURLGenerator) obj).indexParameterName
    );
}
```",Type-3
518-12-15,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1: `equals` method from `XYDotRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

### Code Snippet 2: `equals` method from `DefaultBoxAndWhiskerXYDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the attributes being compared (`dotWidth`, `dotHeight`, `legendShape` in the first snippet vs. `seriesKey`, `dates`, `items` in the second snippet) and the utility methods used (`ShapeUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their attributes.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param attributes  the attributes to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < attributes.length; i += 2) {
        Object thisAttribute = attributes[i];
        Object thatAttribute = attributes[i + 1];
        if (thisAttribute == null) {
            if (thatAttribute != null) {
                return false;
            }
        } else if (!thisAttribute.equals(thatAttribute)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYDotRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYDotRenderer.class, 
        this.dotWidth, ((XYDotRenderer) obj).dotWidth,
        this.dotHeight, ((XYDotRenderer) obj).dotHeight,
        this.legendShape, ((XYDotRenderer) obj).legendShape
    ) && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `DefaultBoxAndWhiskerXYDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DefaultBoxAndWhiskerXYDataset.class, 
        this.seriesKey, ((DefaultBoxAndWhiskerXYDataset) obj).seriesKey,
        this.dates, ((DefaultBoxAndWhiskerXYDataset) obj).dates,
        this.items, ((DefaultBoxAndWhiskerXYDataset) obj).items
    );
}
```",Type-3
518-13-14,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"### Code Snippet 1 (from `XYLine3DRenderer` class, lines 237-254):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `StandardPieURLGenerator` class, lines 161-179):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, 
            that.indexParameterName)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of different fields (`xOffset`, `yOffset`, `wallPaint` vs. `prefix`, `categoryParameterName`, `indexParameterName`) and the use of different utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fields  the fields to compare.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        thatFields[i] = fields[i] instanceof FieldExtractor
                ? ((FieldExtractor) fields[i]).extract(obj)
                : fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (!Objects.equals(fields[i], thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Method Calls (Replacing Clones in Original Files):

#### In `XYLine3DRenderer`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYLine3DRenderer.class, xOffset, yOffset, wallPaint);
}
```

#### In `StandardPieURLGenerator`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardPieURLGenerator.class, prefix, categoryParameterName, indexParameterName);
}
```",Type-3
518-13-15,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1: `equals` method from `XYLine3DRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `DefaultBoxAndWhiskerXYDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and utility methods used for comparison).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality between two objects by comparing their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYLine3DRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    XYLine3DRenderer that = (obj instanceof XYLine3DRenderer) ? (XYLine3DRenderer) obj : null;
    return equalsHelper(
        obj,
        XYLine3DRenderer.class,
        that != null && this.xOffset == that.xOffset,
        that != null && this.yOffset == that.yOffset,
        that != null && PaintUtilities.equal(this.wallPaint, that.wallPaint),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `DefaultBoxAndWhiskerXYDataset`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    DefaultBoxAndWhiskerXYDataset that = (obj instanceof DefaultBoxAndWhiskerXYDataset) ? (DefaultBoxAndWhiskerXYDataset) obj : null;
    return equalsHelper(
        obj,
        DefaultBoxAndWhiskerXYDataset.class,
        that != null && ObjectUtilities.equal(this.seriesKey, that.seriesKey),
        that != null && this.dates.equals(that.dates),
        that != null && this.items.equals(that.items)
    );
}
```",Type-3
520-1-6,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1 (from `NumberTickUnit` class, lines 126-140):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `Outlier` class, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `super.equals(obj)` in the first snippet, and the comparison of `radius` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param additionalCheck  a functional interface for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalCheck.checkEquality(clazz.cast(obj));
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck<T> {
    boolean checkEquality(T other);
}
```

### 2. Refactored `equals` Method in `NumberTickUnit` Class:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberTickUnit.class, that -> 
        super.equals(that) && this.formatter.equals(that.formatter));
}
```

### 3. Refactored `equals` Method in `Outlier` Class:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, that -> 
        this.point.equals(that.point) && this.radius == that.radius);
}
```",Type-3
520-1-10,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"### Code Snippet 1 (NumberTickUnit.java, lines 126-140)
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (HistogramType.java, lines 95-114)
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., `super.equals(obj)` in the first snippet, `obj == null` check in the second snippet, and different field names like `formatter` vs. `name`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    try {
        otherField = clazz.getDeclaredField(""name"").get(obj);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        throw new RuntimeException(e);
    }
    return field.equals(otherField);
}
```

### 2. Replacing the Original Methods

#### In `NumberTickUnit.java`
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberTickUnit.class,formatter);
}
```

#### In `HistogramType.java`
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, HistogramType.class, name);
}
```",Type-3
520-1-11,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (from `NumberTickUnit` class, lines 126-140):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `Hour` class, lines 356-370):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and method comments).","### 1. Extracted Method (to be placed in the common superclass, e.g., `TickUnit` or another appropriate superclass):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> if the object is of the expected type and all fields are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null ? thatField != null : !thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `NumberTickUnit`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberTickUnit.class, this.formatter, ((NumberTickUnit) obj).formatter);
}
```

---

### 3. Refactored `equals` Method in `Hour`:
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, this.hour, ((Hour) obj).hour, this.day, ((Hour) obj).day);
}
```",Type-3
520-1-12,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (NumberTickUnit.java, equals method, lines 126-140):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYBarDataset.java, equals method, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.formatter.equals(that.formatter)` vs. `this.underlying.equals(that.underlying)` and `this.barWidth != that.barWidth`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(clazz.cast(obj));
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck<T> {
    boolean checkEquality(T other);
}
```

---

### 2. Refactored `equals` Method in `NumberTickUnit.java`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberTickUnit.class, that -> this.formatter.equals(that.formatter));
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, that -> 
        this.underlying.equals(that.underlying) && this.barWidth == that.barWidth
    );
}
```",Type-3
520-2-3,src,org.jfree.chart.entity,XYAnnotationEntity,equals,98,112,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,Type 3,"### Code Snippet 1 (XYAnnotationEntity.java, lines 98-112):
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYAnnotationEntity)) {
        return false;
    }
    XYAnnotationEntity that = (XYAnnotationEntity) obj;
    if (this.rendererIndex != that.rendererIndex) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (StandardPieSectionLabelGenerator.java, lines 220-235):
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and the order of `super.equals()` calls).","### 1. Extracted Method (to be placed in the common superclass, e.g., `ChartEntity`):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param additionalCheck  a boolean result of additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    return additionalCheck;
}
```

### 2. Refactored `equals` Method in `XYAnnotationEntity`:
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYAnnotationEntity.class, 
            obj instanceof XYAnnotationEntity && 
            this.rendererIndex == ((XYAnnotationEntity) obj).rendererIndex);
}
```

### 3. Refactored `equals` Method in `StandardPieSectionLabelGenerator`:
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardPieSectionLabelGenerator.class, 
            obj instanceof StandardPieSectionLabelGenerator && 
            this.attributedLabels.equals(((StandardPieSectionLabelGenerator) obj).attributedLabels));
}
```",Type-3
520-2-10,src,org.jfree.chart.entity,XYAnnotationEntity,equals,98,112,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"### Code Snippet 1 (XYAnnotationEntity.java, lines 98-112):
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof XYAnnotationEntity)) {
        return false;
    }
    XYAnnotationEntity that = (XYAnnotationEntity) obj;
    if (this.rendererIndex != that.rendererIndex) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (HistogramType.java, lines 95-114):
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., `super.equals(obj)` in the first snippet, `obj == null` check in the second snippet, and the comparison of different fields: `rendererIndex` vs. `name`).","### 1. Extracted Method (to be placed in the superclass `ChartEntity`):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 * @param instanceClass  the class of the instance.
 * @param fieldValue  the value of the instance-specific field.
 * @param otherFieldValue  the value of the other instance-specific field.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object fieldValue, Object otherFieldValue) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!fieldValue.equals(otherFieldValue)) {
        return false;
    }
    return true;
}
```

### 2. Refactored Method Calls:

#### In `XYAnnotationEntity.java`:
```java
/**
 * Tests the entity for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYAnnotationEntity.class, this.rendererIndex, ((XYAnnotationEntity) obj).rendererIndex);
}
```

#### In `HistogramType.java`:
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, HistogramType.class, this.name, ((HistogramType) obj).name);
}
```",Type-3
520-3-4,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,src,org.jfree.chart.needle,ArrowNeedle,equals,141,155,Type 3,"### Code Snippet 1 (from `StandardPieSectionLabelGenerator` class, `equals` method):
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `ArrowNeedle` class, `equals` method):
```java
/**
 * Tests another object for equality with this object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ArrowNeedle)) {
        return false; 
    }
    if (!super.equals(obj)) {
        return false;
    }
    ArrowNeedle that = (ArrowNeedle) obj;
    if (this.isArrowAtTop != that.isArrowAtTop) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and specific logic for `attributedLabels` vs. `isArrowAtTop`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests another object for equality with this object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param additionalCheck  a boolean result of additional equality checks specific to the subclass.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, boolean additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalCheck;
}
```

### 2. Refactored `equals` Method in `StandardPieSectionLabelGenerator`:
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return baseEquals(obj, StandardPieSectionLabelGenerator.class, 
        obj instanceof StandardPieSectionLabelGenerator 
        && this.attributedLabels.equals(((StandardPieSectionLabelGenerator) obj).attributedLabels));
}
```

### 3. Refactored `equals` Method in `ArrowNeedle`:
```java
/**
 * Tests another object for equality with this object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return baseEquals(obj, ArrowNeedle.class, 
        obj instanceof ArrowNeedle 
        && this.isArrowAtTop == ((ArrowNeedle) obj).isArrowAtTop);
}
```",Type-3
520-3-5,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,src,org.jfree.chart.plot,ValueMarker,equals,140,154,Type 3,"### Code Snippet 1 (StandardPieSectionLabelGenerator.java, lines 220-235)
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (ValueMarker.java, lines 140-154)
```java
/**
 * Tests this marker for equality with an arbitrary object.  This method
 * returns <code>true</code> if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>ValueMarker</code>;</li>
 * <li><code>obj</code> has the same value as this marker;</li>
 * <li><code>super.equals(obj)</code> returns <code>true</code>.</li>
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof ValueMarker)) {
        return false;
    }
    ValueMarker that = (ValueMarker) obj;
    if (this.value != that.value) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific class type checks (`StandardPieSectionLabelGenerator` vs. `ValueMarker`) and the comparison of different fields (`attributedLabels` vs. `value`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param additionalCheck  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalCheck.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method in `StandardPieSectionLabelGenerator.java`
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardPieSectionLabelGenerator.class, other -> {
        StandardPieSectionLabelGenerator that = (StandardPieSectionLabelGenerator) other;
        return this.attributedLabels.equals(that.attributedLabels);
    });
}
```

---

### 3. Refactored Method in `ValueMarker.java`
```java
/**
 * Tests this marker for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ValueMarker.class, other -> {
        ValueMarker that = (ValueMarker) other;
        return this.value == that.value;
    });
}
```",Type-3
520-3-7,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,equals,784,798,Type 3,"### Code Snippet 1: `equals` method from `StandardPieSectionLabelGenerator` (lines 220-235)
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `StackedBarRenderer3D` (lines 784-798)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer3D)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StackedBarRenderer3D that = (StackedBarRenderer3D) obj;
    if (this.renderAsPercentages != that.getRenderAsPercentages()) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but have **some different statements**:
  - The first snippet checks `this.attributedLabels.equals(that.attributedLabels)`.
  - The second snippet checks `this.renderAsPercentages != that.getRenderAsPercentages()`.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalCheck  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityCheck additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalCheck.check(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored `equals` Method in `StandardPieSectionLabelGenerator`
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, StandardPieSectionLabelGenerator.class, 
        o -> this.attributedLabels.equals(((StandardPieSectionLabelGenerator) o).attributedLabels));
}
```

---

### 3. Refactored `equals` Method in `StackedBarRenderer3D`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, StackedBarRenderer3D.class, 
        o -> this.renderAsPercentages == ((StackedBarRenderer3D) o).getRenderAsPercentages());
}
```",Type-3
520-3-11,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (from `StandardPieSectionLabelGenerator` class, `equals` method):

```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `Hour` class, `equals` method):

```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class-specific fields and logic such as `this.attributedLabels` vs. `this.hour` and `this.day`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> if the fields of the object are equal to this instance.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 *
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented in subclasses to extract the required fields.
    throw new UnsupportedOperationException(""Subclasses must implement this method."");
}
```

---

### 2. Refactored `equals` Method in `StandardPieSectionLabelGenerator`:

```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, StandardPieSectionLabelGenerator.class, this.attributedLabels, super.equals(obj));
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    StandardPieSectionLabelGenerator that = (StandardPieSectionLabelGenerator) obj;
    return new Object[] { that.attributedLabels, super.equals(that) };
}
```

---

### 3. Refactored `equals` Method in `Hour`:

```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Hour.class, this.hour, this.day);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    Hour that = (Hour) obj;
    return new Object[] { that.hour, that.day };
}
```",Type-3
520-4-10,src,org.jfree.chart.needle,ArrowNeedle,equals,141,155,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"```java
// Code Snippet 1: ArrowNeedle.equals()
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ArrowNeedle)) {
        return false; 
    }
    if (!super.equals(obj)) {
        return false;
    }
    ArrowNeedle that = (ArrowNeedle) obj;
    if (this.isArrowAtTop != that.isArrowAtTop) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: HistogramType.equals()
public boolean equals(Object obj) {
    if (obj == null) {
        return false;   
    }
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","```java
// 1. Extracted method to be placed in the common superclass (e.g., MeterNeedle or a new utility class)
protected boolean objectsEqual(Object obj, Class<?> clazz, Object field1, Object field2) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field1.equals(field2)) {
        return false;
    }
    return true;
}
```

```java
// 2. Refactored ArrowNeedle.equals() method
@Override
public boolean equals(Object obj) {
    return objectsEqual(obj, ArrowNeedle.class, this.isArrowAtTop, ((ArrowNeedle) obj).isArrowAtTop) && super.equals(obj);
}
```

```java
// 3. Refactored HistogramType.equals() method
@Override
public boolean equals(Object obj) {
    return objectsEqual(obj, HistogramType.class, this.name, ((HistogramType) obj).name);
}
```",Type-3
520-5-10,src,org.jfree.chart.plot,ValueMarker,equals,140,154,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"### Code Snippet 1 (ValueMarker.java, lines 140-154)
```java
/**
 * Tests this marker for equality with an arbitrary object.  This method
 * returns <code>true</code> if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>ValueMarker</code>;</li>
 * <li><code>obj</code> has the same value as this marker;</li>
 * <li><code>super.equals(obj)</code> returns <code>true</code>.</li>
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!super.equals(obj)) {
        return false;
    }
    if (!(obj instanceof ValueMarker)) {
        return false;
    }
    ValueMarker that = (ValueMarker) obj;
    if (this.value != that.value) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (HistogramType.java, lines 95-114)
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

---

### Clone Type: **Type-3 (Mostly similar but with some different statements)**","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test against.
 * @param instanceClass  the class of the instance.
 * @param value  the value to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object value) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (value instanceof Double) {
        return ((ValueMarker) obj).value == (double) value;
    } else if (value instanceof String) {
        return ((HistogramType) obj).name.equals(value);
    }
    return false;
}
```

---

### 2. Refactored Method Calls

#### ValueMarker.java
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ValueMarker.class, this.value);
}
```

#### HistogramType.java
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, HistogramType.class, this.name);
}
```",Type-3
520-6-7,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,equals,784,798,Type 3,"### Code Snippet 1 (Outlier.java, `equals` method, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (StackedBarRenderer3D.java, `equals` method, lines 784-798):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer3D)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StackedBarRenderer3D that = (StackedBarRenderer3D) obj;
    if (this.renderAsPercentages != that.getRenderAsPercentages()) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `super.equals(obj)` and the comparison of different fields like `point`, `radius`, and `renderAsPercentages`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their specific fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance type.
 * @param superEquals  a boolean indicating the result of the superclass equals check (if applicable).
 * @param fieldComparisons  an array of boolean results for field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Outlier.java`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    Outlier that = (obj instanceof Outlier) ? (Outlier) obj : null;
    return equalsHelper(obj, Outlier.class, true,
            that != null && this.point.equals(that.point),
            that != null && this.radius == that.radius);
}
```

---

### 3. Refactored `equals` Method in `StackedBarRenderer3D.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    StackedBarRenderer3D that = (obj instanceof StackedBarRenderer3D) ? (StackedBarRenderer3D) obj : null;
    return equalsHelper(obj, StackedBarRenderer3D.class, super.equals(obj),
            that != null && this.renderAsPercentages == that.getRenderAsPercentages());
}
```",Type-3
520-6-8,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.title,CompositeTitle,equals,159,173,Type 3,"### Code Snippet 1 (Outlier.java, lines 184-198)
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (CompositeTitle.java, lines 159-173)
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `Outlier` vs. `CompositeTitle`, `this.point` vs. `this.container`, and the use of `super.equals(obj)` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param superEquals  a boolean indicating if the superclass equality check is required.
 * @param fieldEqualityChecks  a lambda that performs additional field equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, EqualityCheck fieldEqualityChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (superEquals && !super.equals(obj)) {
        return false;
    }
    return fieldEqualityChecks.check(obj);
}

/**
 * Functional interface for additional field equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored Method Calls

#### In `Outlier.java`
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, false, o -> {
        Outlier that = (Outlier) o;
        return this.point.equals(that.point) && this.radius == that.radius;
    });
}
```

---

#### In `CompositeTitle.java`
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CompositeTitle.class, true, o -> {
        CompositeTitle that = (CompositeTitle) o;
        return this.container.equals(that.container);
    });
}
```",Type-3
520-6-9,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.data.gantt,TaskSeries,equals,168,182,Type 3,"### Code Snippet 1 (Outlier.java, `equals` method, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TaskSeries.java, `equals` method, lines 168-182):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `super.equals(obj)` in the second snippet and the use of different fields like `point` and `radius` in the first snippet versus `tasks` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param superEqualsResult  the result of calling super.equals(obj) (if applicable).
 * @param fieldsEqual  a boolean indicating whether the instance-specific fields are equal.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, boolean fieldsEqual) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    return fieldsEqual;
}
```

### 2. Refactored `equals` Method in `Outlier.java`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        Outlier.class,
        true,
        obj instanceof Outlier && this.point.equals(((Outlier) obj).point) && this.radius == ((Outlier) obj).radius
    );
}
```

### 3. Refactored `equals` Method in `TaskSeries.java`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        TaskSeries.class,
        super.equals(obj),
        obj instanceof TaskSeries && this.tasks.equals(((TaskSeries) obj).tasks)
    );
}
```",Type-3
520-7-10,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,equals,784,798,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"```java
// Code Snippet 1: Method equals in StackedBarRenderer3D.java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer3D)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StackedBarRenderer3D that = (StackedBarRenderer3D) obj;
    if (this.renderAsPercentages != that.getRenderAsPercentages()) {
        return false;
    }
    return true;
}
```

```java
// Code Snippet 2: Method equals in HistogramType.java
public boolean equals(Object obj) {
    if (obj == null) {
        return false;   
    }
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","```java
// 1. Extracted method to be placed in the common superclass
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field1, Object field2) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field1.equals(field2)) {
        return false;
    }
    return true;
}
```

```java
// 2. Refactored method in StackedBarRenderer3D.java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StackedBarRenderer3D.class, this.renderAsPercentages, 
                        ((StackedBarRenderer3D) obj).getRenderAsPercentages()) 
           && super.equals(obj);
}
```

```java
// 2. Refactored method in HistogramType.java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, HistogramType.class, this.name, ((HistogramType) obj).name);
}
```",Type-3
520-7-11,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,equals,784,798,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1: `equals` method from `StackedBarRenderer3D` class (lines 784-798)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer3D)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StackedBarRenderer3D that = (StackedBarRenderer3D) obj;
    if (this.renderAsPercentages != that.getRenderAsPercentages()) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `Hour` class (lines 356-370)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific checks (`StackedBarRenderer3D` vs. `Hour`) and the fields being compared (`renderAsPercentages` vs. `hour` and `day`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> if the object is of the specified class and all fields are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `StackedBarRenderer3D` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StackedBarRenderer3D.class, 
        this.renderAsPercentages, ((StackedBarRenderer3D) obj).getRenderAsPercentages());
}
```

---

### 3. Refactored `equals` Method in `Hour` Class
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, 
        this.hour, ((Hour) obj).hour, 
        this.day, ((Hour) obj).day);
}
```",Type-3
520-7-12,src,org.jfree.chart.renderer.category,StackedBarRenderer3D,equals,784,798,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"Here are the two code snippets:

**Code Snippet 1 (StackedBarRenderer3D.java, lines 784-798):**
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer3D)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StackedBarRenderer3D that = (StackedBarRenderer3D) obj;
    if (this.renderAsPercentages != that.getRenderAsPercentages()) {
        return false;
    }
    return true;
}
```

**Code Snippet 2 (XYBarDataset.java, lines 341-355):**
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

**Clone Types:**
- These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and method calls differ).","**1. Extracted Method (to be placed in the common superclass):**
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

**2. Refactored Method Calls:**

**In `StackedBarRenderer3D.java`:**
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StackedBarRenderer3D.class, other -> {
        StackedBarRenderer3D that = (StackedBarRenderer3D) other;
        return this.renderAsPercentages == that.getRenderAsPercentages();
    });
}
```

**In `XYBarDataset.java`:**
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, other -> {
        XYBarDataset that = (XYBarDataset) other;
        return this.underlying.equals(that.underlying) && this.barWidth == that.barWidth;
    });
}
```",Type-3
520-8-10,src,org.jfree.chart.title,CompositeTitle,equals,159,173,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"### Code Snippet 1 (CompositeTitle.java, lines 159-173)
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (HistogramType.java, lines 95-114)
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Clone Type: **Type-3 (Mostly similar but with some different statements)**","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests an object for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 * @param instanceClass  the class of the instance.
 * @param instanceField  the instance-specific field to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object instanceField) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = instanceClass.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        return false;
    }
    return instanceField.equals(thatField);
}
```

### 2. Refactored `equals` Method in `CompositeTitle.java`
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj,",Type-3
520-8-11,src,org.jfree.chart.title,CompositeTitle,equals,159,173,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (CompositeTitle.java, lines 159-173)
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (Hour.java, lines 356-370)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific checks (`CompositeTitle` vs. `Hour`) and the fields being compared (`container` vs. `hour` and `day`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return <code>true</code> if the object is equal based on the provided fields.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### CompositeTitle.java
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CompositeTitle.class, this.container, ((CompositeTitle) obj).container);
}
```

---

#### Hour.java
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, this.hour, ((Hour) obj).hour, this.day, ((Hour) obj).day);
}
```",Type-3
520-8-12,src,org.jfree.chart.title,CompositeTitle,equals,159,173,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method in `CompositeTitle` class
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the comparison of `container` in `CompositeTitle` vs. `underlying` and `barWidth` in `XYBarDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `CompositeTitle` Class
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, CompositeTitle.class, other -> {
        CompositeTitle that = (CompositeTitle) other;
        return this.container.equals(that.container);
    });
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, XYBarDataset.class, other -> {
        XYBarDataset that = (XYBarDataset) other;
        return this.underlying.equals(that.underlying) && this.barWidth == that.barWidth;
    });
}
```",Type-3
520-9-10,src,org.jfree.data.gantt,TaskSeries,equals,168,182,src,org.jfree.data.statistics,HistogramType,equals,95,114,Type 3,"### Code Snippet 1 (TaskSeries.java, `equals` method, lines 168-182):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (HistogramType.java, `equals` method, lines 95-114):
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `obj == null` check in the second snippet, different class types, and different field comparisons).","### 1. Extracted Method (to be placed in the superclass `Series`):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 * @param clazz  the expected class type.
 * @param field  the field to compare for equality.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        return false;
    }
    return field.equals(thatField);
}
```

",Type-3
520-9-11,src,org.jfree.data.gantt,TaskSeries,equals,168,182,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (TaskSeries.java, lines 168-182)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (Hour.java, lines 356-370)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `TaskSeries` vs. `Hour`, `this.tasks.equals(that.tasks)` vs. `this.hour != that.hour` and `this.day.equals(that.day)`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Series`)

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param additionalCheck  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalCheck.check(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored `equals` Method in `TaskSeries.java`

```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TaskSeries.class, other -> {
        TaskSeries that = (TaskSeries) other;
        return this.tasks.equals(that.tasks);
    });
}
```

---

### 3. Refactored `equals` Method in `Hour.java`

```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, other -> {
        Hour that = (Hour) other;
        return this.hour == that.hour && this.day.equals(that.day);
    });
}
```",Type-3
520-9-12,src,org.jfree.data.gantt,TaskSeries,equals,168,182,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (TaskSeries.java, lines 168-182)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYBarDataset.java, lines 341-355)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1 (TaskSeries.java):** Type-3 Clone (Mostly similar but with some different statements, e.g., `this.tasks.equals(that.tasks)` vs. `this.underlying.equals(that.underlying)` and `this.barWidth != that.barWidth`).
- **Code Snippet 2 (XYBarDataset.java):** Type-3 Clone (Same reasoning as above).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param additionalChecks  a lambda function for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.check(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored Method in `TaskSeries.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TaskSeries.class, o -> {
        TaskSeries that = (TaskSeries) o;
        return this.tasks.equals(that.tasks);
    });
}
```

---

### 3. Refactored Method in `XYBarDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, o -> {
        XYBarDataset that = (XYBarDataset) o;
        return this.underlying.equals(that.underlying) && this.barWidth == that.barWidth;
    });
}
```",Type-3
520-10-11,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (from `HistogramType` class, lines 95-114):
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

---

### Code Snippet 2 (from `Hour` class, lines 356-370):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`name` in `HistogramType` vs. `hour` and `day` in `Hour`) and the class type checks (`HistogramType` vs. `Hour`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `Object` or a custom superclass):
```java
/**
 * Generic equality check for objects with two fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param field1  the first field to compare.
 * @param field2  the second field to compare.
 * @return <code>true</code> if the fields and class type match, <code>false</code> otherwise.
 */
protected boolean genericEquals(Object obj, Class<?> clazz, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    if (!field1.equals(getField1(that)) || !field2.equals(getField2(that))) {
        return false;
    }
    return true;
}
```

### Updated",Type-3
520-10-12,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method in `HistogramType` class
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Code Snippet 2: `equals` method in `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`HistogramType` and `XYBarDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 * @param instanceClass  the class of the instance.
 * @param instanceFields  the fields of the instance to compare.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object... instanceFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, instanceFields.length);
    for (int i = 0; i < instanceFields.length; i++) {
        if (!instanceFields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 *
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    Object[] fields = new Object[fieldCount];
    // Populate fields based on the specific implementation of the subclass.
    // This method should be overridden in subclasses if needed.
    return fields;
}
```

### 2. Refactored `equals` Method in `HistogramType` Class
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, HistogramType.class, this.name);
}
```

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYBarDataset.class, this.underlying, this.barWidth);
}
```",Type-3
521-1-7,src,org.jfree.chart.axis,TickUnit,equals,169,183,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1 (from `TickUnit` class, lines 169-183):
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnit)) {
        return false;
    }
    TickUnit that = (TickUnit) obj;
    if (this.size != that.size) {
        return false;
    }
    if (this.minorTickCount != that.minorTickCount) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `Outlier` class, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.size` vs. `this.point`, `this.minorTickCount` vs. `this.radius`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with another object.
 *
 * @param obj  the object to compare.
 * @param instanceClass  the class of the instance.
 * @param fields  the fields to compare.
 *
 * @return <code>true</code> or <code>false</code>.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `TickUnit`:
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, TickUnit.class, this.size, this.minorTickCount);
}
```

### 3. Refactored `equals` Method in `Outlier`:
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Outlier.class, this.point, this.radius);
}
```",Type-3
521-1-15,src,org.jfree.chart.axis,TickUnit,equals,169,183,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (from `TickUnit` class, `equals` method):
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnit)) {
        return false;
    }
    TickUnit that = (TickUnit) obj;
    if (this.size != that.size) {
        return false;
    }
    if (this.minorTickCount != that.minorTickCount) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `XYBarDataset` class, `equals` method):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, field comparisons, and object types).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their specific fields.
 *
 * @param obj  the object to compare.
 * @param clazz  the expected class type.
 * @param fieldComparisons  a lambda function to compare instance-specific fields.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean isEqual(Object obj, Class<?> clazz, FieldComparator fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return fieldComparisons.compare(obj);
}

/**
 * Functional interface for field comparison logic.
 */
@FunctionalInterface
protected interface FieldComparator {
    boolean compare(Object obj);
}
```

---

### 2. Refactored `equals` Method in `TickUnit` Class:
```java
/**
 * Tests this unit for equality with another object.
 *
 * @param obj  the object.
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, TickUnit.class, other -> {
        TickUnit that = (TickUnit) other;
        return this.size == that.size && this.minorTickCount == that.minorTickCount;
    });
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset` Class:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYBarDataset.class, other -> {
        XYBarDataset that = (XYBarDataset) other;
        return this.underlying.equals(that.underlying) && this.barWidth == that.barWidth;
    });
}
```",Type-3
521-2-7,src,org.jfree.chart.block,GridArrangement,equals,272,286,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1 (from `GridArrangement` class, `equals` method):
```java
/**
 * Compares this layout manager for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GridArrangement)) {
        return false;   
    }
    GridArrangement that = (GridArrangement) obj;
    if (this.columns != that.columns) {
        return false;   
    }
    if (this.rows != that.rows) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2 (from `Outlier` class, `equals` method):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of fields (`columns` and `rows` in `GridArrangement` vs. `point` and `radius` in `Outlier`) and the class type being checked (`GridArrangement` vs. `Outlier`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Compares two objects for equality based on their class type and fields.
 * 
 * @param obj  the object to compare.
 * @param clazz  the class type to check.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null ? field2 != null : !field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `GridArrangement`:
```java
/**
 * Compares this layout manager for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, GridArrangement.class, this.columns, ((GridArrangement) obj).columns, this.rows, ((GridArrangement) obj).rows);
}
```

---

### 3. Refactored `equals` Method in `Outlier`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, Outlier.class, this.point, ((Outlier) obj).point, this.radius, ((Outlier) obj).radius);
}
```",Type-3
521-2-15,src,org.jfree.chart.block,GridArrangement,equals,272,286,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (GridArrangement.java, `equals` method):
```java
/**
 * Compares this layout manager for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GridArrangement)) {
        return false;   
    }
    GridArrangement that = (GridArrangement) obj;
    if (this.columns != that.columns) {
        return false;   
    }
    if (this.rows != that.rows) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2 (XYBarDataset.java, `equals` method):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields compared, and logic specific to the respective classes).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Compares two objects for equality based on their class type and specific fields.
 *
 * @param obj  the object to compare.
 * @param clazz  the expected class type.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `GridArrangement.java`:
```java
/**
 * Compares this layout manager for equality with an arbitrary object.
 * 
 * @param obj  the object.
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, GridArrangement.class, this.columns, this.rows);
}
```

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYBarDataset.class, this.underlying, this.barWidth);
}
```",Type-3
521-4-7,src,org.jfree.chart.plot,PiePlot3D,equals,1013,1027,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1: `equals` method in `PiePlot3D` class (lines 1013-1027)
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PiePlot3D)) {
        return false;
    }
    PiePlot3D that = (PiePlot3D) obj;
    if (this.depthFactor != that.depthFactor) {
        return false;
    }
    if (this.darkerSides != that.darkerSides) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `Outlier` class (lines 184-198)
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but have **different statements** (e.g., `depthFactor`, `darkerSides` in `PiePlot3D` vs. `point`, `radius` in `Outlier`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `PiePlot3D` Class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, PiePlot3D.class, 
        this.depthFactor, ((PiePlot3D) obj).depthFactor,
        this.darkerSides, ((PiePlot3D) obj).darkerSides,
        this, obj);
}
```

---

### 3. Refactored `equals` Method in `Outlier` Class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, 
        this.point, ((Outlier) obj).point,
        this.radius, ((Outlier) obj).radius);
}
```",Type-3
521-4-15,src,org.jfree.chart.plot,PiePlot3D,equals,1013,1027,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method from `PiePlot3D` class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PiePlot3D)) {
        return false;
    }
    PiePlot3D that = (PiePlot3D) obj;
    if (this.depthFactor != that.depthFactor) {
        return false;
    }
    if (this.darkerSides != that.darkerSides) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and logic specific to the respective classes).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` method in `PiePlot3D` class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, PiePlot3D.class, other -> {
        PiePlot3D that = (PiePlot3D) other;
        if (this.depthFactor != that.depthFactor) {
            return false;
        }
        if (this.darkerSides != that.darkerSides) {
            return false;
        }
        return super.equals(obj);
    });
}
```

---

### 3. Refactored `equals` method in `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, other -> {
        XYBarDataset that = (XYBarDataset) other;
        if (!this.underlying.equals(that.underlying)) {
            return false;
        }
        if (this.barWidth != that.barWidth) {
            return false;
        }
        return true;
    });
}
```",Type-3
521-5-7,src,org.jfree.chart.plot.dial,DialPointer,equals,167,181,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1 (from `DialPointer` class, `equals` method):

```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPointer)) {
        return false;
    }
    DialPointer that = (DialPointer) obj;
    if (this.datasetIndex != that.datasetIndex) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `Outlier` class, `equals` method):

```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.datasetIndex` vs. `this.point.equals(that.point)` and `super.equals(obj)` vs. `return true`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Checks for equality between two objects based on provided parameters.
 * 
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param radius  the radius of the current object.
 * @param otherRadius  the radius of the other object.
 * @param additionalCheck  a boolean indicating the result of any additional checks.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, double radius, double otherRadius, boolean additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (radius != otherRadius) {
        return false;
    }
    return additionalCheck;
}
```

---

### 2. Refactored `equals` Method in `DialPointer` Class:

```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, DialPointer.class, this.radius, ((DialPointer) obj).radius, 
        this.datasetIndex == ((DialPointer) obj).datasetIndex && super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `Outlier` Class:

```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, this.radius, ((Outlier) obj).radius, 
        this.point.equals(((Outlier) obj).point));
}
```",Type-3
521-5-15,src,org.jfree.chart.plot.dial,DialPointer,equals,167,181,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (DialPointer.java, equals method, lines 167-181):
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPointer)) {
        return false;
    }
    DialPointer that = (DialPointer) obj;
    if (this.datasetIndex != that.datasetIndex) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, layout)

---

### Code Snippet 2 (XYBarDataset.java, equals method, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractDialLayer` or another appropriate superclass):
```java
/**
 * Checks two objects for equality based on their class and specified fields.
 *
 * @param obj  the object to compare with (can be <code>null</code>).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DialPointer.java`:
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, DialPointer.class, this.datasetIndex, this.radius);
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, this.underlying, this.barWidth);
}
```",Type-1
521-6-7,src,org.jfree.chart.renderer,GrayPaintScale,equals,141,155,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1 (GrayPaintScale.java, lines 141-155)
```java
/**
 * Tests this <code>GrayPaintScale</code> instance for equality with an
 * arbitrary object.  This method returns <code>true</code> if and only
 * if:
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>GrayPaintScale</code>;</li>
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GrayPaintScale)) {
        return false;
    }
    GrayPaintScale that = (GrayPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    return true;    
}
```

---

### Code Snippet 2 (Outlier.java, lines 184-198)
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and logic for equality checks).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `GrayPaintScale.java`
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, GrayPaintScale.class, this.lowerBound, this.upperBound, new Object[]{((GrayPaintScale) obj).lowerBound, ((GrayPaintScale) obj).upperBound});
}
```

### 3. Refactored `equals` Method in `Outlier.java`
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Outlier.class, this.point, this.radius, new Object[]{((Outlier) obj).point, ((Outlier) obj).radius});
}
```",Type-3
521-6-15,src,org.jfree.chart.renderer,GrayPaintScale,equals,141,155,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (GrayPaintScale.java, lines 141-155):
```java
/**
 * Tests this <code>GrayPaintScale</code> instance for equality with an
 * arbitrary object.  This method returns <code>true</code> if and only
 * if:
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>GrayPaintScale</code>;</li>
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GrayPaintScale)) {
        return false;
    }
    GrayPaintScale that = (GrayPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    return true;    
}
```

### Code Snippet 2 (XYBarDataset.java, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and logic for equality checks).","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean isEqual(Object obj, Class<?> clazz, double lowerBound, double upperBound, Object additionalField1, Object additionalField2) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (lowerBound != ((GrayPaintScale) obj).lowerBound) {
        return false;
    }
    if (upperBound != ((GrayPaintScale) obj).upperBound) {
        return false;
    }
    return true;
}
```

",Type-3
521-7-8,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.renderer.category,LevelRenderer,equals,367,381,Type 3,"### Code Snippet 1: `equals` method from `Outlier` class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `LevelRenderer` class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LevelRenderer)) {
        return false;
    }
    LevelRenderer that = (LevelRenderer) obj;
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maxItemWidth != that.maxItemWidth) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and a call to `super.equals(obj)` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on their specific fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance type.
 * @param fieldComparisons  a lambda that performs field-specific comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, FieldComparator fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return fieldComparisons.compareFields(obj);
}

/**
 * Functional interface for field-specific comparisons.
 */
@FunctionalInterface
protected interface FieldComparator {
    boolean compareFields(Object obj);
}
```

---

### 2. Refactored `equals` Method in `Outlier` Class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Outlier.class, other -> {
        Outlier that = (Outlier) other;
        return this.point.equals(that.point) && this.radius == that.radius;
    });
}
```

---

### 3. Refactored `equals` Method in `LevelRenderer` Class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, LevelRenderer.class, other -> {
        LevelRenderer that = (LevelRenderer) other;
        return this.itemMargin == that.itemMargin
                && this.maxItemWidth == that.maxItemWidth
                && super.equals(obj);
    });
}
```",Type-3
521-7-9,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.renderer.xy,VectorRenderer,equals,301,315,Type 3,"### Code Snippet 1 (Outlier.java, `equals` method, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (VectorRenderer.java, `equals` method, lines 301-315):
```java
/**
 * Tests this <code>VectorRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>VectorRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>VectorRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof VectorRenderer)) {
        return false;
    }
    VectorRenderer that = (VectorRenderer) obj;
    if (this.baseLength != that.baseLength) {
        return false;
    }
    if (this.headLength != that.headLength) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different field comparisons and class-specific logic).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 instanceof Double && field2 instanceof Double) {
            if (!field1.equals(field2)) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Outlier.java`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, this.point, ((Outlier) obj).point, this.radius, ((Outlier) obj).radius);
}
```

---

### 3. Refactored `equals` Method in `VectorRenderer.java`:
```java
/**
 * Tests this <code>VectorRenderer</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, VectorRenderer.class, this.baseLength, ((VectorRenderer) obj).baseLength, this.headLength, ((VectorRenderer) obj).headLength)
            && super.equals(obj);
}
```",Type-3
521-7-12,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.data.time,Minute,equals,373,387,Type 3,"### Code Snippet 1 (Outlier.java, lines 184-198)
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (Minute.java, lines 373-387)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Minute object
 * representing the same minute as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the minute and hour value of this and the
 *      object are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Minute)) {
        return false;
    }
    Minute that = (Minute) obj;
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    return true;
}
```

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different variable names, object types, and fields being compared).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean isEqual(Object obj, Object instance, Class<?> clazz, Object field1, Object field2) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    if (!field1.equals(getField1(that))) {
        return false;
    }
    if (!field2.equals(getField2(that))) {
        return false;
    }
    return true;
}
```

### 2. Updated `equals` Method in `Outlier.java`
```java
public boolean equals(Object obj) {
    return isEqual(obj, this, Outlier.class, this.point, this.radius);
}
```

### 3. Updated `equals` Method in `Minute.java`
```java
public boolean equals(Object obj) {
    return isEqual(obj, this, Minute.class, this.minute, this.hour);
}
```",Type-3
521-7-13,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.data.time,Week,equals,439,454,Type 3,"### Code Snippet 1 (Outlier.java, lines 184-198)
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (Week.java, lines 439-454)
```java
/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the 
 *         same.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;

}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and logic for comparison).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean isEqual(Object obj, Object instance, Object field1, Object field2) {
    if (obj == instance) {
        return true;
    }
    if (!instance.getClass().isInstance(obj)) {
        return false;
    }
    Object that = obj;
    if (!field1.equals(getField1(that))) {
        return false;
    }
    if (!field2.equals(getField2(that))) {
        return false;
    }
    return true;
}

protected Object getField1(Object instance) {
    return instance.getField1();
}

protected Object getField2(Object instance) {
    return instance.getField2();
}
```

### Method Calls",Type-3
521-7-14,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.data.xy,Vector,equals,115,129,Type 3,"### Code Snippet 1 (Outlier.java - equals method):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (Vector.java - equals method):
```java
/**
 * Tests this vector for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Vector)) {
        return false;
    }
    Vector that = (Vector) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-2 Clone**: The two code snippets are identical except for variable names, class names, and field names.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their fields.
 * 
 * @param obj  the object to compare with.
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `Outlier.java`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, Outlier.class, this.point, this.radius);
}
```

### 3. Refactored `equals` Method in `Vector.java`:
```java
/**
 * Tests this vector for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, Vector.class, this.x, this.y);
}
```",Type-2
521-7-16,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.data.xy,XYCoordinate,equals,102,116,Type 3,"### Code Snippet 1 (Outlier.java, `equals` method, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYCoordinate.java, `equals` method, lines 102-116):
```java
/**
 * Tests this coordinate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYCoordinate)) {
        return false;
    }
    XYCoordinate that = (XYCoordinate) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-2 Clone**: The two code snippets are identical except for variable names, class names, and field names.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their fields.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param field1  the first field of this object.
 * @param field2  the second field of this object.
 * @param otherField1  the first field of the other object.
 * @param otherField2  the second field of the other object.
 * @param clazz  the class type to check.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Object field1, Object field2, Object otherField1, Object otherField2, Class<?> clazz) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field1.equals(otherField1)) {
        return false;
    }
    if (!field2.equals(otherField2)) {
        return false;
    }
    return true;
}
```

### 2. Refactored `equals` Method in `Outlier.java`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, this.point, this.radius, ((Outlier) obj).point, ((Outlier) obj).radius, Outlier.class);
}
```

### 3. Refactored `equals` Method in `XYCoordinate.java`:
```java
/**
 * Tests this coordinate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, this.x, this.y, ((XYCoordinate) obj).x, ((XYCoordinate) obj).y, XYCoordinate.class);
}
```",Type-2
521-8-15,src,org.jfree.chart.renderer.category,LevelRenderer,equals,367,381,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (from `LevelRenderer` class, `equals` method):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LevelRenderer)) {
        return false;
    }
    LevelRenderer that = (LevelRenderer) obj;
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maxItemWidth != that.maxItemWidth) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `XYBarDataset` class, `equals` method):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1**: Type-3 Clone (Mostly similar but with some different statements).
- **Code Snippet 2**: Type-3 Clone (Mostly similar but with some different statements).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractRenderer`):
```java
/**
 * Tests two objects for equality based on specific fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean comparisons for instance-specific fields.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LevelRenderer`:
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, LevelRenderer.class,
        this.itemMargin == ((LevelRenderer) obj).itemMargin,
        this.maxItemWidth == ((LevelRenderer) obj).maxItemWidth,
        super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class,
        this.underlying.equals(((XYBarDataset) obj).underlying),
        this.barWidth == ((XYBarDataset) obj).barWidth);
}
```",Type-3
521-9-15,src,org.jfree.chart.renderer.xy,VectorRenderer,equals,301,315,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (VectorRenderer.java, `equals` method, lines 301-315):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof VectorRenderer)) {
        return false;
    }
    VectorRenderer that = (VectorRenderer) obj;
    if (this.baseLength != that.baseLength) {
        return false;
    }
    if (this.headLength != that.headLength) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYBarDataset.java, `equals` method, lines 341-355):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1**: Type-3 Clone (Mostly similar but with some different statements, e.g., field comparisons `baseLength` and `headLength` vs. `underlying` and `barWidth`).
- **Code Snippet 2**: Type-3 Clone (Mostly similar but with some different statements, e.g., field comparisons `baseLength` and `headLength` vs. `underlying` and `barWidth`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractXYItemRenderer`):
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        if (!fields[i].equals(fields[i + 1])) {
            return false;
        }
    }
    return super.equals(obj);
}
```

### 2. Refactored `equals` Method in `VectorRenderer.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, VectorRenderer.class, 
        this.baseLength, ((VectorRenderer) obj).baseLength, 
        this.headLength, ((VectorRenderer) obj).headLength);
}
```

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, 
        this.underlying, ((XYBarDataset) obj).underlying, 
        this.barWidth, ((XYBarDataset) obj).barWidth);
}
```",Type-3
521-10-11,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (from `HistogramType` class, lines 95-114):
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Code Snippet 2 (from `Hour` class, lines 356-370):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class-specific fields `name` vs. `hour` and `day`, and the class type checks `HistogramType` vs. `Hour`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to compare.
 * @param type  the expected class type.
 * @param fields  the fields to compare for equality.
 * @return true if the objects are equal, false otherwise.
 */
protected boolean genericEquals(Object obj, Class<?> type, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !type.isInstance(obj)) {
        return false;
    }
    Object other = type.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object otherField = fields[i + 1];
        if (!thisField.equals(otherField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `HistogramType`:
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, HistogramType.class, this.name, ((HistogramType) obj).name);
}
```

---

### 3. Refactored `equals` Method in `Hour`:
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, Hour.class, this.hour, ((Hour) obj).hour, this.day, ((Hour) obj).day);
}
```",Type-3
521-10-12,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.time,Minute,equals,373,387,Type 3,"### Code Snippet 1 (HistogramType.java, lines 95-114)
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

---

### Code Snippet 2 (Minute.java, lines 373-387)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Minute object
 * representing the same minute as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the minute and hour value of this and the
 *      object are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Minute)) {
        return false;
    }
    Minute that = (Minute) obj;
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class-specific fields `name`, `minute`, and `hour` are compared, and the null check is handled differently in the first snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to compare.
 * @param field1  the first field to compare.
 * @param field2  the second field to compare (optional, can be null).
 * @return true if the objects are equal, false otherwise.
 */
protected boolean genericEquals(Object obj, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !(obj.getClass().equals(this.getClass()))) {
        return false;
    }
    if (field1 != null && !field1.equals(((HistogramType) obj).name)) {
        return false;
    }
    if (field2 != null && !field2.equals(((Minute obj",Type-3
521-10-13,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.time,Week,equals,439,454,Type 3,"### Code Snippet 1 (from `HistogramType` class, lines 95-114):
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

---

### Code Snippet 2 (from `Week` class, lines 439-454):
```java
/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the 
 *         same.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;

}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the fields being compared and the class types).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to test against.
 * @param type  the expected class type.
 * @param fields  the fields to compare for equality.
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean genericEquals(Object obj, Class<?> type, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !type.isInstance(obj)) {
        return false;
    }
    Object other = type.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `HistogramType`:
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, HistogramType.class, this.name, ((HistogramType) obj).name);
}
```

---

### 3. Refactored `equals` Method in `Week`:
```java
/**
 * Tests the equality of this Week object to an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @return <code>true</code> if week and year of this and object are the same.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, Week.class, this.week, ((Week) obj).week, this.year, ((Week) obj).year);
}
```",Type-3
521-10-14,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.xy,Vector,equals,115,129,Type 3,"### Code Snippet 1 (from `HistogramType` class, `equals` method):
```java
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Code Snippet 2 (from `Vector` class, `equals` method):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Vector)) {
        return false;
    }
    Vector that = (Vector) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-3 Clone**: The two methods are mostly similar but have some different statements (e.g., null check in the first snippet, comparison of `x` and `y` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = (Object[]) clazz.cast(obj);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `HistogramType`:
```java
public boolean equals(Object obj) {
    return isEqual(obj, HistogramType.class, this.name);
}
```

### 3. Refactored `equals` Method in `Vector`:
```java
public boolean equals(Object obj) {
    return isEqual(obj, Vector.class, this.x, this.y);
}
```",Type-3
521-10-15,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method in `HistogramType` class
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Code Snippet 2: `equals` method in `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`HistogramType` and `XYBarDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to test against.
 * @param instance  the current instance.
 * @param type  the expected class type.
 * @param equalityCheck  a lambda to perform additional equality checks.
 * @return A boolean indicating equality.
 */
protected static <T> boolean genericEquals(Object obj, T instance, Class<T> type, java.util.function.Predicate<T> equalityCheck) {
    if (obj == instance) {
        return true;
    }
    if (obj == null || !type.isInstance(obj)) {
        return false;
    }
    T other = type.cast(obj);
    return equalityCheck.test(other);
}
```

---

### 2. Refactored `equals` Method in `HistogramType` Class
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, this, HistogramType.class, other -> this.name.equals(other.name));
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, this, XYBarDataset.class, other -> 
        this.underlying.equals(other.underlying) && this.barWidth == other.barWidth
    );
}
```",Type-3
521-10-16,src,org.jfree.data.statistics,HistogramType,equals,95,114,src,org.jfree.data.xy,XYCoordinate,equals,102,116,Type 3,"### Code Snippet 1 (HistogramType.java, `equals` method):
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    
    if (obj == null) {
        return false;   
    }
    
    if (obj == this) {
        return true;
    }
    
    if (!(obj instanceof HistogramType)) {
        return false;
    }
    
    HistogramType t = (HistogramType) obj;
    if (!this.name.equals(t.name)) {
        return false;
    }
    
    return true;
    
}
```

### Code Snippet 2 (XYCoordinate.java, `equals` method):
```java
/**
 * Tests this coordinate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYCoordinate)) {
        return false;
    }
    XYCoordinate that = (XYCoordinate) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., handling of `null` in the first snippet, comparison logic for `x` and `y` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their class type and field values.
 * 
 * @param obj  the object to test against.
 * @param clazz  the expected class type.
 * @param fields  the field values to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `HistogramType.java`:
```java
/**
 * Tests this type for equality with an arbitrary object.
 *
 * @param obj  the object to test against.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, HistogramType.class, this.name);
}
```

### 3. Refactored `equals` Method in `XYCoordinate.java`:
```java
/**
 * Tests this coordinate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYCoordinate.class, this.x, this.y);
}
```",Type-3
521-12-15,src,org.jfree.data.time,Minute,equals,373,387,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method from `Minute` class
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is a Minute object
 * representing the same minute as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the minute and hour value of this and the
 *      object are the same.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Minute)) {
        return false;
    }
    Minute that = (Minute) obj;
    if (this.minute != that.minute) {
        return false;
    }
    if (this.hour != that.hour) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the fields being compared and the class types).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Generalized equality check for objects of the same type.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param fields  the fields to compare for equality.
 * @return <code>true</code> if the fields of this and the object are the same.
 */
protected boolean generalizedEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(clazz.cast(obj), fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be overridden in subclasses to extract the required fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Refactored `equals` Method in `Minute` Class
```java
@Override
public boolean equals(Object obj) {
    return generalizedEquals(obj, Minute.class, this.minute, this.hour);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    Minute that = (Minute) obj;
    return new Object[] { that.minute, that.hour };
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
@Override
public boolean equals(Object obj) {
    return generalizedEquals(obj, XYBarDataset.class, this.underlying, this.barWidth);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    XYBarDataset that = (XYBarDataset) obj;
    return new Object[] { that.underlying, that.barWidth };
}
```",Type-3
521-13-15,src,org.jfree.data.time,Week,equals,439,454,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method in `Week` class (lines 439-454)
```java
/**
 * Tests the equality of this Week object to an arbitrary object.  Returns
 * true if the target is a Week instance representing the same week as this
 * object.  In all other cases, returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> if week and year of this and object are the 
 *         same.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Week)) {
        return false;
    }
    Week that = (Week) obj;
    if (this.week != that.week) {
        return false;
    }
    if (this.year != that.year) {
        return false;
    }
    return true;

}
```

### Code Snippet 2: `equals` method in `XYBarDataset` class (lines 341-355)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1 (`Week.equals`)**: **Type-3 Clone** (Mostly similar but with some different statements, e.g., `week` and `year` checks are specific to `Week`).
- **Code Snippet 2 (`XYBarDataset.equals`)**: **Type-3 Clone** (Mostly similar but with some different statements, e.g., `underlying` and `barWidth` checks are specific to `XYBarDataset`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractEqualityComparable`)
```java
/**
 * Tests the equality of this object to an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> if all fields are equal, <code>false</code> otherwise.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((AbstractEqualityComparable) obj).getEqualityFields();
    if (fields.length != otherFields.length) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Returns the fields to be used for equality comparison.
 *
 * @return An array of fields.
 */
protected abstract Object[] getEqualityFields();
```

---

### 2. Refactored `equals` Method in `Week` Class
```java
@Override
protected Object[] getEqualityFields() {
    return new Object[] { this.week, this.year };
}

@Override
public boolean equals(Object obj) {
    return isEqual(obj, Week.class, this.week, this.year);
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
@Override
protected Object[] getEqualityFields() {
    return new Object[] { this.underlying, this.barWidth };
}

@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYBarDataset.class, this.underlying, this.barWidth);
}
```",Type-3
521-14-15,src,org.jfree.data.xy,Vector,equals,115,129,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (Vector.java, lines 115-129):
```java
/**
 * Tests this vector for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Vector)) {
        return false;
    }
    Vector that = (Vector) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYBarDataset.java, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the comparison of `this.x` and `this.y` in `Vector` vs. `this.underlying` and `this.barWidth` in `XYBarDataset`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        if (!fields[i].equals(fields[i + 1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls:

#### In `Vector.java`:
```java
/**
 * Tests this vector for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, Vector.class, this.x, ((Vector) obj).x, this.y, ((Vector) obj).y);
}
```

---

#### In `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYBarDataset.class, this.underlying, ((XYBarDataset) obj).underlying, this.barWidth, ((XYBarDataset) obj).barWidth);
}
```",Type-3
521-15-16,src,org.jfree.data.xy,XYBarDataset,equals,341,355,src,org.jfree.data.xy,XYCoordinate,equals,102,116,Type 3,"### Code Snippet 1 (from `XYBarDataset` class, `equals` method):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `XYCoordinate` class, `equals` method):
```java
/**
 * Tests this coordinate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYCoordinate)) {
        return false;
    }
    XYCoordinate that = (XYCoordinate) obj;
    if (this.x != that.x) {
        return false;
    }
    if (this.y != that.y) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`underlying`, `barWidth`, `x`, `y`) and class names (`XYBarDataset`, `XYCoordinate`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their class type and field values.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the field values to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, double... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    double[] thatFields = extractFields(obj);
    if (fields.length != thatFields.length) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] != thatFields[i]) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the field values from the given object for comparison.
 *
 * @param obj  the object.
 * @return An array of field values.
 */
protected double[] extractFields(Object obj) {
    // This method should be overridden in subclasses to extract specific fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Updated `equals` Method in `XYBarDataset`:
```java
@Override
protected double[] extractFields(Object obj) {
    XYBarDataset that = (XYBarDataset) obj;
    return new double[] { this.barWidth };
}

/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, this.barWidth);
}
```

---

### 3. Updated `equals` Method in `XYCoordinate`:
```java
@Override
protected double[] extractFields(Object obj) {
    XYCoordinate that = (XYCoordinate) obj;
    return new double[] { this.x, this.y };
}

/**
 * Tests this coordinate for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYCoordinate.class, this.x, this.y);
}
```",Type-2
527-1-8,src,org.jfree.chart.axis,SubCategoryAxis,equals,400,417,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1 (SubCategoryAxis.java, lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SubCategoryAxis && super.equals(obj)) {
        SubCategoryAxis axis = (SubCategoryAxis) obj;
        if (!this.subCategories.equals(axis.subCategories)) {
            return false;
        }
        if (!this.subLabelFont.equals(axis.subLabelFont)) {
            return false;   
        }
        if (!this.subLabelPaint.equals(axis.subLabelPaint)) {
            return false;   
        }
        return true;
    }
    return false;        
}
```

### Code Snippet 2 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific logic).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj) || !superEquals) {
        return false;
    }
    Object other = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object otherField = fields[i + 1];
        if (!thisField.equals(otherField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### SubCategoryAxis.java (lines 400-417)
```java
/**
 * Tests the axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SubCategoryAxis.class,
        super.equals(obj),
        this.subCategories, ((SubCategoryAxis) obj).subCategories,
        this.subLabelFont, ((SubCategoryAxis) obj).subLabelFont,
        this.subLabelPaint, ((SubCategoryAxis) obj).subLabelPaint
    );
}
```

---

#### SimpleHistogramDataset.java (lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SimpleHistogramDataset.class,
        true,
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins
    );
}
```",Type-3
527-3-8,src,org.jfree.chart.block,BlockContainer,equals,250,267,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method in `BlockContainer` class (lines 250-267)
```java
/**
 * Tests this container for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof BlockContainer)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    BlockContainer that = (BlockContainer) obj;
    if (!this.arrangement.equals(that.arrangement)) {
        return false;   
    }
    if (!this.blocks.equals(that.blocks)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `SimpleHistogramDataset` class (lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class-specific fields (`arrangement`, `blocks` in `BlockContainer` vs. `key`, `adjustForBinSize`, `bins` in `SimpleHistogramDataset`) and the class type checks (`BlockContainer` vs. `SimpleHistogramDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type for comparison.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Boolean) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `BlockContainer` Class
```java
/**
 * Tests this container for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, BlockContainer.class, 
        this.arrangement, ((BlockContainer) obj).arrangement,
        this.blocks, ((BlockContainer) obj).blocks);
}
```

---

### 3. Refactored `equals` Method in `SimpleHistogramDataset` Class
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins);
}
```",Type-3
527-4-8,src,org.jfree.chart.labels,AbstractPieItemLabelGenerator,equals,192,211,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1 (AbstractPieItemLabelGenerator.java, `equals` method, lines 192-211):
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractPieItemLabelGenerator)) {
        return false;
    }

    AbstractPieItemLabelGenerator that
            = (AbstractPieItemLabelGenerator) obj;
    if (!this.labelFormat.equals(that.labelFormat)) {
        return false;
    }
    if (!this.numberFormat.equals(that.numberFormat)) {
        return false;
    }
    if (!this.percentFormat.equals(that.percentFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (SimpleHistogramDataset.java, `equals` method, lines 440-457):
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields being compared: `labelFormat`, `numberFormat`, `percentFormat` in the first snippet vs. `key`, `adjustForBinSize`, `bins` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Compares the current object with another object for equality based on the provided fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `AbstractPieItemLabelGenerator`:
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, AbstractPieItemLabelGenerator.class, this.labelFormat, this.numberFormat, this.percentFormat);
}
```

### 3. Refactored `equals` Method in `SimpleHistogramDataset`:
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins);
}
```",Type-3
527-5-8,src,org.jfree.chart.labels,MultipleXYSeriesLabelGenerator,equals,205,224,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method from `MultipleXYSeriesLabelGenerator` (lines 205-224)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MultipleXYSeriesLabelGenerator)) {
        return false;
    }
    MultipleXYSeriesLabelGenerator that 
            = (MultipleXYSeriesLabelGenerator) obj;
    if (!this.formatPattern.equals(that.formatPattern)) {
        return false;
    }
    if (!this.additionalFormatPattern.equals(
            that.additionalFormatPattern)) {
        return false;
    }
    if (!this.seriesLabelLists.equals(that.seriesLabelLists)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `SimpleHistogramDataset` (lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different field names like `formatPattern`, `additionalFormatPattern`, `seriesLabelLists` in the first snippet and `key`, `adjustForBinSize`, `bins` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality based on provided fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `MultipleXYSeriesLabelGenerator`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, MultipleXYSeriesLabelGenerator.class, 
        this.formatPattern, this.additionalFormatPattern, this.seriesLabelLists);
}
```

### 3. Refactored `equals` Method in `SimpleHistogramDataset`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, this.adjustForBinSize, this.bins);
}
```",Type-3
527-6-8,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method from `StandardPieURLGenerator` class
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, 
            that.indexParameterName)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `SimpleHistogramDataset` class
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`prefix`, `categoryParameterName`, `indexParameterName` in the first snippet vs. `key`, `adjustForBinSize`, `bins` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality based on provided fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For now, it is a placeholder.
    return new Object[fieldCount];
}
```

---

### 2. Refactored `equals` Method in `StandardPieURLGenerator`
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardPieURLGenerator.class, 
        this.prefix, this.categoryParameterName, this.indexParameterName);
}
```

---

### 3. Refactored `equals` Method in `SimpleHistogramDataset`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, this.adjustForBinSize, this.bins);
}
```",Type-3
527-7-8,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1 (DefaultBoxAndWhiskerXYDataset.java, lines 520-538)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, field comparisons, and additional checks).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractXYDataset`)
```java
protected boolean datasetsAreEqual(Object obj, Object key, boolean adjustForBinSize, List<?> list1, List<?> list2, Class<?> expectedClass) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    if (!key.equals(((AbstractXYDataset) obj).key)) {
        return false;
    }
    if (adjustForBinSize != ((AbstractXYDataset) obj).adjustForBinSize) {
        return false;
    }
    if (!list1.equals(list2)) {
        return false;
    }
    return true;
}
```

### 2. Refactored Method Calls

#### In `DefaultBoxAndWhiskerXYDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, this.seriesKey, false, this.dates, this.items, DefaultBoxAndWhiskerXYDataset.class);
}
```

#### In `SimpleHistogramDataset.java`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, this.key, this.adjustForBinSize, this.bins, this.bins, SimpleHistogramDataset.class);
}
```",Type-3
527-8-9,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.xy,DefaultWindDataset,equals,412,429,Type 3,"### Code Snippet 1 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (DefaultWindDataset.java, lines 412-429)
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 *   <li><code>obj</code> is not <code>null</code>;</li>
 *   <li><code>obj</code> is an instance of
 *       <code>DefaultWindDataset</code>;</li>
 *   <li>both datasets have the same number of series containing identical
 *       values.</li>
 * <ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultWindDataset)) {
        return false;
    }
    DefaultWindDataset that = (DefaultWindDataset) obj;
    if (!this.seriesKeys.equals(that.seriesKeys)) {
        return false;
    }
    if (!this.allSeriesData.equals(that.allSeriesData)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class-specific fields (`key`, `adjustForBinSize`, `bins` vs. `seriesKeys`, `allSeriesData`) and the class type checks (`SimpleHistogramDataset` vs. `DefaultWindDataset`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractXYDataset`)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param keys  the keys to compare.
 * @param data  the data to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsDataset(Object obj, Class<?> clazz, List<?> keys, List<?> data) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    AbstractXYDataset that = (AbstractXYDataset) obj;
    if (!keys.equals(((AbstractXYDataset) that).getKeys())) {
        return false;
    }
    if (!data.equals(((AbstractXYDataset) that).getData())) {
        return false;
    }
    return true;
}
```

### 2. Refactored Method Calls

#### In `SimpleHistogramDataset.java`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsDataset(obj, SimpleHistogramDataset.class, this.key, this.bins);
}
```

#### In `DefaultWindDataset.java`
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsDataset(obj, DefaultWindDataset.class, this.seriesKeys, this.allSeriesData);
}
```",Type-3
552-1-2,src,org.jfree.chart.axis,SegmentedTimeline,getTimeFromLong,716,734,src,org.jfree.chart.axis,SegmentedTimeline,getTime,1180,1197,Type 3,"### Code Snippet 1: Method `getTimeFromLong` (Lines 716-734)
```java
/**
 * Converts a date/time value to take account of daylight savings time.
 *
 * @param date  the milliseconds.
 *
 * @return The milliseconds.
 */
public long getTimeFromLong(long date) {
    long result = date;
    if (this.adjustForDaylightSaving) {
        this.workingCalendarNoDST.setTime(new Date(date));
        this.workingCalendar.set(
            this.workingCalendarNoDST.get(Calendar.YEAR),
            this.workingCalendarNoDST.get(Calendar.MONTH),
            this.workingCalendarNoDST.get(Calendar.DATE),
            this.workingCalendarNoDST.get(Calendar.HOUR_OF_DAY),
            this.workingCalendarNoDST.get(Calendar.MINUTE),
            this.workingCalendarNoDST.get(Calendar.SECOND)
        );
        this.workingCalendar.set(Calendar.MILLISECOND,
                this.workingCalendarNoDST.get(Calendar.MILLISECOND));
        result = this.workingCalendar.getTime().getTime();
    }
    return result;
}
```

---

### Code Snippet 2: Method `getTime` (Lines 1180-1197)
```java
/**
 * Special method that handles conversion between the Default Time Zone and
 * a UTC time zone with no DST. This is needed so all days have the same
 * size. This method is the prefered way of converting a Data into
 * milliseconds for usage in this class.
 *
 * @param date Date to convert to long.
 *
 * @return The milliseconds.
 */
public long getTime(Date date) {
    long result = date.getTime();
    if (this.adjustForDaylightSaving) {
        this.workingCalendar.setTime(date);
        this.workingCalendarNoDST.set(
                this.workingCalendar.get(Calendar.YEAR),
                this.workingCalendar.get(Calendar.MONTH),
                this.workingCalendar.get(Calendar.DATE),
                this.workingCalendar.get(Calendar.HOUR_OF_DAY),
                this.workingCalendar.get(Calendar.MINUTE),
                this.workingCalendar.get(Calendar.SECOND));
        this.workingCalendarNoDST.set(Calendar.MILLISECOND,
                this.workingCalendar.get(Calendar.MILLISECOND));
        Date revisedDate = this.workingCalendarNoDST.getTime();
        result = revisedDate.getTime();
    }

    return result;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and variable usages.","### 1. Extracted Method
```java
/**
 * Handles conversion between time zones and adjusts for daylight savings time if required.
 *
 * @param calendarSource  the source calendar to set the time.
 * @param calendarTarget  the target calendar to adjust the time.
 * @param date            the date in milliseconds to adjust.
 *
 * @return The adjusted time in milliseconds.
 */
private long adjustForDaylightSaving(Calendar calendarSource, Calendar calendarTarget, long date) {
    calendarSource.setTime(new Date(date));
    calendarTarget.set(
        calendarSource.get(Calendar.YEAR),
        calendarSource.get(Calendar.MONTH),
        calendarSource.get(Calendar.DATE),
        calendarSource.get(Calendar.HOUR_OF_DAY),
        calendarSource.get(Calendar.MINUTE),
        calendarSource.get(Calendar.SECOND)
    );
    calendarTarget.set(Calendar.MILLISECOND, calendarSource.get(Calendar.MILLISECOND));
    return calendarTarget.getTime().getTime();
}
```

---

### 2. Refactored Method Calls

#### Refactored `getTimeFromLong` Method
```java
public long getTimeFromLong(long date) {
    long result = date;
    if (this.adjustForDaylightSaving) {
        result = adjustForDaylightSaving(this.workingCalendarNoDST, this.workingCalendar, date);
    }
    return result;
}
```

#### Refactored `getTime` Method
```java
public long getTime(Date date) {
    long result = date.getTime();
    if (this.adjustForDaylightSaving) {
        result = adjustForDaylightSaving(this.workingCalendar, this.workingCalendarNoDST, result);
    }
    return result;
}
```",Type-3
558-1-2,src,org.jfree.chart.axis,CategoryTick,equals,119,136,src,org.jfree.chart.plot.dial,DialPointer,equals,588,606,Type 3,"### Code Snippet 1 (CategoryTick.java, lines 119-136):
```java
/**
 * Tests this category tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;   
    }
    if (obj instanceof CategoryTick && super.equals(obj)) {
        CategoryTick that = (CategoryTick) obj;   
        if (!ObjectUtilities.equal(this.category, that.category)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.label, that.label)) {
            return false;   
        }
        if (!ObjectUtilities.equal(this.labelAnchor, that.labelAnchor)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (DialPointer.java, lines 588-606):
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPointer)) {
        return false;
    }
    DialPointer that = (DialPointer) obj;
    if (this.datasetIndex != that.datasetIndex) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and conditions).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Tick`):
```java
/**
 * Checks for equality between two objects based on provided fields.
 * 
 * @param obj  the object to compare with.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating equality.
 */
protected boolean checkEquality(Object obj, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !this.getClass().isInstance(obj)) {
        return false;
    }
    for (Object field : fields) {
        if (!ObjectUtilities.equal(field, ((Tick) obj).getFieldValue(field))) {
            return false;
        }
    }
    return super.equals(obj);
}

/**
 * Placeholder method to retrieve field values for comparison.
 * Subclasses should override this method to provide field-specific logic.
 * 
 * @param field  the field to retrieve.
 * 
 * @return The field value.
 */
protected Object getFieldValue(Object field) {
    return null;
}
```

### 2. Refactored `equals` Method in `CategoryTick`:
```java
/**
 * Tests this category tick for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(obj, this.category, this.label, this.labelAnchor);
}
```

### 3. Refactored `equals` Method in `DialPointer`:
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(obj, this.datasetIndex, this.radius);
}
```",Type-3
565-1-2,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.entity,LegendItemEntity,equals,173,190,Type 3,"### Code Snippet 1: `equals` method in `ExtendedCategoryAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `LegendItemEntity` class
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof LegendItemEntity)) {
        return false;
    }
    LegendItemEntity that = (LegendItemEntity) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (this.seriesIndex != that.seriesIndex) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.dataset, that.dataset)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`sublabelFont`, `sublabelPaint`, `sublabels` vs. `seriesKey`, `seriesIndex`, `dataset`) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], thatFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be implemented to extract the required fields
    // from the given object. For now, it returns a placeholder array.
    return new Object[fieldCount];
}
```

### 2. Method Calls Replacing the Clones

#### In `ExtendedCategoryAxis` class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ExtendedCategoryAxis.class, 
        this.sublabelFont, this.sublabelPaint, this.sublabels);
}
```

#### In `LegendItemEntity` class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, LegendItemEntity.class, 
        this.seriesKey, this.seriesIndex, this.dataset);
}
```",Type-3
565-1-3,src,org.jfree.chart.axis,ExtendedCategoryAxis,equals,199,216,src,org.jfree.chart.plot.dial,DialPointer,equals,588,606,Type 3,"### Code Snippet 1 (ExtendedCategoryAxis.java, lines 199-216)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ExtendedCategoryAxis)) {
        return false;
    }
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    if (!this.sublabelFont.equals(that.sublabelFont)) {
        return false;
    }
    if (!PaintUtilities.equal(this.sublabelPaint, that.sublabelPaint)) {
        return false;
    }
    if (!this.sublabels.equals(that.sublabels)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DialPointer.java, lines 588-606)
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPointer)) {
        return false;
    }
    DialPointer that = (DialPointer) obj;
    if (this.datasetIndex != that.datasetIndex) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields being compared and different class types).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Checks for equality between two objects by comparing specific fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean checkEquality(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return super.equals(obj);
}

/**
 * Extracts the fields to be compared for equality.
 * 
 * @param obj  the object from which to extract fields.
 * 
 * @return An array of field values.
 */
protected abstract Object[] extractFields(Object obj);
```

---

### 2. Updated `equals` Method in `ExtendedCategoryAxis.java`
```java
@Override
protected Object[] extractFields(Object obj) {
    ExtendedCategoryAxis that = (ExtendedCategoryAxis) obj;
    return new Object[] { that.sublabelFont, that.sublabelPaint, that.sublabels };
}

@Override
public boolean equals(Object obj) {
    return checkEquality(obj, ExtendedCategoryAxis.class, this.sublabelFont, this.sublabelPaint, this.sublabels);
}
```

---

### 3. Updated `equals` Method in `DialPointer.java`
```java
@Override
protected Object[] extractFields(Object obj) {
    DialPointer that = (DialPointer) obj;
    return new Object[] { that.datasetIndex, that.radius };
}

@Override
public boolean equals(Object obj) {
    return checkEquality(obj, DialPointer.class, this.datasetIndex, this.radius);
}
```",Type-3
580-2-3,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (StandardPieURLGenerator.java, lines 161-179)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, that.indexParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class type checks (`MinMaxCategoryRenderer` vs. `StandardPieURLGenerator`), field comparisons (`plotLines`, `groupPaint`, `groupStroke` vs. `prefix`, `categoryParameterName`, `indexParameterName`), and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        if (fields[i] instanceof Boolean) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (fields[i] instanceof String) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (fields[i] instanceof Object) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        }
    }
}
```",Type-3
580-2-4,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultBoxAndWhiskerXYDataset.java, lines 520-538)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`plotLines`, `groupPaint`, `groupStroke` in the first snippet vs. `seriesKey`, `dates`, `items` in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `MinMaxCategoryRenderer.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MinMaxCategoryRenderer.class,
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke
    ) && super.equals(obj);
}
```

---

### 3. Refactored Code in `DefaultBoxAndWhiskerXYDataset.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        DefaultBoxAndWhiskerXYDataset.class,
        this.seriesKey, ((DefaultBoxAndWhiskerXYDataset) obj).seriesKey,
        this.dates, ((DefaultBoxAndWhiskerXYDataset) obj).dates,
        this.items, ((DefaultBoxAndWhiskerXYDataset) obj).items
    );
}
```",Type-3
581-1-3,src,org.jfree.chart.labels,BubbleXYItemLabelGenerator,equals,244,261,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (BubbleXYItemLabelGenerator.java, lines 244-261)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BubbleXYItemLabelGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    BubbleXYItemLabelGenerator that = (BubbleXYItemLabelGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields and utility methods used for comparison (`ObjectUtilities.equal` vs. `PaintUtilities.equal`, `zFormat`/`zDateFormat` vs. `plotLines`/`groupPaint`/`groupStroke`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  an array of field pairs to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object[][] fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    for (Object[] fieldPair : fields) {
        if (!fieldPair[0].equals(fieldPair[1])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `BubbleXYItemLabelGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        BubbleXYItemLabelGenerator.class,
        super.equals(obj),
        new Object[][] {
            { this.zFormat, ((BubbleXYItemLabelGenerator) obj).zFormat },
            { this.zDateFormat, ((BubbleXYItemLabelGenerator) obj).zDateFormat }
        }
    );
}
```

---

### 3. Refactored Code in `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        MinMaxCategoryRenderer.class,
        super.equals(obj),
        new Object[][] {
            { this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines },
            { this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint },
            { this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke }
        }
    );
}
```",Type-3
581-2-3,src,org.jfree.chart.labels,StandardXYZToolTipGenerator,equals,239,256,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,Type 3,"### Code Snippet 1 (StandardXYZToolTipGenerator.java, lines 239-256)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardXYZToolTipGenerator)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) obj;
    if (!ObjectUtilities.equal(this.zFormat, that.zFormat)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.zDateFormat, that.zDateFormat)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (MinMaxCategoryRenderer.java, lines 434-451)
```java
/**
 * Tests this instance for equality with an arbitrary object.  The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different class names (`StandardXYZToolTipGenerator` vs. `MinMaxCategoryRenderer`), different fields (`zFormat`, `zDateFormat` vs. `plotLines`, `groupPaint`, `groupStroke`), and different utility methods (`ObjectUtilities.equal` vs. `PaintUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method Calls

#### In `StandardXYZToolTipGenerator.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StandardXYZToolTipGenerator.class, other -> {
        StandardXYZToolTipGenerator that = (StandardXYZToolTipGenerator) other;
        return ObjectUtilities.equal(this.zFormat, that.zFormat)
            && ObjectUtilities.equal(this.zDateFormat, that.zDateFormat);
    });
}
```

---

#### In `MinMaxCategoryRenderer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object. The icon
 * fields are NOT included in the test, so this implementation is a little
 * weak.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 *
 * @since 1.0.7
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MinMaxCategoryRenderer.class, other -> {
        MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) other;
        return this.plotLines == that.plotLines
            && PaintUtilities.equal(this.groupPaint, that.groupPaint)
            && this.groupStroke.equals(that.groupStroke);
    });
}
```",Type-3
581-3-4,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.chart.urls,StandardPieURLGenerator,equals,161,179,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (StandardPieURLGenerator.java, lines 161-179)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieURLGenerator)) {
        return false;
    }
    StandardPieURLGenerator that = (StandardPieURLGenerator) obj;
    if (!this.prefix.equals(that.prefix)) {
        return false;
    }
    if (!this.categoryParameterName.equals(that.categoryParameterName)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.indexParameterName, that.indexParameterName)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class type checks (`MinMaxCategoryRenderer` vs. `StandardPieURLGenerator`), field comparisons (`plotLines`, `groupPaint`, `groupStroke` vs. `prefix`, `categoryParameterName`, `indexParameterName`), and utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `MinMaxCategoryRenderer.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MinMaxCategoryRenderer.class,
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke
    ) && super.equals(obj);
}
```

---

#### In `StandardPieURLGenerator.java`
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, StandardPieURLGenerator.class,
        this.prefix, ((StandardPieURLGenerator) obj).prefix,
        this.categoryParameterName, ((StandardPieURLGenerator) obj).categoryParameterName,
        this.indexParameterName, ((StandardPieURLGenerator) obj).indexParameterName
    );
}
```",Type-3
581-3-5,src,org.jfree.chart.renderer.category,MinMaxCategoryRenderer,equals,434,451,src,org.jfree.data.statistics,DefaultBoxAndWhiskerXYDataset,equals,520,538,Type 3,"### Code Snippet 1 (MinMaxCategoryRenderer.java, lines 434-451)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof MinMaxCategoryRenderer)) {
        return false;
    }
    MinMaxCategoryRenderer that = (MinMaxCategoryRenderer) obj;
    if (this.plotLines != that.plotLines) {
        return false;
    }
    if (!PaintUtilities.equal(this.groupPaint, that.groupPaint)) {
        return false;
    }
    if (!this.groupStroke.equals(that.groupStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultBoxAndWhiskerXYDataset.java, lines 520-538)
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
        return false;
    }
    DefaultBoxAndWhiskerXYDataset that 
            = (DefaultBoxAndWhiskerXYDataset) obj;
    if (!ObjectUtilities.equal(this.seriesKey, that.seriesKey)) {
        return false;
    }
    if (!this.dates.equals(that.dates)) {
        return false;
    }
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different class names, fields, and utility methods).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### MinMaxCategoryRenderer.java
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MinMaxCategoryRenderer.class,
        this.plotLines, ((MinMaxCategoryRenderer) obj).plotLines,
        this.groupPaint, ((MinMaxCategoryRenderer) obj).groupPaint,
        this.groupStroke, ((MinMaxCategoryRenderer) obj).groupStroke
    ) && super.equals(obj);
}
```

---

#### DefaultBoxAndWhiskerXYDataset.java
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, DefaultBoxAndWhiskerXYDataset.class,
        this.seriesKey, ((DefaultBoxAndWhiskerXYDataset) obj).seriesKey,
        this.dates, ((DefaultBoxAndWhiskerXYDataset) obj).dates,
        this.items, ((DefaultBoxAndWhiskerXYDataset) obj).items
    );
}
```",Type-3
586-1-5,src,org.jfree.chart.annotations,AbstractXYAnnotation,equals,172,186,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,Type 3,"### Code Snippet 1 (AbstractXYAnnotation.java, lines 172-186)
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractXYAnnotation)) {
        return false;
    }
    AbstractXYAnnotation that = (AbstractXYAnnotation) obj;
    if (!ObjectUtilities.equal(this.toolTipText, that.toolTipText)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.url, that.url)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYAreaRenderer2.java, lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different class checks, field comparisons, and a call to `super.equals(obj)` in the second snippet).","### 1. Extracted Method (To be placed in the superclass `AbstractXYAnnotation`)
```java
/**
 * Utility method to test equality for annotations or renderers.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (!ObjectUtilities.equal(field1, field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### AbstractXYAnnotation.java (lines 172-186)
```java
/**
 * Tests this annotation for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, AbstractXYAnnotation.class, 
        this.toolTipText, ((AbstractXYAnnotation) obj).toolTipText, 
        this.url, ((AbstractXYAnnotation) obj).url);
}
```

---

#### XYAreaRenderer2.java (lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYAreaRenderer2.class, 
        this.showOutline, ((XYAreaRenderer2) obj).showOutline, 
        this.legendArea, ((XYAreaRenderer2) obj).legendArea) 
        && super.equals(obj);
}
```",Type-3
586-2-4,src,org.jfree.chart.axis,QuarterDateFormat,equals,190,204,src,org.jfree.chart.plot.dial,DialBackground,equals,203,218,Type 3,"### Code Snippet 1 (QuarterDateFormat.java, equals method, lines 190-204):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof QuarterDateFormat)) {
        return false;
    }
    QuarterDateFormat that = (QuarterDateFormat) obj;
    if (!Arrays.equals(this.quarters, that.quarters)) {
        return false;
    }
    if (this.quarterFirst != that.quarterFirst) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DialBackground.java, equals method, lines 203-218):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialBackground)) {
        return false;
    }
    DialBackground that = (DialBackground) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!this.gradientPaintTransformer.equals(
            that.gradientPaintTransformer)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar in structure and logic but have different statements and conditions specific to their respective classes (`QuarterDateFormat` and `DialBackground`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param additionalChecks  a lambda function for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `QuarterDateFormat.java`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, QuarterDateFormat.class, other -> {
        QuarterDateFormat that = (QuarterDateFormat) other;
        return Arrays.equals(this.quarters, that.quarters)
                && this.quarterFirst == that.quarterFirst
                && super.equals(obj);
    });
}
```

---

### 3. Refactored `equals` Method in `DialBackground.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, DialBackground.class, other -> {
        DialBackground that = (DialBackground) other;
        return PaintUtilities.equal(this.paint, that.paint)
                && this.gradientPaintTransformer.equals(that.gradientPaintTransformer)
                && super.equals(obj);
    });
}
```",Type-3
586-2-5,src,org.jfree.chart.axis,QuarterDateFormat,equals,190,204,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,Type 3,"### Code Snippet 1: `QuarterDateFormat.equals` Method
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof QuarterDateFormat)) {
        return false;
    }
    QuarterDateFormat that = (QuarterDateFormat) obj;
    if (!Arrays.equals(this.quarters, that.quarters)) {
        return false;
    }
    if (this.quarterFirst != that.quarterFirst) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `XYAreaRenderer2.equals` Method
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`quarters`, `quarterFirst` vs. `showOutline`, `legendArea`) and the utility methods used (`Arrays.equals` vs. `ShapeUtilities.equal`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractEqualityChecker`):
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fieldsEqualCheck  a lambda to check equality of specific fields.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, EqualityChecker fieldsEqualCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return fieldsEqualCheck.checkEquality(obj) && super.equals(obj);
}

/**
 * Functional interface for field-specific equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `QuarterDateFormat.equals` Method:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, QuarterDateFormat.class, other -> {
        QuarterDateFormat that = (QuarterDateFormat) other;
        return Arrays.equals(this.quarters, that.quarters) 
                && this.quarterFirst == that.quarterFirst;
    });
}
```

---

### 3. Refactored `XYAreaRenderer2.equals` Method:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYAreaRenderer2.class, other -> {
        XYAreaRenderer2 that = (XYAreaRenderer2) other;
        return this.showOutline == that.showOutline 
                && ShapeUtilities.equal(this.legendArea, that.legendArea);
    });
}
```",Type-3
586-2-7,src,org.jfree.chart.axis,QuarterDateFormat,equals,190,204,src,org.jfree.data,KeyToGroupMap,equals,232,246,Type 3,"### Code Snippet 1 (QuarterDateFormat.java, `equals` method, lines 190-204):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof QuarterDateFormat)) {
        return false;
    }
    QuarterDateFormat that = (QuarterDateFormat) obj;
    if (!Arrays.equals(this.quarters, that.quarters)) {
        return false;
    }
    if (this.quarterFirst != that.quarterFirst) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyToGroupMap.java, `equals` method, lines 232-246):
```java
/**
 * Tests the map for equality against an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!(obj instanceof KeyToGroupMap)) {
        return false;
    }
    KeyToGroupMap that = (KeyToGroupMap) obj;
    if (!ObjectUtilities.equal(this.defaultGroup, that.defaultGroup)) {
        return false;
    }
    if (!this.keyToGroupMap.equals(that.keyToGroupMap)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`quarters` and `quarterFirst` in the first snippet, and `defaultGroup` and `keyToGroupMap` in the second snippet) and the use of `Arrays.equals` vs. `ObjectUtilities.equal`.","### 1. Extracted Method (To be placed in the common superclass, e.g., `BaseEquality`):
```java
/**
 * Tests two objects for equality based on provided parameters.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fieldsEqual  a boolean indicating if the fields are equal.
 * 
 * @return A boolean indicating equality.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, boolean fieldsEqual) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return fieldsEqual;
}
```

---

### 2. Refactored `equals` Method in `QuarterDateFormat.java`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    boolean fieldsEqual = obj instanceof QuarterDateFormat
            && Arrays.equals(this.quarters, ((QuarterDateFormat) obj).quarters)
            && this.quarterFirst == ((QuarterDateFormat) obj).quarterFirst
            && super.equals(obj);
    return baseEquals(obj, QuarterDateFormat.class, fieldsEqual);
}
```

---

### 3. Refactored `equals` Method in `KeyToGroupMap.java`:
```java
/**
 * Tests the map for equality against an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    boolean fieldsEqual = obj instanceof KeyToGroupMap
            && ObjectUtilities.equal(this.defaultGroup, ((KeyToGroupMap) obj).defaultGroup)
            && this.keyToGroupMap.equals(((KeyToGroupMap) obj).keyToGroupMap);
    return baseEquals(obj, KeyToGroupMap.class, fieldsEqual);
}
```",Type-3
586-3-5,src,org.jfree.chart.block,BlockBorder,equals,200,214,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,Type 3,"### Code Snippet 1 (BlockBorder.java, lines 200-214)
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof BlockBorder)) {
        return false;   
    }
    BlockBorder that = (BlockBorder) obj;
    if (!this.insets.equals(that.insets)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYAreaRenderer2.java, lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different class names, fields, and utility methods).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### BlockBorder.java (lines 200-214)
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        BlockBorder.class,
        this.insets.equals(((BlockBorder) obj).insets),
        PaintUtilities.equal(this.paint, ((BlockBorder) obj).paint)
    );
}
```

---

#### XYAreaRenderer2.java (lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYAreaRenderer2.class,
        this.showOutline == ((XYAreaRenderer2) obj).showOutline,
        ShapeUtilities.equal(this.legendArea, ((XYAreaRenderer2) obj).legendArea),
        super.equals(obj)
    );
}
```",Type-3
586-4-5,src,org.jfree.chart.plot.dial,DialBackground,equals,203,218,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,Type 3,"### Code Snippet 1 (DialBackground.java, lines 203-218)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialBackground)) {
        return false;
    }
    DialBackground that = (DialBackground) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    if (!this.gradientPaintTransformer.equals(
            that.gradientPaintTransformer)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYAreaRenderer2.java, lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type: **Type-3 (Mostly similar but with some different statements)**","### 1. Extracted Method (To be placed in the common superclass, `AbstractDialLayer`)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param equalityChecks  an array of boolean checks for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... equalityChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean check : equalityChecks) {
        if (!check) {
            return false;
        }
    }
    return super.equals(obj);
}
```

### 2. Refactored `equals` Method in `DialBackground.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        DialBackground.class,
        PaintUtilities.equal(this.paint, ((DialBackground) obj).paint),
        this.gradientPaintTransformer.equals(((DialBackground) obj).gradientPaintTransformer)
    );
}
```

### 3. Refactored `equals` Method in `XYAreaRenderer2.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYAreaRenderer2.class,
        this.showOutline == ((XYAreaRenderer2) obj).showOutline,
        ShapeUtilities.equal(this.legendArea, ((XYAreaRenderer2) obj).legendArea)
    );
}
```",Type-3
586-5-6,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data,ComparableObjectItem,equals,161,175,Type 3,"### Code Snippet 1 (XYAreaRenderer2.java, `equals` method, lines 433-447):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)

---

### Code Snippet 2 (ComparableObjectItem.java, `equals` method, lines 161-175):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectItem)) {
        return false;
    }
    ComparableObjectItem that = (ComparableObjectItem) obj;
    if (!this.x.equals(that.x)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.obj, that.obj)) {
        return false;
    }
    return true;        
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass):
```java
/**
 * Tests two objects for equality.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param field1  the first field to compare.
 * @param field2  the second field to compare.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    if (!field1.equals(((ComparableObjectItem) that).x)) {
        return false;
    }
    if (!ObjectUtilities.equal(field2, ((ComparableObjectItem) that).obj)) {
        return false;
    }
    return true;
}
```

",Type-2
586-5-7,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data,KeyToGroupMap,equals,232,246,Type 3,"### Code Snippet 1 (XYAreaRenderer2.java, `equals` method, lines 433-447):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyToGroupMap.java, `equals` method, lines 232-246):
```java
/**
 * Tests the map for equality against an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!(obj instanceof KeyToGroupMap)) {
        return false;
    }
    KeyToGroupMap that = (KeyToGroupMap) obj;
    if (!ObjectUtilities.equal(this.defaultGroup, that.defaultGroup)) {
        return false;
    }
    if (!this.keyToGroupMap.equals(that.keyToGroupMap)) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1**: Type-3 Clone (Mostly similar but with some different statements, such as `ShapeUtilities.equal` and `super.equals(obj)`).
- **Code Snippet 2**: Type-3 Clone (Mostly similar but with some different statements, such as `ObjectUtilities.equal` and `keyToGroupMap.equals`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass):
```java
/**
 * Tests two objects for equality.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param additionalChecks  a lambda or functional interface for additional equality checks.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Code in `XYAreaRenderer2.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYAreaRenderer2.class, (other) -> {
        XYAreaRenderer2 that = (XYAreaRenderer2) other;
        if (this.showOutline != that.showOutline) {
            return false;
        }
        if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
            return false;
        }
        return super.equals(obj);
    });
}
```

---

### 3. Refactored Code in `KeyToGroupMap.java`:
```java
/**
 * Tests the map for equality against an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, KeyToGroupMap.class, (other) -> {
        KeyToGroupMap that = (KeyToGroupMap) other;
        if (!ObjectUtilities.equal(this.defaultGroup, that.defaultGroup)) {
            return false;
        }
        if (!this.keyToGroupMap.equals(that.keyToGroupMap)) {
            return false;
        }
        return true;
    });
}
```",Type-3
586-5-8,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data,KeyedObject,equals,128,146,Type 3,"### Code Snippet 1 (from `XYAreaRenderer2` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)

---

### Code Snippet 2 (from `KeyedObject` class, `equals` method):

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof KeyedObject)) {
        return false;
    }
    KeyedObject that = (KeyedObject) obj;
    if (!ObjectUtilities.equal(this.key, that.key)) {
        return false;
    }

    if (!ObjectUtilities.equal(this.object, that.object)) {
        return false;
    }

    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass):

```java
/**
 * Tests two objects for equality based on specific fields.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYAreaRenderer2`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYAreaRenderer2.class,
        this.showOutline == ((XYAreaRenderer2) obj).showOutline,
        ShapeUtilities.equal(this.legendArea, ((XYAreaRenderer2) obj).legendArea),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `KeyedObject`:

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        KeyedObject.class,
        ObjectUtilities.equal(this.key, ((KeyedObject) obj).key),
        ObjectUtilities.equal(this.object, ((KeyedObject) obj).object)
    );
}
```",Type-3
586-5-9,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data.statistics,HistogramDataset,equals,471,485,Type 3,"### Code Snippet 1 (XYAreaRenderer2.java, lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)

---

### Code Snippet 2 (HistogramDataset.java, lines 471-485)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HistogramDataset)) {
        return false;
    }
    HistogramDataset that = (HistogramDataset) obj;
    if (!ObjectUtilities.equal(this.type, that.type)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.list, that.list)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fieldComparisons  an array of boolean comparisons for instance-specific fields.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return super.equals(obj);
}
```

---

### 2. Refactored Method in `XYAreaRenderer2.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYAreaRenderer2.class,
        this.showOutline == ((XYAreaRenderer2) obj).showOutline,
        ShapeUtilities.equal(this.legendArea, ((XYAreaRenderer2) obj).legendArea)
    );
}
```

---

### 3. Refactored Method in `HistogramDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        HistogramDataset.class,
        ObjectUtilities.equal(this.type, ((HistogramDataset) obj).type),
        ObjectUtilities.equal(this.list, ((HistogramDataset) obj).list)
    );
}
```",Type-2
586-5-10,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data.statistics,MeanAndStandardDeviation,equals,148,164,Type 3,"### Code Snippet 1 (from `XYAreaRenderer2` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `MeanAndStandardDeviation` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof MeanAndStandardDeviation)) {
        return false;   
    }
    MeanAndStandardDeviation that = (MeanAndStandardDeviation) obj;
    if (!ObjectUtilities.equal(this.mean, that.mean)) {
        return false;   
    }
    if (!ObjectUtilities.equal(
        this.standardDeviation, that.standardDeviation)
    ) {
        return false;   
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`showOutline`, `legendArea`, `mean`, `standardDeviation`) and utility methods (`ShapeUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality based on their specific fields.
 * 
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!ObjectUtilities.equal(fields[i], otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be overridden in subclasses to extract specific fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Updated `equals` Method in `XYAreaRenderer2`:

```java
@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    return new Object[] { that.showOutline, that.legendArea };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYAreaRenderer2.class, this.showOutline, this.legendArea);
}
```

---

### 3. Updated `equals` Method in `MeanAndStandardDeviation`:

```java
@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    MeanAndStandardDeviation that = (MeanAndStandardDeviation) obj;
    return new Object[] { that.mean, that.standardDeviation };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MeanAndStandardDeviation.class, this.mean, this.standardDeviation);
}
```",Type-3
586-5-11,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data.xy,DefaultOHLCDataset,equals,308,322,Type 3,"### Code Snippet 1: `equals` method in `XYAreaRenderer2` class (lines 433-447)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `DefaultOHLCDataset` class (lines 308-322)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultOHLCDataset)) {
        return false;
    }
    DefaultOHLCDataset that = (DefaultOHLCDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (!Arrays.equals(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones**.  
- They are **mostly similar** in structure and logic but have **different statements** and operate on different fields (`showOutline`, `legendArea` in `XYAreaRenderer2` vs. `key`, `data` in `DefaultOHLCDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(thatFields[i])) {
",Type-3
586-5-12,src,org.jfree.chart.renderer.xy,XYAreaRenderer2,equals,433,447,src,org.jfree.data.xy,XYDataItem,equals,227,241,Type 3,"### Code Snippet 1 (from `XYAreaRenderer2` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {    
        return true;
    }
    if (!(obj instanceof XYAreaRenderer2)) {
        return false;
    }
    XYAreaRenderer2 that = (XYAreaRenderer2) obj;
    if (this.showOutline != that.showOutline) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendArea, that.legendArea)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `XYDataItem` class, `equals` method):

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDataItem)) {
        return false;
    }
    XYDataItem that = (XYDataItem) obj;
    if (!this.x.equals(that.x)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.y, that.y)) {
        return false;
    }
    return true;        
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class-specific checks (`XYAreaRenderer2` vs. `XYDataItem`), the fields being compared (`showOutline`, `legendArea` vs. `x`, `y`), and the utility methods used (`ShapeUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer` or another appropriate superclass):

```java
/**
 * Tests two objects for equality based on their fields.
 *
 * @param obj  the object to test against for equality (<code>null</code> not permitted).
 * @param clazz  the class type to check.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `XYAreaRenderer2`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYAreaRenderer2.class,
        this.showOutline == ((XYAreaRenderer2) obj).showOutline,
        ShapeUtilities.equal(this.legendArea, ((XYAreaRenderer2) obj).legendArea),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `XYDataItem`:

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYDataItem.class,
        this.x.equals(((XYDataItem) obj).x),
        ObjectUtilities.equal(this.y, ((XYDataItem) obj).y)
    );
}
```",Type-3
606-1-2,src,org.jfree.chart.axis,ModuloAxis,equals,411,428,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,Type 3,"### Code Snippet 1 (ModuloAxis.java, lines 411-428)
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ModuloAxis)) {
        return false;
    }
    ModuloAxis that = (ModuloAxis) obj;
    if (this.displayStart != that.displayStart) {
        return false;
    }
    if (this.displayEnd != that.displayEnd) {
        return false;
    }
    if (!this.fixedRange.equals(that.fixedRange)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (CategoryMarker.java, lines 165-182)
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the specific fields being compared (`displayStart`, `displayEnd`, `fixedRange` in `ModuloAxis` vs. `key`, `drawAsLine` in `CategoryMarker`) and the null check for the `obj` parameter in the second snippet.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == null) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Boolean || fields[i] instanceof Double || fields[i] instanceof Integer) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        }
    }
    return true;
}
```

",Type-3
606-1-5,src,org.jfree.chart.axis,ModuloAxis,equals,411,428,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method from `ModuloAxis` class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ModuloAxis)) {
        return false;
    }
    ModuloAxis that = (ModuloAxis) obj;
    if (this.displayStart != that.displayStart) {
        return false;
    }
    if (this.displayEnd != that.displayEnd) {
        return false;
    }
    if (!this.fixedRange.equals(that.fixedRange)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `SimpleHistogramDataset` class
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific fields being compared (`displayStart`, `displayEnd`, `fixedRange` in `ModuloAxis` vs. `key`, `adjustForBinSize`, `bins` in `SimpleHistogramDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the current object with another object for equality.
 * 
 * @param obj  the object to compare with.
 * @param classType  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> classType, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    Object that = classType.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (thisField != null && !thisField.equals(thatField)) {
            return false;
        } else if (thisField == null && thatField != null) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ModuloAxis` Class
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ModuloAxis.class, 
        this.displayStart, ((ModuloAxis) obj).displayStart,
        this.displayEnd, ((ModuloAxis) obj).displayEnd,
        this.fixedRange, ((ModuloAxis) obj).fixedRange,
        this, obj);
}
```

---

### 3. Refactored `equals` Method in `SimpleHistogramDataset` Class
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins);
}
```",Type-3
606-2-3,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.category,SlidingCategoryDataset,equals,306,323,Type 3,"### Code Snippet 1: `equals` method from `CategoryMarker` class
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `SlidingCategoryDataset` class
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SlidingCategoryDataset)) {
        return false;
    }
    SlidingCategoryDataset that = (SlidingCategoryDataset) obj;
    if (this.firstCategoryIndex != that.firstCategoryIndex) {
        return false;
    }
    if (this.maximumCategoryCount != that.maximumCategoryCount) {
        return false;
    }
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar in structure and logic but contain different statements and fields specific to their respective classes (`CategoryMarker` and `SlidingCategoryDataset`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance for comparison.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityCheck additionalChecks) {
    if (obj == null) {
        return false;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `CategoryMarker` Class
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryMarker.class, (other) -> {
        CategoryMarker that = (CategoryMarker) other;
        if (!this.key.equals(that.key)) {
            return false;
        }
        if (this.drawAsLine != that.drawAsLine) {
            return false;
        }
        return true;
    });
}
```

---

### 3. Refactored `equals` Method in `SlidingCategoryDataset` Class
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SlidingCategoryDataset.class, (other) -> {
        SlidingCategoryDataset that = (SlidingCategoryDataset) other;
        if (this.firstCategoryIndex != that.firstCategoryIndex) {
            return false;
        }
        if (this.maximumCategoryCount != that.maximumCategoryCount) {
            return false;
        }
        if (!this.underlying.equals(that.underlying)) {
            return false;
        }
        return true;
    });
}
```",Type-3
606-2-4,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,equals,566,583,Type 3,"### Code Snippet 1: `equals` method from `CategoryMarker` class
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `SlidingGanttCategoryDataset` class
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SlidingGanttCategoryDataset)) {
        return false;
    }
    SlidingGanttCategoryDataset that = (SlidingGanttCategoryDataset) obj;
    if (this.firstCategoryIndex != that.firstCategoryIndex) {
        return false;
    }
    if (this.maximumCategoryCount != that.maximumCategoryCount) {
        return false;
    }
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-4 clones** because they have different structures but achieve the same functionality: testing equality between objects.","### 1. Extracted Method (to be placed in the superclass `Object` or a relevant common superclass)
```java
/**
 * Tests two objects for equality based on provided parameters.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == null) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CategoryMarker` Class
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryMarker.class, super.equals(obj), this.key, this.drawAsLine, new Object[] { ((CategoryMarker) obj).key, ((CategoryMarker) obj).drawAsLine });
}
```

---

### 3. Refactored `equals` Method in `SlidingGanttCategoryDataset` Class
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SlidingGanttCategoryDataset.class, true, this.firstCategoryIndex, this.maximumCategoryCount, this.underlying, new Object[] { ((SlidingGanttCategoryDataset) obj).firstCategoryIndex, ((SlidingGanttCategoryDataset) obj).maximumCategoryCount, ((SlidingGanttCategoryDataset) obj).underlying });
}
```",Type-4
606-2-6,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.time,TimePeriodValuesCollection,equals,438,455,Type 3,"### Code Snippet 1: `CategoryMarker.equals` Method
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `TimePeriodValuesCollection.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValuesCollection)) {
        return false;   
    }
    TimePeriodValuesCollection that = (TimePeriodValuesCollection) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;   
    }
    if (this.xPosition != that.xPosition) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;   
}
```

---

### Clone Type:
The two code snippets represent **Type-3 Clones**. They are mostly similar but contain different statements and logic specific to their respective classes (`CategoryMarker` and `TimePeriodValuesCollection`).","### 1. Extracted Method (To be placed in the superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `CategoryMarker.equals` Method
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, CategoryMarker.class, (other) -> {
        CategoryMarker that = (CategoryMarker) other;
        return this.key.equals(that.key) && this.drawAsLine == that.drawAsLine;
    });
}
```

---

### 3. Refactored `TimePeriodValuesCollection.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, TimePeriodValuesCollection.class, (other) -> {
        TimePeriodValuesCollection that = (TimePeriodValuesCollection) other;
        return this.domainIsPointsInTime == that.domainIsPointsInTime
                && this.xPosition == that.xPosition
                && ObjectUtilities.equal(this.data, that.data);
    });
}
```",Type-3
606-2-7,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.time,TimeSeriesCollection,equals,633,650,Type 3,"### Code Snippet 1 (CategoryMarker.java, lines 165-182)
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TimeSeriesCollection.java, lines 633-650)
```java
/**
 * Tests this time series collection for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesCollection)) {
        return false;
    }
    TimeSeriesCollection that = (TimeSeriesCollection) obj;
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests for equality between this object and another object.
 *
 * @param obj  the object to compare.
 * @param clazz  the expected class of the object.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean indicating equality.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method in `CategoryMarker.java`
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, CategoryMarker.class, other -> {
        CategoryMarker that = (CategoryMarker) other;
        return this.key.equals(that.key) && this.drawAsLine == that.drawAsLine;
    });
}
```

---

### 3. Refactored Method in `TimeSeriesCollection.java`
```java
/**
 * Tests this time series collection for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, TimeSeriesCollection.class, other -> {
        TimeSeriesCollection that = (TimeSeriesCollection) other;
        return this.xPosition == that.xPosition
            && this.domainIsPointsInTime == that.domainIsPointsInTime
            && ObjectUtilities.equal(this.data, that.data);
    });
}
```",Type-3
606-2-8,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.xy,IntervalXYDelegate,equals,432,449,Type 3,"### Code Snippet 1: `CategoryMarker.equals` Method
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `IntervalXYDelegate.equals` Method
```java
/**
 * Tests the delegate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof IntervalXYDelegate)) {
        return false;   
    }
    IntervalXYDelegate that = (IntervalXYDelegate) obj;
    if (this.autoWidth != that.autoWidth) {
        return false;   
    }
    if (this.intervalPositionFactor != that.intervalPositionFactor) {
        return false;   
    }
    if (this.fixedIntervalWidth != that.fixedIntervalWidth) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`CategoryMarker` and `IntervalXYDelegate`).","### 1. Extracted Method (To be placed in the superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(clazz.cast(obj));
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck<T> {
    boolean checkEquality(T other);
}
```

---

### 2. Refactored `CategoryMarker.equals` Method
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryMarker.class, that -> 
        this.key.equals(that.key) && this.drawAsLine == that.drawAsLine
    );
}
```

---

### 3. Refactored `IntervalXYDelegate.equals` Method
```java
/**
 * Tests the delegate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, IntervalXYDelegate.class, that -> 
        this.autoWidth == that.autoWidth &&
        this.intervalPositionFactor == that.intervalPositionFactor &&
        this.fixedIntervalWidth == that.fixedIntervalWidth
    );
}
```",Type-3
606-2-9,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.xy,YInterval,equals,109,126,Type 3,"### Code Snippet 1: `CategoryMarker.equals` (Start Line 165, End Line 182)
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `YInterval.equals` (Start Line 109, End Line 126)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof YInterval)) {
        return false;
    }
    YInterval that = (YInterval) obj;
    if (this.y != that.y) {
        return false;
    }
    if (this.yLow != that.yLow) {
        return false;
    }
    if (this.yHigh != that.yHigh) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different fields (`key`, `drawAsLine` vs. `y`, `yLow`, `yHigh`) and different class types (`CategoryMarker` vs. `YInterval`).","### 1. Extracted Method (To be placed in the superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == null) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (Double.compare((Double) thisField, (Double) thatField) != 0) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `CategoryMarker.equals` Method
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryMarker.class, 
        this.key, ((CategoryMarker) obj).key, 
        this.drawAsLine, ((CategoryMarker) obj).drawAsLine);
}
```

---

### 3. Refactored `YInterval.equals` Method
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, YInterval.class, 
        this.y, ((YInterval) obj).y, 
        this.yLow, ((YInterval) obj).yLow, 
        this.yHigh, ((YInterval) obj).yHigh);
}
```",Type-3
606-2-10,src,org.jfree.chart.plot,CategoryMarker,equals,165,182,src,org.jfree.data.xy,YWithXInterval,equals,113,130,Type 3,"### Code Snippet 1: `equals` method from `CategoryMarker` class
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof CategoryMarker)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    CategoryMarker that = (CategoryMarker) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.drawAsLine != that.drawAsLine) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `YWithXInterval` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof YWithXInterval)) {
        return false;
    }
    YWithXInterval that = (YWithXInterval) obj;
    if (this.y != that.y) {
        return false;
    }
    if (this.xLow != that.xLow) {
        return false;
    }
    if (this.xHigh != that.xHigh) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`key`, `drawAsLine` vs. `y`, `xLow`, `xHigh`) and the structure of the initial `if` conditions.","### 1. Extracted Method (to be placed in the superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `CategoryMarker`
```java
/**
 * Tests the marker for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryMarker.class, this.key, this.drawAsLine);
}
```

### 3. Refactored `equals` Method in `YWithXInterval`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, YWithXInterval.class, this.y, this.xLow, this.xHigh);
}
```",Type-3
606-3-5,src,org.jfree.data.category,SlidingCategoryDataset,equals,306,323,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method from `SlidingCategoryDataset` (lines 306-323)
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SlidingCategoryDataset)) {
        return false;
    }
    SlidingCategoryDataset that = (SlidingCategoryDataset) obj;
    if (this.firstCategoryIndex != that.firstCategoryIndex) {
        return false;
    }
    if (this.maximumCategoryCount != that.maximumCategoryCount) {
        return false;
    }
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `SimpleHistogramDataset` (lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`firstCategoryIndex`, `maximumCategoryCount`, `underlying` in the first snippet vs. `key`, `adjustForBinSize`, `bins` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractDataset`)
```java
protected boolean datasetsAreEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Integer || thisField instanceof Boolean) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `SlidingCategoryDataset`
```java
@Override
public boolean equals(Object obj) {
    return datasetsAreEqual(
        obj,
        SlidingCategoryDataset.class,
        this.firstCategoryIndex, ((SlidingCategoryDataset) obj).firstCategoryIndex,
        this.maximumCategoryCount, ((SlidingCategoryDataset) obj).maximumCategoryCount,
        this.underlying, ((SlidingCategoryDataset) obj).underlying
    );
}
```

---

### 3. Refactored `equals` Method in `SimpleHistogramDataset`
```java
@Override
public boolean equals(Object obj) {
    return datasetsAreEqual(
        obj,
        SimpleHistogramDataset.class,
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins
    );
}
```",Type-3
606-4-5,src,org.jfree.data.gantt,SlidingGanttCategoryDataset,equals,566,583,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1 (SlidingGanttCategoryDataset.java, lines 566-583)
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SlidingGanttCategoryDataset)) {
        return false;
    }
    SlidingGanttCategoryDataset that = (SlidingGanttCategoryDataset) obj;
    if (this.firstCategoryIndex != that.firstCategoryIndex) {
        return false;
    }
    if (this.maximumCategoryCount != that.maximumCategoryCount) {
        return false;
    }
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different field comparisons and class types).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored Method Calls

#### SlidingGanttCategoryDataset.java
```java
/**
 * Tests this <code>SlidingCategoryDataset</code> for equality with an
 * arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SlidingGanttCategoryDataset.class,
        this.firstCategoryIndex,
        this.maximumCategoryCount,
        this.underlying,
        new Object[] {
            ((SlidingGanttCategoryDataset) obj).firstCategoryIndex,
            ((SlidingGanttCategoryDataset) obj).maximumCategoryCount,
            ((SlidingGanttCategoryDataset) obj).underlying
        }
    );
}
```

#### SimpleHistogramDataset.java
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        SimpleHistogramDataset.class,
        this.key,
        this.adjustForBinSize,
        this.bins,
        new Object[] {
            ((SimpleHistogramDataset) obj).key,
            ((SimpleHistogramDataset) obj).adjustForBinSize,
            ((SimpleHistogramDataset) obj).bins
        }
    );
}
```",Type-3
606-5-6,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.time,TimePeriodValuesCollection,equals,438,455,Type 3,"### Code Snippet 1 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TimePeriodValuesCollection.java, lines 438-455)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValuesCollection)) {
        return false;   
    }
    TimePeriodValuesCollection that = (TimePeriodValuesCollection) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;   
    }
    if (this.xPosition != that.xPosition) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;   
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`key`, `adjustForBinSize`, `bins` vs. `domainIsPointsInTime`, `xPosition`, `data`) and the utility method used (`ObjectUtilities.equal` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractIntervalXYDataset`)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    Object[] fieldValues = new Object[fieldCount];
    // Logic to extract fields from the object (implementation depends on the fields being compared)
    return fieldValues;
}
```

### 2. Refactored Method Calls

#### In `SimpleHistogramDataset.java`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins);
}
```

#### In `TimePeriodValuesCollection.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, TimePeriodValuesCollection.class, this.domainIsPointsInTime, this.xPosition, this.data);
}
```",Type-3
606-5-7,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.time,TimeSeriesCollection,equals,633,650,Type 3,"### Code Snippet 1 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TimeSeriesCollection.java, lines 633-650)
```java
/**
 * Tests this time series collection for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesCollection)) {
        return false;
    }
    TimeSeriesCollection that = (TimeSeriesCollection) obj;
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., different fields being compared: `key`, `adjustForBinSize`, `bins` in the first snippet vs. `xPosition`, `domainIsPointsInTime`, `data` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `SimpleHistogramDataset.java`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins
    );
}
```

---

### 3. Refactored Method in `TimeSeriesCollection.java`
```java
/**
 * Tests this time series collection for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, TimeSeriesCollection.class, 
        this.xPosition, ((TimeSeriesCollection) obj).xPosition,
        this.domainIsPointsInTime, ((TimeSeriesCollection) obj).domainIsPointsInTime,
        this.data, ((TimeSeriesCollection) obj).data
    );
}
```",Type-3
606-5-8,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.xy,IntervalXYDelegate,equals,432,449,Type 3,"### Code Snippet 1 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (IntervalXYDelegate.java, lines 432-449)
```java
/**
 * Tests the delegate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof IntervalXYDelegate)) {
        return false;   
    }
    IntervalXYDelegate that = (IntervalXYDelegate) obj;
    if (this.autoWidth != that.autoWidth) {
        return false;   
    }
    if (this.intervalPositionFactor != that.intervalPositionFactor) {
        return false;   
    }
    if (this.fixedIntervalWidth != that.fixedIntervalWidth) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different field names and class types).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param key  the key to compare.
 * @param adjustForBinSize  the adjustForBinSize flag (if applicable).
 * @param bins  the bins or other comparable collection (if applicable).
 * @param autoWidth  the autoWidth flag (if applicable).
 * @param intervalPositionFactor  the interval position factor (if applicable).
 * @param fixedIntervalWidth  the fixed interval width (if applicable).
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object key, 
                           Boolean adjustForBinSize, Object bins, 
                           Boolean autoWidth, Double intervalPositionFactor, 
                           Double fixedIntervalWidth) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (key != null && !key.equals(((SimpleHistogramDataset) obj).key)) {
        return false;
    }
    if (adjustForBinSize != null && 
        !adjustForBinSize.equals(((SimpleHistogramDataset) obj).adjustForBinSize)) {
        return false;
    }
    if (bins != null && !bins.equals(((SimpleHistogramDataset) obj).bins)) {
        return false;
    }
    if (autoWidth != null && 
        !autoWidth.equals(((IntervalXYDelegate) obj).autoWidth)) {
        return false;
    }
    if (intervalPositionFactor != null && 
        !intervalPositionFactor.equals(((IntervalXYDelegate) obj).intervalPositionFactor)) {
        return false;
    }
    if (fixedIntervalWidth != null && 
        !fixedIntervalWidth.equals(((IntervalXYDelegate) obj).fixedIntervalWidth)) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `SimpleHistogramDataset.java`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, SimpleHistogramDataset.class, this.key, 
                   this.adjustForBinSize, this.bins, null, null, null);
}
```

#### In `IntervalXYDelegate.java`
```java
/**
 * Tests the delegate for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, IntervalXYDelegate.class, null, null, null, 
                   this.autoWidth, this.intervalPositionFactor, 
                   this.fixedIntervalWidth);
}
```",Type-3
606-5-9,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.xy,YInterval,equals,109,126,Type 3,"### Code Snippet 1 (from `SimpleHistogramDataset` class, lines 440-457):
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `YInterval` class, lines 109-126):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof YInterval)) {
        return false;
    }
    YInterval that = (YInterval) obj;
    if (this.y != that.y) {
        return false;
    }
    if (this.yLow != that.yLow) {
        return false;
    }
    if (this.yHigh != that.yHigh) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and logic specific to the respective classes).","### 1. Extracted Method (to be placed in the common superclass, e.g., `ObjectUtilities` or a new utility class):
```java
/**
 * Compares two objects for equality based on their fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = clazz.cast(obj).getClass().getDeclaredFields();
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `SimpleHistogramDataset`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, key, adjustForBinSize, bins);
}
```

### 3. Refactored `equals` Method in `YInterval`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, YInterval.class, y, yLow, yHigh);
}
```",Type-3
606-5-10,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.xy,YWithXInterval,equals,113,130,Type 3,"### Code Snippet 1 (from `SimpleHistogramDataset` class, lines 440-457):
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `YWithXInterval` class, lines 113-130):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof YWithXInterval)) {
        return false;
    }
    YWithXInterval that = (YWithXInterval) obj;
    if (this.y != that.y) {
        return false;
    }
    if (this.xLow != that.xLow) {
        return false;
    }
    if (this.xHigh != that.xHigh) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones**.  
- They are **mostly similar** in structure and logic but differ in the specific fields being compared (`key`, `adjustForBinSize`, `bins` in the first snippet vs. `y`, `xLow`, `xHigh` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Compares the object for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = clazz.cast(obj).getClass().getDeclaredFields();
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Updated `equals` Method in `SimpleHistogramDataset`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins);
}
```

### 3. Updated `equals` Method in `YWithXInterval`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, YWithXInterval.class, this.y, this.xLow, this.xHigh);
}
```",Type-3
607-1-3,src,org.jfree.chart.block,BlockContainer,equals,250,267,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method in `BlockContainer` class
```java
/**
 * Tests this container for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof BlockContainer)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    BlockContainer that = (BlockContainer) obj;
    if (!this.arrangement.equals(that.arrangement)) {
        return false;   
    }
    if (!this.blocks.equals(that.blocks)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `SimpleHistogramDataset` class
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and class-specific logic).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares two objects for equality based on provided fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `BlockContainer` Class
```java
/**
 * Tests this container for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, BlockContainer.class, this.arrangement, this.blocks, 
        new Object[] { ((BlockContainer) obj).arrangement, ((BlockContainer) obj).blocks });
}
```

---

### 3. Refactored `equals` Method in `SimpleHistogramDataset` Class
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins, 
        new Object[] { ((SimpleHistogramDataset) obj).key, ((SimpleHistogramDataset) obj).adjustForBinSize, ((SimpleHistogramDataset) obj).bins });
}
```",Type-3
616-1-2,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.time.ohlc,OHLCSeriesCollection,equals,328,336,Type 3,"### Code Snippet 1 (from `DefaultValueDataset` class, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (from `OHLCSeriesCollection` class, lines 328-336):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean. 
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof OHLCSeriesCollection)) {
        return false;
    }
    OHLCSeriesCollection that = (OHLCSeriesCollection) obj;
    return ObjectUtilities.equal(this.data, that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the type checks and the specific fields being compared).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractDataset`):
```java
/**
 * Tests an object for equality with this instance based on a specified field.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param field  the field to compare.
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, Object field) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    if (obj instanceof ValueDataset) {
        otherField = ((ValueDataset) obj).getValue();
    } else if (obj instanceof OHLCSeriesCollection) {
        otherField = ((OHLCSeriesCollection) obj).data;
    }
    return ObjectUtilities.equal(field, otherField);
}
```

### 2. Refactored Method Calls:

#### In `DefaultValueDataset` class:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, this.value);
}
```

#### In `OHLCSeriesCollection` class:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean. 
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, OHLCSeriesCollection.class, this.data);
}
```",Type-3
616-1-3,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.xy,VectorSeriesCollection,equals,304,312,Type 3,"### Code Snippet 1 (from `DefaultValueDataset` class, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (from `VectorSeriesCollection` class, lines 304-312):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof VectorSeriesCollection)) {
        return false;
    }
    VectorSeriesCollection that = (VectorSeriesCollection) obj;
    return ObjectUtilities.equal(this.data, that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the type checks and the specific fields being compared).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractDataset`):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> expectedClass, Object field) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    if (obj instanceof ValueDataset) {
        otherField = ((ValueDataset) obj).getValue();
    } else if (obj instanceof VectorSeriesCollection) {
        otherField = ((VectorSeriesCollection) obj).getData();
    }
    return ObjectUtilities.equal(field, otherField);
}
```

---

### 2. Refactored `equals` Method in `DefaultValueDataset`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ValueDataset.class, this.value);
}
```

---

### 3. Refactored `equals` Method in `VectorSeriesCollection`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, VectorSeriesCollection.class, this.data);
}
```",Type-3
616-1-4,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.xy,XIntervalSeriesCollection,equals,330,338,Type 3,"### Code Snippet 1 (DefaultValueDataset.java, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (XIntervalSeriesCollection.java, lines 330-338):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XIntervalSeriesCollection)) {
        return false;
    }
    XIntervalSeriesCollection that = (XIntervalSeriesCollection) obj;
    return ObjectUtilities.equal(this.data, that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the type checks and the specific fields being compared).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractDataset`):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object otherField = clazz.cast(obj);
    return ObjectUtilities.equal(field, otherField);
}
```

### 2. Refactored Method Calls:

#### In `DefaultValueDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, this.value);
}
```

#### In `XIntervalSeriesCollection.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XIntervalSeriesCollection.class, this.data);
}
```",Type-3
616-1-5,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.xy,XYIntervalSeriesCollection,equals,353,361,Type 3,"### Code Snippet 1 (DefaultValueDataset.java, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (XYIntervalSeriesCollection.java, lines 353-361):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYIntervalSeriesCollection)) {
        return false;
    }
    XYIntervalSeriesCollection that = (XYIntervalSeriesCollection) obj;
    return ObjectUtilities.equal(this.data, that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the type checks and the specific fields being compared).","### 1. Extracted Method (to be placed in the common superclass `AbstractDataset`):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> expectedClass, Object field) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    if (obj instanceof ValueDataset) {
        otherField = ((ValueDataset) obj).getValue();
    } else if (obj instanceof XYIntervalSeriesCollection) {
        otherField = ((XYIntervalSeriesCollection) obj).data;
    }
    return ObjectUtilities.equal(field, otherField);
}
```

---

### 2. Refactored Method Calls:

#### In `DefaultValueDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ValueDataset.class, this.value);
}
```

#### In `XYIntervalSeriesCollection.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYIntervalSeriesCollection.class, this.data);
}
```",Type-3
616-1-6,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.xy,XYSeriesCollection,equals,379,396,Type 3,"### Code Snippet 1 (DefaultValueDataset.java, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (XYSeriesCollection.java, lines 379-396):
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    /*
     * XXX
     *
     * what about  the interval delegate...?
     * The interval width etc wasn't considered
     * before, hence i did not add it here (AS)
     *
     */

    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSeriesCollection)) {
        return false;
    }
    XYSeriesCollection that = (XYSeriesCollection) obj;
    return ObjectUtilities.equal(this.data, that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and structural differences.","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractDataset`):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param value1  the first value to compare.
 * @param value2  the second value to compare.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, Object value1, Object value2) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    return ObjectUtilities.equal(value1, value2);
}
```

---

### 2. Refactored Method Calls:

#### In `DefaultValueDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, this.value, ((ValueDataset) obj).getValue());
}
```

---

#### In `XYSeriesCollection.java`:
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYSeriesCollection.class, this.data, ((XYSeriesCollection) obj).data);
}
```",Type-3
616-1-7,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.xy,YIntervalSeriesCollection,equals,328,336,Type 3,"### Code Snippet 1 (from `DefaultValueDataset` class, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (from `YIntervalSeriesCollection` class, lines 328-336):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof YIntervalSeriesCollection)) {
        return false;
    }
    YIntervalSeriesCollection that = (YIntervalSeriesCollection) obj;
    return ObjectUtilities.equal(this.data, that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the type checks and the specific fields being compared).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractDataset`):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> expectedClass, Object field) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    if (obj instanceof ValueDataset) {
        otherField = ((ValueDataset) obj).getValue();
    } else if (obj instanceof YIntervalSeriesCollection) {
        otherField = ((YIntervalSeriesCollection) obj).data;
    }
    return ObjectUtilities.equal(field, otherField);
}
```

---

### 2. Refactored Method Calls:

#### In `DefaultValueDataset` class:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ValueDataset.class, this.value);
}
```

#### In `YIntervalSeriesCollection` class:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, YIntervalSeriesCollection.class, this.data);
}
```",Type-3
622-1-6,src,org.jfree.chart.axis,ModuloAxis,equals,411,428,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `ModuloAxis.equals` Method
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ModuloAxis)) {
        return false;
    }
    ModuloAxis that = (ModuloAxis) obj;
    if (this.displayStart != that.displayStart) {
        return false;
    }
    if (this.displayEnd != that.displayEnd) {
        return false;
    }
    if (!this.fixedRange.equals(that.fixedRange)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `SimpleHistogramDataset.equals` Method
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and operate on different fields (`displayStart`, `displayEnd`, `fixedRange` in `ModuloAxis` vs. `key`, `adjustForBinSize`, `bins` in `SimpleHistogramDataset`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the current object with another object for equality.
 * 
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `ModuloAxis.equals` Method
```java
/**
 * Tests this axis for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ModuloAxis.class, 
        this.displayStart, ((ModuloAxis) obj).displayStart,
        this.displayEnd, ((ModuloAxis) obj).displayEnd,
        this.fixedRange, ((ModuloAxis) obj).fixedRange,
        super.equals(obj), true
    );
}
```

---

### 3. Refactored `SimpleHistogramDataset.equals` Method
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins
    );
}
```",Type-3
622-2-6,src,org.jfree.chart.renderer.category,BarRenderer3D,equals,726,743,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method in `BarRenderer3D` class (lines 726-743)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof BarRenderer3D)) {
        return false;
    }
    BarRenderer3D that = (BarRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `SimpleHistogramDataset` class (lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Type-3 Clone**: These two code snippets are mostly similar but have some different statements (e.g., different fields being compared, different class types, and different utility methods used).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the current object with another object for equality.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 * @return An array of field values.
 */
private Object[] extractFields(Object obj, int fieldCount) {
    // Implementation to extract fields dynamically (e.g., via reflection).
    return new Object[fieldCount];
}
```

### 2. Method Calls (to replace the clones in the original files)

#### In `BarRenderer3D` class:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, BarRenderer3D.class, this.xOffset, this.yOffset, this.wallPaint);
}
```

#### In `SimpleHistogramDataset` class:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins);
}
```",Type-3
622-3-6,src,org.jfree.chart.renderer.category,LineRenderer3D,equals,615,632,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method from `LineRenderer3D` class (start line 615, end line 632)
```java
/**
 * Checks this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LineRenderer3D)) {
        return false;
    }
    LineRenderer3D that = (LineRenderer3D) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `SimpleHistogramDataset` class (start line 440, end line 457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but have **different statements** (e.g., the fields being compared and the specific logic for equality checks).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the current object with another object for equality.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `LineRenderer3D` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, LineRenderer3D.class, this.xOffset, this.yOffset, this.wallPaint);
}
```

### 3. Refactored `equals` Method in `SimpleHistogramDataset` Class
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins);
}
```",Type-3
622-4-6,src,org.jfree.chart.renderer.xy,XYDotRenderer,equals,332,349,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `XYDotRenderer.equals` Method (Lines 332-349)
```java
/**
 * Tests this renderer for equality with an arbitrary object.  This method
 * returns <code>true</code> if and only if:
 * 
 * <ul>
 * <li><code>obj</code> is not <code>null</code>;</li>
 * <li><code>obj</code> is an instance of <code>XYDotRenderer</code>;</li>
 * <li>both renderers have the same attribute values.
 * </ul>
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDotRenderer)) {
        return false;
    }
    XYDotRenderer that = (XYDotRenderer) obj;
    if (this.dotWidth != that.dotWidth) {
        return false;
    }
    if (this.dotHeight != that.dotHeight) {
        return false;
    }
    if (!ShapeUtilities.equal(this.legendShape, that.legendShape)) {
        return false;
    }
    return super.equals(obj);    
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)

---

### Code Snippet 2: `SimpleHistogramDataset.equals` Method (Lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares the attributes of two objects for equality.
 *
 * @param obj  the object to compare with.
 * @param key  the key of the current object.
 * @param adjustForBinSize  the adjustForBinSize flag of the current object.
 * @param bins  the bins of the current object.
 * @param dotWidth  the dotWidth of the current object.
 * @param dotHeight  the dotHeight of the current object.
 * @param legendShape  the legendShape of the current object.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean attributesEqual(Object obj, 
                                  Comparable key, 
                                  boolean adjustForBinSize, 
                                  List bins, 
                                  int dotWidth, 
                                  int dotHeight, 
                                  Shape legendShape) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof SimpleHistogramDataset) {
        SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
        if (!key.equals(that.key)) {
            return false;
        }
        if (adjustForBinSize != that.adjustForBinSize) {
            return false;
        }
        if (!bins.equals(that.bins)) {
            return false;
        }
        return true;
    } else if (obj instanceof XYDotRenderer) {
        XYDotRenderer that = (XYDotRenderer) obj;
        if (dotWidth != that.dotWidth) {
            return false;
        }
        if (dotHeight != that.dotHeight) {
            return false;
        }
        if (!ShapeUtilities.equal(legendShape, that.legendShape)) {
            return false;
        }
        return super.equals(obj);
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `XYDotRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return attributesEqual(obj, null, false, null, this.dotWidth, this.dotHeight, this.legendShape);
}
```

---

### 3. Refactored `equals` Method in `SimpleHistogramDataset`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return attributesEqual(obj, this.key, this.adjustForBinSize, this.bins, 0, 0, null);
}
```",Type-3
622-5-6,src,org.jfree.chart.renderer.xy,XYLine3DRenderer,equals,237,254,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,Type 3,"### Code Snippet 1: `equals` method in `XYLine3DRenderer` (lines 237-254)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLine3DRenderer)) {
        return false;
    }
    XYLine3DRenderer that = (XYLine3DRenderer) obj;
    if (this.xOffset != that.xOffset) {
        return false;
    }
    if (this.yOffset != that.yOffset) {
        return false;
    }
    if (!PaintUtilities.equal(this.wallPaint, that.wallPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `SimpleHistogramDataset` (lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields being compared, different class types, and different utility methods).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Compares the current object with another object for equality.
 * 
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        Object thisField = fields[i];
        Object thatField = thatFields[i];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `XYLine3DRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return baseEquals(obj, XYLine3DRenderer.class, this.xOffset, this.yOffset, this.wallPaint, 
                      new Object[] { ((XYLine3DRenderer) obj).xOffset, 
                                     ((XYLine3DRenderer) obj).yOffset, 
                                     ((XYLine3DRenderer) obj).wallPaint });
}
```

### 3. Refactored `equals` Method in `SimpleHistogramDataset`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return baseEquals(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins, 
                      new Object[] { ((SimpleHistogramDataset) obj).key, 
                                     ((SimpleHistogramDataset) obj).adjustForBinSize, 
                                     ((SimpleHistogramDataset) obj).bins });
}
```",Type-3
622-6-7,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.time,TimePeriodValuesCollection,equals,438,455,Type 3,"### Code Snippet 1 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TimePeriodValuesCollection.java, lines 438-455)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriodValuesCollection)) {
        return false;   
    }
    TimePeriodValuesCollection that = (TimePeriodValuesCollection) obj;
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;   
    }
    if (this.xPosition != that.xPosition) {
        return false;   
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;   
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`key`, `adjustForBinSize`, `bins` in the first snippet vs. `domainIsPointsInTime`, `xPosition`, `data` in the second snippet) and the utility method used (`ObjectUtilities.equal` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractIntervalXYDataset`)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = extractFields(clazz.cast(obj), fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 * 
 * @param obj  the object.
 * @param fieldCount  the number of fields to extract.
 * 
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be overridden in subclasses to extract the required fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Updated `equals` Method in `SimpleHistogramDataset.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, this.key, this.adjustForBinSize, this.bins);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    return new Object[] { that.key, that.adjustForBinSize, that.bins };
}
```

---

### 3. Updated `equals` Method in `TimePeriodValuesCollection.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TimePeriodValuesCollection.class, this.domainIsPointsInTime, this.xPosition, this.data);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    TimePeriodValuesCollection that = (TimePeriodValuesCollection) obj;
    return new Object[] { that.domainIsPointsInTime, that.xPosition, that.data };
}
```",Type-3
622-6-8,src,org.jfree.data.statistics,SimpleHistogramDataset,equals,440,457,src,org.jfree.data.time,TimeSeriesCollection,equals,633,650,Type 3,"### Code Snippet 1 (SimpleHistogramDataset.java, lines 440-457)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof SimpleHistogramDataset)) {
        return false;
    }
    SimpleHistogramDataset that = (SimpleHistogramDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (this.adjustForBinSize != that.adjustForBinSize) {
        return false;
    }
    if (!this.bins.equals(that.bins)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (TimeSeriesCollection.java, lines 633-650)
```java
/**
 * Tests this time series collection for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimeSeriesCollection)) {
        return false;
    }
    TimeSeriesCollection that = (TimeSeriesCollection) obj;
    if (this.xPosition != that.xPosition) {
        return false;
    }
    if (this.domainIsPointsInTime != that.domainIsPointsInTime) {
        return false;
    }
    if (!ObjectUtilities.equal(this.data, that.data)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`key`, `adjustForBinSize`, `bins` in the first snippet vs. `xPosition`, `domainIsPointsInTime`, `data` in the second snippet) and the use of `ObjectUtilities.equal` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractIntervalXYDataset`)
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField == null) {
            if (thatField != null) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `SimpleHistogramDataset.java`
```java
/**
 * Compares the dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, SimpleHistogramDataset.class, 
        this.key, ((SimpleHistogramDataset) obj).key,
        this.adjustForBinSize, ((SimpleHistogramDataset) obj).adjustForBinSize,
        this.bins, ((SimpleHistogramDataset) obj).bins);
}
```

---

#### In `TimeSeriesCollection.java`
```java
/**
 * Tests this time series collection for equality with another object.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, TimeSeriesCollection.class, 
        this.xPosition, ((TimeSeriesCollection) obj).xPosition,
        this.domainIsPointsInTime, ((TimeSeriesCollection) obj).domainIsPointsInTime,
        this.data, ((TimeSeriesCollection) obj).data);
}
```",Type-3
654-1-2,src,org.jfree.chart.renderer.category,StatisticalBarRenderer,equals,543,559,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer,equals,634,648,Type 3,"### Code Snippet 1 (StatisticalBarRenderer.java, lines 543-559):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalBarRenderer)) {
        return false;
    }
    StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint,
            that.errorIndicatorPaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.errorIndicatorStroke,
            that.errorIndicatorStroke)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (StackedXYAreaRenderer.java, lines 634-648):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedXYAreaRenderer) || !super.equals(obj)) {
        return false;
    }
    StackedXYAreaRenderer that = (StackedXYAreaRenderer) obj;
    if (!PaintUtilities.equal(this.shapePaint, that.shapePaint)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.shapeStroke, that.shapeStroke)) {
        return false;
    }
    return true;
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., class type checks, field comparisons, and method calls).","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field1, Object field2, Object otherField1, Object otherField2) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj) || !super.equals(obj)) {
        return false;
    }
    if (!PaintUtilities.equal(field1, otherField1)) {
        return false;
    }
    if (!ObjectUtilities.equal(field2, otherField2)) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored Method Calls:

#### In `StatisticalBarRenderer.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StatisticalBarRenderer.class, this.errorIndicatorPaint, this.errorIndicatorStroke,
            ((StatisticalBarRenderer) obj).errorIndicatorPaint, ((StatisticalBarRenderer) obj).errorIndicatorStroke);
}
```

#### In `StackedXYAreaRenderer.java`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StackedXYAreaRenderer.class, this.shapePaint, this.shapeStroke,
            ((StackedXYAreaRenderer) obj).shapePaint, ((StackedXYAreaRenderer) obj).shapeStroke);
}
```",Type-3
674-1-5,src,org.jfree.chart,ChartFactory,createPieChart,236,246,src,org.jfree.chart,ChartFactory,createPieChart3D,684,699,Type 3,"**Code Snippet 1: Method: createPieChart (Lines: 236-246)**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createPieChart3D (Lines: 684-699)**  
```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot3D plot = new PiePlot3D(dataset);
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private static JFreeChart createGenericPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale, boolean is3D) {

    PiePlot plot = is3D ? new PiePlot3D(dataset) : new PiePlot(dataset);
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**  

**For `createPieChart`:**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {
    return createGenericPieChart(title, dataset, legend, tooltips, locale, false);
}
```

**For `createPieChart3D`:**  
```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {
    return createGenericPieChart(title, dataset, legend, tooltips, locale, true);
}
```",Type-2
674-2-5,src,org.jfree.chart,ChartFactory,createPieChart,264,280,src,org.jfree.chart,ChartFactory,createPieChart3D,684,699,Type 3,"**Code Snippet 1: Method: createPieChart (Lines: 264-280)**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot plot = new PiePlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createPieChart3D (Lines: 684-699)**  
```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot3D plot = new PiePlot3D(dataset);
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","**1. Extracted Method:**  
```java
private static JFreeChart createGenericPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale, boolean is3D) {

    PiePlot plot = is3D ? new PiePlot3D(dataset) : new PiePlot(dataset);
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    if (!is3D) {
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**  

**For `createPieChart`:**  
```java
public static JFreeChart createPieChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {
    return createGenericPieChart(title, dataset, legend, tooltips, locale, false);
}
```

**For `createPieChart3D`:**  
```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {
    return createGenericPieChart(title, dataset, legend, tooltips, locale, true);
}
```",Type-2
674-3-5,src,org.jfree.chart,ChartFactory,createRingChart,545,555,src,org.jfree.chart,ChartFactory,createPieChart3D,684,699,Type 3,"**Code Snippet 1: Method: createRingChart (Lines: 545-555)**

```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createPieChart3D (Lines: 684-699)**

```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot3D plot = new PiePlot3D(dataset);
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title, PieDataset dataset, 
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    if (plot instanceof RingPlot) {
        ((RingPlot) plot).setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    }
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        if (plot instanceof RingPlot) {
            ((RingPlot) plot).setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        } else if (plot instanceof PiePlot3D) {
            ((PiePlot3D) plot).setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        }
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**

**For `createRingChart`:**

```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    return createChart(title, dataset, legend, tooltips, locale, new RingPlot(dataset));
}
```

**For `createPieChart3D`:**

```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    return createChart(title, dataset, legend, tooltips, locale, new PiePlot3D(dataset));
}
```",Type-3
674-4-5,src,org.jfree.chart,ChartFactory,createRingChart,573,589,src,org.jfree.chart,ChartFactory,createPieChart3D,684,699,Type 3,"**Code Snippet 1: Method: createRingChart (Lines: 573-589)**

```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Code Snippet 2: Method: createPieChart3D (Lines: 684-699)**

```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot3D plot = new PiePlot3D(dataset);
    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, 
            legend);

}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, and types).","**1. Extracted Method:**

```java
private static JFreeChart createChart(String title, PieDataset dataset, 
        boolean legend, boolean tooltips, Locale locale, Plot plot) {

    plot.setInsets(new RectangleInsets(0.0, 5.0, 5.0, 5.0));
    if (tooltips) {
        if (plot instanceof RingPlot) {
            ((RingPlot) plot).setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        } else if (plot instanceof PiePlot3D) {
            ((PiePlot3D) plot).setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        }
    }
    return new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, legend);
}
```

**2. Method Calls Replacing the Clones:**

**For `createRingChart`:**

```java
public static JFreeChart createRingChart(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    RingPlot plot = new RingPlot(dataset);
    plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```

**For `createPieChart3D`:**

```java
public static JFreeChart createPieChart3D(String title, PieDataset dataset,
        boolean legend, boolean tooltips, Locale locale) {

    PiePlot3D plot = new PiePlot3D(dataset);
    return createChart(title, dataset, legend, tooltips, locale, plot);
}
```",Type-2
689-2-16,src,org.jfree.chart.labels,StandardContourToolTipGenerator,equals,119,133,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (StandardContourToolTipGenerator.java, lines 119-133)
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {

    if (obj == this) {
        return true;
    }

    if (!(obj instanceof StandardContourToolTipGenerator)) {
        return false;
    }
    StandardContourToolTipGenerator that 
        = (StandardContourToolTipGenerator) obj;
    if (this.valueForm != null) {
        return this.valueForm.equals(that.valueForm);
    }
    return false;

}
```

### Code Snippet 2 (MatrixSeriesCollection.java, lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, the fields being compared, and the utility method used).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj the other object.
 * @param clazz the class to check instance type.
 * @param field the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (clazz.isInstance(obj)) {
        Object thatField = null;
        try {
            thatField = clazz.getDeclaredField(""valueForm"").get(obj);
        } catch (Exception e) {
            throw new RuntimeException(""Reflection error"", e);
        }
        return field != null ? field.equals(thatField) : thatField == null;
    }

    return false;
}
```

### 2. Refactored Method Calls

#### In `StandardContourToolTipGenerator.java`
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, StandardContourToolTipGenerator.class, this.valueForm);
}
```

#### In `MatrixSeriesCollection.java`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, this.seriesList);
}
```",Type-3
689-3-16,src,org.jfree.chart.renderer,DefaultPolarItemRenderer,equals,313,324,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `DefaultPolarItemRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return <code>true</code> if this renderer is equal to <code>obj</code>,
 *     and <code>false</code> otherwise.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (!(obj instanceof DefaultPolarItemRenderer)) {
        return false;
    }
    DefaultPolarItemRenderer that = (DefaultPolarItemRenderer) obj;
    if (!this.seriesFilled.equals(that.seriesFilled)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but contain some different statements, such as the specific class type checks (`DefaultPolarItemRenderer` vs. `MatrixSeriesCollection`), the fields being compared (`seriesFilled` vs. `seriesList`), and the utility method used (`super.equals(obj)` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the superclass `AbstractRenderer`)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to compare.
 * @param clazz the class type to check.
 * @param field the field to compare.
 * @return true if the objects are equal, false otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == null) {
        return false;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""seriesFilled"").get(obj);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    return field.equals(thatField);
}
```

### 2. Replaced Method Calls
#### In `DefaultPolarItemRenderer`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, DefaultPolarItemRenderer.class, this.seriesFilled);
}
```

#### In `MatrixSeriesCollection`:
```java
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, this.seriesList);
}
```",Type-3
689-4-16,src,org.jfree.chart.renderer.category,AreaRenderer,equals,317,328,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `AreaRenderer` class (lines 317-328)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AreaRenderer)) {
        return false;
    }
    AreaRenderer that = (AreaRenderer) obj;
    if (!this.endType.equals(that.endType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param clazz the expected class type of the object.
 * @param instanceSpecificField the instance-specific field to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object instanceSpecificField) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""endType"").get(obj);
    } catch (Exception e) {
        throw",Type-3
689-5-16,src,org.jfree.chart.renderer.category,CategoryStepRenderer,equals,349,360,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `CategoryStepRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryStepRenderer)) {
        return false;
    }
    CategoryStepRenderer that = (CategoryStepRenderer) obj;
    if (this.stagger != that.stagger) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the type checks (`CategoryStepRenderer` vs. `MatrixSeriesCollection`), the specific fields being compared (`stagger` vs. `seriesList`), and the use of `ObjectUtilities.equal` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param clazz the class to check the type of the object.
 * @param additionalCheck a lambda for additional equality checks.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, java.util.function.Supplier<Boolean> additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        return additionalCheck.get();
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `CategoryStepRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryStepRenderer.class, () -> {
        CategoryStepRenderer that = (CategoryStepRenderer) obj;
        return this.stagger == that.stagger && super.equals(obj);
    });
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, () -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
689-6-16,src,org.jfree.chart.renderer.category,GroupedStackedBarRenderer,equals,350,361,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method from `GroupedStackedBarRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof GroupedStackedBarRenderer)) {
        return false;
    }
    GroupedStackedBarRenderer that = (GroupedStackedBarRenderer) obj;
    if (!this.seriesToGroupMap.equals(that.seriesToGroupMap)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements, such as the class-specific checks (`GroupedStackedBarRenderer` vs. `MatrixSeriesCollection`), the use of `seriesToGroupMap.equals` vs. `ObjectUtilities.equal`, and the structure of the `if` conditions.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param instanceClass the class of the current instance.
 * @param instanceSpecificField the instance-specific field to compare.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object instanceSpecificField) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj)) {
        Object otherField = null;
        try {
            otherField = instanceClass.getDeclaredField(""seriesToGroupMap"").get(obj);
        } catch (Exception e) {
            return false;
        }
    }
}
```",Type-3
689-7-16,src,org.jfree.chart.renderer.category,StackedAreaRenderer,equals,490,501,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `StackedAreaRenderer` class
```java
/**
 * Checks this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedAreaRenderer)) {
        return false;
    }
    StackedAreaRenderer that = (StackedAreaRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Checks equality of this instance with another object.
 *
 * @param obj the object to compare.
 * @param instanceClass the class of the current instance.
 * @param additionalCheck a boolean result of additional equality checks specific to the subclass.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean checkEquality(Object obj, Class<?> instanceClass, boolean additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    return additionalCheck;
}
```

---

### 2. Refactored `equals` Method in `StackedAreaRenderer` Class
```java
/**
 * Checks this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(obj, StackedAreaRenderer.class, 
        obj instanceof StackedAreaRenderer && 
        this.renderAsPercentages == ((StackedAreaRenderer) obj).renderAsPercentages &&
        super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return checkEquality(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-8-16,src,org.jfree.chart.renderer.category,StackedBarRenderer,equals,390,401,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `StackedBarRenderer` class (lines 390-401)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer)) {
        return false;
    }
    StackedBarRenderer that = (StackedBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific class type checks (`StackedBarRenderer` vs. `MatrixSeriesCollection`), the fields being compared (`renderAsPercentages` vs. `seriesList`), and the utility method used (`super.equals(obj)` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param clazz the class type to check against.
 * @param fieldEqualityCheck a boolean indicating if the instance-specific fields are equal.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean fieldEqualityCheck) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    return fieldEqualityCheck;
}
```

---

### 2. Refactored `equals` Method in `StackedBarRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, StackedBarRenderer.class, 
        obj instanceof StackedBarRenderer && 
        this.renderAsPercentages == ((StackedBarRenderer) obj).renderAsPercentages &&
        super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-9-16,src,org.jfree.chart.renderer.xy,ClusteredXYBarRenderer,equals,326,337,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `ClusteredXYBarRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ClusteredXYBarRenderer)) {
        return false;
    }
    ClusteredXYBarRenderer that = (ClusteredXYBarRenderer) obj;
    if (this.centerBarAtStartValue != that.centerBarAtStartValue) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object.
 * @param instanceClass the class of the instance.
 * @param additionalCheck a boolean result of additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, boolean additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj)) {
        return additionalCheck;
    }
    return false;
}
```

### 2. Refactored `equals` method in `ClusteredXYBarRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ClusteredXYBarRenderer.class, 
        obj instanceof ClusteredXYBarRenderer 
        && this.centerBarAtStartValue == ((ClusteredXYBarRenderer) obj).centerBarAtStartValue
        && super.equals(obj));
}
```

### 3. Refactored `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection 
        && ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-10-16,src,org.jfree.chart.renderer.xy,DeviationRenderer,equals,371,382,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `DeviationRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DeviationRenderer)) {
        return false;
    }
    DeviationRenderer that = (DeviationRenderer) obj;
    if (this.alpha != that.alpha) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `MatrixSeriesCollection.java`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain different statements and logic specific to their respective classes (`DeviationRenderer` and `MatrixSeriesCollection`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj the object to test for equality.
 * @param clazz the class to check the type of the object.
 * @param additionalCheck a functional interface for additional equality checks.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    return additionalCheck.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `DeviationRenderer.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DeviationRenderer.class, other -> {
        DeviationRenderer that = (DeviationRenderer) other;
        return this.alpha == that.alpha && super.equals(obj);
    });
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection.java`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, other -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) other;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
689-11-16,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer2,equals,536,547,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (from `StackedXYAreaRenderer2` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedXYAreaRenderer2)) {
        return false;
    }
    StackedXYAreaRenderer2 that = (StackedXYAreaRenderer2) obj;
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `MatrixSeriesCollection` class, `equals` method):

```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass, e.g., `ObjectUtilities` or a new utility class):

```java
/**
 * Tests two objects for equality.
 *
 * @param obj the object to compare.
 * @param instance the current instance.
 * @param instanceClass the class of the current instance.
 * @param additionalCheck a boolean result of additional equality checks.
 *
 * @return A boolean indicating equality.
 */
protected static boolean isEqual(Object obj, Object instance, Class<?> instanceClass, boolean additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == instance) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    return additionalCheck;
}
```

---

### 2. Refactored `equals` Method in `StackedXYAreaRenderer2`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, this, StackedXYAreaRenderer2.class, 
        obj instanceof StackedXYAreaRenderer2 && 
        this.roundXCoordinates == ((StackedXYAreaRenderer2) obj).roundXCoordinates &&
        super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection`:

```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, this, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-12-16,src,org.jfree.chart.renderer.xy,StackedXYBarRenderer,equals,394,405,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (from `StackedXYBarRenderer` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StackedXYBarRenderer)) {
        return false;   
    }
    StackedXYBarRenderer that = (StackedXYBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;   
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `MatrixSeriesCollection` class, `equals` method):

```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the type checks (`StackedXYBarRenderer` vs. `MatrixSeriesCollection`), the specific fields being compared (`renderAsPercentages` vs. `seriesList`), and the use of `super.equals(obj)` vs. `ObjectUtilities.equal`.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractRenderer` or `AbstractDataset`):

```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to compare.
 * @param clazz the class to check the type of the object.
 * @param fieldComparison a boolean indicating the result of comparing instance-specific fields.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean fieldComparison) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    return fieldComparison;
}
```

---

### 2. Refactored `equals` Method in `StackedXYBarRenderer`:

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, StackedXYBarRenderer.class, 
        this.renderAsPercentages == ((StackedXYBarRenderer) obj).renderAsPercentages 
        && super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection`:

```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-13-16,src,org.jfree.chart.renderer.xy,XYBubbleRenderer,equals,327,338,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `XYBubbleRenderer` (lines 327-338)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBubbleRenderer)) {
        return false;
    }
    XYBubbleRenderer that = (XYBubbleRenderer) obj;
    if (this.scaleType != that.scaleType) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones** because they are mostly similar but contain some different statements. Specifically:
- The first snippet checks for equality based on the `scaleType` field and calls `super.equals(obj)`.
- The second snippet checks for equality based on the `seriesList` field using `ObjectUtilities.equal`.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYZDataset` or another appropriate superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param instanceClass the class of the current instance.
 * @param additionalCheck a boolean result of additional equality checks specific to the subclass.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, boolean additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj)) {
        return additionalCheck;
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `XYBubbleRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYBubbleRenderer.class, 
        obj instanceof XYBubbleRenderer && this.scaleType == ((XYBubbleRenderer) obj).scaleType
        && super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-14-16,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,315,326,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (XYSplineRenderer.java, `equals` method, lines 315-326):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (MatrixSeriesCollection.java, `equals` method, lines 232-247):
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the type checks (`XYSplineRenderer` vs. `MatrixSeriesCollection`), the fields being compared (`precision` vs. `seriesList`), and the use of `ObjectUtilities.equal` in the second snippet.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj the object.
 * @param clazz the class to check the type of the object.
 * @param fieldComparison a boolean indicating the result of comparing instance-specific fields.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean fieldComparison) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        return fieldComparison;
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `XYSplineRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, 
        (obj instanceof XYSplineRenderer) && this.precision == ((XYSplineRenderer) obj).precision 
        && super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection.java`:
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, 
        (obj instanceof MatrixSeriesCollection) && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
689-15-16,src,org.jfree.chart.renderer.xy,XYStepRenderer,equals,326,337,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `XYStepRenderer` (lines 326-337)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLineAndShapeRenderer)) {
        return false;
    }
    XYStepRenderer that = (XYStepRenderer) obj;
    if (this.stepPoint != that.stepPoint) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param instanceClass the class of the current instance.
 * @param additionalCheck a functional interface for additional equality checks.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityCheck additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj)) {
        return additionalCheck.checkEquality(obj);
    }
    return false;
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `XYStepRenderer`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYStepRenderer.class, other -> {
        XYStepRenderer that = (XYStepRenderer) other;
        return this.stepPoint == that.stepPoint && super.equals(other);
    });
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, other -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) other;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
693-1-4,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,Type 3,"### Code Snippet 1 (from `NumberTickUnit` class, `equals` method):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `LookupPaintScale` class, `equals` method):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`NumberTickUnit` and `LookupPaintScale`).","### 1. Extracted Method (to be placed in the superclass `TickUnit`):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `NumberTickUnit`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, NumberTickUnit.class, other -> {
        NumberTickUnit that = (NumberTickUnit) other;
        return this.formatter.equals(that.formatter);
    });
}
```

---

### 3. Refactored `equals` Method in `LookupPaintScale`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, LookupPaintScale.class, other -> {
        LookupPaintScale that = (LookupPaintScale) other;
        return this.lowerBound == that.lowerBound
            && this.upperBound == that.upperBound
            && PaintUtilities.equal(this.defaultPaint, that.defaultPaint)
            && this.lookupTable.equals(that.lookupTable);
    });
}
```",Type-3
693-1-5,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1: `equals` method in `NumberTickUnit` class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `Outlier` class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the use of `formatter` in `NumberTickUnit` and `point`/`radius` in `Outlier`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param additionalChecks  a lambda for additional equality checks.
 * 
 * @return A boolean.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, EqualityChecker additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `NumberTickUnit` Class
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, NumberTickUnit.class, other -> {
        if (!super.equals(other)) {
            return false;
        }
        NumberTickUnit that = (NumberTickUnit) other;
        return this.formatter.equals(that.formatter);
    });
}
```

---

### 3. Refactored `equals` Method in `Outlier` Class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, Outlier.class, other -> {
        Outlier that = (Outlier) other;
        return this.point.equals(that.point) && this.radius == that.radius;
    });
}
```",Type-3
693-1-8,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (from `NumberTickUnit` class, lines 126-140):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `Hour` class, lines 356-370):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `NumberTickUnit` uses `formatter` and `super.equals`, while `Hour` uses `hour` and `day` for comparison).","### 1. Extracted Method (to be placed in the common superclass, e.g., `TickUnit`):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param additionalChecks  a lambda for additional equality checks.
 *
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalChecks) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return additionalChecks.checkEquality(obj);
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `NumberTickUnit`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberTickUnit.class, other -> {
        if (!super.equals(other)) {
            return false;
        }
        NumberTickUnit that = (NumberTickUnit) other;
        return this.formatter.equals(that.formatter);
    });
}
```

---

### 3. Refactored `equals` Method in `Hour`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, other -> {
        Hour that = (Hour) other;
        if (this.hour != that.hour) {
            return false;
        }
        return this.day.equals(that.day);
    });
}
```",Type-3
693-1-10,src,org.jfree.chart.axis,NumberTickUnit,equals,126,140,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (NumberTickUnit.java, `equals` method, lines 126-140):
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof NumberTickUnit)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    NumberTickUnit that = (NumberTickUnit) obj;
    if (!this.formatter.equals(that.formatter)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (XYBarDataset.java, `equals` method, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class types, fields, and conditions).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of the superclass's equals method.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = new Object[fields.length];
    for (int i = 0; i < fields.length; i++) {
        thatFields[i] = fields[i];
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (!fields[i].equals(thatFields[i])) {
                return false;
            }
        } else if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `NumberTickUnit.java`:
```java
/**
 * Tests this formatter for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, NumberTickUnit.class, super.equals(obj), this.formatter);
}
```

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, true, this.underlying, this.barWidth);
}
```",Type-3
693-2-4,src,org.jfree.chart.labels,HighLowItemLabelGenerator,equals,205,219,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,Type 3,"### Code Snippet 1: `equals` method from `HighLowItemLabelGenerator` class
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HighLowItemLabelGenerator)) {
        return false;
    }
    HighLowItemLabelGenerator generator = (HighLowItemLabelGenerator) obj;
    if (!this.dateFormatter.equals(generator.dateFormatter)) {
        return false;
    }
    if (!this.numberFormatter.equals(generator.numberFormatter)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `LookupPaintScale` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 * @param clazz  the class to check the instance against.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `HighLowItemLabelGenerator`
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        HighLowItemLabelGenerator.class,
        this.dateFormatter.equals(((HighLowItemLabelGenerator) obj).dateFormatter),
        this.numberFormatter.equals(((HighLowItemLabelGenerator) obj).numberFormatter)
    );
}
```

### 3. Refactored `equals` Method in `LookupPaintScale`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        LookupPaintScale.class,
        this.lowerBound == ((LookupPaintScale) obj).lowerBound,
        this.upperBound == ((LookupPaintScale) obj).upperBound,
        PaintUtilities.equal(this.defaultPaint, ((LookupPaintScale) obj).defaultPaint),
        this.lookupTable.equals(((LookupPaintScale) obj).lookupTable)
    );
}
```",Type-3
693-2-8,src,org.jfree.chart.labels,HighLowItemLabelGenerator,equals,205,219,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1: `equals` method from `HighLowItemLabelGenerator` class
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HighLowItemLabelGenerator)) {
        return false;
    }
    HighLowItemLabelGenerator generator = (HighLowItemLabelGenerator) obj;
    if (!this.dateFormatter.equals(generator.dateFormatter)) {
        return false;
    }
    if (!this.numberFormatter.equals(generator.numberFormatter)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method from `Hour` class
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`dateFormatter` and `numberFormatter` in the first snippet, and `hour` and `day` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 * @param clazz  the expected class of the object.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 *
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be overridden in subclasses to extract the required fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Refactored `equals` Method in `HighLowItemLabelGenerator`
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, HighLowItemLabelGenerator.class, this.dateFormatter, this.numberFormatter);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    HighLowItemLabelGenerator generator = (HighLowItemLabelGenerator) obj;
    return new Object[] { generator.dateFormatter, generator.numberFormatter };
}
```

---

### 3. Refactored `equals` Method in `Hour`
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Hour.class, this.hour, this.day);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    Hour that = (Hour) obj;
    return new Object[] { that.hour, that.day };
}
```",Type-3
693-3-4,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,Type 3,"### Code Snippet 1: `equals` method in `StandardPieSectionLabelGenerator` (lines 220-235)
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2: `equals` method in `LookupPaintScale` (lines 116-130)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** (e.g., the fields being compared: `attributedLabels` and `super.equals(obj)` in the first snippet vs. `lowerBound`, `upperBound`, `defaultPaint`, and `lookupTable` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests two objects for equality by comparing their fields.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `StandardPieSectionLabelGenerator`
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        StandardPieSectionLabelGenerator.class,
        this.attributedLabels.equals(((StandardPieSectionLabelGenerator) obj).attributedLabels),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `LookupPaintScale`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    LookupPaintScale that = (LookupPaintScale) obj;
    return equalsHelper(
        obj,
        LookupPaintScale.class,
        this.lowerBound == that.lowerBound,
        this.upperBound == that.upperBound,
        PaintUtilities.equal(this.defaultPaint, that.defaultPaint),
        this.lookupTable.equals(that.lookupTable)
    );
}
```",Type-3
693-3-8,src,org.jfree.chart.labels,StandardPieSectionLabelGenerator,equals,220,235,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (from `StandardPieSectionLabelGenerator` class, lines 220-235):
```java
/**
 * Tests the generator for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StandardPieSectionLabelGenerator)) {
        return false;
    }
    StandardPieSectionLabelGenerator that
            = (StandardPieSectionLabelGenerator) obj;
    if (!this.attributedLabels.equals(that.attributedLabels)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `Hour` class, lines 356-370):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the fields being compared and the class types).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractEqualityChecker`):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> if all fields are equal and the object is of the expected type.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = extractFields(obj, fields.length);
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the fields from the given object for comparison.
 *
 * @param obj  the object to extract fields from.
 * @param fieldCount  the number of fields to extract.
 *
 * @return An array of field values.
 */
protected Object[] extractFields(Object obj, int fieldCount) {
    // This method should be overridden in subclasses to extract the required fields.
    throw new UnsupportedOperationException(""Subclasses must implement extractFields."");
}
```

---

### 2. Refactored `equals` Method in `StandardPieSectionLabelGenerator`:
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, StandardPieSectionLabelGenerator.class, this.attributedLabels, super.equals(obj));
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    StandardPieSectionLabelGenerator that = (StandardPieSectionLabelGenerator) obj;
    return new Object[] { that.attributedLabels, super.equals(that) };
}
```

---

### 3. Refactored `equals` Method in `Hour`:
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, Hour.class, this.hour, this.day);
}

@Override
protected Object[] extractFields(Object obj, int fieldCount) {
    Hour that = (Hour) obj;
    return new Object[] { that.hour, that.day };
}
```",Type-3
693-4-6,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.chart.title,CompositeTitle,equals,159,173,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, `equals` method, lines 116-130):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `CompositeTitle` class, `equals` method, lines 159-173):
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class-specific fields (`lowerBound`, `upperBound`, `defaultPaint`, `lookupTable` in `LookupPaintScale` and `container` in `CompositeTitle`) and the use of `super.equals(obj)` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractEquality`):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param superEquals  the result of calling super.equals(obj) (if applicable).
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    Object[] thatFields = ((AbstractEquality) obj).getEqualityFields();
    if (fields.length != thatFields.length) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double && thatFields[i] instanceof Double) {
            if ((double) fields[i] != (double) thatFields[i]) {
                return false;
            }
        } else if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Returns the fields to be used for equality comparison.
 * 
 * @return An array of fields.
 */
protected abstract Object[] getEqualityFields();
```

---

### 2. Refactored `equals` Method in `LookupPaintScale`:
```java
@Override
protected Object[] getEqualityFields() {
    return new Object[] { this.lowerBound, this.upperBound, this.defaultPaint, this.lookupTable };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, LookupPaintScale.class, true, getEqualityFields());
}
```

---

### 3. Refactored `equals` Method in `CompositeTitle`:
```java
@Override
protected Object[] getEqualityFields() {
    return new Object[] { this.container };
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CompositeTitle.class, super.equals(obj), getEqualityFields());
}
```",Type-3
693-4-7,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data.gantt,TaskSeries,equals,168,182,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `TaskSeries` class, `equals` method):

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `super.equals(obj)` in the second snippet and the specific fields being compared (`lowerBound`, `upperBound`, `defaultPaint`, `lookupTable` in the first snippet vs. `tasks` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests two objects for equality by comparing their fields.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param fields  the fields to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Object[] fields, Object[] otherFields) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !this.getClass().equals(obj.getClass())) {
        return false;
    }
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LookupPaintScale`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, 
        new Object[] { this.lowerBound, this.upperBound, this.defaultPaint, this.lookupTable },
        new Object[] { ((LookupPaintScale) obj).lowerBound, ((LookupPaintScale) obj).upperBound, 
                       ((LookupPaintScale) obj).defaultPaint, ((LookupPaintScale) obj).lookupTable });
}
```

---

### 3. Refactored `equals` Method in `TaskSeries`:

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!super.equals(obj)) {
        return false;
    }
    return equalsHelper(obj, 
        new Object[] { this.tasks }, 
        new Object[] { ((TaskSeries) obj).tasks });
}
```",Type-3
693-4-9,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data.xy,DefaultWindDataset,equals,306,320,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, lines 116-130):
```java
/**
 * Tests this item for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PaintItem)) {
        return false;
    }
    PaintItem that = (PaintItem) obj;
    if (this.value != that.value) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `DefaultWindDataset` class, lines 306-320):
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 *   <li><code>obj</code> is not <code>null</code>;</li>
 *   <li><code>obj</code> is an instance of
 *       <code>DefaultWindDataset</code>;</li>
 *   <li>both datasets have the same number of series containing identical
 *       values.</li>
 * <ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultWindDataset)) {
        return false;
    }
    DefaultWindDataset that = (DefaultWindDataset) obj;
    if (!this.seriesKeys.equals(that.seriesKeys)) {
        return false;
    }
    if (!this.allSeriesData.equals(that.allSeriesData)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain different statements and logic specific to their respective classes (`PaintItem` and `DefaultWindDataset`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their class type and field values.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `LookupPaintScale` Class:
```java
/**
 * Tests this item for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, PaintItem.class, 
        this.value == ((PaintItem) obj).value,
        PaintUtilities.equal(this.paint, ((PaintItem) obj).paint)
    );
}
```

---

### 3. Refactored Code in `DefaultWindDataset` Class:
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultWindDataset.class, 
        this.seriesKeys.equals(((DefaultWindDataset) obj).seriesKeys),
        this.allSeriesData.equals(((DefaultWindDataset) obj).allSeriesData)
    );
}
```",Type-3
693-5-6,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.title,CompositeTitle,equals,159,173,Type 3,"### Code Snippet 1 (Outlier.java, lines 184-198)
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (CompositeTitle.java, lines 159-173)
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `Outlier` vs. `CompositeTitle`, `this.point` vs. `this.container`, and the inclusion of `super.equals(obj)` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEquals  a boolean indicating whether to call super.equals().
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (superEquals && !super.equals(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) fields[fields.length - 1]);
    for (int i = 0; i < fields.length - 1; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored Method Calls

#### Outlier.java
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, false, this.point, this.radius, 
        new Object[] { ((Outlier) obj).point, ((Outlier) obj).radius });
}
```

#### CompositeTitle.java
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, CompositeTitle.class, true, this.container, 
        new Object[] { ((CompositeTitle) obj).container });
}
```",Type-3
693-5-7,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.data.gantt,TaskSeries,equals,168,182,Type 3,"### Code Snippet 1 (Outlier.java, equals method, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (TaskSeries.java, equals method, lines 168-182):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `super.equals(obj)` in the second snippet and the use of different fields like `point` and `radius` in the first snippet versus `tasks` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param superEqualsResult  the result of calling super.equals(obj) (if applicable).
 * @param fieldsEqual  a boolean indicating whether the instance-specific fields are equal.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEqualsResult, boolean fieldsEqual) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEqualsResult) {
        return false;
    }
    return fieldsEqual;
}
```

### 2. Refactored `equals` Method in `Outlier.java`:
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    boolean fieldsEqual = obj instanceof Outlier 
        && this.point.equals(((Outlier) obj).point) 
        && this.radius == ((Outlier) obj).radius;
    return equalsHelper(obj, Outlier.class, true, fieldsEqual);
}
```

### 3. Refactored `equals` Method in `TaskSeries.java`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    boolean fieldsEqual = obj instanceof TaskSeries 
        && this.tasks.equals(((TaskSeries) obj).tasks);
    return equalsHelper(obj, TaskSeries.class, super.equals(obj), fieldsEqual);
}
```",Type-3
693-6-8,src,org.jfree.chart.title,CompositeTitle,equals,159,173,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (CompositeTitle.java, lines 159-173)
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

---

### Code Snippet 2 (Hour.java, lines 356-370)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the specific fields being compared (`container` in `CompositeTitle` vs. `hour` and `day` in `Hour`) and the class types being checked (`CompositeTitle` vs. `Hour`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param fields  the fields to compare for equality.
 *
 * @return <code>true</code> if the object is equal based on the provided fields.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### CompositeTitle.java (lines 159-173)
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CompositeTitle.class, this.container, ((CompositeTitle) obj).container);
}
```

---

#### Hour.java (lines 356-370)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, this.hour, ((Hour) obj).hour, this.day, ((Hour) obj).day);
}
```",Type-3
693-6-10,src,org.jfree.chart.title,CompositeTitle,equals,159,173,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method in `CompositeTitle` class
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof CompositeTitle)) {
        return false;   
    }
    if (!super.equals(obj)) {
        return false;   
    }
    CompositeTitle that = (CompositeTitle) obj;
    if (!this.container.equals(that.container)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and the specific fields being compared).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object field1 = fields[i];
        Object field2 = fields[i + 1];
        if (field1 == null) {
            if (field2 != null) {
                return false;
            }
        } else if (!field1.equals(field2)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `CompositeTitle` Class
```java
/**
 * Tests this title for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CompositeTitle.class, 
        this.container, ((CompositeTitle) obj).container);
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, 
        this.underlying, ((XYBarDataset) obj).underlying, 
        this.barWidth, ((XYBarDataset) obj).barWidth);
}
```",Type-3
693-7-8,src,org.jfree.data.gantt,TaskSeries,equals,168,182,src,org.jfree.data.time,Hour,equals,356,370,Type 3,"### Code Snippet 1 (TaskSeries.java, lines 168-182)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (Hour.java, lines 356-370)
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of different fields (`tasks` in `TaskSeries` vs. `hour` and `day` in `Hour`) and the class type checks (`TaskSeries` vs. `Hour`).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Series`)

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `TaskSeries.java`

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TaskSeries.class, this.tasks, ((TaskSeries) obj).tasks);
}
```

---

### 3. Refactored `equals` Method in `Hour.java`

```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Hour.class, this.hour, ((Hour) obj).hour, this.day, ((Hour) obj).day);
}
```",Type-3
693-7-10,src,org.jfree.data.gantt,TaskSeries,equals,168,182,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (TaskSeries.java, `equals` method, lines 168-182):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TaskSeries)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    TaskSeries that = (TaskSeries) obj;
    if (!this.tasks.equals(that.tasks)) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, layout)

---

### Code Snippet 2 (XYBarDataset.java, `equals` method, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-2 (Identical except for variable names, literals, types)","### 1. Extracted Method (To be placed in the common superclass, e.g., `Series`):
```java
/**
 * Tests two objects for equality.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the instance.
 * @param superEquals  the result of the superclass's equals method.
 * @param field1  the first field to compare.
 * @param field2  the second field to compare.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean superEquals, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!superEquals) {
        return false;
    }
    if (!field1.equals(field2)) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `TaskSeries.java`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test against (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, TaskSeries.class, super.equals(obj), this.tasks, ((TaskSeries) obj).tasks);
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, true, this.underlying, ((XYBarDataset) obj).underlying)
            && this.barWidth == ((XYBarDataset) obj).barWidth;
}
```",Type-1
693-8-9,src,org.jfree.data.time,Hour,equals,356,370,src,org.jfree.data.xy,DefaultWindDataset,equals,306,320,Type 3,"### Code Snippet 1 (from `Hour` class, `equals` method, lines 356-370):
```java
/**
 * Tests the equality of this object against an arbitrary Object.
 * <P>
 * This method will return true ONLY if the object is an Hour object
 * representing the same hour as this instance.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 *
 * @return <code>true</code> if the hour and day value of the object
 *      is the same as this.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Hour)) {
        return false;
    }
    Hour that = (Hour) obj;
    if (this.hour != that.hour) {
        return false;
    }
    if (!this.day.equals(that.day)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `DefaultWindDataset` class, `equals` method, lines 306-320):
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 *   <li><code>obj</code> is not <code>null</code>;</li>
 *   <li><code>obj</code> is an instance of
 *       <code>DefaultWindDataset</code>;</li>
 *   <li>both datasets have the same number of series containing identical
 *       values.</li>
 * <ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultWindDataset)) {
        return false;
    }
    DefaultWindDataset that = (DefaultWindDataset) obj;
    if (!this.seriesKeys.equals(that.seriesKeys)) {
        return false;
    }
    if (!this.allSeriesData.equals(that.allSeriesData)) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class-specific fields (`hour` and `day` in the first snippet, `seriesKeys` and `allSeriesData` in the second snippet) and the class type checks (`Hour` vs. `DefaultWindDataset`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Generic equality check for objects with two fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param field1  the first field of this object.
 * @param field2  the second field of this object.
 * @param otherField1  the first field of the other object.
 * @param otherField2  the second field of the other object.
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean genericEquals(Object obj, Class<?> clazz, Object field1, Object field2, Object otherField1, Object otherField2) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field1.equals(otherField1)) {
        return false;
    }
    if (!field2.equals(otherField2)) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `Hour` Class:
```java
@Override
public boolean equals(Object obj) {
    return genericEquals(obj, Hour.class, this.hour, this.day, ((Hour) obj).hour, ((Hour) obj).day);
}
```

---

### 3. Refactored `equals` Method in `DefaultWindDataset` Class:
```java
@Override
public boolean equals(Object obj) {
    return genericEquals(obj, DefaultWindDataset.class, this.seriesKeys, this.allSeriesData, 
                         ((DefaultWindDataset) obj).seriesKeys, ((DefaultWindDataset) obj).allSeriesData);
}
```",Type-3
709-2-12,src,org.jfree.chart.renderer.category,CategoryStepRenderer,equals,349,360,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `CategoryStepRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryStepRenderer)) {
        return false;
    }
    CategoryStepRenderer that = (CategoryStepRenderer) obj;
    if (this.stagger != that.stagger) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements, such as the specific checks for `CategoryStepRenderer` and `MatrixSeriesCollection` and the use of `ObjectUtilities.equal` in the second snippet.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj the object to test for equality.
 * @param clazz the class type to check against.
 * @param additionalCheck a functional interface for additional equality checks.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        return additionalCheck.checkEquality(obj);
    }
    return false;
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `CategoryStepRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryStepRenderer.class, other -> {
        CategoryStepRenderer that = (CategoryStepRenderer) other;
        return this.stagger == that.stagger && super.equals(obj);
    });
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, other -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) other;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
709-3-12,src,org.jfree.chart.renderer.category,StackedAreaRenderer,equals,490,501,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `StackedAreaRenderer` class (lines 490-501)
```java
/**
 * Checks this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedAreaRenderer)) {
        return false;
    }
    StackedAreaRenderer that = (StackedAreaRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractRenderer` or a new utility class)
```java
/**
 * Checks equality between two objects of the same type.
 *
 * @param obj the object to compare with.
 * @param instanceClass the class of the current instance.
 * @param additionalCheck a boolean result of additional equality checks specific to the subclass.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, boolean additionalCheck) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !instanceClass.isInstance(obj)) {
        return false;
    }
    return additionalCheck;
}
```

---

### 2. Refactored `equals` Method in `StackedAreaRenderer` Class
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, StackedAreaRenderer.class, 
        obj instanceof StackedAreaRenderer && 
        this.renderAsPercentages == ((StackedAreaRenderer) obj).renderAsPercentages &&
        super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
709-4-12,src,org.jfree.chart.renderer.category,StackedBarRenderer,equals,390,401,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"Here are the two code snippets:

---

**Code Snippet 1 (from `StackedBarRenderer` class, `equals` method):**

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer)) {
        return false;
    }
    StackedBarRenderer that = (StackedBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

---

**Code Snippet 2 (from `MatrixSeriesCollection` class, `equals` method):**

```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

**Clone Type:**

The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the specific class type checks (`StackedBarRenderer` vs. `MatrixSeriesCollection`), the fields being compared (`renderAsPercentages` vs. `seriesList`), and the use of `ObjectUtilities.equal` in the second snippet.","**1. Extracted Method (to be placed in the common superclass):**

```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj the object to compare.
 * @param clazz the class to check the type of the object.
 * @param fieldEqualityCheck a boolean indicating the equality of specific fields.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean baseEquals(Object obj, Class<?> clazz, boolean fieldEqualityCheck) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    return fieldEqualityCheck;
}
```

---

**2. Refactored `equals` method in `StackedBarRenderer` class:**

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, StackedBarRenderer.class, 
        obj instanceof StackedBarRenderer && 
        this.renderAsPercentages == ((StackedBarRenderer) obj).renderAsPercentages &&
        super.equals(obj));
}
```

---

**3. Refactored `equals` method in `MatrixSeriesCollection` class:**

```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
709-5-12,src,org.jfree.chart.renderer.xy,ClusteredXYBarRenderer,equals,326,337,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `ClusteredXYBarRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ClusteredXYBarRenderer)) {
        return false;
    }
    ClusteredXYBarRenderer that = (ClusteredXYBarRenderer) obj;
    if (this.centerBarAtStartValue != that.centerBarAtStartValue) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets represent **Type-3 clones**. They are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param clazz the expected class type of the object.
 * @param additionalCheck a boolean condition for additional equality checks.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        return additionalCheck;
    }
    return false;
}
```

---

### 2. Refactored `equals` Method in `ClusteredXYBarRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ClusteredXYBarRenderer.class, 
        obj instanceof ClusteredXYBarRenderer 
        && this.centerBarAtStartValue == ((ClusteredXYBarRenderer) obj).centerBarAtStartValue
        && super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection 
        && ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
709-6-12,src,org.jfree.chart.renderer.xy,DeviationRenderer,equals,371,382,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method from `DeviationRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DeviationRenderer)) {
        return false;
    }
    DeviationRenderer that = (DeviationRenderer) obj;
    if (this.alpha != that.alpha) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `MatrixSeriesCollection.java`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but contain some different statements, such as the type checks (`DeviationRenderer` vs. `MatrixSeriesCollection`), the fields being compared (`alpha` vs. `seriesList`), and the use of `super.equals(obj)` vs. `ObjectUtilities.equal`.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param type the expected class type of the object.
 * @param fieldComparison a boolean indicating the result of comparing instance-specific fields.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> type, boolean fieldComparison) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !type.isInstance(obj)) {
        return false;
    }
    return fieldComparison;
}
```

---

### 2. Refactored `equals` Method in `DeviationRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, DeviationRenderer.class, 
        obj instanceof DeviationRenderer && this.alpha == ((DeviationRenderer) obj).alpha && super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection.java`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
709-7-12,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer2,equals,536,547,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (from `StackedXYAreaRenderer2` class, lines 536-547):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedXYAreaRenderer2)) {
        return false;
    }
    StackedXYAreaRenderer2 that = (StackedXYAreaRenderer2) obj;
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `MatrixSeriesCollection` class, lines 232-247):
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj the object to test.
 * @param expectedClass the expected class of the object.
 * @param additionalCheck a functional interface for additional equality checks.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, java.util.function.Predicate<Object> additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (expectedClass.isInstance(obj)) {
        return additionalCheck.test(obj);
    }
    return false;
}
```

---

### 2. Refactored Method in `StackedXYAreaRenderer2`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, StackedXYAreaRenderer2.class, o -> {
        StackedXYAreaRenderer2 that = (StackedXYAreaRenderer2) o;
        return this.roundXCoordinates == that.roundXCoordinates && super.equals(o);
    });
}
```

---

### 3. Refactored Method in `MatrixSeriesCollection`:
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, o -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) o;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
709-8-12,src,org.jfree.chart.renderer.xy,StackedXYBarRenderer,equals,394,405,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (from `StackedXYBarRenderer` class, `equals` method):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StackedXYBarRenderer)) {
        return false;   
    }
    StackedXYBarRenderer that = (StackedXYBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;   
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `MatrixSeriesCollection` class, `equals` method):
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the type checks (`StackedXYBarRenderer` vs. `MatrixSeriesCollection`), the specific fields being compared (`renderAsPercentages` vs. `seriesList`), and the use of `super.equals(obj)` vs. `ObjectUtilities.equal`.","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param clazz the class type to check against.
 * @param fieldComparison a boolean indicating the result of field-specific comparison.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean fieldComparison) {
    if (obj == this) {
        return true;
    }
    if (obj == null || !clazz.isInstance(obj)) {
        return false;
    }
    return fieldComparison;
}
```

---

### 2. Refactored `equals` Method in `StackedXYBarRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, StackedXYBarRenderer.class, 
        obj instanceof StackedXYBarRenderer && 
        this.renderAsPercentages == ((StackedXYBarRenderer) obj).renderAsPercentages &&
        super.equals(obj));
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection`:
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, 
        obj instanceof MatrixSeriesCollection && 
        ObjectUtilities.equal(this.seriesList, ((MatrixSeriesCollection) obj).seriesList));
}
```",Type-3
709-9-12,src,org.jfree.chart.renderer.xy,XYBubbleRenderer,equals,327,338,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `XYBubbleRenderer` class (lines 327-338)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBubbleRenderer)) {
        return false;
    }
    XYBubbleRenderer that = (XYBubbleRenderer) obj;
    if (this.scaleType != that.scaleType) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` class (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj the object to test.
 * @param expectedClass the expected class of the object.
 * @param additionalCheck a functional interface for additional equality checks.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, EqualityCheck additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (expectedClass.isInstance(obj)) {
        return additionalCheck.check(obj);
    }
    return false;
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored `equals` Method in `XYBubbleRenderer` Class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYBubbleRenderer.class, other -> {
        XYBubbleRenderer that = (XYBubbleRenderer) other;
        return this.scaleType == that.scaleType && super.equals(obj);
    });
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection` Class
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, MatrixSeriesCollection.class, other -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) other;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
709-10-12,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,315,326,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1 (XYSplineRenderer.java, `equals` method, lines 315-326):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (MatrixSeriesCollection.java, `equals` method, lines 232-247):
```java
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (To be placed in the common superclass):
```java
protected boolean baseEquals(Object obj, Class<?> clazz, Object instanceSpecificField1, Object instanceSpecificField2) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        Object that = clazz.cast(obj);
        return instanceSpecificField1.equals(instanceSpecificField2);
    }
    return false;
}
```

### 2. Refactored Code in `XYSplineRenderer.java`:
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, XYSplineRenderer.class, this.precision, ((XYSplineRenderer)obj).precision);
}
```

### 3. Refactored Code in `MatrixSeriesCollection.java`:
```java
@Override
public boolean equals(Object obj) {
    return baseEquals(obj, MatrixSeriesCollection.class, this.seriesList, ((MatrixSeriesCollection)obj).seriesList);
}
```",Type-3
709-11-12,src,org.jfree.chart.renderer.xy,XYStepRenderer,equals,326,337,src,org.jfree.data.xy,MatrixSeriesCollection,equals,232,247,Type 3,"### Code Snippet 1: `equals` method in `XYStepRenderer` (lines 326-337)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLineAndShapeRenderer)) {
        return false;
    }
    XYStepRenderer that = (XYStepRenderer) obj;
    if (this.stepPoint != that.stepPoint) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method in `MatrixSeriesCollection` (lines 232-247)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }

    if (obj == this) {
        return true;
    }

    if (obj instanceof MatrixSeriesCollection) {
        MatrixSeriesCollection c = (MatrixSeriesCollection) obj;

        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    }

    return false;
}
```

### Clone Type:
The two code snippets are **Type-3 clones**.  
- They are **mostly similar** but contain **different statements** and logic specific to their respective classes (`XYStepRenderer` and `MatrixSeriesCollection`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj the object to test.
 * @param instanceClass the class of the current instance.
 * @param additionalCheck a functional interface for additional equality checks.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, EqualityCheck additionalCheck) {
    if (obj == null) {
        return false;
    }
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj)) {
        return additionalCheck.checkEquality(obj);
    }
    return false;
}

/**
 * Functional interface for additional equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `XYStepRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYStepRenderer.class, other -> {
        XYStepRenderer that = (XYStepRenderer) other;
        return this.stepPoint == that.stepPoint && super.equals(other);
    });
}
```

---

### 3. Refactored `equals` Method in `MatrixSeriesCollection`
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj the object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, MatrixSeriesCollection.class, other -> {
        MatrixSeriesCollection c = (MatrixSeriesCollection) other;
        return ObjectUtilities.equal(this.seriesList, c.seriesList);
    });
}
```",Type-3
718-1-3,src,org.jfree.data.time,Hour,previous,253,268,src,org.jfree.data.time,Millisecond,previous,231,244,Type 3,"### Code Snippet 1: `previous` method from `Hour` class
```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
public RegularTimePeriod previous() {

    Hour result;
    if (this.hour != FIRST_HOUR_IN_DAY) {
        result = new Hour(this.hour - 1, this.day);
    }
    else { // we are at the first hour in the day...
        Day prevDay = (Day) this.day.previous();
        if (prevDay != null) {
            result = new Hour(LAST_HOUR_IN_DAY, prevDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

### Code Snippet 2: `previous` method from `Millisecond` class
```java
/**
 * Returns the millisecond preceding this one.
 *
 * @return The millisecond preceding this one.
 */
public RegularTimePeriod previous() {

    RegularTimePeriod result = null;

    if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond - 1, getSecond());
    }
    else {
        Second previous = (Second) getSecond().previous();
        if (previous != null) {
            result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);
        }
    }
    return result;

}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the handling of `Hour` vs. `Millisecond`, and the use of `Day` vs. `Second`.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the time period preceding this one.
 *
 * @param currentValue  the current value (e.g., hour, millisecond).
 * @param firstValue    the first value in the range (e.g., 0 for hour, 0 for millisecond).
 * @param lastValue     the last value in the range (e.g., 23 for hour, 999 for millisecond).
 * @param currentUnit   the current time unit (e.g., Day, Second).
 * @param previousUnit  the previous time unit (e.g., Day.previous(), Second.previous()).
 * @param createNewUnit a function to create a new time period (e.g., new Hour(), new Millisecond()).
 * @return The time period preceding this one.
 */
protected static <T extends RegularTimePeriod> T getPreviousPeriod(
        int currentValue, int firstValue, int lastValue, 
        RegularTimePeriod currentUnit, RegularTimePeriod previousUnit, 
        BiFunction<Integer, RegularTimePeriod, T> createNewUnit) {

    if (currentValue != firstValue) {
        return createNewUnit.apply(currentValue - 1, currentUnit);
    } else {
        if (previousUnit != null) {
            return createNewUnit.apply(lastValue, previousUnit);
        } else {
            return null;
        }
    }
}
```

---

### 2. Refactored `previous` Method in `Hour` Class
```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getPreviousPeriod(
        this.hour, FIRST_HOUR_IN_DAY, LAST_HOUR_IN_DAY, 
        this.day, this.day.previous(), 
        (value, unit) -> new Hour(value, (Day) unit)
    );
}
```

---

### 3. Refactored `previous` Method in `Millisecond` Class
```java
/**
 * Returns the millisecond preceding this one.
 *
 * @return The millisecond preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getPreviousPeriod(
        this.millisecond, FIRST_MILLISECOND_IN_SECOND, LAST_MILLISECOND_IN_SECOND, 
        getSecond(), getSecond().previous(), 
        (value, unit) -> new Millisecond(value, (Second) unit)
    );
}
```",Type-3
718-1-4,src,org.jfree.data.time,Hour,previous,253,268,src,org.jfree.data.time,Millisecond,next,253,265,Type 3,"### Code Snippet 1: `previous` method from `Hour` class
```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
public RegularTimePeriod previous() {

    Hour result;
    if (this.hour != FIRST_HOUR_IN_DAY) {
        result = new Hour(this.hour - 1, this.day);
    }
    else { // we are at the first hour in the day...
        Day prevDay = (Day) this.day.previous();
        if (prevDay != null) {
            result = new Hour(LAST_HOUR_IN_DAY, prevDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2: `next` method from `Millisecond` class
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
public RegularTimePeriod next() {

    RegularTimePeriod result = null;
    if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond + 1, getSecond());
    }
    else {
        Second next = (Second) getSecond().next();
        if (next != null) {
            result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next);
        }
    }
    return result;

}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the handling of `Hour` vs. `Millisecond`, and the use of `Day` vs. `Second`.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the time period preceding or following this one.
 *
 * @param currentValue  the current value (e.g., hour, millisecond).
 * @param firstValue    the first value in the range (e.g., 0 for hour/millisecond).
 * @param lastValue     the last value in the range (e.g., 23 for hour, 999 for millisecond).
 * @param currentPeriod the current time period (e.g., Day, Second).
 * @param isNext        true if calculating the next period, false for the previous period.
 * @param createPeriod  a factory method to create a new time period.
 * @return The preceding or following time period.
 */
protected static <T extends RegularTimePeriod> T getAdjacentPeriod(
        int currentValue, int firstValue, int lastValue, 
        RegularTimePeriod currentPeriod, boolean isNext, 
        BiFunction<Integer, RegularTimePeriod, T> createPeriod) {

    if (isNext) {
        if (currentValue != lastValue) {
            return createPeriod.apply(currentValue + 1, currentPeriod);
        } else {
            RegularTimePeriod nextPeriod = currentPeriod.next();
            if (nextPeriod != null) {
                return createPeriod.apply(firstValue, nextPeriod);
            }
        }
    } else {
        if (currentValue != firstValue) {
            return createPeriod.apply(currentValue - 1, currentPeriod);
        } else {
            RegularTimePeriod previousPeriod = currentPeriod.previous();
            if (previousPeriod != null) {
                return createPeriod.apply(lastValue, previousPeriod);
            }
        }
    }
    return null;
}
```

---

### 2. Refactored `previous` Method in `Hour` Class
```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getAdjacentPeriod(
        this.hour, FIRST_HOUR_IN_DAY, LAST_HOUR_IN_DAY, 
        this.day, false, (value, period) -> new Hour(value, (Day) period)
    );
}
```

---

### 3. Refactored `next` Method in `Millisecond` Class
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
@Override
public RegularTimePeriod next() {
    return getAdjacentPeriod(
        this.millisecond, FIRST_MILLISECOND_IN_SECOND, LAST_MILLISECOND_IN_SECOND, 
        getSecond(), true, (value, period) -> new Millisecond(value, (Second) period)
    );
}
```",Type-3
718-1-7,src,org.jfree.data.time,Hour,previous,253,268,src,org.jfree.data.time,Second,previous,226,238,Type 3,"### Code Snippet 1 (from `Hour.java`):

```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
public RegularTimePeriod previous() {

    Hour result;
    if (this.hour != FIRST_HOUR_IN_DAY) {
        result = new Hour(this.hour - 1, this.day);
    }
    else { // we are at the first hour in the day...
        Day prevDay = (Day) this.day.previous();
        if (prevDay != null) {
            result = new Hour(LAST_HOUR_IN_DAY, prevDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2 (from `Second.java`):

```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    
    Second result = null;
    if (this.second != FIRST_SECOND_IN_MINUTE) {
        result = new Second(this.second - 1, getMinute());
    }
    else {
        Minute previous = (Minute) getMinute().previous();
        if (previous != null) {
            result = new Second(LAST_SECOND_IN_MINUTE, previous);
        }
    }
    return result;
    
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as variable names (`hour` vs. `second`, `Day` vs. `Minute`), constants (`FIRST_HOUR_IN_DAY` vs. `FIRST_SECOND_IN_MINUTE`), and method calls (`getMinute()` in the second snippet).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):

```java
/**
 * Returns the preceding time period based on the provided parameters.
 *
 * @param currentValue  the current value (e.g., hour, second).
 * @param firstValue    the first value in the range (e.g., FIRST_HOUR_IN_DAY, FIRST_SECOND_IN_MINUTE).
 * @param lastValue     the last value in the range (e.g., LAST_HOUR_IN_DAY, LAST_SECOND_IN_MINUTE).
 * @param currentUnit   the current time unit (e.g., Day, Minute).
 * @param previousUnit  the previous time unit (e.g., Day.previous(), Minute.previous()).
 * @param newInstance   a factory method to create a new instance of the time period.
 * @return The preceding time period.
 */
protected static <T extends RegularTimePeriod> T getPreviousPeriod(
    int currentValue, int firstValue, int lastValue, 
    RegularTimePeriod currentUnit, RegularTimePeriod previousUnit, 
    BiFunction<Integer, RegularTimePeriod, T> newInstance) {

    if (currentValue != firstValue) {
        return newInstance.apply(currentValue - 1, currentUnit);
    } else if (previousUnit != null) {
        return newInstance.apply(lastValue, previousUnit);
    } else {
        return null;
    }
}
```

---

### 2. Refactored Method in `Hour.java`:

```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getPreviousPeriod(
        this.hour, FIRST_HOUR_IN_DAY, LAST_HOUR_IN_DAY, 
        this.day, this.day.previous(), Hour::new
    );
}
```

---

### 3. Refactored Method in `Second.java`:

```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getPreviousPeriod(
        this.second, FIRST_SECOND_IN_MINUTE, LAST_SECOND_IN_MINUTE, 
        getMinute(), getMinute().previous(), Second::new
    );
}
```",Type-3
718-1-8,src,org.jfree.data.time,Hour,previous,253,268,src,org.jfree.data.time,Second,next,247,259,Type 3,"### Code Snippet 1 (from `Hour.java`, method `previous`):
```java
/**
 * Returns the hour preceding this one.
 *
 * @return The hour preceding this one.
 */
public RegularTimePeriod previous() {

    Hour result;
    if (this.hour != FIRST_HOUR_IN_DAY) {
        result = new Hour(this.hour - 1, this.day);
    }
    else { // we are at the first hour in the day...
        Day prevDay = (Day) this.day.previous();
        if (prevDay != null) {
            result = new Hour(LAST_HOUR_IN_DAY, prevDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2 (from `Second.java`, method `next`):
```java
/**
 * Returns the second following this one.
 *
 * @return The second following this one.
 */
public RegularTimePeriod next() {
    
    Second result = null;
    if (this.second != LAST_SECOND_IN_MINUTE) {
        result = new Second(this.second + 1, getMinute());
    }
    else {
        Minute next = (Minute) getMinute().next();
        if (next != null) {
            result = new Second(FIRST_SECOND_IN_MINUTE, next);
        }
    }
    return result;

}
```

---

### Clone Type:
These two code snippets exhibit **Type-3 (Near-Miss Clones)**. While the structure and logic are mostly similar, there are differences in variable names, constants, and method calls (`Hour` vs. `Second`, `FIRST_HOUR_IN_DAY` vs. `LAST_SECOND_IN_MINUTE`, etc.).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the time period adjacent to this one (previous or next).
 *
 * @param currentValue  the current value (e.g., hour, second).
 * @param firstValue    the first value in the range (e.g., 0 for hours or seconds).
 * @param lastValue     the last value in the range (e.g., 23 for hours, 59 for seconds).
 * @param currentPeriod the current time period (e.g., this day or minute).
 * @param previousPeriod the previous time period (e.g., previous day or minute).
 * @param nextPeriod    the next time period (e.g., next day or minute).
 * @param isNext        true if calculating the next period, false for the previous period.
 * @return The adjacent time period.
 */
protected static <T extends RegularTimePeriod> T getAdjacentPeriod(
    int currentValue, int firstValue, int lastValue, 
    RegularTimePeriod currentPeriod, RegularTimePeriod previousPeriod, 
    RegularTimePeriod nextPeriod, boolean isNext) {

    T result = null;
    if (isNext) {
        if (currentValue != lastValue) {
            result = (T) currentPeriod.getNext(currentValue + 1);
        } else if (nextPeriod != null) {
            result = (T) currentPeriod.getNext(firstValue, nextPeriod);
        }
    } else {
        if (currentValue != firstValue) {
            result = (T) currentPeriod.getPrevious(currentValue - 1);
        } else if (previousPeriod != null) {
            result = (T) currentPeriod.getPrevious(lastValue, previousPeriod);
        }
    }
    return result;
}
```

",Type-3
718-2-3,src,org.jfree.data.time,Hour,next,277,292,src,org.jfree.data.time,Millisecond,previous,231,244,Type 3,"### Code Snippet 1: Method `next` from `Hour` class
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
public RegularTimePeriod next() {

    Hour result;
    if (this.hour != LAST_HOUR_IN_DAY) {
        result = new Hour(this.hour + 1, this.day);
    }
    else { // we are at the last hour in the day...
        Day nextDay = (Day) this.day.next();
        if (nextDay != null) {
            result = new Hour(FIRST_HOUR_IN_DAY, nextDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2: Method `previous` from `Millisecond` class
```java
/**
 * Returns the millisecond preceding this one.
 *
 * @return The millisecond preceding this one.
 */
public RegularTimePeriod previous() {

    RegularTimePeriod result = null;

    if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond - 1, getSecond());
    }
    else {
        Second previous = (Second) getSecond().previous();
        if (previous != null) {
            result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);
        }
    }
    return result;

}
```

---

### Clone Type:
The two code snippets exhibit **Type-3 Clone** because they are mostly similar in structure and logic but differ in specific statements, variable names, and the context of the classes (`Hour` vs. `Millisecond`).","### 1. Extracted Method (To be placed in the common superclass `RegularTimePeriod`)
```java
/**
 * Returns the next or previous time period based on the provided parameters.
 *
 * @param currentValue  the current value (e.g., hour, millisecond).
 * @param firstValue    the first value in the range (e.g., 0).
 * @param lastValue     the last value in the range (e.g., 23, 999).
 * @param currentPeriod the current time period (e.g., Day, Second).
 * @param isNext        true for next, false for previous.
 * @param createPeriod  a factory method to create a new time period.
 * @return The next or previous time period.
 */
protected static <T extends RegularTimePeriod> T getNextOrPrevious(
        int currentValue, int firstValue, int lastValue, T currentPeriod,
        boolean isNext, BiFunction<Integer, T, T> createPeriod) {

    if (isNext) {
        if (currentValue != lastValue) {
            return createPeriod.apply(currentValue + 1, currentPeriod);
        } else {
            T nextPeriod = (T) currentPeriod.next();
            return (nextPeriod != null) ? createPeriod.apply(firstValue, nextPeriod) : null;
        }
    } else {
        if (currentValue != firstValue) {
            return createPeriod.apply(currentValue - 1, currentPeriod);
        } else {
            T previousPeriod = (T) currentPeriod.previous();
            return (previousPeriod != null) ? createPeriod.apply(lastValue, previousPeriod) : null;
        }
    }
}
```

---

### 2. Refactored Method Calls

#### Refactored `next` Method in `Hour` Class
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
public RegularTimePeriod next() {
    return getNextOrPrevious(
        this.hour, FIRST_HOUR_IN_DAY, LAST_HOUR_IN_DAY, this.day, true,
        (value, period) -> new Hour(value, (Day) period)
    );
}
```

---

#### Refactored `previous` Method in `Millisecond` Class
```java
/**
 * Returns the millisecond preceding this one.
 *
 * @return The millisecond preceding this one.
 */
public RegularTimePeriod previous() {
    return getNextOrPrevious(
        this.millisecond, FIRST_MILLISECOND_IN_SECOND, LAST_MILLISECOND_IN_SECOND, getSecond(), false,
        (value, period) -> new Millisecond(value, (Second) period)
    );
}
```",Type-3
718-2-4,src,org.jfree.data.time,Hour,next,277,292,src,org.jfree.data.time,Millisecond,next,253,265,Type 3,"### Code Snippet 1 (from `Hour` class, method `next`):
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
public RegularTimePeriod next() {

    Hour result;
    if (this.hour != LAST_HOUR_IN_DAY) {
        result = new Hour(this.hour + 1, this.day);
    }
    else { // we are at the last hour in the day...
        Day nextDay = (Day) this.day.next();
        if (nextDay != null) {
            result = new Hour(FIRST_HOUR_IN_DAY, nextDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

### Code Snippet 2 (from `Millisecond` class, method `next`):
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
public RegularTimePeriod next() {

    RegularTimePeriod result = null;
    if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond + 1, getSecond());
    }
    else {
        Second next = (Second) getSecond().next();
        if (next != null) {
            result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next);
        }
    }
    return result;

}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `Hour` vs. `Millisecond`, `Day` vs. `Second`, and the specific logic for handling the next time period.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the next time period based on the provided parameters.
 *
 * @param currentValue  the current value (e.g., hour, millisecond).
 * @param maxValue      the maximum value for the current period (e.g., 23 for hours, 999 for milliseconds).
 * @param firstValue    the first value for the next period (e.g., 0 for hours, 0 for milliseconds).
 * @param currentPeriod the current period object (e.g., Day, Second).
 * @param nextPeriod    the next period object (e.g., Day.next(), Second.next()).
 * @param createNew     a function to create a new instance of the time period.
 * @return The next time period.
 */
protected static <T extends RegularTimePeriod> T getNextTimePeriod(
        int currentValue, int maxValue, int firstValue, Object currentPeriod,
        Object nextPeriod, BiFunction<Integer, Object, T> createNew) {

    if (currentValue != maxValue) {
        return createNew.apply(currentValue + 1, currentPeriod);
    } else {
        if (nextPeriod != null) {
            return createNew.apply(firstValue, nextPeriod);
        } else {
            return null;
        }
    }
}
```

---

### 2. Refactored `next` Method in `Hour` Class:
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
@Override
public RegularTimePeriod next() {
    return getNextTimePeriod(
        this.hour, LAST_HOUR_IN_DAY, FIRST_HOUR_IN_DAY, this.day,
        this.day.next(), Hour::new
    );
}
```

---

### 3. Refactored `next` Method in `Millisecond` Class:
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
@Override
public RegularTimePeriod next() {
    return getNextTimePeriod(
        this.millisecond, LAST_MILLISECOND_IN_SECOND, FIRST_MILLISECOND_IN_SECOND,
        getSecond(), getSecond().next(), Millisecond::new
    );
}
```",Type-3
718-2-7,src,org.jfree.data.time,Hour,next,277,292,src,org.jfree.data.time,Second,previous,226,238,Type 3,"### Code Snippet 1: Method `next` from `Hour.java`
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
public RegularTimePeriod next() {

    Hour result;
    if (this.hour != LAST_HOUR_IN_DAY) {
        result = new Hour(this.hour + 1, this.day);
    }
    else { // we are at the last hour in the day...
        Day nextDay = (Day) this.day.next();
        if (nextDay != null) {
            result = new Hour(FIRST_HOUR_IN_DAY, nextDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2: Method `previous` from `Second.java`
```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    
    Second result = null;
    if (this.second != FIRST_SECOND_IN_MINUTE) {
        result = new Second(this.second - 1, getMinute());
    }
    else {
        Minute previous = (Minute) getMinute().previous();
        if (previous != null) {
            result = new Second(LAST_SECOND_IN_MINUTE, previous);
        }
    }
    return result;
    
}
```

---

### Clone Type:
These two code snippets represent **Type-3 clones** because they are mostly similar in structure and logic but differ in variable names, class types, and some specific statements.","### 1. Extracted Method (To be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the time period adjacent to this one, either preceding or following.
 *
 * @param currentValue  the current value (e.g., hour, second).
 * @param firstValue    the first value in the range (e.g., 0 for hour or second).
 * @param lastValue     the last value in the range (e.g., 23 for hour, 59 for second).
 * @param currentPeriod the current time period (e.g., Day, Minute).
 * @param nextPeriod    the next time period (e.g., Day.next(), Minute.next()).
 * @param isNext        true if fetching the next period, false if fetching the previous period.
 * @param <T>           the type of the time period to return.
 * @return The adjacent time period.
 */
protected <T extends RegularTimePeriod> T getAdjacentPeriod(
    int currentValue, int firstValue, int lastValue, 
    RegularTimePeriod currentPeriod, RegularTimePeriod nextPeriod, boolean isNext) {

    T result = null;
    if (isNext) {
        if (currentValue != lastValue) {
            result = (T) createNewPeriod(currentValue + 1, currentPeriod);
        } else if (nextPeriod != null) {
            result = (T) createNewPeriod(firstValue, nextPeriod);
        }
    } else {
        if (currentValue != firstValue) {
            result = (T) createNewPeriod(currentValue - 1, currentPeriod);
        } else if (nextPeriod != null) {
            result = (T) createNewPeriod(lastValue, nextPeriod);
        }
    }
    return result;
}

/**
 * Factory method to create a new time period instance.
 *
 * @param value         the value for the new period (e.g., hour, second).
 * @param parentPeriod  the parent period (e.g., Day, Minute).
 * @return A new instance of the time period.
 */
protected abstract RegularTimePeriod createNewPeriod(int value, RegularTimePeriod parentPeriod);
```

---

### 2. Refactored Method Calls

#### In `Hour.java` (Method `next`)
```java
@Override
public RegularTimePeriod next() {
    return getAdjacentPeriod(this.hour, FIRST_HOUR_IN_DAY, LAST_HOUR_IN_DAY, this.day, this.day.next(), true);
}

@Override
protected RegularTimePeriod createNewPeriod(int value, RegularTimePeriod parentPeriod) {
    return new Hour(value, (Day) parentPeriod);
}
```

#### In `Second.java` (Method `previous`)
```java
@Override
public RegularTimePeriod previous() {
    return getAdjacentPeriod(this.second, FIRST_SECOND_IN_MINUTE, LAST_SECOND_IN_MINUTE, getMinute(), getMinute().previous(), false);
}

@Override
protected RegularTimePeriod createNewPeriod(int value, RegularTimePeriod parentPeriod) {
    return new Second(value, (Minute) parentPeriod);
}
```",Type-3
718-2-8,src,org.jfree.data.time,Hour,next,277,292,src,org.jfree.data.time,Second,next,247,259,Type 3,"### Code Snippet 1 (from `Hour` class, `next` method):
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
public RegularTimePeriod next() {

    Hour result;
    if (this.hour != LAST_HOUR_IN_DAY) {
        result = new Hour(this.hour + 1, this.day);
    }
    else { // we are at the last hour in the day...
        Day nextDay = (Day) this.day.next();
        if (nextDay != null) {
            result = new Hour(FIRST_HOUR_IN_DAY, nextDay);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2 (from `Second` class, `next` method):
```java
/**
 * Returns the second following this one.
 *
 * @return The second following this one.
 */
public RegularTimePeriod next() {
    
    Second result = null;
    if (this.second != LAST_SECOND_IN_MINUTE) {
        result = new Second(this.second + 1, getMinute());
    }
    else {
        Minute next = (Minute) getMinute().next();
        if (next != null) {
            result = new Second(FIRST_SECOND_IN_MINUTE, next);
        }
    }
    return result;

}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `Hour` vs. `Second`, `Day` vs. `Minute`, and the constants `LAST_HOUR_IN_DAY`/`FIRST_HOUR_IN_DAY` vs. `LAST_SECOND_IN_MINUTE`/`FIRST_SECOND_IN_MINUTE`.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the next time period based on the current value and boundaries.
 *
 * @param currentValue  the current value (e.g., hour, second).
 * @param lastValue     the last value in the range (e.g., 23 for hours, 59 for seconds).
 * @param firstValue    the first value in the range (e.g., 0 for hours, 0 for seconds).
 * @param currentUnit   the current time unit (e.g., Day, Minute).
 * @param nextUnit      the next time unit (e.g., Day.next(), Minute.next()).
 * @param createNewUnit a function to create a new time period (e.g., new Hour(), new Second()).
 * @return The next time period.
 */
protected static <T extends RegularTimePeriod, U> T getNextTimePeriod(
        int currentValue, int lastValue, int firstValue, 
        U currentUnit, U nextUnit, BiFunction<Integer, U, T> createNewUnit) {

    if (currentValue != lastValue) {
        return createNewUnit.apply(currentValue + 1, currentUnit);
    } else {
        if (nextUnit != null) {
            return createNewUnit.apply(firstValue, nextUnit);
        } else {
            return null;
        }
    }
}
```

---

### 2. Refactored `next` Method in `Hour` Class:
```java
/**
 * Returns the hour following this one.
 *
 * @return The hour following this one.
 */
@Override
public RegularTimePeriod next() {
    return getNextTimePeriod(
        this.hour, LAST_HOUR_IN_DAY, FIRST_HOUR_IN_DAY, 
        this.day, this.day.next(), Hour::new
    );
}
```

---

### 3. Refactored `next` Method in `Second` Class:
```java
/**
 * Returns the second following this one.
 *
 * @return The second following this one.
 */
@Override
public RegularTimePeriod next() {
    return getNextTimePeriod(
        this.second, LAST_SECOND_IN_MINUTE, FIRST_SECOND_IN_MINUTE, 
        getMinute(), getMinute().next(), Second::new
    );
}
```",Type-3
718-3-5,src,org.jfree.data.time,Millisecond,previous,231,244,src,org.jfree.data.time,Minute,previous,259,273,Type 3,"### Code Snippet 1 (from `Millisecond` class, `previous` method):
```java
public RegularTimePeriod previous() {

    RegularTimePeriod result = null;

    if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond - 1, getSecond());
    }
    else {
        Second previous = (Second) getSecond().previous();
        if (previous != null) {
            result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);
        }
    }
    return result;

}
```

### Code Snippet 2 (from `Minute` class, `previous` method):
```java
public RegularTimePeriod previous() {
    Minute result;
    if (this.minute != FIRST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute - 1, getHour());
    }
    else {
        Hour h = (Hour) getHour().previous();
        if (h != null) {
            result = new Minute(LAST_MINUTE_IN_HOUR, h);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements, such as variable names (`millisecond` vs. `minute`, `Second` vs. `Hour`), constants (`FIRST_MILLISECOND_IN_SECOND` vs. `FIRST_MINUTE_IN_HOUR`), and class-specific logic.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
protected RegularTimePeriod calculatePrevious(int currentValue, int firstValue, int lastValue, RegularTimePeriod currentPeriod, RegularTimePeriod previousPeriod) {
    RegularTimePeriod result = null;
    if (currentValue != firstValue) {
        result = createNewInstance(currentValue - 1, currentPeriod);
    } else {
        RegularTimePeriod previous = previousPeriod.previous();
        if (previous != null) {
            result = createNewInstance(lastValue, previous);
        }
    }
    return result;
}

// Abstract method to be implemented by subclasses
protected abstract RegularTimePeriod createNewInstance(int value, RegularTimePeriod period);
```

---

### 2. Updated `previous` Method in `Millisecond` Class:
```java
@Override
public RegularTimePeriod previous() {
    return calculatePrevious(this.millisecond, FIRST_MILLISECOND_IN_SECOND, LAST_MILLISECOND_IN_SECOND, getSecond(), getSecond());
}

@Override
protected RegularTimePeriod createNewInstance(int value, RegularTimePeriod period) {
    return new Millisecond(value, (Second) period);
}
```

---

### 3. Updated `previous` Method in `Minute` Class:
```java
@Override
public RegularTimePeriod previous() {
    return calculatePrevious(this.minute, FIRST_MINUTE_IN_HOUR, LAST_MINUTE_IN_HOUR, getHour(), getHour());
}

@Override
protected RegularTimePeriod createNewInstance(int value, RegularTimePeriod period) {
    return new Minute(value, (Hour) period);
}
```",Type-3
718-3-6,src,org.jfree.data.time,Millisecond,previous,231,244,src,org.jfree.data.time,Minute,next,281,296,Type 3,"```java
/**
 * Returns the millisecond preceding this one.
 *
 * @return The millisecond preceding this one.
 */
public RegularTimePeriod previous() {

    RegularTimePeriod result = null;

    if (this.millisecond != FIRST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond - 1, getSecond());
    }
    else {
        Second previous = (Second) getSecond().previous();
        if (previous != null) {
            result = new Millisecond(LAST_MILLISECOND_IN_SECOND, previous);
        }
    }
    return result;

}
```

```java
/**
 * Returns the minute following this one.
 *
 * @return The minute following this one.
 */
public RegularTimePeriod next() {

    Minute result;
    if (this.minute != LAST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute + 1, getHour());
    }
    else { // we are at the last minute in the hour...
        Hour nextHour = (Hour) getHour().next();
        if (nextHour != null) {
            result = new Minute(FIRST_MINUTE_IN_HOUR, nextHour);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","1. **Extracted Method in the Superclass (`RegularTimePeriod`):**
```java
/**
 * Returns the time period preceding or following this one.
 *
 * @param currentValue  the current value (e.g., millisecond or minute).
 * @param firstValue    the first value in the range (e.g., 0).
 * @param lastValue     the last value in the range (e.g., 59 or 999).
 * @param currentPeriod the current time period (e.g., Second or Hour).
 * @param isNext        true if calculating the next period, false for the previous.
 * @param createPeriod  a factory method to create the new time period.
 * @return The preceding or following time period.
 */
protected <T extends RegularTimePeriod> T getAdjacentPeriod(
        int currentValue, int firstValue, int lastValue, 
        RegularTimePeriod currentPeriod, boolean isNext, 
        BiFunction<Integer, RegularTimePeriod, T> createPeriod) {

    if (isNext) {
        if (currentValue != lastValue) {
            return createPeriod.apply(currentValue + 1, currentPeriod);
        } else {
            RegularTimePeriod next = currentPeriod.next();
            if (next != null) {
                return createPeriod.apply(firstValue, next);
            }
        }
    } else {
        if (currentValue != firstValue) {
            return createPeriod.apply(currentValue - 1, currentPeriod);
        } else {
            RegularTimePeriod previous = currentPeriod.previous();
            if (previous != null) {
                return createPeriod.apply(lastValue, previous);
            }
        }
    }
    return null;
}
```

2. **Refactored `previous` Method in `Millisecond` Class:**
```java
/**
 * Returns the millisecond preceding this one.
 *
 * @return The millisecond preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getAdjacentPeriod(
        this.millisecond, FIRST_MILLISECOND_IN_SECOND, LAST_MILLISECOND_IN_SECOND, 
        getSecond(), false, Millisecond::new
    );
}
```

3. **Refactored `next` Method in `Minute` Class:**
```java
/**
 * Returns the minute following this one.
 *
 * @return The minute following this one.
 */
@Override
public RegularTimePeriod next() {
    return getAdjacentPeriod(
        this.minute, FIRST_MINUTE_IN_HOUR, LAST_MINUTE_IN_HOUR, 
        getHour(), true, Minute::new
    );
}
```",Type-3
718-4-5,src,org.jfree.data.time,Millisecond,next,253,265,src,org.jfree.data.time,Minute,previous,259,273,Type 3,"### Code Snippet 1 (Method `next` in `Millisecond` class):
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
public RegularTimePeriod next() {

    RegularTimePeriod result = null;
    if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond + 1, getSecond());
    }
    else {
        Second next = (Second) getSecond().next();
        if (next != null) {
            result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next);
        }
    }
    return result;

}
```

---

### Code Snippet 2 (Method `previous` in `Minute` class):
```java
/**
 * Returns the minute preceding this one.
 *
 * @return The minute preceding this one.
 */
public RegularTimePeriod previous() {
    Minute result;
    if (this.minute != FIRST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute - 1, getHour());
    }
    else {
        Hour h = (Hour) getHour().previous();
        if (h != null) {
            result = new Minute(LAST_MINUTE_IN_HOUR, h);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `Millisecond` vs. `Minute`, `Second` vs. `Hour`, and the constants `LAST_MILLISECOND_IN_SECOND` vs. `LAST_MINUTE_IN_HOUR`.","### 1. Extracted Method (To be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the time period adjacent to this one based on the provided parameters.
 *
 * @param currentValue  the current value (e.g., millisecond or minute).
 * @param firstValue    the first value in the range (e.g., 0).
 * @param lastValue     the last value in the range (e.g., 59 or 999).
 * @param currentPeriod the current time period (e.g., Second or Hour).
 * @param createPeriod  a factory method to create a new time period.
 * @return The adjacent time period.
 */
protected static <T extends RegularTimePeriod> T getAdjacentPeriod(
        int currentValue, int firstValue, int lastValue, 
        RegularTimePeriod currentPeriod, 
        BiFunction<Integer, RegularTimePeriod, T> createPeriod) {

    if (currentValue != lastValue) {
        return createPeriod.apply(currentValue + 1, currentPeriod);
    } else {
        RegularTimePeriod nextPeriod = currentPeriod.next();
        if (nextPeriod != null) {
            return createPeriod.apply(firstValue, nextPeriod);
        }
    }
    return null;
}
```

---

### 2. Refactored Method in `Millisecond` Class:
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
@Override
public RegularTimePeriod next() {
    return getAdjacentPeriod(
        this.millisecond, 
        FIRST_MILLISECOND_IN_SECOND, 
        LAST_MILLISECOND_IN_SECOND, 
        getSecond(), 
        (value, period) -> new Millisecond(value, (Second) period)
    );
}
```

---

### 3. Refactored Method in `Minute` Class:
```java
/**
 * Returns the minute preceding this one.
 *
 * @return The minute preceding this one.
 */
@Override
public RegularTimePeriod previous() {
    return getAdjacentPeriod(
        this.minute, 
        FIRST_MINUTE_IN_HOUR, 
        LAST_MINUTE_IN_HOUR, 
        getHour(), 
        (value, period) -> new Minute(value, (Hour) period)
    );
}
```",Type-3
718-4-6,src,org.jfree.data.time,Millisecond,next,253,265,src,org.jfree.data.time,Minute,next,281,296,Type 3,"### Code Snippet 1 (Method `next` from `Millisecond` class):
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
public RegularTimePeriod next() {

    RegularTimePeriod result = null;
    if (this.millisecond != LAST_MILLISECOND_IN_SECOND) {
        result = new Millisecond(this.millisecond + 1, getSecond());
    }
    else {
        Second next = (Second) getSecond().next();
        if (next != null) {
            result = new Millisecond(FIRST_MILLISECOND_IN_SECOND, next);
        }
    }
    return result;

}
```

---

### Code Snippet 2 (Method `next` from `Minute` class):
```java
/**
 * Returns the minute following this one.
 *
 * @return The minute following this one.
 */
public RegularTimePeriod next() {

    Minute result;
    if (this.minute != LAST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute + 1, getHour());
    }
    else { // we are at the last minute in the hour...
        Hour nextHour = (Hour) getHour().next();
        if (nextHour != null) {
            result = new Minute(FIRST_MINUTE_IN_HOUR, nextHour);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Clone Type:
These two code snippets are **Type-2 Clones** because they are structurally identical but differ in variable names, literals, and types.","### 1. Extracted Method (To be placed in the `RegularTimePeriod` superclass):
```java
/**
 * Returns the next time period following the current one.
 *
 * @param currentValue  the current value (e.g., millisecond or minute).
 * @param lastValue     the last value in the current period (e.g., 999 or 59).
 * @param nextPeriod    the next larger time period (e.g., Second or Hour).
 * @param firstValue    the first value in the next period (e.g., 0).
 * @param factory       a factory to create the new time period.
 * @return The next time period.
 */
protected static <T extends RegularTimePeriod> T getNextTimePeriod(
        int currentValue, int lastValue, RegularTimePeriod nextPeriod, 
        int firstValue, BiFunction<Integer, RegularTimePeriod, T> factory) {

    if (currentValue != lastValue) {
        return factory.apply(currentValue + 1, nextPeriod);
    } else if (nextPeriod != null) {
        return factory.apply(firstValue, nextPeriod);
    }
    return null;
}
```

---

### 2. Refactored `next` Method in `Millisecond` Class:
```java
/**
 * Returns the millisecond following this one.
 *
 * @return The millisecond following this one.
 */
@Override
public RegularTimePeriod next() {
    return getNextTimePeriod(
        this.millisecond, 
        LAST_MILLISECOND_IN_SECOND, 
        getSecond().next(), 
        FIRST_MILLISECOND_IN_SECOND, 
        Millisecond::new
    );
}
```

---

### 3. Refactored `next` Method in `Minute` Class:
```java
/**
 * Returns the minute following this one.
 *
 * @return The minute following this one.
 */
@Override
public RegularTimePeriod next() {
    return getNextTimePeriod(
        this.minute, 
        LAST_MINUTE_IN_HOUR, 
        getHour().next(), 
        FIRST_MINUTE_IN_HOUR, 
        Minute::new
    );
}
```",Type-2
718-5-7,src,org.jfree.data.time,Minute,previous,259,273,src,org.jfree.data.time,Second,previous,226,238,Type 3,"### Code Snippet 1 (from `Minute.java`):
```java
/**
 * Returns the minute preceding this one.
 *
 * @return The minute preceding this one.
 */
public RegularTimePeriod previous() {
    Minute result;
    if (this.minute != FIRST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute - 1, getHour());
    }
    else {
        Hour h = (Hour) getHour().previous();
        if (h != null) {
            result = new Minute(LAST_MINUTE_IN_HOUR, h);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

### Code Snippet 2 (from `Second.java`):
```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    Second result = null;
    if (this.second != FIRST_SECOND_IN_MINUTE) {
        result = new Second(this.second - 1, getMinute());
    }
    else {
        Minute previous = (Minute) getMinute().previous();
        if (previous != null) {
            result = new Second(LAST_SECOND_IN_MINUTE, previous);
        }
    }
    return result;
}
```

### Clone Type:
**Type-2 Clone**: The two code snippets are structurally identical but differ in variable names, literals, and types.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the preceding time period based on the given parameters.
 *
 * @param currentValue  the current value (e.g., minute or second).
 * @param firstValue    the first value in the range (e.g., 0 for minutes or seconds).
 * @param lastValue     the last value in the range (e.g., 59 for minutes or seconds).
 * @param currentPeriod the current time period (e.g., Hour or Minute).
 * @param previousPeriod the previous time period (e.g., Hour or Minute).
 * @return The preceding time period.
 */
protected static <T extends RegularTimePeriod> T getPreviousPeriod(
        int currentValue, int firstValue, int lastValue, 
        RegularTimePeriod currentPeriod, RegularTimePeriod previousPeriod) {
    if (currentValue != firstValue) {
        return (T) currentPeriod.getClass().getConstructor(int.class, currentPeriod.getClass())
                .newInstance(currentValue - 1, currentPeriod);
    } else if (previousPeriod != null) {
        return (T) currentPeriod.getClass().getConstructor(int.class, previousPeriod.getClass())
                .newInstance(lastValue, previousPeriod);
    }
    return null;
}
```

### 2. Refactored Method Calls:

#### In `Minute.java`:
```java
/**
 * Returns the minute preceding this one.
 *
 * @return The minute preceding this one.
 */
public RegularTimePeriod previous() {
    return getPreviousPeriod(this.minute, FIRST_MINUTE_IN_HOUR, LAST_MINUTE_IN_HOUR, getHour(), getHour().previous());
}
```

#### In `Second.java`:
```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    return getPreviousPeriod(this.second, FIRST_SECOND_IN_MINUTE, LAST_SECOND_IN_MINUTE, getMinute(), getMinute().previous());
}
```",Type-2
718-5-8,src,org.jfree.data.time,Minute,previous,259,273,src,org.jfree.data.time,Second,next,247,259,Type 3,"### Code Snippet 1: `previous` method in `Minute` class
```java
/**
 * Returns the minute preceding this one.
 *
 * @return The minute preceding this one.
 */
public RegularTimePeriod previous() {
    Minute result;
    if (this.minute != FIRST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute - 1, getHour());
    }
    else {
        Hour h = (Hour) getHour().previous();
        if (h != null) {
            result = new Minute(LAST_MINUTE_IN_HOUR, h);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

---

### Code Snippet 2: `next` method in `Second` class
```java
/**
 * Returns the second following this one.
 *
 * @return The second following this one.
 */
public RegularTimePeriod next() {
    Second result = null;
    if (this.second != LAST_SECOND_IN_MINUTE) {
        result = new Second(this.second + 1, getMinute());
    }
    else {
        Minute next = (Minute) getMinute().next();
        if (next != null) {
            result = new Second(FIRST_SECOND_IN_MINUTE, next);
        }
    }
    return result;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `Minute` vs. `Second`, `FIRST_MINUTE_IN_HOUR` vs. `FIRST_SECOND_IN_MINUTE`, and `LAST_MINUTE_IN_HOUR` vs. `LAST_SECOND_IN_MINUTE`.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the time period preceding or following this one.
 *
 * @param currentValue  the current value (e.g., minute or second).
 * @param firstValue    the first value in the range (e.g., 0 for minutes or seconds).
 * @param lastValue     the last value in the range (e.g., 59 for minutes or seconds).
 * @param currentUnit   the current unit (e.g., Hour or Minute).
 * @param isNext        true if calculating the next period, false for the previous period.
 * @return The preceding or following time period.
 */
protected static <T extends RegularTimePeriod> T getAdjacentPeriod(
        int currentValue, int firstValue, int lastValue, RegularTimePeriod currentUnit, boolean isNext) {
    T result = null;
    if (isNext) {
        if (currentValue != lastValue) {
            result = (T) currentUnit.getClass().getDeclaredConstructors()[0].newInstance(currentValue + 1, currentUnit);
        } else {
            RegularTimePeriod nextUnit = currentUnit.next();
            if (nextUnit != null) {
                result = (T) currentUnit.getClass().getDeclaredConstructors()[0].newInstance(firstValue, nextUnit);
            }
        }
    } else {
        if (currentValue != firstValue) {
            result = (T) currentUnit.getClass().getDeclaredConstructors()[0].newInstance(currentValue - 1, currentUnit);
        } else {
            RegularTimePeriod previousUnit = currentUnit.previous();
            if (previousUnit != null) {
                result = (T) currentUnit.getClass().getDeclaredConstructors()[0].newInstance(lastValue, previousUnit);
            }
        }
    }
    return result;
}
```

---

### 2. Refactored `previous` Method in `Minute` Class
```java
/**
 * Returns the minute preceding this one.
 *
 * @return The minute preceding this one.
 */
public RegularTimePeriod previous() {
    return getAdjacentPeriod(this.minute, FIRST_MINUTE_IN_HOUR, LAST_MINUTE_IN_HOUR, getHour(), false);
}
```

---

### 3. Refactored `next` Method in `Second` Class
```java
/**
 * Returns the second following this one.
 *
 * @return The second following this one.
 */
public RegularTimePeriod next() {
    return getAdjacentPeriod(this.second, FIRST_SECOND_IN_MINUTE, LAST_SECOND_IN_MINUTE, getMinute(), true);
}
```",Type-3
718-6-7,src,org.jfree.data.time,Minute,next,281,296,src,org.jfree.data.time,Second,previous,226,238,Type 3,"### Code Snippet 1 (from `Minute` class, `next` method):
```java
/**
 * Returns the minute following this one.
 *
 * @return The minute following this one.
 */
public RegularTimePeriod next() {

    Minute result;
    if (this.minute != LAST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute + 1, getHour());
    }
    else { // we are at the last minute in the hour...
        Hour nextHour = (Hour) getHour().next();
        if (nextHour != null) {
            result = new Minute(FIRST_MINUTE_IN_HOUR, nextHour);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

---

### Code Snippet 2 (from `Second` class, `previous` method):
```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    
    Second result = null;
    if (this.second != FIRST_SECOND_IN_MINUTE) {
        result = new Second(this.second - 1, getMinute());
    }
    else {
        Minute previous = (Minute) getMinute().previous();
        if (previous != null) {
            result = new Second(LAST_SECOND_IN_MINUTE, previous);
        }
    }
    return result;
    
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `Minute` vs. `Second`, `LAST_MINUTE_IN_HOUR` vs. `LAST_SECOND_IN_MINUTE`, etc.).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the time period adjacent to this one.
 *
 * @param currentValue  the current value (e.g., minute or second).
 * @param firstValue    the first value in the range (e.g., 0).
 * @param lastValue     the last value in the range (e.g., 59).
 * @param currentParent the current parent time period (e.g., Hour or Minute).
 * @param nextParent    the next parent time period (e.g., Hour or Minute).
 * @param isNext        true if calculating the next period, false for previous.
 * @return The adjacent time period.
 */
protected static <T extends RegularTimePeriod> T getAdjacentPeriod(
    int currentValue, int firstValue, int lastValue, 
    RegularTimePeriod currentParent, RegularTimePeriod nextParent, boolean isNext) {

    T result = null;
    if (isNext) {
        if (currentValue != lastValue) {
            result = (T) createInstance(currentValue + 1, currentParent);
        } else if (nextParent != null) {
            result = (T) createInstance(firstValue, nextParent);
        }
    } else {
        if (currentValue != firstValue) {
            result = (T) createInstance(currentValue - 1, currentParent);
        } else if (nextParent != null) {
            result = (T) createInstance(lastValue, nextParent);
        }
    }
    return result;
}

/**
 * Factory method to create a new instance of a time period.
 *
 * @param value         the value (e.g., minute or second).
 * @param parentPeriod  the parent time period (e.g., Hour or Minute).
 * @return A new instance of the time period.
 */
protected static RegularTimePeriod createInstance(int value, RegularTimePeriod parentPeriod) {
    if (parentPeriod instanceof Hour) {
        return new Minute(value, (Hour) parentPeriod);
    } else if (parentPeriod instanceof Minute) {
        return new Second(value, (Minute) parentPeriod);
    }
    return null;
}
```

---

### 2. Refactored `next` Method in `Minute` Class:
```java
/**
 * Returns the minute following this one.
 *
 * @return The minute following this one.
 */
public RegularTimePeriod next() {
    return getAdjacentPeriod(
        this.minute, FIRST_MINUTE_IN_HOUR, LAST_MINUTE_IN_HOUR, 
        getHour(), getHour().next(), true
    );
}
```

---

### 3. Refactored `previous` Method in `Second` Class:
```java
/**
 * Returns the second preceding this one.
 *
 * @return The second preceding this one.
 */
public RegularTimePeriod previous() {
    return getAdjacentPeriod(
        this.second, FIRST_SECOND_IN_MINUTE, LAST_SECOND_IN_MINUTE, 
        getMinute(), getMinute().previous(), false
    );
}
```",Type-3
718-6-8,src,org.jfree.data.time,Minute,next,281,296,src,org.jfree.data.time,Second,next,247,259,Type 3,"### Code Snippet 1 (from `Minute` class, `next` method):
```java
public RegularTimePeriod next() {

    Minute result;
    if (this.minute != LAST_MINUTE_IN_HOUR) {
        result = new Minute(this.minute + 1, getHour());
    }
    else { // we are at the last minute in the hour...
        Hour nextHour = (Hour) getHour().next();
        if (nextHour != null) {
            result = new Minute(FIRST_MINUTE_IN_HOUR, nextHour);
        }
        else {
            result = null;
        }
    }
    return result;

}
```

### Code Snippet 2 (from `Second` class, `next` method):
```java
public RegularTimePeriod next() {
        
    Second result = null;
    if (this.second != LAST_SECOND_IN_MINUTE) {
        result = new Second(this.second + 1, getMinute());
    }
    else {
        Minute next = (Minute) getMinute().next();
        if (next != null) {
            result = new Second(FIRST_SECOND_IN_MINUTE, next);
        }
    }
    return result;

}
```

### Clone Type:
**Type-2 Clone**: The two code snippets are identical except for variable names (`minute` vs `second`, `Minute` vs `Second`, etc.) and constants (`LAST_MINUTE_IN_HOUR` vs `LAST_SECOND_IN_MINUTE`, etc.).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
protected <T extends RegularTimePeriod> T getNextPeriod(
    int currentValue, 
    int lastValue, 
    int firstValue, 
    T currentPeriod, 
    T nextHigherPeriod
) {
    T result = null;
    if (currentValue != lastValue) {
        result = createPeriod(currentValue + 1, currentPeriod);
    } else {
        if (nextHigherPeriod != null) {
            result = createPeriod(firstValue, nextHigherPeriod);
        }
    }
    return result;
}

// Abstract method to be implemented by subclasses
protected abstract <T extends RegularTimePeriod> T createPeriod(int value, T higherPeriod);
```

---

### 2. Refactored `next` Method in `Minute` Class:
```java
@Override
public RegularTimePeriod next() {
    return getNextPeriod(
        this.minute, 
        LAST_MINUTE_IN_HOUR, 
        FIRST_MINUTE_IN_HOUR, 
        this, 
        (Hour) getHour().next()
    );
}

@Override
protected Minute createPeriod(int value, RegularTimePeriod higherPeriod) {
    return new Minute(value, (Hour) higherPeriod);
}
```

---

### 3. Refactored `next` Method in `Second` Class:
```java
@Override
public RegularTimePeriod next() {
    return getNextPeriod(
        this.second, 
        LAST_SECOND_IN_MINUTE, 
        FIRST_SECOND_IN_MINUTE, 
        this, 
        (Minute) getMinute().next()
    );
}

@Override
protected Second createPeriod(int value, RegularTimePeriod higherPeriod) {
    return new Second(value, (Minute) higherPeriod);
}
```",Type-2
726-1-2,src,org.jfree.chart.plot,DefaultDrawingSupplier,equalShapes,401,416,src,org.jfree.chart.plot,ThermometerPlot,equal,1617,1632,Type 3,"### Code Snippet 1: `equalShapes` Method (Lines 401-416 in `DefaultDrawingSupplier.java`)

```java
/**
 * A utility method for testing the equality of two arrays of shapes.
 * 
 * @param s1  the first array (<code>null</code> permitted).
 * @param s2  the second array (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private boolean equalShapes(Shape[] s1, Shape[] s2) {
    if (s1 == null) {
        return s2 == null;   
    }
    if (s2 == null) {
        return false;   
    }
    if (s1.length != s2.length) {
        return false;   
    }
    for (int i = 0; i < s1.length; i++) {
        if (!ShapeUtilities.equal(s1[i], s2[i])) {
            return false;   
        }
    }
    return true;
}
```

---

### Code Snippet 2: `equal` Method (Lines 1617-1632 in `ThermometerPlot.java`)

```java
/**
 * Tests two double[][] arrays for equality.
 * 
 * @param array1  the first array (<code>null</code> permitted).
 * @param array2  the second arrray (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private static boolean equal(double[][] array1, double[][] array2) {
    if (array1 == null) {
        return (array2 == null);
    }
    if (array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (int i = 0; i < array1.length; i++) {
        if (!Arrays.equals(array1[i], array2[i])) {
            return false;
        }
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., handling `Shape[]` vs. `double[][]`, using `ShapeUtilities.equal` vs. `Arrays.equals`).","### 1. Extracted Method (To be placed in the common superclass)

```java
/**
 * A utility method for testing the equality of two arrays.
 * 
 * @param array1  the first array (<code>null</code> permitted).
 * @param array2  the second array (<code>null</code> permitted).
 * @param elementComparator  a comparator to test equality of individual elements.
 * 
 * @return A boolean.
 */
protected static <T> boolean arraysEqual(T[] array1, T[] array2, java.util.function.BiPredicate<T, T> elementComparator) {
    if (array1 == null) {
        return array2 == null;
    }
    if (array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (int i = 0; i < array1.length; i++) {
        if (!elementComparator.test(array1[i], array2[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equalShapes` Method in `DefaultDrawingSupplier.java`

```java
/**
 * A utility method for testing the equality of two arrays of shapes.
 * 
 * @param s1  the first array (<code>null</code> permitted).
 * @param s2  the second array (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private boolean equalShapes(Shape[] s1, Shape[] s2) {
    return arraysEqual(s1, s2, ShapeUtilities::equal);
}
```

---

### 3. Refactored `equal` Method in `ThermometerPlot.java`

```java
/**
 * Tests two double[][] arrays for equality.
 * 
 * @param array1  the first array (<code>null</code> permitted).
 * @param array2  the second array (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private static boolean equal(double[][] array1, double[][] array2) {
    return arraysEqual(array1, array2, Arrays::equals);
}
```",Type-3
726-1-3,src,org.jfree.chart.plot,DefaultDrawingSupplier,equalShapes,401,416,src,org.jfree.data.category,DefaultIntervalCategoryDataset,equal,762,777,Type 3,"### Code Snippet 1: `equalShapes` Method (Lines 401-416)
```java
/**
 * A utility method for testing the equality of two arrays of shapes.
 * 
 * @param s1  the first array (<code>null</code> permitted).
 * @param s2  the second array (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private boolean equalShapes(Shape[] s1, Shape[] s2) {
    if (s1 == null) {
        return s2 == null;   
    }
    if (s2 == null) {
        return false;   
    }
    if (s1.length != s2.length) {
        return false;   
    }
    for (int i = 0; i < s1.length; i++) {
        if (!ShapeUtilities.equal(s1[i], s2[i])) {
            return false;   
        }
    }
    return true;
}
```

---

### Code Snippet 2: `equal` Method (Lines 762-777)
```java
/**
 * Tests two double[][] arrays for equality.
 * 
 * @param array1  the first array (<code>null</code> permitted).
 * @param array2  the second arrray (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private static boolean equal(Number[][] array1, Number[][] array2) {
    if (array1 == null) {
        return (array2 == null);
    }
    if (array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (int i = 0; i < array1.length; i++) {
        if (!Arrays.equals(array1[i], array2[i])) {
            return false;
        }
    }
    return true;
}
```

---

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the use of `ShapeUtilities.equal` in the first snippet and `Arrays.equals` in the second snippet, as well as the different array types and method names).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * A utility method for testing the equality of two 2D arrays.
 * 
 * @param array1  the first array (<code>null</code> permitted).
 * @param array2  the second array (<code>null</code> permitted).
 * @param equalityChecker  a functional interface to check equality of elements.
 * 
 * @return A boolean.
 */
protected static <T> boolean arraysEqual(T[] array1, T[] array2, java.util.function.BiPredicate<T, T> equalityChecker) {
    if (array1 == null) {
        return array2 == null;
    }
    if (array2 == null) {
        return false;
    }
    if (array1.length != array2.length) {
        return false;
    }
    for (int i = 0; i < array1.length; i++) {
        if (!equalityChecker.test(array1[i], array2[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `DefaultDrawingSupplier` (Replacing `equalShapes` Method)
```java
/**
 * A utility method for testing the equality of two arrays of shapes.
 * 
 * @param s1  the first array (<code>null</code> permitted).
 * @param s2  the second array (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private boolean equalShapes(Shape[] s1, Shape[] s2) {
    return arraysEqual(s1, s2, ShapeUtilities::equal);
}
```

---

#### In `DefaultIntervalCategoryDataset` (Replacing `equal` Method)
```java
/**
 * Tests two double[][] arrays for equality.
 * 
 * @param array1  the first array (<code>null</code> permitted).
 * @param array2  the second array (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
private static boolean equal(Number[][] array1, Number[][] array2) {
    return arraysEqual(array1, array2, Arrays::equals);
}
```",Type-3
342-3-8,src,org.jfree.chart.labels,ItemLabelPosition,equals,171,191,src,org.jfree.chart.renderer,LookupPaintScale,equals,332,352,Type 3,"### Code Snippet 1 (from `ItemLabelPosition` class, lines 171-191):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {  
    if (obj == this) {
        return true;
    }    
    if (!(obj instanceof ItemLabelPosition)) {
        return false;
    }
    ItemLabelPosition that = (ItemLabelPosition) obj;
    if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {
        return false;
    }
    if (!this.textAnchor.equals(that.textAnchor)) {
        return false;
    }
    if (!this.rotationAnchor.equals(that.rotationAnchor)) {
        return false;
    }
    if (this.angle != that.angle) {
        return false;
    }     
    return true;
}
```

### Code Snippet 2 (from `LookupPaintScale` class, lines 332-352):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and method calls).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their fields.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param instance  the current instance.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Object instance, boolean... fieldComparisons) {
    if (obj == instance) {
        return true;
    }
    if (obj == null || instance == null || !instance.getClass().equals(obj.getClass())) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ItemLabelPosition`:
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        this,
        this.itemLabelAnchor.equals(((ItemLabelPosition) obj).itemLabelAnchor),
        this.textAnchor.equals(((ItemLabelPosition) obj).textAnchor),
        this.rotationAnchor.equals(((ItemLabelPosition) obj).rotationAnchor),
        this.angle == ((ItemLabelPosition) obj).angle
    );
}
```

---

### 3. Refactored `equals` Method in `LookupPaintScale`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        this,
        this.lowerBound == ((LookupPaintScale) obj).lowerBound,
        this.upperBound == ((LookupPaintScale) obj).upperBound,
        PaintUtilities.equal(this.defaultPaint, ((LookupPaintScale) obj).defaultPaint),
        this.lookupTable.equals(((LookupPaintScale) obj).lookupTable)
    );
}
```",Type-3
757-1-2,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.chart.block,BlockBorder,equals,200,214,Type 3,"### Code Snippet 1 (from `ValueTick` class, lines 129-143):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `BlockBorder` class, lines 200-214):
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof BlockBorder)) {
        return false;   
    }
    BlockBorder that = (BlockBorder) obj;
    if (!this.insets.equals(that.insets)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different fields and utility methods being compared, such as `this.value` vs. `this.insets` and `PaintUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `Tick`):
```java
/**
 * Tests for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * @param instanceClass  the class to check the instance against.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `ValueTick`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        ValueTick.class,
        this.value == ((ValueTick) obj).value,
        this.tickType.equals(((ValueTick) obj).tickType),
        super.equals(obj)
    );
}
```

### 3. Refactored `equals` Method in `BlockBorder`:
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        BlockBorder.class,
        this.insets.equals(((BlockBorder) obj).insets),
        PaintUtilities.equal(this.paint, ((BlockBorder) obj).paint)
    );
}
```",Type-3
757-1-3,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.chart.labels,HighLowItemLabelGenerator,equals,205,219,Type 3,"### Code Snippet 1 (ValueTick.java, lines 129-143)
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (HighLowItemLabelGenerator.java, lines 205-219)
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HighLowItemLabelGenerator)) {
        return false;
    }
    HighLowItemLabelGenerator generator = (HighLowItemLabelGenerator) obj;
    if (!this.dateFormatter.equals(generator.dateFormatter)) {
        return false;
    }
    if (!this.numberFormatter.equals(generator.numberFormatter)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, field comparisons, and logic specific to the respective classes).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Object` or a custom superclass)
```java
/**
 * Tests if two objects are equal based on their specific fields.
 *
 * @param obj  the object to test.
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls in `ValueTick.java`
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, ValueTick.class, 
        this.value == ((ValueTick) obj).value, 
        this.tickType.equals(((ValueTick) obj).tickType),
        super.equals(obj)
    );
}
```

---

### 3. Refactored Method Calls in `HighLowItemLabelGenerator.java`
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, HighLowItemLabelGenerator.class, 
        this.dateFormatter.equals(((HighLowItemLabelGenerator) obj).dateFormatter), 
        this.numberFormatter.equals(((HighLowItemLabelGenerator) obj).numberFormatter)
    );
}
```",Type-3
757-1-5,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.data,ComparableObjectItem,equals,161,175,Type 3,"### Code Snippet 1 (from `ValueTick` class, lines 129-143):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `ComparableObjectItem` class, lines 161-175):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectItem)) {
        return false;
    }
    ComparableObjectItem that = (ComparableObjectItem) obj;
    if (!this.x.equals(that.x)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.obj, that.obj)) {
        return false;
    }
    return true;        
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.value != that.value` vs. `!this.x.equals(that.x)` and `!this.tickType.equals(that.tickType)` vs. `!ObjectUtilities.equal(this.obj, that.obj)`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests for equality between two objects based on provided attributes.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param attributes  the attributes to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatAttributes = extractAttributes(clazz.cast(obj));
    for (int i = 0; i < attributes.length; i++) {
        if (attributes[i] instanceof Double) {
            if (!attributes[i].equals(thatAttributes[i])) {
                return false;
            }
        } else if (!attributes[i].equals(thatAttributes[i])) {
            return false;
        }
    }
    return true;
}

/**
 * Extracts the attributes of the given object for comparison.
 *
 * @param obj  the object from which to extract attributes.
 * 
 * @return An array of attributes.
 */
protected abstract Object[] extractAttributes(Object obj);
```

",Type-3
757-1-6,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.data,KeyToGroupMap,equals,232,246,Type 3,"### Code Snippet 1 (from `ValueTick` class, lines 129-143):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `KeyToGroupMap` class, lines 232-246):
```java
/**
 * Tests the map for equality against an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!(obj instanceof KeyToGroupMap)) {
        return false;
    }
    KeyToGroupMap that = (KeyToGroupMap) obj;
    if (!ObjectUtilities.equal(this.defaultGroup, that.defaultGroup)) {
        return false;
    }
    if (!this.keyToGroupMap.equals(that.keyToGroupMap)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the fields being compared and the class types).","### 1. Extracted Method (to be placed in the common superclass, e.g., `Object` or a custom superclass):
```java
/**
 * Tests two objects for equality based on provided parameters.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `ValueTick`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    ValueTick that = (obj instanceof ValueTick) ? (ValueTick) obj : null;
    return isEqual(obj, ValueTick.class,
        that != null && this.value == that.value,
        that != null && this.tickType.equals(that.tickType),
        super.equals(obj)
    );
}
```

### 3. Refactored `equals` Method in `KeyToGroupMap`:
```java
/**
 * Tests the map for equality against an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    KeyToGroupMap that = (obj instanceof KeyToGroupMap) ? (KeyToGroupMap) obj : null;
    return isEqual(obj, KeyToGroupMap.class,
        that != null && ObjectUtilities.equal(this.defaultGroup, that.defaultGroup),
        that != null && this.keyToGroupMap.equals(that.keyToGroupMap)
    );
}
```",Type-3
757-1-7,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.data.xy,DefaultOHLCDataset,equals,308,322,Type 3,"### Code Snippet 1 (ValueTick.java, lines 129-143):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultOHLCDataset.java, lines 308-322):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultOHLCDataset)) {
        return false;
    }
    DefaultOHLCDataset that = (DefaultOHLCDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (!Arrays.equals(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the fields being compared, the class types, and the use of `Arrays.equals` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored Method Calls:

#### In `ValueTick.java`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        ValueTick.class,
        this.value == ((ValueTick) obj).value,
        this.tickType.equals(((ValueTick) obj).tickType),
        super.equals(obj)
    );
}
```

#### In `DefaultOHLCDataset.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        DefaultOHLCDataset.class,
        this.key.equals(((DefaultOHLCDataset) obj).key),
        Arrays.equals(this.data, ((DefaultOHLCDataset) obj).data)
    );
}
```",Type-3
757-1-8,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.data.xy,DefaultWindDataset,equals,306,320,Type 3,"### Code Snippet 1 (ValueTick.java, lines 129-143)
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (DefaultWindDataset.java, lines 306-320)
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 *   <li><code>obj</code> is not <code>null</code>;</li>
 *   <li><code>obj</code> is an instance of
 *       <code>DefaultWindDataset</code>;</li>
 *   <li>both datasets have the same number of series containing identical
 *       values.</li>
 * <ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultWindDataset)) {
        return false;
    }
    DefaultWindDataset that = (DefaultWindDataset) obj;
    if (!this.seriesKeys.equals(that.seriesKeys)) {
        return false;
    }
    if (!this.allSeriesData.equals(that.allSeriesData)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and logic specific to the respective classes).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Checks for equality between this object and another object.
 *
 * @param obj the object to test (<code>null</code> permitted).
 * @param instanceClass the class type to check against.
 * @param fields an array of field comparisons to check for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object... fields) {
    if (this == obj) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object that = instanceClass.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Number && thatField instanceof Number) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### In `ValueTick.java`
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, ValueTick.class, this.value, ((ValueTick) obj).value, this.tickType, ((ValueTick) obj).tickType)
            && super.equals(obj);
}
```

---

#### In `DefaultWindDataset.java`
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, DefaultWindDataset.class, this.seriesKeys, ((DefaultWindDataset) obj).seriesKeys,
            this.allSeriesData, ((DefaultWindDataset) obj).allSeriesData);
}
```",Type-3
757-1-9,src,org.jfree.chart.axis,ValueTick,equals,129,143,src,org.jfree.data.xy,XYDataItem,equals,227,241,Type 3,"### Code Snippet 1 (from `ValueTick` class, `equals` method):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof ValueTick)) {
        return false;
    }
    ValueTick that = (ValueTick) obj;
    if (this.value != that.value) {
        return false;   
    }
    if (!this.tickType.equals(that.tickType)) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `XYDataItem` class, `equals` method):
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDataItem)) {
        return false;
    }
    XYDataItem that = (XYDataItem) obj;
    if (!this.x.equals(that.x)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.y, that.y)) {
        return false;
    }
    return true;        
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, field comparisons, and utility method usage).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests if this object is equal to another object by comparing specific fields.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `ValueTick` Class:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        ValueTick.class,
        this.value == ((ValueTick) obj).value,
        this.tickType.equals(((ValueTick) obj).tickType),
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `XYDataItem` Class:
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(
        obj,
        XYDataItem.class,
        this.x.equals(((XYDataItem) obj).x),
        ObjectUtilities.equal(this.y, ((XYDataItem) obj).y)
    );
}
```",Type-3
757-2-4,src,org.jfree.chart.block,BlockBorder,equals,200,214,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,Type 3,"### Code Snippet 1 (BlockBorder.java, lines 200-214)
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof BlockBorder)) {
        return false;   
    }
    BlockBorder that = (BlockBorder) obj;
    if (!this.insets.equals(that.insets)) {
        return false;   
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (LookupPaintScale.java, lines 116-130)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the fields being compared (`insets`, `paint` vs. `lowerBound`, `upperBound`, `defaultPaint`, `lookupTable`) and the class types (`BlockBorder` vs. `LookupPaintScale`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on the provided parameters.
 * 
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method Calls

#### BlockBorder.java
```java
/**
 * Tests this border for equality with an arbitrary instance.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, BlockBorder.class, this.insets, ((BlockBorder) obj).insets, 
                   this.paint, ((BlockBorder) obj).paint);
}
```

---

#### LookupPaintScale.java
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LookupPaintScale.class, this.lowerBound, ((LookupPaintScale) obj).lowerBound, 
                   this.upperBound, ((LookupPaintScale) obj).upperBound, 
                   this.defaultPaint, ((LookupPaintScale) obj).defaultPaint, 
                   this.lookupTable, ((LookupPaintScale) obj).lookupTable);
}
```",Type-3
757-3-4,src,org.jfree.chart.labels,HighLowItemLabelGenerator,equals,205,219,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,Type 3,"### Code Snippet 1: `equals` method in `HighLowItemLabelGenerator` class
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof HighLowItemLabelGenerator)) {
        return false;
    }
    HighLowItemLabelGenerator generator = (HighLowItemLabelGenerator) obj;
    if (!this.dateFormatter.equals(generator.dateFormatter)) {
        return false;
    }
    if (!this.numberFormatter.equals(generator.numberFormatter)) {
        return false;   
    }
    return true;
}
```

### Code Snippet 2: `equals` method in `LookupPaintScale` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes.","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 * @param clazz  the class to check the instance against.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` method in `HighLowItemLabelGenerator` class
```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        HighLowItemLabelGenerator.class,
        this.dateFormatter.equals(((HighLowItemLabelGenerator) obj).dateFormatter),
        this.numberFormatter.equals(((HighLowItemLabelGenerator) obj).numberFormatter)
    );
}
```

### 3. Refactored `equals` method in `LookupPaintScale` class
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        LookupPaintScale.class,
        this.lowerBound == ((LookupPaintScale) obj).lowerBound,
        this.upperBound == ((LookupPaintScale) obj).upperBound,
        PaintUtilities.equal(this.defaultPaint, ((LookupPaintScale) obj).defaultPaint),
        this.lookupTable.equals(((LookupPaintScale) obj).lookupTable)
    );
}
```",Type-3
757-4-5,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data,ComparableObjectItem,equals,161,175,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, method `equals`):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `ComparableObjectItem` class, method `equals`):

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ComparableObjectItem)) {
        return false;
    }
    ComparableObjectItem that = (ComparableObjectItem) obj;
    if (!this.x.equals(that.x)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.obj, that.obj)) {
        return false;
    }
    return true;        
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the fields being compared (`lowerBound`, `upperBound`, `defaultPaint`, `lookupTable` in the first snippet vs. `x`, `obj` in the second snippet) and the utility methods used (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests if two objects are equal based on their fields and utility methods.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param clazz  the class type to check the instance of the object.
 * @param fields  the fields to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean areObjectsEqual(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = (Object[]) fields[fields.length - 1];
    for (int i = 0; i < fields.length - 1; i++) {
        Object thisField = fields[i];
        Object thatField = thatFields[i];
        if (thisField == null ? thatField != null : !thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `LookupPaintScale`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(obj, LookupPaintScale.class, this.lowerBound, this.upperBound, this.defaultPaint, this.lookupTable);
}
```

### 3. Refactored `equals` Method in `ComparableObjectItem`:

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(obj, ComparableObjectItem.class, this.x, this.obj);
}
```",Type-3
757-4-6,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data,KeyToGroupMap,equals,232,246,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, `equals` method, lines 116-130):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PaintItem)) {
        return false;
    }
    PaintItem that = (PaintItem) obj;
    if (this.value != that.value) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `KeyToGroupMap` class, `equals` method, lines 232-246):
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;      
    }
    if (!(obj instanceof KeyToGroupMap)) {
        return false;
    }
    KeyToGroupMap that = (KeyToGroupMap) obj;
    if (!ObjectUtilities.equal(this.defaultGroup, that.defaultGroup)) {
        return false;
    }
    if (!this.keyToGroupMap.equals(that.keyToGroupMap)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and operate on different fields (`value`, `paint` in the first snippet vs. `defaultGroup`, `keyToGroupMap` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
protected boolean objectsAreEqual(Object obj, Class<?> expectedClass, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    if (!ObjectUtilities.equal(field1, ((expectedClass.cast(obj)).getClass().cast(obj)).field1)) {
        return false;
    }
    if (!field2.equals(((expectedClass.cast(obj)).getClass().cast(obj)).field2)) {
        return false;
    }
    return true;
}
```

",Type-3
757-4-7,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data.xy,DefaultOHLCDataset,equals,308,322,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, lines 116-130):
```java
/**
 * Tests this item for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PaintItem)) {
        return false;
    }
    PaintItem that = (PaintItem) obj;
    if (this.value != that.value) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `DefaultOHLCDataset` class, lines 308-322):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultOHLCDataset)) {
        return false;
    }
    DefaultOHLCDataset that = (DefaultOHLCDataset) obj;
    if (!this.key.equals(that.key)) {
        return false;
    }
    if (!Arrays.equals(this.data, that.data)) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic specific to their respective classes (`PaintItem` and `DefaultOHLCDataset`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their fields.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, boolean... fieldComparisons) {
    if (this == obj) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Code in `LookupPaintScale` Class:
```java
/**
 * Tests this item for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        PaintItem.class,
        obj instanceof PaintItem && this.value == ((PaintItem) obj).value,
        PaintUtilities.equal(this.paint, ((PaintItem) obj).paint)
    );
}
```

---

### 3. Refactored Code in `DefaultOHLCDataset` Class:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(
        obj,
        DefaultOHLCDataset.class,
        obj instanceof DefaultOHLCDataset && this.key.equals(((DefaultOHLCDataset) obj).key),
        Arrays.equals(this.data, ((DefaultOHLCDataset) obj).data)
    );
}
```",Type-3
757-4-8,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data.xy,DefaultWindDataset,equals,306,320,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, lines 116-130):
```java
/**
 * Tests this item for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PaintItem)) {
        return false;
    }
    PaintItem that = (PaintItem) obj;
    if (this.value != that.value) {
        return false;
    }
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `DefaultWindDataset` class, lines 306-320):
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 *   <li><code>obj</code> is not <code>null</code>;</li>
 *   <li><code>obj</code> is an instance of
 *       <code>DefaultWindDataset</code>;</li>
 *   <li>both datasets have the same number of series containing identical
 *       values.</li>
 * <ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof DefaultWindDataset)) {
        return false;
    }
    DefaultWindDataset that = (DefaultWindDataset) obj;
    if (!this.seriesKeys.equals(that.seriesKeys)) {
        return false;
    }
    if (!this.allSeriesData.equals(that.allSeriesData)) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements and logic specific to their respective classes (`PaintItem` and `DefaultWindDataset`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their specific fields.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check against.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * 
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, boolean... fieldComparisons) {
    if (this == obj) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored Method in `LookupPaintScale` (lines 116-130):
```java
/**
 * Tests this item for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, PaintItem.class, 
        this.value == ((PaintItem) obj).value,
        PaintUtilities.equal(this.paint, ((PaintItem) obj).paint)
    );
}
```

---

### 3. Refactored Method in `DefaultWindDataset` (lines 306-320):
```java
/**
 * Checks this <code>WindDataset</code> for equality with an arbitrary
 * object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultWindDataset.class, 
        this.seriesKeys.equals(((DefaultWindDataset) obj).seriesKeys),
        this.allSeriesData.equals(((DefaultWindDataset) obj).allSeriesData)
    );
}
```",Type-3
757-4-9,src,org.jfree.chart.renderer,LookupPaintScale,equals,116,130,src,org.jfree.data.xy,XYDataItem,equals,227,241,Type 3,"### Code Snippet 1 (from `LookupPaintScale` class, `equals` method):

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LookupPaintScale)) {
        return false;
    }
    LookupPaintScale that = (LookupPaintScale) obj;
    if (this.lowerBound != that.lowerBound) {
        return false;
    }
    if (this.upperBound != that.upperBound) {
        return false;
    }
    if (!PaintUtilities.equal(this.defaultPaint, that.defaultPaint)) {
        return false;
    }
    if (!this.lookupTable.equals(that.lookupTable)) {
        return false;
    }
    return true;
}
```

---

### Code Snippet 2 (from `XYDataItem` class, `equals` method):

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code>
 *             permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYDataItem)) {
        return false;
    }
    XYDataItem that = (XYDataItem) obj;
    if (!this.x.equals(that.x)) {
        return false;
    }
    if (!ObjectUtilities.equal(this.y, that.y)) {
        return false;
    }
    return true;        
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the comparison of different fields (`lowerBound`, `upperBound`, `defaultPaint`, `lookupTable` in the first snippet vs. `x`, `y` in the second snippet) and the use of different utility methods (`PaintUtilities.equal` vs. `ObjectUtilities.equal`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Tests if two objects are equal based on their fields and utility methods.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 * @param fieldComparisons  an array of boolean results from field comparisons.
 * @return A boolean indicating equality.
 */
protected boolean areObjectsEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LookupPaintScale`:

```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        LookupPaintScale.class,
        this.lowerBound == ((LookupPaintScale) obj).lowerBound,
        this.upperBound == ((LookupPaintScale) obj).upperBound,
        PaintUtilities.equal(this.defaultPaint, ((LookupPaintScale) obj).defaultPaint),
        this.lookupTable.equals(((LookupPaintScale) obj).lookupTable)
    );
}
```

---

### 3. Refactored `equals` Method in `XYDataItem`:

```java
/**
 * Tests if this object is equal to another.
 *
 * @param obj  the object to test against for equality (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return areObjectsEqual(
        obj,
        XYDataItem.class,
        this.x.equals(((XYDataItem) obj).x),
        ObjectUtilities.equal(this.y, ((XYDataItem) obj).y)
    );
}
```",Type-3
758-1-2,src,org.jfree.data.general,Series,equals,254,268,src,org.jfree.data.time,SimpleTimePeriod,equals,143,157,Type 3,"### Code Snippet 1 (from `Series` class, `equals` method):
```java
/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Series)) {
        return false;
    }
    Series that = (Series) obj;
    if (!getKey().equals(that.getKey())) {
        return false;
    }
    if (!ObjectUtilities.equal(getDescription(), that.getDescription())) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (from `SimpleTimePeriod` class, `equals` method):
```java
/**
 * Tests this time period instance for equality with an arbitrary object.
 * The object is considered equal if it is an instance of {@link TimePeriod}
 * and it has the same start and end dates.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TimePeriod)) {
        return false;
    }
    TimePeriod that = (TimePeriod) obj;
    if (!this.getStart().equals(that.getStart())) {
        return false;
    }
    if (!this.getEnd().equals(that.getEnd())) {
        return false;
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the use of different methods (`getKey`, `getDescription` vs. `getStart`, `getEnd`) and different class types (`Series` vs. `TimePeriod`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their properties.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param key  the key of this object.
 * @param description  the description of this object (can be <code>null</code>).
 * @param otherKey  the key of the other object.
 * @param otherDescription  the description of the other object (can be <code>null</code>).
 * @return <code>true</code> if the objects are equal, <code>false</code> otherwise.
 */
protected boolean equalsHelper(Object obj, Object key, Object description, Object otherKey, Object otherDescription) {
    if (obj == this) {
        return true;
    }
    if (key == null || otherKey == null) {
        return false;
    }
    if (!key.equals(otherKey)) {
        return false;
    }
    if (description == null) {
        return otherDescription == null;
    }
    return description.equals(otherDescription);
}
```

---

### 2. Refactored `equals` Method in `Series` Class:
```java
/**
 * Tests the series for equality with another object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return <code>true</code> or <code>false</code>.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof Series)) {
        return false;
    }
    Series that = (Series) obj;
    return equalsHelper(obj, this.getKey(), this.getDescription(), that.getKey(), that.getDescription());
}
```

---

### 3. Refactored `equals` Method in `SimpleTimePeriod` Class:
```java
/**
 * Tests this time period instance for equality with an arbitrary object.
 * The object is considered equal if it is an instance of {@link TimePeriod}
 * and it has the same start and end dates.
 *
 * @param obj  the other object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    if (!(obj instanceof TimePeriod)) {
        return false;
    }
    TimePeriod that = (TimePeriod) obj;
    return equalsHelper(obj, this.getStart(), this.getEnd(), that.getStart(), that.getEnd());
}
```",Type-3
760-3-6,src,org.jfree.chart.plot,PiePlot3D,equals,1013,1027,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1: `equals` method from `PiePlot3D` class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PiePlot3D)) {
        return false;
    }
    PiePlot3D that = (PiePlot3D) obj;
    if (this.depthFactor != that.depthFactor) {
        return false;
    }
    if (this.darkerSides != that.darkerSides) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method from `Outlier` class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Clone Type
The two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the comparison of different fields (`depthFactor`, `darkerSides` in `PiePlot3D` vs. `point`, `radius` in `Outlier`) and the class type checks (`PiePlot3D` vs. `Outlier`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param fields  the fields to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    for (int i = 0; i < fields.length; i += 2) {
        Object thisField = fields[i];
        Object thatField = fields[i + 1];
        if (thisField instanceof Double && thatField instanceof Double) {
            if (!thisField.equals(thatField)) {
                return false;
            }
        } else if (!thisField.equals(thatField)) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `PiePlot3D` Class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, PiePlot3D.class, 
        this.depthFactor, ((PiePlot3D) obj).depthFactor,
        this.darkerSides, ((PiePlot3D) obj).darkerSides) 
        && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `Outlier` Class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, 
        this.point, ((Outlier) obj).point,
        this.radius, ((Outlier) obj).radius);
}
```",Type-3
760-3-10,src,org.jfree.chart.plot,PiePlot3D,equals,1013,1027,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1: `equals` method from `PiePlot3D` class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof PiePlot3D)) {
        return false;
    }
    PiePlot3D that = (PiePlot3D) obj;
    if (this.depthFactor != that.depthFactor) {
        return false;
    }
    if (this.darkerSides != that.darkerSides) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2: `equals` method from `XYBarDataset` class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields, and logic specific to the respective classes).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] thatFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (fields[i] instanceof Double) {
            if (Double.compare((Double) fields[i], (Double) thatFields[i]) != 0) {
                return false;
            }
        } else if (!fields[i].equals(thatFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `PiePlot3D` Class
```java
/**
 * Tests this plot for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, PiePlot3D.class, this.depthFactor, this.darkerSides);
}
```

### 3. Refactored `equals` Method in `XYBarDataset` Class
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBarDataset.class, this.underlying, this.barWidth);
}
```",Type-3
760-4-6,src,org.jfree.chart.plot.dial,DialPointer,equals,167,181,src,org.jfree.chart.renderer,Outlier,equals,184,198,Type 3,"### Code Snippet 1 (from `DialPointer` class, `equals` method):

```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPointer)) {
        return false;
    }
    DialPointer that = (DialPointer) obj;
    if (this.datasetIndex != that.datasetIndex) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `Outlier` class, `equals` method):

```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.datasetIndex` vs. `this.point`, `super.equals(obj)` vs. `return true`).","### 1. Extracted Method (to be placed in the common superclass):

```java
/**
 * Checks two objects for equality based on their attributes.
 * 
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param attributes  the attributes to compare.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... attributes) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherAttributes = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < attributes.length; i++) {
        if (!attributes[i].equals(otherAttributes[i])) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `DialPointer` Class:

```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, DialPointer.class, this.datasetIndex, this.radius);
}
```

---

### 3. Refactored `equals` Method in `Outlier` Class:

```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, this.point, this.radius);
}
```",Type-3
760-4-10,src,org.jfree.chart.plot.dial,DialPointer,equals,167,181,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (DialPointer.java, equals method, lines 167-181):
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DialPointer)) {
        return false;
    }
    DialPointer that = (DialPointer) obj;
    if (this.datasetIndex != that.datasetIndex) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return super.equals(obj);
}
```

**Clone Type:** Type-1 (Identical except for whitespace, comments, layout)

---

### Code Snippet 2 (XYBarDataset.java, equals method, lines 341-355):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractDialLayer` or another appropriate superclass):
```java
/**
 * Checks for equality between two objects based on dataset index and radius.
 *
 * @param obj  the object to compare (<code>null</code> permitted).
 * @param datasetIndex  the dataset index of the current object.
 * @param radius  the radius of the current object.
 * @param clazz  the class type to check against.
 * @return A boolean indicating equality.
 */
protected boolean equalsHelper(Object obj, int datasetIndex, double radius, Class<?> clazz) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    try {
        int thatDatasetIndex = (int) clazz.getDeclaredField(""datasetIndex"").get(that);
        double thatRadius = (double) clazz.getDeclaredField(""radius"").get(that);
        if (datasetIndex != thatDatasetIndex) {
            return false;
        }
        if (radius != thatRadius) {
            return false;
        }
    } catch (IllegalAccessException | NoSuchFieldException e) {
        throw new RuntimeException(""Reflection error during equalsHelper execution"", e);
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `DialPointer.java`:
```java
/**
 * Checks this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> not permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.datasetIndex, this.radius, DialPointer.class);
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, this.datasetIndex, this.radius,XYBarDataset.class);
}
```",Type-1
760-6-7,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.renderer.category,LevelRenderer,equals,367,381,Type 3,"### Code Snippet 1: `equals` method from `Outlier` class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2: `equals` method from `LevelRenderer` class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LevelRenderer)) {
        return false;
    }
    LevelRenderer that = (LevelRenderer) obj;
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maxItemWidth != that.maxItemWidth) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields compared, and a call to `super.equals(obj)` in the second snippet).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param fields  the fields to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object... fields) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object[] otherFields = ((Object[]) clazz.cast(obj));
    for (int i = 0; i < fields.length; i++) {
        if (!fields[i].equals(otherFields[i])) {
            return false;
        }
    }
    return true;
}
```

### 2. Refactored `equals` Method in `Outlier` Class
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, Outlier.class, this.point, this.radius);
}
```

### 3. Refactored `equals` Method in `LevelRenderer` Class
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, LevelRenderer.class, this.itemMargin, this.maxItemWidth, super.equals(obj));
}
```",Type-3
760-6-8,src,org.jfree.chart.renderer,Outlier,equals,184,198,src,org.jfree.chart.renderer.xy,VectorRenderer,equals,301,315,Type 3,"### Code Snippet 1 (Outlier.java, `equals` method, lines 184-198):
```java
/**
 * Tests this outlier for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Outlier)) {
        return false;
    }
    Outlier that = (Outlier) obj;
    if (!this.point.equals(that.point)) {
        return false;
    }
    if (this.radius != that.radius) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (VectorRenderer.java, `equals` method, lines 301-315):
```java
/**
 * Tests this <code>VectorRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>VectorRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>VectorRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof VectorRenderer)) {
        return false;
    }
    VectorRenderer that = (VectorRenderer) obj;
    if (this.baseLength != that.baseLength) {
        return false;
    }
    if (this.headLength != that.headLength) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, fields compared, and the use of `super.equals(obj)` in the second snippet).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests two objects for equality based on their fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instance  the current instance.
 * @param fieldValues  the field values to compare.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Object instance, Object... fieldValues) {
    if (obj == instance) {
        return true;
    }
    if (obj == null || instance == null || instance.getClass() != obj.getClass()) {
        return false;
    }
    Object[] otherFieldValues = (Object[]) obj.getClass().getDeclaredFields();
    for (int i = 0; i < fieldValues.length; i++) {
        if (!fieldValues[i].equals(otherFieldValues[i])) return false;
    }
}
```",Type-3
760-7-10,src,org.jfree.chart.renderer.category,LevelRenderer,equals,367,381,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (from `LevelRenderer` class, `equals` method):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LevelRenderer)) {
        return false;
    }
    LevelRenderer that = (LevelRenderer) obj;
    if (this.itemMargin != that.itemMargin) {
        return false;
    }
    if (this.maxItemWidth != that.maxItemWidth) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `XYBarDataset` class, `equals` method):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., different class names, fields, and logic for equality checks).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractEqualityRenderer`):
```java
/**
 * Tests two objects for equality based on their specific fields.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type of the object.
 * @param fieldComparisons  an array of boolean results from field comparisons.
 *
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean... fieldComparisons) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    for (boolean comparison : fieldComparisons) {
        if (!comparison) {
            return false;
        }
    }
    return true;
}
```

---

### 2. Refactored `equals` Method in `LevelRenderer`:
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, LevelRenderer.class,
        this.itemMargin == ((LevelRenderer) obj).itemMargin,
        this.maxItemWidth == ((LevelRenderer) obj).maxItemWidth,
        super.equals(obj)
    );
}
```

---

### 3. Refactored `equals` Method in `XYBarDataset`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, XYBarDataset.class,
        this.underlying.equals(((XYBarDataset) obj).underlying),
        this.barWidth == ((XYBarDataset) obj).barWidth
    );
}
```",Type-3
760-8-10,src,org.jfree.chart.renderer.xy,VectorRenderer,equals,301,315,src,org.jfree.data.xy,XYBarDataset,equals,341,355,Type 3,"### Code Snippet 1 (VectorRenderer.java, lines 301-315)
```java
/**
 * Tests this <code>VectorRenderer</code> for equality with an arbitrary
 * object.  This method returns <code>true</code> if and only if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>VectorRenderer</code> (not
 *     <code>null</code>);</li>
 * <li><code>obj</code> has the same field values as this
 *     <code>VectorRenderer</code>;</li>
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof VectorRenderer)) {
        return false;
    }
    VectorRenderer that = (VectorRenderer) obj;
    if (this.baseLength != that.baseLength) {
        return false;
    }
    if (this.headLength != that.headLength) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYBarDataset.java, lines 341-355)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBarDataset)) {
        return false;
    }
    XYBarDataset that = (XYBarDataset) obj;
    if (!this.underlying.equals(that.underlying)) {
        return false;
    }
    if (this.barWidth != that.barWidth) {
        return false;
    }
    return true;
}
```

### Clone Types:
- **Code Snippet 1**: Type-2 Clone (Identical except for variable names, literals, types)
- **Code Snippet 2**: Type-2 Clone (Identical except for variable names, literals, types)","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean equalsHelper(Object obj, Class<?> clazz, double field1, double field2) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object that = clazz.cast(obj);
    try {
        double thatField1 = (double) clazz.getDeclaredField(""baseLength"").get(that);
        double thatField2 = (double) clazz.getDeclaredField(""headLength"").get(that);
        return field1==field2",Type-2
776-2-11,src,org.jfree.chart,LegendItemCollection,equals,126,137,src,org.jfree.chart.labels,ItemLabelAnchor,equals,188,202,Type 3,"### Code Snippet 1 (LegendItemCollection.java, lines 126-137):
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LegendItemCollection)) {
        return false;
    }
    LegendItemCollection that = (LegendItemCollection) obj;
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (ItemLabelAnchor.java, lines 188-202):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {

    if (this == o) {
        return true;
    }
    if (!(o instanceof ItemLabelAnchor)) {
        return false;
    }

    ItemLabelAnchor order = (ItemLabelAnchor) o;
    if (!this.name.equals(order.toString())) {
        return false;
    }

    return true;

}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the comparison of `this.items` vs. `this.name`, and the use of different class types `LegendItemCollection` vs. `ItemLabelAnchor`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Checks equality between two objects based on a specific property.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param property  the property to compare.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object property) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object otherProperty = clazz.cast(obj);
    return property.equals(otherProperty);
}
```

### 2. Refactored Method Calls:

#### LegendItemCollection.java:
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, LegendItemCollection.class, this.items);
}
```

#### ItemLabelAnchor.java:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, ItemLabelAnchor.class, this.name);
}
```",Type-3
776-2-19,src,org.jfree.chart,LegendItemCollection,equals,126,137,src,org.jfree.chart.renderer,AreaRendererEndType,equals,104,118,Type 3,"### Code Snippet 1 (LegendItemCollection.java, lines 126-137)
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof LegendItemCollection)) {
        return false;
    }
    LegendItemCollection that = (LegendItemCollection) obj;
    if (!this.items.equals(that.items)) {
        return false;
    }
    return true;
}
```

### Code Snippet 2 (AreaRendererEndType.java, lines 104-118)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {

    if (this == o) {
        return true;
    }
    if (!(o instanceof AreaRendererEndType)) {
        return false;
    }

    AreaRendererEndType t = (AreaRendererEndType) o;
    if (!this.name.equals(t.toString())) {
        return false;
    }

    return true;

}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, the field being compared, and the method parameter names).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to compare.
 * @param instanceClass  the class of the instance.
 * @param fieldValue  the field value to compare.
 * @return A boolean indicating equality.
 */
protected boolean genericEquals(Object obj, Class<?> instanceClass, Object fieldValue) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object thatFieldValue = instanceClass.cast(obj);
    return fieldValue.equals(thatFieldValue);
}
```

---

### 2. Refactored Method Calls

#### LegendItemCollection.java
```java
/**
 * Tests this collection for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, LegendItemCollection.class, this.items);
}
```

---

#### AreaRendererEndType.java
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return genericEquals(o, AreaRendererEndType.class, this.name);
}
```",Type-3
776-11-35,src,org.jfree.chart.labels,ItemLabelAnchor,equals,188,202,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,equals,698,710,Type 3,"### Code Snippet 1 (ItemLabelAnchor.java, lines 188-202):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {

    if (this == o) {
        return true;
    }
    if (!(o instanceof ItemLabelAnchor)) {
        return false;
    }

    ItemLabelAnchor order = (ItemLabelAnchor) o;
    if (!this.name.equals(order.toString())) {
        return false;
    }

    return true;

}
```

### Code Snippet 2 (DefaultStatisticalCategoryDataset.java, lines 698-710):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof DefaultStatisticalCategoryDataset)) {
        return false;   
    }
    DefaultStatisticalCategoryDataset that 
            = (DefaultStatisticalCategoryDataset) obj;
    if (!this.data.equals(that.data)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., different class names, field comparisons, and parameter names).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to compare.
 * @param instance  the current instance.
 * @param field  the field to compare for equality.
 * @return A boolean indicating equality.
 */
protected boolean genericEquals(Object obj, Object instance, Object field) {
    if (obj == instance) {
        return true;
    }
    if (obj == null || instance.getClass() != obj.getClass()) {
        return false;
    }
    return field.equals(obj.toString());
}
```

### 2. Refactored Code in `ItemLabelAnchor.java`:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return genericEquals(o, this, this.name);
}
```

### 3. Refactored Code in `DefaultStatisticalCategoryDataset.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, this, this.data);
}
```",Type-3
776-11-36,src,org.jfree.chart.labels,ItemLabelAnchor,equals,188,202,src,org.jfree.data.time,Day,equals,361,373,Type 3,"### Code Snippet 1 (from `ItemLabelAnchor` class, lines 188-202):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {

    if (this == o) {
        return true;
    }
    if (!(o instanceof ItemLabelAnchor)) {
        return false;
    }

    ItemLabelAnchor order = (ItemLabelAnchor) o;
    if (!this.name.equals(order.toString())) {
        return false;
    }

    return true;

}
```

---

### Code Snippet 2 (from `Day` class, lines 361-373):
```java
/**
 * Tests the equality of this Day object to an arbitrary object.  Returns
 * true if the target is a Day instance or a SerialDate instance
 * representing the same day as this object. In all other cases,
 * returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A flag indicating whether or not an object is equal to this day.
 */
public boolean equals(Object obj) {
    
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Day)) {
        return false;
    }
    Day that = (Day) obj;
    if (!this.serialDate.equals(that.getSerialDate())) {
        return false;
    }
    return true;
    
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`o` vs. `obj`, `order` vs. `that`, `name` vs. `serialDate`) and class-specific details (`ItemLabelAnchor` vs. `Day`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to compare.
 * @param instanceClass  the class of the instance.
 * @param value  the value to compare.
 * @param otherValueExtractor  a function to extract the comparable value from the other object.
 * @return A boolean indicating equality.
 */
protected boolean genericEquals(Object obj, Class<?> instanceClass, Object value, java.util.function.Function<Object, Object> otherValueExtractor) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object otherValue = otherValueExtractor.apply(obj);
    return value.equals(otherValue);
}
```

---

### 2. Refactored `equals` Method in `ItemLabelAnchor`:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return genericEquals(o, ItemLabelAnchor.class, this.name, obj -> ((ItemLabelAnchor) obj).toString());
}
```

---

### 3. Refactored `equals` Method in `Day`:
```java
/**
 * Tests the equality of this Day object to an arbitrary object.  Returns
 * true if the target is a Day instance or a SerialDate instance
 * representing the same day as this object. In all other cases,
 * returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A flag indicating whether or not an object is equal to this day.
 */
public boolean equals(Object obj) {
    return genericEquals(obj, Day.class, this.serialDate, o -> ((Day) o).getSerialDate());
}
```",Type-2
776-19-35,src,org.jfree.chart.renderer,AreaRendererEndType,equals,104,118,src,org.jfree.data.statistics,DefaultStatisticalCategoryDataset,equals,698,710,Type 3,"### Code Snippet 1 (AreaRendererEndType.java, lines 104-118)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {

    if (this == o) {
        return true;
    }
    if (!(o instanceof AreaRendererEndType)) {
        return false;
    }

    AreaRendererEndType t = (AreaRendererEndType) o;
    if (!this.name.equals(t.toString())) {
        return false;
    }

    return true;

}
```

### Code Snippet 2 (DefaultStatisticalCategoryDataset.java, lines 698-710)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof DefaultStatisticalCategoryDataset)) {
        return false;   
    }
    DefaultStatisticalCategoryDataset that 
            = (DefaultStatisticalCategoryDataset) obj;
    if (!this.data.equals(that.data)) {
        return false;   
    }
    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks and the specific fields being compared).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares this object with another object for equality.
 *
 * @param obj the object to compare.
 * @param classType the expected class type of the object.
 * @param fieldValue the field value of this object to compare.
 * @param otherFieldValueExtractor a function to extract the field value from the other object.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> classType, Object fieldValue, java.util.function.Function<Object, Object> otherFieldValueExtractor) {
    if (obj == this) {
        return true;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    Object otherFieldValue = otherFieldValueExtractor.apply(obj);
    return fieldValue.equals(otherFieldValue);
}
```

---

### 2. Refactored Method Calls

#### In `AreaRendererEndType.java`
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, AreaRendererEndType.class, this.name, obj -> ((AreaRendererEndType) obj).toString());
}
```

---

#### In `DefaultStatisticalCategoryDataset.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultStatisticalCategoryDataset.class, this.data, obj -> ((DefaultStatisticalCategoryDataset) obj).data);
}
```",Type-3
776-19-36,src,org.jfree.chart.renderer,AreaRendererEndType,equals,104,118,src,org.jfree.data.time,Day,equals,361,373,Type 3,"### Code Snippet 1 (AreaRendererEndType.java, lines 104-118)
```java
public boolean equals(Object o) {

    if (this == o) {
        return true;
    }
    if (!(o instanceof AreaRendererEndType)) {
        return false;
    }

    AreaRendererEndType t = (AreaRendererEndType) o;
    if (!this.name.equals(t.toString())) {
        return false;
    }

    return true;

}
```

### Code Snippet 2 (Day.java, lines 361-373)
```java
public boolean equals(Object obj) {
    
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Day)) {
        return false;
    }
    Day that = (Day) obj;
    if (!this.serialDate.equals(that.getSerialDate())) {
        return false;
    }
    return true;
    
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., variable names, class names, and method calls).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean isEqual(Object obj, Object instance, Class<?> clazz, Object field1, Object field2) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field1.equals(field2)) {
        return false;
    }
    return true;
}
```

### 2. Refactored Code in `AreaRendererEndType.java`
```java
public boolean equals(Object o) {
    return isEqual(o, this, AreaRendererEndType.class, this.name, ((AreaRendererEndType) o).toString());
}
```

### 3. Refactored Code in `Day.java`
```java
public boolean equals(Object obj) {
    return isEqual(obj, this, Day.class, this.serialDate, ((Day) obj).getSerialDate());
}
```",Type-3
776-20-29,src,org.jfree.chart.renderer.category,CategoryStepRenderer,equals,349,360,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1 (CategoryStepRenderer.java, lines 349-360)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryStepRenderer)) {
        return false;
    }
    CategoryStepRenderer that = (CategoryStepRenderer) obj;
    if (this.stagger != that.stagger) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (XYSplineRenderer.java, lines 358-370)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`stagger` vs. `precision`) and class names (`CategoryStepRenderer` vs. `XYSplineRenderer`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field.equals(otherField)) {
        return false;
    }
    return super.equals(obj);
}
```

### 2. Refactored Method Calls

#### In `CategoryStepRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryStepRenderer.class, this.stagger, ((CategoryStepRenderer) obj).stagger);
}
```

#### In `XYSplineRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, this.precision, ((XYSplineRenderer) obj).precision);
}
```",Type-2
776-20-32,src,org.jfree.chart.renderer.category,CategoryStepRenderer,equals,349,360,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (CategoryStepRenderer.java, lines 349-360):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryStepRenderer)) {
        return false;
    }
    CategoryStepRenderer that = (CategoryStepRenderer) obj;
    if (this.stagger != that.stagger) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, lines 87-100):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class type checks (`CategoryStepRenderer` vs. `KeyedValueComparatorType`), the field comparisons (`this.stagger` vs. `this.name`), and the use of `super.equals(obj)` in the first snippet.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check against.
 * @param field  the field to compare.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field.equals(otherField)) {
        return false;
    }
    return true;
}
```

---

### 2. Refactored Method Calls:

#### In `CategoryStepRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, CategoryStepRenderer.class, this.stagger, ((CategoryStepRenderer) obj).stagger)
            && super.equals(obj);
}
```

---

#### In `KeyedValueComparatorType.java`:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name, ((KeyedValueComparatorType) o).name);
}
```",Type-3
776-21-29,src,org.jfree.chart.renderer.category,StackedAreaRenderer,equals,490,501,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1: `equals` method in `StackedAreaRenderer` class
```java
/**
 * Checks this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedAreaRenderer)) {
        return false;
    }
    StackedAreaRenderer that = (StackedAreaRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `XYSplineRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`renderAsPercentages` vs. `precision`) and class names (`StackedAreaRenderer` vs. `XYSplineRenderer`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Checks for equality between this object and another object.
 *
 * @param obj  the object to compare (<code>null</code> not permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the specific field to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(field.toString()).get(obj);
    } catch (Exception e) {
        throw new RuntimeException(""Filed Access Error""+e);",Type-2
776-21-32,src,org.jfree.chart.renderer.category,StackedAreaRenderer,equals,490,501,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (StackedAreaRenderer.java, lines 490-501)
```java
/**
 * Checks this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedAreaRenderer)) {
        return false;
    }
    StackedAreaRenderer that = (StackedAreaRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, lines 87-100)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., class type checks, field comparisons, and method calls).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Checks if this instance is equal to the specified object.
 *
 * @param obj  the object to compare.
 * @param clazz  the class to check the type of the object.
 * @param field  the field to compare for equality.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return field.equals(otherField);
}
```

### 2. Refactored Method Calls

#### In `StackedAreaRenderer.java`
```java
/**
 * Checks this instance for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> not permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, StackedAreaRenderer.class, this.renderAsPercentages, 
                   ((StackedAreaRenderer) obj).renderAsPercentages) 
           && super.equals(obj);
}
```

#### In `KeyedValueComparatorType.java`
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name, 
                   ((KeyedValueComparatorType) o).name);
}
```",Type-3
776-22-29,src,org.jfree.chart.renderer.category,StackedBarRenderer,equals,390,401,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"Here are the two code snippets:

---

**Code Snippet 1 (StackedBarRenderer.java, lines 390-401):**
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer)) {
        return false;
    }
    StackedBarRenderer that = (StackedBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

---

**Code Snippet 2 (XYSplineRenderer.java, lines 358-370):**
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

**Clone Type:**  
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`renderAsPercentages` vs. `precision`) and class names (`StackedBarRenderer` vs. `XYSplineRenderer`).","**1. Extracted Method (to be placed in the common superclass):**
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(field.toString()).get(obj);
    } catch (Exception e) {
        throw new RuntimeException(""Filed not found"");
    }
    return super.equals(obj);
}
```

",Type-2
776-22-32,src,org.jfree.chart.renderer.category,StackedBarRenderer,equals,390,401,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1: `equals` method in `StackedBarRenderer` class (lines 390-401)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedBarRenderer)) {
        return false;
    }
    StackedBarRenderer that = (StackedBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `KeyedValueComparatorType` class (lines 87-100)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class type checks (`StackedBarRenderer` vs. `KeyedValueComparatorType`) and the specific fields being compared (`renderAsPercentages` vs. `name`).","### 1. Extracted Method (to be placed in the common superclass)
```java
/**
 * Generic equality check for objects of the same type.
 *
 * @param obj  the object to compare.
 * @param clazz  the class type to check against.
 * @param field  the field to compare.
 * @return A boolean indicating equality.
 */
protected boolean genericEquals(Object obj, Class<?> clazz, Object field) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    try {
        otherField = clazz.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        throw new RuntimeException(""Filed Error"");
    }
}
```",Type-3
776-23-29,src,org.jfree.chart.renderer.xy,ClusteredXYBarRenderer,equals,326,337,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1: `equals` method in `ClusteredXYBarRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ClusteredXYBarRenderer)) {
        return false;
    }
    ClusteredXYBarRenderer that = (ClusteredXYBarRenderer) obj;
    if (this.centerBarAtStartValue != that.centerBarAtStartValue) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `XYSplineRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`centerBarAtStartValue` vs. `precision`) and class names (`ClusteredXYBarRenderer` vs. `XYSplineRenderer`).","### 1. Extracted Method (to be placed in the superclass `AbstractXYItemRenderer`)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the instance-specific field to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    try {
        Object thatField = clazz.getDeclaredField(field.toString()).get(obj);
        if (!field.equals(thatField)) {
            return false;
        }
    } catch (Exception e) {
        return false;
    }
    return super.equals(obj);
}
```

### 2. Refactored `equals` Method in `ClusteredXYBarRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, ClusteredXYBarRenderer.class, this.centerBarAtStartValue);
}
```

### 3. Refactored `equals` Method in `XYSplineRenderer`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, this.precision);
}
```",Type-2
776-23-32,src,org.jfree.chart.renderer.xy,ClusteredXYBarRenderer,equals,326,337,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (ClusteredXYBarRenderer.java, lines 326-337)
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ClusteredXYBarRenderer)) {
        return false;
    }
    ClusteredXYBarRenderer that = (ClusteredXYBarRenderer) obj;
    if (this.centerBarAtStartValue != that.centerBarAtStartValue) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, lines 87-100)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., class-specific checks and field comparisons).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Compares this object with another object for equality.
 *
 * @param obj  the other object.
 * @param classType  the expected class type of the object.
 * @param field  the field to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> classType, Object field) {
    if (this == obj) {
        return true;
    }
    if (!classType.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    try {
        otherField = classType.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        return false;
    }
    return field.equals(otherField);
}
```

### 2. Refactored Code in `ClusteredXYBarRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object, returning
 * <code>true</code> if <code>obj</code> is a 
 * <code>ClusteredXYBarRenderer</code> with the same settings as this
 * renderer, and <code>false</code> otherwise.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ClusteredXYBarRenderer.class, this.centerBarAtStartValue);
}
```

### 3. Refactored Code in `KeyedValueComparatorType.java`
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name);
}
```",Type-3
776-24-29,src,org.jfree.chart.renderer.xy,DeviationRenderer,equals,371,382,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1: `equals` method in `DeviationRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DeviationRenderer)) {
        return false;
    }
    DeviationRenderer that = (DeviationRenderer) obj;
    if (this.alpha != that.alpha) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `XYSplineRenderer` class
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
The two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`alpha` vs. `precision`) and class names (`DeviationRenderer` vs. `XYSplineRenderer`).","### 1. Extracted Method (to be placed in the common superclass `XYLineAndShapeRenderer`)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the specific field to compare.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    XYLineAndShapeRenderer that = (XYLineAndShapeRenderer) obj;
    if (!field.equals(getFieldFromInstance(that, field))) {
        return false;
    }
    return super.equals(obj);
}

/**
 * Helper method to retrieve the field value from the given instance.
 *
 * @param instance  the instance to retrieve the field from.
 * @param field  the field to retrieve.
 *
 * @return The field value.
 */
private Object getFieldFromInstance(Object instance, Object field) {
    // Implement field retrieval logic here
}
```",Type-2
776-24-32,src,org.jfree.chart.renderer.xy,DeviationRenderer,equals,371,382,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (from `DeviationRenderer` class, `equals` method, lines 371-382):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DeviationRenderer)) {
        return false;
    }
    DeviationRenderer that = (DeviationRenderer) obj;
    if (this.alpha != that.alpha) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `KeyedValueComparatorType` class, `equals` method, lines 87-100):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones**. They are mostly similar but have some different statements, such as the class type checks (`DeviationRenderer` vs. `KeyedValueComparatorType`), the field comparisons (`this.alpha` vs. `this.name`), and the use of `super.equals(obj)` in the first snippet.","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param field  the field to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, Object field) {
    if (this == obj) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    Object otherField = null;
    try {
        otherField = expectedClass.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        throw",Type-3
776-25-29,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer2,equals,536,547,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1 (from `StackedXYAreaRenderer2` class, `equals` method):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedXYAreaRenderer2)) {
        return false;
    }
    StackedXYAreaRenderer2 that = (StackedXYAreaRenderer2) obj;
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `XYSplineRenderer` class, `equals` method):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`roundXCoordinates` vs. `precision`) and class names (`StackedXYAreaRenderer2` vs. `XYSplineRenderer`).","### 1. Extracted Method (to be placed in the superclass `XYLineAndShapeRenderer`):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the field value to compare.
 * @param otherField  the field value from the other object to compare.
 *
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!field.equals(otherField)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### 2. Refactored `equals` Method in `StackedXYAreaRenderer2`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, StackedXYAreaRenderer2.class, this.roundXCoordinates, 
                        ((StackedXYAreaRenderer2) obj).roundXCoordinates);
}
```

---

### 3. Refactored `equals` Method in `XYSplineRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, this.precision, 
                        ((XYSplineRenderer) obj).precision);
}
```",Type-2
776-25-32,src,org.jfree.chart.renderer.xy,StackedXYAreaRenderer2,equals,536,547,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (from `StackedXYAreaRenderer2` class, lines 536-547):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StackedXYAreaRenderer2)) {
        return false;
    }
    StackedXYAreaRenderer2 that = (StackedXYAreaRenderer2) obj;
    if (this.roundXCoordinates != that.roundXCoordinates) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `KeyedValueComparatorType` class, lines 87-100):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., class names, field comparisons, and method parameter names).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        return false;
    }
}
```",Type-3
776-26-29,src,org.jfree.chart.renderer.xy,StackedXYBarRenderer,equals,394,405,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1: `equals` method in `StackedXYBarRenderer` (lines 394-405)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StackedXYBarRenderer)) {
        return false;   
    }
    StackedXYBarRenderer that = (StackedXYBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;   
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `XYSplineRenderer` (lines 358-370)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`renderAsPercentages` vs. `precision`) and class names (`StackedXYBarRenderer` vs. `XYSplineRenderer`).","### 1. Extracted Method (to be placed in the common superclass, e.g., `AbstractXYItemRenderer`)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param field  the field to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(field.toString()).get(obj);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        throw new RuntimeException(e);
    }
    return super.equals(obj);
}
```

### 2. Method Calls Replacing Clones

#### In `StackedXYBarRenderer`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StackedXYBarRenderer.class, this.renderAsPercentages);
}
```

#### In `XYSplineRenderer`:
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, this.precision);
}
```",Type-2
776-26-32,src,org.jfree.chart.renderer.xy,StackedXYBarRenderer,equals,394,405,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (from `StackedXYBarRenderer` class, `equals` method):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (!(obj instanceof StackedXYBarRenderer)) {
        return false;   
    }
    StackedXYBarRenderer that = (StackedXYBarRenderer) obj;
    if (this.renderAsPercentages != that.renderAsPercentages) {
        return false;   
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (from `KeyedValueComparatorType` class, `equals` method):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and the use of `super.equals(obj)` in the first snippet).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Checks equality between two objects of the same type.
 *
 * @param obj  the object to compare with.
 * @param type  the expected class type.
 * @param field  the field to compare for equality.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> type, Object field, Object otherField) {
    if (this == obj) {
        return true;
    }
    if (!type.isInstance(obj)) {
        return false;
    }
    return field.equals(otherField);
}
```

---

### 2. Refactored `equals` Method in `StackedXYBarRenderer`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (!isEqual(obj, StackedXYBarRenderer.class, this.renderAsPercentages, 
                 ((StackedXYBarRenderer) obj).renderAsPercentages)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `KeyedValueComparatorType`:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name, 
                   ((KeyedValueComparatorType) o).name);
}
```",Type-3
776-27-29,src,org.jfree.chart.renderer.xy,XYBubbleRenderer,equals,327,338,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"### Code Snippet 1: `equals` method in `XYBubbleRenderer` (lines 327-338)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBubbleRenderer)) {
        return false;
    }
    XYBubbleRenderer that = (XYBubbleRenderer) obj;
    if (this.scaleType != that.scaleType) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2: `equals` method in `XYSplineRenderer` (lines 358-370)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`scaleType` vs. `precision`) and class names (`XYBubbleRenderer` vs. `XYSplineRenderer`).","### 1. Extracted Method (to be placed in the superclass `AbstractXYItemRenderer`)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param field  the field value to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, int field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    AbstractXYItemRenderer that = (AbstractXYItemRenderer) obj;
    if (field != that.getFieldValue()) {
        return false;
    }
    return super.equals(obj);
}

/**
 * Placeholder method to retrieve the field value for comparison.
 * Subclasses must override this method to return the appropriate field value.
 * 
 * @return The field value.
 */
protected int getFieldValue() {
    return 0; // Default implementation, subclasses must override.
}
```

---

### 2. Refactored `equals` Method in `XYBubbleRenderer`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYBubbleRenderer.class, this.scaleType);
}

@Override
protected int getFieldValue() {
    return this.scaleType;
}
```

---

### 3. Refactored `equals` Method in `XYSplineRenderer`
```java
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, this.precision);
}

@Override
protected int getFieldValue() {
    return this.precision;
}
```",Type-2
776-27-32,src,org.jfree.chart.renderer.xy,XYBubbleRenderer,equals,327,338,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (XYBubbleRenderer.java, `equals` method, lines 327-338):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYBubbleRenderer)) {
        return false;
    }
    XYBubbleRenderer that = (XYBubbleRenderer) obj;
    if (this.scaleType != that.scaleType) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, `equals` method, lines 87-100):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., class-specific checks and field comparisons).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractEqualityComparator`):
```java
/**
 * Compares this object with another object for equality.
 *
 * @param obj  the other object.
 * @param clazz  the class to check the type of the object.
 * @param field  the field to compare for equality.
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return field.equals(otherField);
}
```

---

### 2. Refactored `equals` Method in `XYBubbleRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYBubbleRenderer.class, this.scaleType, ((XYBubbleRenderer) obj).scaleType)
            && super.equals(obj);
}
```

---

### 3. Refactored `equals` Method in `KeyedValueComparatorType.java`:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name, ((KeyedValueComparatorType) o).name);
}
```",Type-3
776-28-29,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,315,326,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,Type 3,"**Code Snippet 1: Method: equals (Lines: 315-326)**  
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

**Code Snippet 2: Method: equals (Lines: 358-370)**  
```java
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ControlPoint)) {
        return false;
    }
    ControlPoint that = (ControlPoint) obj;
    if (this.x != that.x) {
        return false;
    }
    /*&& y == ((ControlPoint) obj).y*/;
    return true;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements)","**1. Extracted Method:**  
```java
private boolean areObjectsEqual(Object obj, Object instance, Class<?> clazz, float field1, float field2) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (clazz == XYSplineRenderer.class) {
        XYSplineRenderer that = (XYSplineRenderer) obj;
        return field1 == field2 && super.equals(obj);
    } else if (clazz == ControlPoint.class) {
        ControlPoint that = (ControlPoint) obj;
        return field1 == field2; // Assuming y comparison is commented intentionally
    }
    return false;
}
```

**2. Method Calls Replacing the Clones:**  

**For Code Snippet 1 (Lines: 315-326):**  
```java
public boolean equals(Object obj) {
    return areObjectsEqual(obj, this, XYSplineRenderer.class, this.precision, ((XYSplineRenderer) obj).precision);
}
```

**For Code Snippet 2 (Lines: 358-370):**  
```java
public boolean equals(Object obj) {
    return areObjectsEqual(obj, this, ControlPoint.class, this.x, ((ControlPoint) obj).x);
}
```",Type-3
776-28-32,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,315,326,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (XYSplineRenderer.java, lines 315-326)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, lines 87-100)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class names (`XYSplineRenderer` vs. `KeyedValueComparatorType`), the field being compared (`precision` vs. `name`), and the superclass method call (`super.equals(obj)` in the first snippet, absent in the second).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class type.
 * @param field  the field to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""name"").get(obj);
    } catch (Exception e) {
        throw new RuntimeException(""Filed not found"");
    }
}
```",Type-3
776-29-30,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,src,org.jfree.chart.renderer.xy,XYStepRenderer,equals,326,337,Type 3,"### Code Snippet 1 (from `XYSplineRenderer` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Code Snippet 2 (from `XYStepRenderer` class, `equals` method):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLineAndShapeRenderer)) {
        return false;
    }
    XYStepRenderer that = (XYStepRenderer) obj;
    if (this.stepPoint != that.stepPoint) {
        return false;
    }
    return super.equals(obj);
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`precision` vs. `stepPoint`), class names (`XYSplineRenderer` vs. `XYStepRenderer`), and the type being checked in the `instanceof` condition.","### 1. Extracted Method (to be placed in the superclass `XYLineAndShapeRenderer`):

```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check for instance type.
 * @param field  the field to compare for equality.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, double field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    XYLineAndShapeRenderer that = (XYLineAndShapeRenderer) obj;
    if (field != ((XYLineAndShapeRenderer) that).getFieldValue()) {
        return false;
    }
    return super.equals(obj);
}

/**
 * Placeholder for getting the field value in subclasses.
 * Subclasses should override this method to return the specific field value.
 *
 * @return The field value.
 */
protected double getFieldValue() {
    return 0.0; // Default implementation, subclasses should override.
}
```

---

### 2. Updated `equals` Method in `XYSplineRenderer`:

```java
@Override
protected double getFieldValue() {
    return this.precision;
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYSplineRenderer.class, this.precision);
}
```

---

### 3. Updated `equals` Method in `XYStepRenderer`:

```java
@Override
protected double getFieldValue() {
    return this.stepPoint;
}

@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, XYStepRenderer.class, this.stepPoint);
}
```",Type-2
776-29-32,src,org.jfree.chart.renderer.xy,XYSplineRenderer,equals,358,370,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (XYSplineRenderer.java, lines 358-370)
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYSplineRenderer)) {
        return false;
    }
    XYSplineRenderer that = (XYSplineRenderer) obj;
    if (this.precision != that.precision) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, lines 87-100)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., class type checks, field comparisons, and method calls).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Checks equality between this object and another object.
 *
 * @param obj  the other object.
 * @param clazz  the class to check instance type.
 * @param field  the field to compare for equality.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return field.equals(otherField);
}
```

### 2. Refactored Method Calls

#### In `XYSplineRenderer.java`
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYSplineRenderer.class, this.precision, ((XYSplineRenderer) obj).precision) 
            && super.equals(obj);
}
```

#### In `KeyedValueComparatorType.java`
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name, ((KeyedValueComparatorType) o).name);
}
```",Type-3
776-30-32,src,org.jfree.chart.renderer.xy,XYStepRenderer,equals,326,337,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,Type 3,"### Code Snippet 1 (XYStepRenderer.java, `equals` method, lines 326-337):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof XYLineAndShapeRenderer)) {
        return false;
    }
    XYStepRenderer that = (XYStepRenderer) obj;
    if (this.stepPoint != that.stepPoint) {
        return false;
    }
    return super.equals(obj);
}
```

### Code Snippet 2 (KeyedValueComparatorType.java, `equals` method, lines 87-100):
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class types being compared (`XYLineAndShapeRenderer` vs. `KeyedValueComparatorType`), the field being compared (`stepPoint` vs. `name`), and the use of `super.equals(obj)` in one snippet but not the other.","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality between two objects.
 *
 * @param obj  the object to compare with.
 * @param clazz  the expected class type of the object.
 * @param field  the field to compare.
 * @return A boolean indicating equality.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field, Object otherField) {
    if (this == obj) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return field.equals(otherField);
}
```

### 2. Refactored `equals` Method in `XYStepRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, XYLineAndShapeRenderer.class, this.stepPoint, ((XYStepRenderer) obj).stepPoint)
            && super.equals(obj);
}
```

### 3. Refactored `equals` Method in `KeyedValueComparatorType.java`:
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    return isEqual(o, KeyedValueComparatorType.class, this.name, ((KeyedValueComparatorType) o).name);
}
```",Type-3
776-32-36,src,org.jfree.data,KeyedValueComparatorType,equals,87,100,src,org.jfree.data.time,Day,equals,361,373,Type 3,"### Code Snippet 1 (KeyedValueComparatorType.java, lines 87-100)
```java
/**
 * Returns <code>true</code> if this object is equal to the specified 
 * object, and <code>false</code> otherwise.
 *
 * @param o  the other object.
 *
 * @return A boolean.
 */
public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (!(o instanceof KeyedValueComparatorType)) {
        return false;
    }

    KeyedValueComparatorType type = (KeyedValueComparatorType) o;
    if (!this.name.equals(type.name)) {
        return false;
    }

    return true;
}
```

---

### Code Snippet 2 (Day.java, lines 361-373)
```java
/**
 * Tests the equality of this Day object to an arbitrary object.  Returns
 * true if the target is a Day instance or a SerialDate instance
 * representing the same day as this object. In all other cases,
 * returns false.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A flag indicating whether or not an object is equal to this day.
 */
public boolean equals(Object obj) {
    
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof Day)) {
        return false;
    }
    Day that = (Day) obj;
    if (!this.serialDate.equals(that.getSerialDate())) {
        return false;
    }
    return true;
    
}
```

---

### Clone Type:
These two code snippets are **Type-2 clones** because they are structurally identical but differ in variable names (`o` vs. `obj`, `type` vs. `that`, `this.name` vs. `this.serialDate`), class names (`KeyedValueComparatorType` vs. `Day`), and method-specific logic (`name` vs. `serialDate`).","### 1. Extracted Method (To be placed in the common superclass)
```java
protected boolean isEqual(Object obj, Object instance, Object field, Class<?> clazz) {
    if (obj == instance) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredMethod(""get"" + field.getClass().getSimpleName()).invoke(obj);
    } catch (Exception e) {
        return false;
    }
    return field.equals(thatField);
}
```

### 2. Refactored Method Calls

#### In `KeyedValueComparatorType.java`
```java
public boolean equals(Object o) {
    return isEqual(o, this, name, KeyedValueComparatorType.class);
}
```

#### In `Day.java`
```java
public boolean equals(Object obj) {
    return isEqual(obj, this, serialDate, Day.class);
}
```",Type-2
789-1-4,src,org.jfree.chart.axis,CategoryLabelPositions,replaceTopPosition,311,325,src,org.jfree.chart.axis,CategoryLabelPositions,replaceRightPosition,392,406,Type 3,"**Code Snippet 1: Method: replaceTopPosition (Lines: 311-325)**  
```java
public static CategoryLabelPositions replaceTopPosition(
        CategoryLabelPositions base, CategoryLabelPosition top) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (top == null) {
        throw new IllegalArgumentException(""Null 'top' argument."");
    }
    
    return new CategoryLabelPositions(
        top, 
        base.getLabelPosition(RectangleEdge.BOTTOM),
        base.getLabelPosition(RectangleEdge.LEFT),
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Code Snippet 2: Method: replaceRightPosition (Lines: 392-406)**  
```java
public static CategoryLabelPositions replaceRightPosition(
        CategoryLabelPositions base, CategoryLabelPosition right) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (right == null) {
        throw new IllegalArgumentException(""Null 'right' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        base.getLabelPosition(RectangleEdge.LEFT),
        right
    );
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static CategoryLabelPositions replacePosition(
        CategoryLabelPositions base, CategoryLabelPosition position, RectangleEdge edge) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (position == null) {
        throw new IllegalArgumentException(""Null 'position' argument."");
    }
    
    return new CategoryLabelPositions(
        edge == RectangleEdge.TOP ? position : base.getLabelPosition(RectangleEdge.TOP),
        edge == RectangleEdge.BOTTOM ? position : base.getLabelPosition(RectangleEdge.BOTTOM),
        edge == RectangleEdge.LEFT ? position : base.getLabelPosition(RectangleEdge.LEFT),
        edge == RectangleEdge.RIGHT ? position : base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**2. Method Calls Replacing the Clones:**  

**For `replaceTopPosition`:**  
```java
public static CategoryLabelPositions replaceTopPosition(
        CategoryLabelPositions base, CategoryLabelPosition top) {
    return replacePosition(base, top, RectangleEdge.TOP);
}
```

**For `replaceRightPosition`:**  
```java
public static CategoryLabelPositions replaceRightPosition(
        CategoryLabelPositions base, CategoryLabelPosition right) {
    return replacePosition(base, right, RectangleEdge.RIGHT);
}
```",Type-2
789-2-4,src,org.jfree.chart.axis,CategoryLabelPositions,replaceBottomPosition,338,352,src,org.jfree.chart.axis,CategoryLabelPositions,replaceRightPosition,392,406,Type 3,"**Code Snippet 1: Method: replaceBottomPosition (Lines: 338-352)**  
```java
public static CategoryLabelPositions replaceBottomPosition(
        CategoryLabelPositions base, CategoryLabelPosition bottom) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (bottom == null) {
        throw new IllegalArgumentException(""Null 'bottom' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        bottom,
        base.getLabelPosition(RectangleEdge.LEFT),
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Code Snippet 2: Method: replaceRightPosition (Lines: 392-406)**  
```java
public static CategoryLabelPositions replaceRightPosition(
        CategoryLabelPositions base, CategoryLabelPosition right) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (right == null) {
        throw new IllegalArgumentException(""Null 'right' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        base.getLabelPosition(RectangleEdge.LEFT),
        right
    );
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static CategoryLabelPositions replacePosition(
        CategoryLabelPositions base, CategoryLabelPosition position, RectangleEdge edge) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (position == null) {
        throw new IllegalArgumentException(""Null 'position' argument."");
    }
    
    return new CategoryLabelPositions(
        edge == RectangleEdge.TOP ? position : base.getLabelPosition(RectangleEdge.TOP),
        edge == RectangleEdge.BOTTOM ? position : base.getLabelPosition(RectangleEdge.BOTTOM),
        edge == RectangleEdge.LEFT ? position : base.getLabelPosition(RectangleEdge.LEFT),
        edge == RectangleEdge.RIGHT ? position : base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**2. Method Calls:**  

**For `replaceBottomPosition`:**  
```java
public static CategoryLabelPositions replaceBottomPosition(
        CategoryLabelPositions base, CategoryLabelPosition bottom) {
    return replacePosition(base, bottom, RectangleEdge.BOTTOM);
}
```

**For `replaceRightPosition`:**  
```java
public static CategoryLabelPositions replaceRightPosition(
        CategoryLabelPositions base, CategoryLabelPosition right) {
    return replacePosition(base, right, RectangleEdge.RIGHT);
}
```",Type-2
789-3-4,src,org.jfree.chart.axis,CategoryLabelPositions,replaceLeftPosition,365,379,src,org.jfree.chart.axis,CategoryLabelPositions,replaceRightPosition,392,406,Type 3,"**Code Snippet 1: replaceLeftPosition (Lines 365-379)**  
```java
public static CategoryLabelPositions replaceLeftPosition(
        CategoryLabelPositions base, CategoryLabelPosition left) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (left == null) {
        throw new IllegalArgumentException(""Null 'left' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        left,
        base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**Code Snippet 2: replaceRightPosition (Lines 392-406)**  
```java
public static CategoryLabelPositions replaceRightPosition(
        CategoryLabelPositions base, CategoryLabelPosition right) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (right == null) {
        throw new IllegalArgumentException(""Null 'right' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        base.getLabelPosition(RectangleEdge.LEFT),
        right
    );
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals).","**1. Extracted Method:**  
```java
private static CategoryLabelPositions replacePosition(
        CategoryLabelPositions base, CategoryLabelPosition position, RectangleEdge edge) {
    
    if (base == null) {
        throw new IllegalArgumentException(""Null 'base' argument."");
    }
    if (position == null) {
        throw new IllegalArgumentException(""Null 'position' argument."");
    }
    
    return new CategoryLabelPositions(
        base.getLabelPosition(RectangleEdge.TOP),
        base.getLabelPosition(RectangleEdge.BOTTOM),
        edge == RectangleEdge.LEFT ? position : base.getLabelPosition(RectangleEdge.LEFT),
        edge == RectangleEdge.RIGHT ? position : base.getLabelPosition(RectangleEdge.RIGHT)
    );
}
```

**2. Method Calls:**  

**For `replaceLeftPosition`:**  
```java
public static CategoryLabelPositions replaceLeftPosition(
        CategoryLabelPositions base, CategoryLabelPosition left) {
    return replacePosition(base, left, RectangleEdge.LEFT);
}
```

**For `replaceRightPosition`:**  
```java
public static CategoryLabelPositions replaceRightPosition(
        CategoryLabelPositions base, CategoryLabelPosition right) {
    return replacePosition(base, right, RectangleEdge.RIGHT);
}
```",Type-2
823-1-2,src,org.jfree.chart.editor,DefaultNumberAxisEditor,validateMinimum,304,317,src,org.jfree.chart.editor,DefaultNumberAxisEditor,validateMaximum,323,336,Type 3,"**Code Snippet 1: validateMinimum (Lines 304-317)**  
```java
public void validateMinimum() {
    double newMin;
    try {
        newMin = Double.parseDouble(this.minimumRangeValue.getText());
        if (newMin >= this.maximumValue) {
            newMin = this.minimumValue;
        }
    }
    catch (NumberFormatException e) {
        newMin = this.minimumValue;
    }

    this.minimumValue = newMin;
    this.minimumRangeValue.setText(Double.toString(this.minimumValue));
}
```

**Code Snippet 2: validateMaximum (Lines 323-336)**  
```java
public void validateMaximum() {
    double newMax;
    try {
        newMax = Double.parseDouble(this.maximumRangeValue.getText());
        if (newMax <= this.minimumValue) {
            newMax = this.maximumValue;
        }
    }
    catch (NumberFormatException e) {
        newMax = this.maximumValue;
    }

    this.maximumValue = newMax;
    this.maximumRangeValue.setText(Double.toString(this.maximumValue));
}
```

**Clone Type:** Type-2 (Identical except for variable names and literals)","**1. Extracted Method:**  
```java
private double validateRangeValue(JTextField rangeField, double otherValue, double currentValue, boolean isMinimum) {
    double newValue;
    try {
        newValue = Double.parseDouble(rangeField.getText());
        if (isMinimum && newValue >= otherValue) {
            newValue = currentValue;
        } else if (!isMinimum && newValue <= otherValue) {
            newValue = currentValue;
        }
    } catch (NumberFormatException e) {
        newValue = currentValue;
    }
    rangeField.setText(Double.toString(newValue));
    return newValue;
}
```

**2. Method Calls:**  

**For `validateMinimum`:**  
```java
public void validateMinimum() {
    this.minimumValue = validateRangeValue(this.minimumRangeValue, this.maximumValue, this.minimumValue, true);
}
```

**For `validateMaximum`:**  
```java
public void validateMaximum() {
    this.maximumValue = validateRangeValue(this.maximumRangeValue, this.minimumValue, this.maximumValue, false);
}
```",Type-2
874-2-3,src,org.jfree.data.time,Month,next,249,262,src,org.jfree.data.time,Quarter,previous,246,259,Type 3,"### Code Snippet 1: `next` method from `Month` class
```java
/**
 * Returns the month following this one.
 *
 * @return The month following this one.
 */
public RegularTimePeriod next() {
    Month result;
    if (this.month != MonthConstants.DECEMBER) {
        result = new Month(this.month + 1, this.year);
    }
    else {
        if (this.year < 9999) {
            result = new Month(MonthConstants.JANUARY, this.year + 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

### Code Snippet 2: `previous` method from `Quarter` class
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
public RegularTimePeriod previous() {
    Quarter result;
    if (this.quarter > FIRST_QUARTER) {
        result = new Quarter(this.quarter - 1, this.year);
    }
    else {
        if (this.year > 1900) {
            result = new Quarter(LAST_QUARTER, this.year - 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar in structure and logic but differ in specific variable names, constants, and class references.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the time period adjacent to the current one based on the given parameters.
 *
 * @param currentValue  the current value (e.g., month or quarter).
 * @param minValue      the minimum value (e.g., 1 for January or Q1).
 * @param maxValue      the maximum value (e.g., 12 for December or Q4).
 * @param currentYear   the current year.
 * @param minYear       the minimum year (e.g., 1900).
 * @param maxYear       the maximum year (e.g., 9999).
 * @param createPeriod  a factory method to create the new time period.
 * @param increment     whether to increment (true) or decrement (false) the value.
 * @return The adjacent time period or null if the boundary is reached.
 */
protected static <T extends RegularTimePeriod> T getAdjacentPeriod(
        int currentValue, int minValue, int maxValue, int currentYear, int minYear, int maxYear,
        BiFunction<Integer, Integer, T> createPeriod, boolean increment) {
    if (increment) {
        if (currentValue != maxValue) {
            return createPeriod.apply(currentValue + 1, currentYear);
        } else if (currentYear < maxYear) {
            return createPeriod.apply(minValue, currentYear + 1);
        }
    } else {
        if (currentValue != minValue) {
            return createPeriod.apply(currentValue - 1, currentYear);
        } else if (currentYear > minYear) {
            return createPeriod.apply(maxValue, currentYear - 1);
        }
    }
    return null;
}
```

---

### 2. Refactored `next` Method in `Month` Class
```java
/**
 * Returns the month following this one.
 *
 * @return The month following this one.
 */
@Override
public RegularTimePeriod next() {
    return getAdjacentPeriod(
        this.month, MonthConstants.JANUARY, MonthConstants.DECEMBER, this.year, 1900, 9999,
        Month::new, true
    );
}
```

---

### 3. Refactored `previous` Method in `Quarter` Class
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
@Override
public RegularTimePeriod previous() {
    return getAdjacentPeriod(
        this.quarter, FIRST_QUARTER, LAST_QUARTER, this.year, 1900, 9999,
        Quarter::new, false
    );
}
```",Type-3
876-1-2,src,org.jfree.data.time,Month,next,249,262,src,org.jfree.data.time,Quarter,previous,246,259,Type 3,"### Code Snippet 1: `next` method from `Month` class
```java
/**
 * Returns the month following this one.
 *
 * @return The month following this one.
 */
public RegularTimePeriod next() {
    Month result;
    if (this.month != MonthConstants.DECEMBER) {
        result = new Month(this.month + 1, this.year);
    }
    else {
        if (this.year < 9999) {
            result = new Month(MonthConstants.JANUARY, this.year + 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

---

### Code Snippet 2: `previous` method from `Quarter` class
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
public RegularTimePeriod previous() {
    Quarter result;
    if (this.quarter > FIRST_QUARTER) {
        result = new Quarter(this.quarter - 1, this.year);
    }
    else {
        if (this.year > 1900) {
            result = new Quarter(LAST_QUARTER, this.year - 1);
        }
        else {
            result = null;
        }
    }
    return result;
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the handling of months vs. quarters, constants used, and the specific logic for transitioning between years.","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the time period adjacent to this one based on the given parameters.
 *
 * @param currentValue  the current value (e.g., month or quarter).
 * @param minValue      the minimum value (e.g., 1 for January or Q1).
 * @param maxValue      the maximum value (e.g., 12 for December or Q4).
 * @param currentYear   the current year.
 * @param minYear       the minimum year (e.g., 1900).
 * @param maxYear       the maximum year (e.g., 9999).
 * @param createPeriod  a factory method to create the new time period.
 * @param isNext        true if calculating the next period, false for the previous.
 * @return The adjacent time period or null if it doesn't exist.
 */
protected static RegularTimePeriod getAdjacentPeriod(
    int currentValue, int minValue, int maxValue, int currentYear, int minYear, int maxYear,
    BiFunction<Integer, Integer, RegularTimePeriod> createPeriod, boolean isNext
) {
    RegularTimePeriod result;
    if (isNext) {
        if (currentValue != maxValue) {
            result = createPeriod.apply(currentValue + 1, currentYear);
        } else {
            if (currentYear < maxYear) {
                result = createPeriod.apply(minValue, currentYear + 1);
            } else {
                result = null;
            }
        }
    } else {
        if (currentValue != minValue) {
            result = createPeriod.apply(currentValue - 1, currentYear);
        } else {
            if (currentYear > minYear) {
                result = createPeriod.apply(maxValue, currentYear - 1);
            } else {
                result = null;
            }
        }
    }
    return result;
}
```

---

### 2. Refactored `next` Method in `Month` Class
```java
/**
 * Returns the month following this one.
 *
 * @return The month following this one.
 */
@Override
public RegularTimePeriod next() {
    return getAdjacentPeriod(
        this.month, MonthConstants.JANUARY, MonthConstants.DECEMBER, this.year, 1900, 9999,
        Month::new, true
    );
}
```

---

### 3. Refactored `previous` Method in `Quarter` Class
```java
/**
 * Returns the quarter preceding this one.
 *
 * @return The quarter preceding this one (or <code>null</code> if this is 
 *     Q1 1900).
 */
@Override
public RegularTimePeriod previous() {
    return getAdjacentPeriod(
        this.quarter, FIRST_QUARTER, LAST_QUARTER, this.year, 1900, 9999,
        Quarter::new, false
    );
}
```",Type-3
877-1-2,src,org.jfree.chart.axis,DateTick,equals,92,103,src,org.jfree.chart.block,ColorBlock,equals,147,158,Type 3,"### Code Snippet 1 (DateTick.java, lines 92-103):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DateTick && super.equals(obj)) {
        DateTick dt = (DateTick) obj;
        if (!ObjectUtilities.equal(this.date, dt.date)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (ColorBlock.java, lines 147-158):
```java
/**
 * Tests this block for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ColorBlock)) {
        return false;
    }
    ColorBlock that = (ColorBlock) obj;
    if (!PaintUtilities.equal(this.paint, that.paint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `ObjectUtilities.equal(this.date, dt.date)` vs. `PaintUtilities.equal(this.paint, that.paint)` and the class-specific checks for `DateTick` and `ColorBlock`).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the expected class of the object.
 * @param equalityCheck  the equality check for instance-specific fields.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, EqualityCheck equalityCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    if (!super.equals(obj)) {
        return false;
    }
    return equalityCheck.check(obj);
}

/**
 * Functional interface for instance-specific equality checks.
 */
@FunctionalInterface
protected interface EqualityCheck {
    boolean check(Object obj);
}
```

---

### 2. Refactored `equals` Method in `DateTick.java`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DateTick.class, other -> {
        DateTick dt = (DateTick) other;
        return ObjectUtilities.equal(this.date, dt.date);
    });
}
```

---

### 3. Refactored `equals` Method in `ColorBlock.java`:
```java
/**
 * Tests this block for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, ColorBlock.class, other -> {
        ColorBlock that = (ColorBlock) other;
        return PaintUtilities.equal(this.paint, that.paint);
    });
}
```",Type-3
877-1-3,src,org.jfree.chart.axis,DateTick,equals,92,103,src,org.jfree.chart.entity,CategoryLabelEntity,equals,90,101,Type 3,"### Code Snippet 1 (DateTick.java)
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DateTick && super.equals(obj)) {
        DateTick dt = (DateTick) obj;
        if (!ObjectUtilities.equal(this.date, dt.date)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (CategoryLabelEntity.java)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof CategoryLabelEntity)) {
        return false;
    }
    CategoryLabelEntity that = (CategoryLabelEntity) obj;
    if (!ObjectUtilities.equal(this.key, that.key)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `DateTick` vs. `CategoryLabelEntity`, `this.date` vs. `this.key`, and the order of `super.equals(obj)` calls).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check.
 * @param key1  the key of this instance.
 * @param key2  the key of the other instance.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object key1, Object key2) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    if (!ObjectUtilities.equal(key1, key2)) {
        return false;
    }
    return super.equals(obj);
}
```

---

### 2. Refactored Method Calls

#### In `DateTick.java`
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, DateTick.class, this.date, ((DateTick) obj).date);
}
```

---

#### In `CategoryLabelEntity.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return equalsHelper(obj, CategoryLabelEntity.class, this.key, ((CategoryLabelEntity) obj).key);
}
```",Type-3
877-1-4,src,org.jfree.chart.axis,DateTick,equals,92,103,src,org.jfree.chart.renderer.category,StatisticalLineAndShapeRenderer,equals,348,361,Type 3,"### Code Snippet 1 (DateTick.java, lines 92-103):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DateTick && super.equals(obj)) {
        DateTick dt = (DateTick) obj;
        if (!ObjectUtilities.equal(this.date, dt.date)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (StatisticalLineAndShapeRenderer.java, lines 348-361):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof StatisticalLineAndShapeRenderer)) {
        return false;
    }
    StatisticalLineAndShapeRenderer that
            = (StatisticalLineAndShapeRenderer) obj;
    if (!PaintUtilities.equal(this.errorIndicatorPaint,
            that.errorIndicatorPaint)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the use of `ObjectUtilities.equal` vs. `PaintUtilities.equal`, and the specific class checks like `DateTick` vs. `StatisticalLineAndShapeRenderer`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param superEqualsResult  the result of the superclass's equals method.
 * @param field1  the first field to compare.
 * @param field2  the second field to compare.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEqualsResult, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj) || !superEqualsResult) {
        return false;
    }
    return ObjectUtilities.equal(field1, field2);
}
```

---

### 2. Refactored `equals` Method in `DateTick.java`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DateTick.class, super.equals(obj), this.date, ((DateTick) obj).date);
}
```

---

### 3. Refactored `equals` Method in `StatisticalLineAndShapeRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, StatisticalLineAndShapeRenderer.class, super.equals(obj), this.errorIndicatorPaint, ((StatisticalLineAndShapeRenderer) obj).errorIndicatorPaint);
}
```",Type-3
877-1-5,src,org.jfree.chart.axis,DateTick,equals,92,103,src,org.jfree.chart.renderer.xy,YIntervalRenderer,equals,312,324,Type 3,"### Code Snippet 1 (DateTick.java, lines 92-103):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DateTick && super.equals(obj)) {
        DateTick dt = (DateTick) obj;
        if (!ObjectUtilities.equal(this.date, dt.date)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (YIntervalRenderer.java, lines 312-324):
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof YIntervalRenderer)) {
        return false;
    }
    YIntervalRenderer that = (YIntervalRenderer) obj;
    if (!ObjectUtilities.equal(this.additionalItemLabelGenerator,
            that.additionalItemLabelGenerator)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks, field comparisons, and the specific fields being compared).","### 1. Extracted Method (To be placed in the common superclass, e.g., `ValueTick`):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param superEquals  the result of the superclass's equals method.
 * @param field1  the first field to compare.
 * @param field2  the second field to compare.
 * 
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> clazz, boolean superEquals, Object field1, Object field2) {
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj) && superEquals) {
        return ObjectUtilities.equal(field1, field2);
    }
    return false;
}
```

### 2. Refactored `equals` Method in `DateTick.java`:
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, DateTick.class, super.equals(obj), this.date, ((DateTick) obj).date);
}
```

### 3. Refactored `equals` Method in `YIntervalRenderer.java`:
```java
/**
 * Tests this renderer for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return equalsHelper(obj, YIntervalRenderer.class, super.equals(obj), 
            this.additionalItemLabelGenerator, ((YIntervalRenderer) obj).additionalItemLabelGenerator);
}
```",Type-3
877-1-6,src,org.jfree.chart.axis,DateTick,equals,92,103,src,org.jfree.chart.title,ImageTitle,equals,351,362,Type 3,"### Code Snippet 1 (DateTick.java, lines 92-103):
```java
/**
 * Tests this tick for equality with an arbitrary object.
 * 
 * @param obj  the object to test (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DateTick && super.equals(obj)) {
        DateTick dt = (DateTick) obj;
        if (!ObjectUtilities.equal(this.date, dt.date)) {
            return false;   
        }
        return true;
    }
    return false;
}
```

### Code Snippet 2 (ImageTitle.java, lines 351-362):
```java
/**
 * Tests this <code>ImageTitle</code> for equality with an arbitrary
 * object.  Returns <code>true</code> if:
 * <ul>
 * <li><code>obj</code> is an instance of <code>ImageTitle</code>;
 * <li><code>obj</code> references the same image as this
 *     <code>ImageTitle</code>;
 * <li><code>super.equals(obj)<code> returns <code>true</code>;
 * </ul>
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof ImageTitle)) {
        return false;
    }
    ImageTitle that = (ImageTitle) obj;
    if (!ObjectUtilities.equal(this.image, that.image)) {
        return false;
    }
    return super.equals(obj);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `DateTick` vs. `ImageTitle`, `this.date` vs. `this.image`, and the class-specific checks).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check against.
 * @param instanceField  the instance-specific field to compare.
 * @return A boolean.
 */
protected boolean equalsHelper(Object obj, Class<?> instanceClass, Object instanceField) {
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj) && super.equals(obj)) {
        Object otherField = null;
        try {
            otherField = instanceClass.getDeclaredField(""date"").get(obj);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            try {
                otherField = instanceClass.getDeclaredField(""image"").get(obj);
            } catch (NoSuchFieldException | IllegalAccessException e) {
                throw new RuntimeException(""Field access error"", e);
            }
        }
    }
}
",Type-3
938-1-2,src,org.jfree.chart,ChartRenderingInfo,clone,217,226,src,org.jfree.chart.plot,Plot,clone,1249,1261,Type 3,"### Code Snippet 1 (from `ChartRenderingInfo` class, lines 217-226):
```java
/**
 * Returns a clone of this object.
 * 
 * @return A clone.
 * 
 * @throws CloneNotSupportedException if the object cannot be cloned.
 */
public Object clone() throws CloneNotSupportedException {
    ChartRenderingInfo clone = (ChartRenderingInfo) super.clone();
    if (this.chartArea != null) {
        clone.chartArea = (Rectangle2D) this.chartArea.clone();
    }
    if (this.entities instanceof PublicCloneable) {
        PublicCloneable pc = (PublicCloneable) this.entities;
        clone.entities = (EntityCollection) pc.clone();
    }
    return clone;
}
```

### Code Snippet 2 (from `Plot` class, lines 1249-1261):
```java
/**
 * Creates a clone of the plot.
 *
 * @return A clone.
 *
 * @throws CloneNotSupportedException if some component of the plot does not
 *         support cloning.
 */
public Object clone() throws CloneNotSupportedException {
    Plot clone = (Plot) super.clone();
    // private Plot parent <-- don't clone the parent plot, but take care
    // childs in combined plots instead
    if (this.datasetGroup != null) {
        clone.datasetGroup
            = (DatasetGroup) ObjectUtilities.clone(this.datasetGroup);
    }
    clone.drawingSupplier
        = (DrawingSupplier) ObjectUtilities.clone(this.drawingSupplier);
    clone.listenerList = new EventListenerList();
    return clone;
}
```

### Clone Type:
The two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements and logic.","### 1. Extracted Method (to be placed in the common superclass, e.g., `BaseCloneable`):
```java
/**
 * Creates a clone of the object with specified parameters.
 *
 * @param original  the original object to clone.
 * @param chartArea the chart area to clone (can be null).
 * @param entities  the entity collection to clone (can be null).
 * @param datasetGroup the dataset group to clone (can be null).
 * @param drawingSupplier the drawing supplier to clone (can be null).
 * @param listenerList the listener list to initialize.
 * @return A clone of the object.
 * @throws CloneNotSupportedException if cloning is not supported.
 */
protected static Object createClone(Object original, Rectangle2D chartArea, 
        PublicCloneable entities, DatasetGroup datasetGroup, 
        DrawingSupplier drawingSupplier, EventListenerList listenerList) 
        throws CloneNotSupportedException {
    Object clone = original.getClass().cast(original.getClass().getSuperclass().getDeclaredMethod(""clone"").invoke(original));
    if (chartArea != null) {
        ((ChartRenderingInfo) clone).chartArea = (Rectangle2D) chartArea.clone();
    }
    if (entities != null) {
        ((ChartRenderingInfo) clone).entities = (EntityCollection) entities.clone();
    }
    if (datasetGroup != null) {
        ((Plot) clone).datasetGroup = (DatasetGroup) ObjectUtilities.clone(datasetGroup);
    }
    if (drawingSupplier != null) {
        ((Plot) clone).drawingSupplier = (DrawingSupplier) ObjectUtilities.clone(drawingSupplier);
    }
    if (listenerList != null) {
        ((Plot) clone).listenerList = new EventListenerList();
    }
    return clone;
}
```

### 2. Refactored Method Calls:

#### In `ChartRenderingInfo` class:
```java
/**
 * Returns a clone of this object.
 * 
 * @return A clone.
 * 
 * @throws CloneNotSupportedException if the object cannot be cloned.
 */
public Object clone() throws CloneNotSupportedException {
    return createClone(this, this.chartArea, 
        (this.entities instanceof PublicCloneable) ? (PublicCloneable) this.entities : null, 
        null, null, null);
}
```

#### In `Plot` class:
```java
/**
 * Creates a clone of the plot.
 *
 * @return A clone.
 *
 * @throws CloneNotSupportedException if some component of the plot does not
 *         support cloning.
 */
public Object clone() throws CloneNotSupportedException {
    return createClone(this, null, null, this.datasetGroup, this.drawingSupplier, new EventListenerList());
}
```",Type-3
1046-1-3,src,org.jfree.chart.plot,XYPlot,getDomainAxisIndex,3943,3953,src,org.jfree.chart.urls,CustomPieURLGenerator,getURL,132,140,Type 3,"### Code Snippet 1: `getDomainAxisIndex` (XYPlot.java)
```java
/**
 * Returns the index of the given domain axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getRangeAxisIndex(ValueAxis)
 */
public int getDomainAxisIndex(ValueAxis axis) {
    int result = this.domainAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getDomainAxisIndex(axis);
        }
    }
    return result;
}
```

### Code Snippet 2: `getURL` (CustomPieURLGenerator.java)
```java
/**
 * Returns the URL for a section in the specified map.
 * 
 * @param key  the key.
 * @param mapIndex  the map index.
 * 
 * @return The URL.
 */    
public String getURL(Comparable key, int mapIndex) {
    String result = null;
    if (mapIndex < getListCount()) {
        Map urlMap = (Map) this.urls.get(mapIndex);
        if (urlMap != null) {
            result = (String) urlMap.get(key);
        }
    }
    return result;
}
```

### Clone Types:
1. **`getDomainAxisIndex`**: **Type-3 Clone**  
   - The code is mostly similar but contains some different statements (e.g., handling parent plot and type casting).

2. **`getURL`**: **Type-1 Clone**  
   - The code is identical except for minor differences in variable names and context.","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Returns the result of searching for a key in a list or map.
 *
 * @param key  the key to search for.
 * @param index  the index to check.
 * @param list  the list or map to search in.
 * @param parentResolver  a resolver for parent objects (can be null).
 * @return The result of the search.
 */
protected <T, R> R getValueFromListOrMap(T key, int index, List<?> list, Function<T, R> parentResolver) {
    R result = null;
    if (index < list.size()) {
        Object element = list.get(index);
        if (element instanceof Map) {
            result = (R) ((Map<?, ?>) element).get(key);
        }
    }
    if (result == null && parentResolver != null) {
        result = parentResolver.apply(key);
    }
    return result;
}
```

---

### 2. Refactored `getDomainAxisIndex` (XYPlot.java)
```java
/**
 * Returns the index of the given domain axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getRangeAxisIndex(ValueAxis)
 */
public int getDomainAxisIndex(ValueAxis axis) {
    return getValueFromListOrMap(axis, 0, this.domainAxes, key -> {
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            return ((XYPlot) parent).getDomainAxisIndex(key);
        }
        return -1;
    });
}
```

---

### 3. Refactored `getURL` (CustomPieURLGenerator.java)
```java
/**
 * Returns the URL for a section in the specified map.
 * 
 * @param key  the key.
 * @param mapIndex  the map index.
 * 
 * @return The URL.
 */    
public String getURL(Comparable key, int mapIndex) {
    return getValueFromListOrMap(key, mapIndex, this.urls, null);
}
```",Type-3
1046-2-3,src,org.jfree.chart.plot,XYPlot,getRangeAxisIndex,3965,3975,src,org.jfree.chart.urls,CustomPieURLGenerator,getURL,132,140,Type 3,"### Code Snippet 1: `getRangeAxisIndex` Method (Lines 3965-3975 in `XYPlot.java`)

```java
/**
 * Returns the index of the given range axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getDomainAxisIndex(ValueAxis)
 */
public int getRangeAxisIndex(ValueAxis axis) {
    int result = this.rangeAxes.indexOf(axis);
    if (result < 0) {
        // try the parent plot
        Plot parent = getParent();
        if (parent instanceof XYPlot) {
            XYPlot p = (XYPlot) parent;
            result = p.getRangeAxisIndex(axis);
        }
    }
    return result;
}
```

**Clone Type:** Type-1 Clone (Identical except for whitespace, comments, and layout)

---

### Code Snippet 2: `getURL` Method (Lines 132-140 in `CustomPieURLGenerator.java`)

```java
/**
 * Returns the URL for a section in the specified map.
 * 
 * @param key  the key.
 * @param mapIndex  the map index.
 * 
 * @return The URL.
 */    
public String getURL(Comparable key, int mapIndex) {
    String result = null;
    if (mapIndex < getListCount()) {
        Map urlMap = (Map) this.urls.get(mapIndex);
        if (urlMap != null) {
            result = (String) urlMap.get(key);
        }
    }
    return result;
}
```

**Clone Type:** Type-2 Clone (Identical except for variable names, literals, and types)","### 1. Extracted Method (To be placed in the common superclass)

```java
/**
 * Returns the index of the given object in the specified list. If not found, 
 * attempts to retrieve it from the parent object if it is an instance of the specified class.
 *
 * @param list  the list to search.
 * @param obj  the object to find.
 * @param parent  the parent object.
 * @param parentClass  the class of the parent object.
 * @param parentMethod  the method to call on the parent object to retrieve the index.
 * @return The index of the object, or -1 if not found.
 */
protected int getIndexFromListOrParent(List<?> list, Object obj, Object parent, Class<?> parentClass, String parentMethod) {
    int result = list.indexOf(obj);
    if (result < 0 && parentClass.isInstance(parent)) {
        try {
            Object parentInstance = parentClass.cast(parent);
            result = (int) parentClass.getMethod(parentMethod, obj.getClass()).invoke(parentInstance, obj);
        } catch (Exception e) {
            throw new RuntimeException(""Error invoking method on parent object"", e);
        }
    }
    return result;
}
```

---

### 2. Refactored `getRangeAxisIndex` Method in `XYPlot.java`

```java
/**
 * Returns the index of the given range axis.
 *
 * @param axis  the axis.
 *
 * @return The axis index.
 *
 * @see #getDomainAxisIndex(ValueAxis)
 */
public int getRangeAxisIndex(ValueAxis axis) {
    return getIndexFromListOrParent(this.rangeAxes, axis, getParent(), XYPlot.class, ""getRangeAxisIndex"");
}
```

---

### 3. Refactored `getURL` Method in `CustomPieURLGenerator.java`

```java
/**
 * Returns the URL for a section in the specified map.
 * 
 * @param key  the key.
 * @param mapIndex  the map index.
 * 
 * @return The URL.
 */    
public String getURL(Comparable key, int mapIndex) {
    return (String) getIndexFromListOrParent(this.urls, key, null, Map.class, ""get"");
}
```",Type-1
1097-1-2,src,org.jfree.data.gantt,TaskSeries,get,139,149,src,org.jfree.data.gantt,TaskSeriesCollection,getRowIndex,217,227,Type 3,"### Code Snippet 1 (Method `get` in `TaskSeries` class):
```java
/**
 * Returns the task in the series that has the specified description.
 *
 * @param description  the name (<code>null</code> not permitted).
 *
 * @return The task (possibly <code>null</code>).
 */
public Task get(String description) {
    Task result = null;
    int count = this.tasks.size();
    for (int i = 0; i < count; i++) {
        Task t = (Task) this.tasks.get(i);
        if (t.getDescription().equals(description)) {
            result = t;
            break;
        }
    }
    return result;
}
```

---

### Code Snippet 2 (Method `getRowIndex` in `TaskSeriesCollection` class):
```java
/**
 * Returns the row index for the given row key.
 *
 * @param rowKey  the row key.
 *
 * @return The index.
 */
public int getRowIndex(Comparable rowKey) {
    int result = -1;
    int count = this.data.size();
    for (int i = 0; i < count; i++) {
        TaskSeries s = (TaskSeries) this.data.get(i);
        if (s.getKey().equals(rowKey)) {
            result = i;
            break;
        }
    }
    return result;
}
```

---

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but have some different statements (e.g., variable names, object types, and method calls).","### 1. Extracted Method (To be placed in the common superclass, e.g., `Series`):
```java
/**
 * Searches for an object in a list based on a key and returns its index or the object itself.
 *
 * @param list  the list to search (not <code>null</code>).
 * @param key   the key to match (not <code>null</code>).
 * @param keyExtractor  a function to extract the key from the object.
 * @param <T>   the type of objects in the list.
 * @return The matching object or index (-1 if not found).
 */
protected static <T> Object findInList(List<T> list, Object key, java.util.function.Function<T, Object> keyExtractor, boolean returnIndex) {
    for (int i = 0; i < list.size(); i++) {
        T item = list.get(i);
        if (keyExtractor.apply(item).equals(key)) {
            return returnIndex ? i : item;
        }
    }
    return returnIndex ? -1 : null;
}
```

---

### 2. Refactored Method Call in `TaskSeries` Class:
```java
/**
 * Returns the task in the series that has the specified description.
 *
 * @param description  the name (<code>null</code> not permitted).
 *
 * @return The task (possibly <code>null</code>).
 */
public Task get(String description) {
    return (Task) findInList(this.tasks, description, task -> ((Task) task).getDescription(), false);
}
```

---

### 3. Refactored Method Call in `TaskSeriesCollection` Class:
```java
/**
 * Returns the row index for the given row key.
 *
 * @param rowKey  the row key.
 *
 * @return The index.
 */
public int getRowIndex(Comparable rowKey) {
    return (int) findInList(this.data, rowKey, series -> ((TaskSeries) series).getKey(), true);
}
```",Type-3
1118-1-3,src,org.jfree.data,DataUtilities,calculateColumnTotal,64,73,src,org.jfree.data.general,DatasetUtilities,calculateStackTotal,1592,1601,Type 3,"```java
// Code Snippet 1: calculateColumnTotal
public static double calculateColumnTotal(Values2D data, int column) {
    double total = 0.0;
    int rowCount = data.getRowCount();
    for (int r = 0; r < rowCount; r++) {
        Number n = data.getValue(r, column);
        if (n != null) {
            total += n.doubleValue();   
        }
    }
    return total;
}
```

```java
// Code Snippet 2: calculateStackTotal
public static double calculateStackTotal(TableXYDataset dataset, int item) {
    double total = 0.0;
    int seriesCount = dataset.getSeriesCount();
    for (int s = 0; s < seriesCount; s++) {
        double value = dataset.getYValue(s, item);
        if (!Double.isNaN(value)) {
            total = total + value;
        }
    }
    return total;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted Method (to be placed in the common superclass)
protected static double calculateTotal(int count, ValueProvider provider) {
    double total = 0.0;
    for (int i = 0; i < count; i++) {
        Number value = provider.getValue(i);
        if (value != null && !(value instanceof Double && Double.isNaN(value.doubleValue()))) {
            total += value.doubleValue();
        }
    }
    return total;
}

// Functional Interface for ValueProvider
@FunctionalInterface
protected interface ValueProvider {
    Number getValue(int index);
}
```

```java
// 2. Refactored calculateColumnTotal in DataUtilities.java
public static double calculateColumnTotal(Values2D data, int column) {
    return calculateTotal(data.getRowCount(), rowIndex -> data.getValue(rowIndex, column));
}
```

```java
// 2. Refactored calculateStackTotal in DatasetUtilities.java
public static double calculateStackTotal(TableXYDataset dataset, int item) {
    return calculateTotal(dataset.getSeriesCount(), seriesIndex -> dataset.getYValue(seriesIndex, item));
}
```",Type-3
1118-2-3,src,org.jfree.data,DataUtilities,calculateRowTotal,85,94,src,org.jfree.data.general,DatasetUtilities,calculateStackTotal,1592,1601,Type 3,"```java
// Code Snippet 1: calculateRowTotal
public static double calculateRowTotal(Values2D data, int row) {
    double total = 0.0;
    int columnCount = data.getColumnCount();
    for (int c = 0; c < columnCount; c++) {
        Number n = data.getValue(row, c);
        if (n != null) {
            total += n.doubleValue();   
        }
    }
    return total;
}
```

```java
// Code Snippet 2: calculateStackTotal
public static double calculateStackTotal(TableXYDataset dataset, int item) {
    double total = 0.0;
    int seriesCount = dataset.getSeriesCount();
    for (int s = 0; s < seriesCount; s++) {
        double value = dataset.getYValue(s, item);
        if (!Double.isNaN(value)) {
            total = total + value;
        }
    }
    return total;
}
```

**Clone Type:** Type-3 (Mostly similar but with some different statements).","```java
// 1. Extracted Method (to be placed in the common superclass)
protected static double calculateTotal(int count, ValueProvider provider) {
    double total = 0.0;
    for (int i = 0; i < count; i++) {
        Number value = provider.getValue(i);
        if (value != null && !(value instanceof Double && Double.isNaN(value.doubleValue()))) {
            total += value.doubleValue();
        }
    }
    return total;
}

// Functional interface for value retrieval
@FunctionalInterface
protected interface ValueProvider {
    Number getValue(int index);
}
```

```java
// 2. Refactored calculateRowTotal in DataUtilities.java
public static double calculateRowTotal(Values2D data, int row) {
    return calculateTotal(data.getColumnCount(), c -> data.getValue(row, c));
}
```

```java
// 3. Refactored calculateStackTotal in DatasetUtilities.java
public static double calculateStackTotal(TableXYDataset dataset, int item) {
    return calculateTotal(dataset.getSeriesCount(), s -> dataset.getYValue(s, item));
}
```",Type-3
1133-1-2,src,org.jfree.chart.axis,TickUnits,equals,199,207,src,org.jfree.chart.entity,StandardEntityCollection,equals,176,184,Type 3,"### Code Snippet 1 (from `TickUnits` class, `equals` method):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnits)) {
        return false;
    }
    TickUnits that = (TickUnits) obj;
    return that.tickUnits.equals(this.tickUnits);
}
```

### Code Snippet 2 (from `StandardEntityCollection` class, `equals` method):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof StandardEntityCollection) {
        StandardEntityCollection that = (StandardEntityCollection) obj;
        return ObjectUtilities.equal(this.entities, that.entities);
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `ObjectUtilities.equal` vs. `.equals`, class-specific checks, and field names).","### 1. Extracted Method (to be placed in the common superclass):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class to check the object against.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""entities"").get(obj);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    return field.equals(thatField);
}
```

### 2. Refactored `equals` Method Calls:

#### In `TickUnits` class:
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TickUnits.class, this.tickUnits);
}
```

#### In `StandardEntityCollection` class:
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, StandardEntityCollection.class, this.entities);
}
```",Type-3
1133-1-4,src,org.jfree.chart.axis,TickUnits,equals,199,207,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,Type 3,"### Code Snippet 1 (TickUnits.java, lines 199-207)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnits)) {
        return false;
    }
    TickUnits that = (TickUnits) obj;
    return that.tickUnits.equals(this.tickUnits);
}
```

### Code Snippet 2 (DefaultValueDataset.java, lines 121-129)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., the use of `TickUnits` vs. `ValueDataset`, and the comparison logic).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param instanceClass  the class of the current instance.
 * @param instanceField  the field of the current instance to compare.
 * @param otherFieldGetter  the getter method to retrieve the field from the other object.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object instanceField, java.util.function.Function<Object, Object> otherFieldGetter) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    Object otherField = otherFieldGetter.apply(obj);
    return java.util.Objects.equals(instanceField, otherField);
}
```

---

### 2. Refactored Method Calls

#### TickUnits.java
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TickUnits.class, this.tickUnits, o -> ((TickUnits) o).tickUnits);
}
```

---

#### DefaultValueDataset.java
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, this.value, o -> ((ValueDataset) o).getValue());
}
```",Type-3
1133-1-5,src,org.jfree.chart.axis,TickUnits,equals,199,207,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,equals,890,899,Type 3,"### Code Snippet 1 (TickUnits.java, lines 199-207):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnits)) {
        return false;
    }
    TickUnits that = (TickUnits) obj;
    return that.tickUnits.equals(this.tickUnits);
}
```

### Code Snippet 2 (DefaultBoxAndWhiskerCategoryDataset.java, lines 890-899):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {
        DefaultBoxAndWhiskerCategoryDataset dataset 
                = (DefaultBoxAndWhiskerCategoryDataset) obj;
        return ObjectUtilities.equal(this.data, dataset.data);
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks and the equality logic for `tickUnits` vs. `data`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param dataField  the data field to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object dataField) {
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        Object otherDataField = null;
        try {
            otherDataField = clazz.getDeclaredField(""data"").get(obj);
        } catch (Exception e) {
            return false;
        }
        return dataField.equals(otherDataField);
    }
    return false;
}
```

---

### 2. Refactored Method Calls:

#### TickUnits.java:
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TickUnits.class, this.tickUnits);
}
```

---

#### DefaultBoxAndWhiskerCategoryDataset.java:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultBoxAndWhiskerCategoryDataset.class, this.data);
}
```",Type-3
1133-2-3,src,org.jfree.chart.entity,StandardEntityCollection,equals,176,184,src,org.jfree.chart.plot.dial,AbstractDialLayer,equals,110,118,Type 3,"### Code Snippet 1 (StandardEntityCollection.java, lines 176-184)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof StandardEntityCollection) {
        StandardEntityCollection that = (StandardEntityCollection) obj;
        return ObjectUtilities.equal(this.entities, that.entities);
    }
    return false;
}
```

### Code Snippet 2 (AbstractDialLayer.java, lines 110-118)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractDialLayer)) {
        return false;
    }
    AbstractDialLayer that = (AbstractDialLayer) obj;
    return this.visible == that.visible;
}
```

### Clone Type
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks and the comparison logic).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * @param clazz  the class to check the instance against.
 * @param equalityCheck  the equality check logic.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, EqualityChecker equalityCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return equalityCheck.checkEquality(obj);
}

/**
 * Functional interface for equality checking logic.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored Method Calls

#### In `StandardEntityCollection.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, StandardEntityCollection.class, other -> {
        StandardEntityCollection that = (StandardEntityCollection) other;
        return ObjectUtilities.equal(this.entities, that.entities);
    });
}
```

---

#### In `AbstractDialLayer.java`
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, AbstractDialLayer.class, other -> {
        AbstractDialLayer that = (AbstractDialLayer) other;
        return this.visible == that.visible;
    });
}
```",Type-3
1133-2-6,src,org.jfree.chart.entity,StandardEntityCollection,equals,176,184,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,equals,378,387,Type 3,"### Code Snippet 1 (StandardEntityCollection.java, lines 176-184):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof StandardEntityCollection) {
        StandardEntityCollection that = (StandardEntityCollection) obj;
        return ObjectUtilities.equal(this.entities, that.entities);
    }
    return false;
}
```

### Code Snippet 2 (DefaultMultiValueCategoryDataset.java, lines 378-387):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultMultiValueCategoryDataset)) {
        return false;
    }
    DefaultMultiValueCategoryDataset that 
            = (DefaultMultiValueCategoryDataset) obj;
    return this.data.equals(that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., class names, field names, and type checks).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param instanceClass  the class of the instance to check against.
 * @param field  the field to compare for equality.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, Object field) {
    if (obj == this) {
        return true;
    }
    if (instanceClass.isInstance(obj)) {
        Object thatField = null;
        try {
            thatField = instanceClass.getDeclaredField(""data"").get(obj);
        } catch (Exception e) {
            throw new RuntimeException(""Reflection error"",e);
        }
        return field.equals(thatField);
    }
    return false;
}
```

###",Type-3
1133-3-4,src,org.jfree.chart.plot.dial,AbstractDialLayer,equals,110,118,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,Type 3,"### Code Snippet 1 (AbstractDialLayer.java, lines 110-118):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractDialLayer)) {
        return false;
    }
    AbstractDialLayer that = (AbstractDialLayer) obj;
    return this.visible == that.visible;
}
```

### Code Snippet 2 (DefaultValueDataset.java, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., the type checks and the comparison logic).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param instanceClass  the class to check the instance against.
 * @param equalityCheck  the equality check logic.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> instanceClass, EqualityChecker equalityCheck) {
    if (obj == this) {
        return true;
    }
    if (!instanceClass.isInstance(obj)) {
        return false;
    }
    return equalityCheck.checkEquality(obj);
}

/**
 * Functional interface for equality checking logic.
 */
@FunctionalInterface
protected interface EqualityChecker {
    boolean checkEquality(Object obj);
}
```

---

### 2. Refactored `equals` Method in `AbstractDialLayer.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, AbstractDialLayer.class, other -> {
        AbstractDialLayer that = (AbstractDialLayer) other;
        return this.visible == that.visible;
    });
}
```

---

### 3. Refactored `equals` Method in `DefaultValueDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, other -> {
        ValueDataset vd = (ValueDataset) other;
        return ObjectUtilities.equal(this.value, vd.getValue());
    });
}
```",Type-3
1133-3-5,src,org.jfree.chart.plot.dial,AbstractDialLayer,equals,110,118,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,equals,890,899,Type 3,"### Code Snippet 1 (AbstractDialLayer.java, lines 110-118):
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof AbstractDialLayer)) {
        return false;
    }
    AbstractDialLayer that = (AbstractDialLayer) obj;
    return this.visible == that.visible;
}
```

### Code Snippet 2 (DefaultBoxAndWhiskerCategoryDataset.java, lines 890-899):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {
        DefaultBoxAndWhiskerCategoryDataset dataset 
                = (DefaultBoxAndWhiskerCategoryDataset) obj;
        return ObjectUtilities.equal(this.data, dataset.data);
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the comparison logic and the fields being compared).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests an instance for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class to check the instance type.
 * @param fieldEqualityCheck  a boolean indicating if the fields are equal.
 * 
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, boolean fieldEqualityCheck) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    return fieldEqualityCheck;
}
```

---

### 2. Refactored Code in `AbstractDialLayer.java`:
```java
/**
 * Tests this instance for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, AbstractDialLayer.class, this.visible == ((AbstractDialLayer) obj).visible);
}
```

---

### 3. Refactored Code in `DefaultBoxAndWhiskerCategoryDataset.java`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultBoxAndWhiskerCategoryDataset.class, 
            ObjectUtilities.equal(this.data, ((DefaultBoxAndWhiskerCategoryDataset) obj).data));
}
```",Type-3
1133-4-6,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,equals,378,387,Type 3,"### Code Snippet 1 (from `DefaultValueDataset` class, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (from `DefaultMultiValueCategoryDataset` class, lines 378-387):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultMultiValueCategoryDataset)) {
        return false;
    }
    DefaultMultiValueCategoryDataset that 
            = (DefaultMultiValueCategoryDataset) obj;
    return this.data.equals(that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., the type checks and the equality logic).","### 1. Extracted Method (to be placed in the common superclass `AbstractDataset`):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param dataToCompare  the data to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> expectedClass, Object dataToCompare) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    if (dataToCompare == null) {
        return true; // No specific data to compare, just type check.
    }
    if (dataToCompare instanceof KeyedObjects2D) {
        KeyedObjects2D thatData = ((DefaultMultiValueCategoryDataset) obj).data;
        return dataToCompare.equals(thatData);
    } else if (dataToCompare instanceof Number) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(dataToCompare, vd.getValue());
    }
    return false;
}
```

---

### 2. Refactored Method in `DefaultValueDataset`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, this.value);
}
```

---

### 3. Refactored Method in `DefaultMultiValueCategoryDataset`:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return isEqual(obj, DefaultMultiValueCategoryDataset.class, this.data);
}
```",Type-3
1133-5-6,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,equals,890,899,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,equals,378,387,Type 3,"### Code Snippet 1 (DefaultBoxAndWhiskerCategoryDataset.java, lines 890-899)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {
        DefaultBoxAndWhiskerCategoryDataset dataset 
                = (DefaultBoxAndWhiskerCategoryDataset) obj;
        return ObjectUtilities.equal(this.data, dataset.data);
    }
    return false;
}
```

### Code Snippet 2 (DefaultMultiValueCategoryDataset.java, lines 378-387)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultMultiValueCategoryDataset)) {
        return false;
    }
    DefaultMultiValueCategoryDataset that 
            = (DefaultMultiValueCategoryDataset) obj;
    return this.data.equals(that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of `ObjectUtilities.equal` in the first snippet and `this.data.equals` in the second snippet, as well as differences in the `instanceof` checks and return logic.","### 1. Extracted Method (To be placed in the common superclass `AbstractDataset`)
```java
/**
 * Tests two datasets for equality based on their data.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class type to check for.
 * @param data1  the data of the current dataset.
 * 
 * @return A boolean indicating whether the datasets are equal.
 */
protected boolean datasetsAreEqual(Object obj, Class<?> clazz, KeyedObjects2D data1) {
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        AbstractDataset dataset = (AbstractDataset) obj;
        return data1.equals(((DefaultBoxAndWhiskerCategoryDataset) dataset).data);
    }
    return false;
}
```

---

### 2. Refactored Method Calls (Replacing the clones in the original files)

#### In `DefaultBoxAndWhiskerCategoryDataset.java` (lines 890-899)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, DefaultBoxAndWhiskerCategoryDataset.class, this.data);
}
```

---

#### In `DefaultMultiValueCategoryDataset.java` (lines 378-387)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, DefaultMultiValueCategoryDataset.class, this.data);
}
```",Type-3
1162-1-2,src,org.jfree.chart.axis,TickUnits,equals,199,207,src,org.jfree.chart.entity,StandardEntityCollection,equals,176,184,Type 3,"### Code Snippet 1 (TickUnits.java, equals method, lines 199-207):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnits)) {
        return false;
    }
    TickUnits that = (TickUnits) obj;
    return that.tickUnits.equals(this.tickUnits);
}
```

### Code Snippet 2 (StandardEntityCollection.java, equals method, lines 176-184):
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof StandardEntityCollection) {
        StandardEntityCollection that = (StandardEntityCollection) obj;
        return ObjectUtilities.equal(this.entities, that.entities);
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `ObjectUtilities.equal` vs. `.equals`, class-specific checks, and field names).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class to check the object against.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""entities"").get(obj);
    } catch (Exception e) {
        return false;
    }
    return field.equals(thatField);
}
```

### 2. Refactored Method Calls:

#### TickUnits.java:
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj,TickUnits.class,",Type-3
1162-1-3,src,org.jfree.chart.axis,TickUnits,equals,199,207,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,Type 3,"### Code Snippet 1 (TickUnits.java, lines 199-207):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnits)) {
        return false;
    }
    TickUnits that = (TickUnits) obj;
    return that.tickUnits.equals(this.tickUnits);
}
```

### Code Snippet 2 (DefaultValueDataset.java, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., the type checks and the equality logic).","### 1. Extracted Method (To be placed in the common superclass, e.g., `AbstractDataset`):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param type  the expected type of the object.
 * @param value1  the first value to compare.
 * @param value2  the second value to compare.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> type, Object value1, Object value2) {
    if (obj == this) {
        return true;
    }
    if (type.isInstance(obj)) {
        return value1.equals(value2);
    }
    return false;
}
```

---

### 2. Refactored Method Calls:

#### TickUnits.java (lines 199-207):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TickUnits.class, this.tickUnits, ((TickUnits) obj).tickUnits);
}
```

---

#### DefaultValueDataset.java (lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, ValueDataset.class, this.value, ((ValueDataset) obj).getValue());
}
```",Type-3
1162-1-4,src,org.jfree.chart.axis,TickUnits,equals,199,207,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,equals,890,899,Type 3,"### Code Snippet 1 (TickUnits.java, lines 199-207):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof TickUnits)) {
        return false;
    }
    TickUnits that = (TickUnits) obj;
    return that.tickUnits.equals(this.tickUnits);
}
```

### Code Snippet 2 (DefaultBoxAndWhiskerCategoryDataset.java, lines 890-899):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {
        DefaultBoxAndWhiskerCategoryDataset dataset 
                = (DefaultBoxAndWhiskerCategoryDataset) obj;
        return ObjectUtilities.equal(this.data, dataset.data);
    }
    return false;
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., the class type checks and the equality logic for `tickUnits` vs. `data`).","### 1. Extracted Method (To be placed in the common superclass):
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 * @param clazz  the class to check the type of the object.
 * @param field  the field to compare for equality.
 *
 * @return A boolean.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (!clazz.isInstance(obj)) {
        return false;
    }
    Object thatField = null;
    try {
        thatField = clazz.getDeclaredField(""data"").get(obj);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
    return field.equals(thatField);
}
```

---

### 2. Refactored Method Calls:

#### TickUnits.java:
```java
/**
 * Tests an object for equality with this instance.
 *
 * @param obj  the object to test (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, TickUnits.class, this.tickUnits);
}
```

#### DefaultBoxAndWhiskerCategoryDataset.java:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultBoxAndWhiskerCategoryDataset.class, this.data);
}
```",Type-3
1162-2-5,src,org.jfree.chart.entity,StandardEntityCollection,equals,176,184,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,equals,378,387,Type 3,"### Code Snippet 1 (StandardEntityCollection.java, lines 176-184)
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof StandardEntityCollection) {
        StandardEntityCollection that = (StandardEntityCollection) obj;
        return ObjectUtilities.equal(this.entities, that.entities);
    }
    return false;
}
```

### Code Snippet 2 (DefaultMultiValueCategoryDataset.java, lines 378-387)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultMultiValueCategoryDataset)) {
        return false;
    }
    DefaultMultiValueCategoryDataset that 
            = (DefaultMultiValueCategoryDataset) obj;
    return this.data.equals(that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the class type checks (`StandardEntityCollection` vs. `DefaultMultiValueCategoryDataset`) and the specific fields being compared (`this.entities` vs. `this.data`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Tests two objects for equality based on a specific field.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class type to check.
 * @param field  the field to compare for equality.
 * 
 * @return A boolean indicating whether the objects are equal.
 */
protected boolean isEqual(Object obj, Class<?> clazz, Object field) {
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        Object thatField = clazz.cast(obj);
        return field.equals(thatField);
    }
    return false;
}
```

---

### 2. Refactored Method Calls

#### In `StandardEntityCollection.java`
```java
/**
 * Tests this object for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, StandardEntityCollection.class, this.entities);
}
```

---

#### In `DefaultMultiValueCategoryDataset.java`
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return isEqual(obj, DefaultMultiValueCategoryDataset.class, this.data);
}
```",Type-3
1162-3-5,src,org.jfree.data.general,DefaultValueDataset,equals,121,129,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,equals,378,387,Type 3,"### Code Snippet 1 (from `DefaultValueDataset` class, lines 121-129):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof ValueDataset) {
        ValueDataset vd = (ValueDataset) obj;
        return ObjectUtilities.equal(this.value, vd.getValue());
    }
    return false;
}
```

### Code Snippet 2 (from `DefaultMultiValueCategoryDataset` class, lines 378-387):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultMultiValueCategoryDataset)) {
        return false;
    }
    DefaultMultiValueCategoryDataset that 
            = (DefaultMultiValueCategoryDataset) obj;
    return this.data.equals(that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but contain some different statements (e.g., the type checks and the equality logic differ).","### 1. Extracted Method (to be placed in the common superclass `AbstractDataset`):
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 * @param expectedClass  the expected class of the object.
 * @param data  the data to compare for equality.
 * @return A boolean.
 */
protected boolean datasetEquals(Object obj, Class<?> expectedClass, Object data) {
    if (obj == this) {
        return true;
    }
    if (!expectedClass.isInstance(obj)) {
        return false;
    }
    if (data instanceof KeyedObjects2D) {
        KeyedObjects2D thisData = (KeyedObjects2D) data;
        KeyedObjects2D thatData = (KeyedObjects2D) ((DefaultMultiValueCategoryDataset) obj).data;
        return thisData.equals(thatData);
    } else if (data instanceof Number) {
        Number thisValue = (Number) data;
        Number thatValue = ((ValueDataset) obj).getValue();
        return ObjectUtilities.equal(thisValue, thatValue);
    }
    return false;
}
```

---

### 2. Refactored Method Calls:

#### In `DefaultValueDataset` class:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 *
 * @param obj  the object (<code>null</code> permitted).
 *
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return datasetEquals(obj, ValueDataset.class, this.value);
}
```

---

#### In `DefaultMultiValueCategoryDataset` class:
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
@Override
public boolean equals(Object obj) {
    return datasetEquals(obj, DefaultMultiValueCategoryDataset.class, this.data);
}
```",Type-3
1162-4-5,src,org.jfree.data.statistics,DefaultBoxAndWhiskerCategoryDataset,equals,890,899,src,org.jfree.data.statistics,DefaultMultiValueCategoryDataset,equals,378,387,Type 3,"### Code Snippet 1 (DefaultBoxAndWhiskerCategoryDataset.java, lines 890-899)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;   
    }
    if (obj instanceof DefaultBoxAndWhiskerCategoryDataset) {
        DefaultBoxAndWhiskerCategoryDataset dataset 
                = (DefaultBoxAndWhiskerCategoryDataset) obj;
        return ObjectUtilities.equal(this.data, dataset.data);
    }
    return false;
}
```

### Code Snippet 2 (DefaultMultiValueCategoryDataset.java, lines 378-387)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof DefaultMultiValueCategoryDataset)) {
        return false;
    }
    DefaultMultiValueCategoryDataset that 
            = (DefaultMultiValueCategoryDataset) obj;
    return this.data.equals(that.data);
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `ObjectUtilities.equal` vs. `this.data.equals`, and the class type checks differ).","### 1. Extracted Method (To be placed in the common superclass `AbstractDataset`)
```java
/**
 * Tests two datasets for equality based on their data.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * @param clazz  the class type to check against.
 * @param data1  the data of the current dataset.
 * 
 * @return A boolean indicating whether the datasets are equal.
 */
protected boolean datasetsAreEqual(Object obj, Class<?> clazz, Object data1) {
    if (obj == this) {
        return true;
    }
    if (clazz.isInstance(obj)) {
        AbstractDataset dataset = (AbstractDataset) obj;
        return data1.equals(((DefaultBoxAndWhiskerCategoryDataset) dataset).data);
    }
    return false;
}
```

---

### 2. Refactored Method Calls

#### In `DefaultBoxAndWhiskerCategoryDataset.java` (lines 890-899)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object to test against (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, DefaultBoxAndWhiskerCategoryDataset.class, this.data);
}
```

---

#### In `DefaultMultiValueCategoryDataset.java` (lines 378-387)
```java
/**
 * Tests this dataset for equality with an arbitrary object.
 * 
 * @param obj  the object (<code>null</code> permitted).
 * 
 * @return A boolean.
 */
public boolean equals(Object obj) {
    return datasetsAreEqual(obj, DefaultMultiValueCategoryDataset.class, this.data);
}
```",Type-3
1283-1-3,src,org.jfree.data.time,Day,getFirstMillisecond,318,326,src,org.jfree.data.time,Hour,getFirstMillisecond,315,322,Type 3,"### Code Snippet 1 (from `Day.java`):
```java
/**
 * Returns the first millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The start of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, 0, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

### Code Snippet 2 (from `Hour.java`):
```java
/**
 * Returns the first millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The first millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.serialDate` vs. `this.day`, and the addition of `this.hour` in the second snippet).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the first millisecond of the time period, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar to use (<code>null</code> not permitted).
 * @param year  the year.
 * @param month  the month (0-based).
 * @param day  the day of the month.
 * @param hour  the hour of the day.
 *
 * @return The start of the time period as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is <code>null</code>.
 */
protected long calculateFirstMillisecond(Calendar calendar, int year, int month, int day, int hour) {
    calendar.clear();
    calendar.set(year, month, day, hour, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### 2. Refactored Method Calls:

#### In `Day.java`:
```java
/**
 * Returns the first millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The start of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    return calculateFirstMillisecond(calendar, this.serialDate.getYYYY(), this.serialDate.getMonth() - 1, this.serialDate.getDayOfMonth(), 0);
}
```

---

#### In `Hour.java`:
```java
/**
 * Returns the first millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The first millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    return calculateFirstMillisecond(calendar, this.day.getYear(), this.day.getMonth() - 1, this.day.getDayOfMonth(), this.hour);
}
```",Type-3
1283-1-4,src,org.jfree.data.time,Day,getFirstMillisecond,318,326,src,org.jfree.data.time,Hour,getLastMillisecond,335,342,Type 3,"### Code Snippet 1: `getFirstMillisecond` from `Day.java`
```java
/**
 * Returns the first millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The start of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, 0, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### Code Snippet 2: `getLastMillisecond` from `Hour.java`
```java
/**
 * Returns the last millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The last millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `getFirstMillisecond` uses `0, 0, 0` for time, while `getLastMillisecond` uses `59, 59, 999`, and the field references differ slightly).","### 1. Extracted Method (To be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Returns the millisecond value (start or end) of a time period, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 * @param year      the year of the time period.
 * @param month     the month of the time period (0-based).
 * @param day       the day of the time period.
 * @param hour      the hour of the time period.
 * @param minute    the minute of the time period.
 * @param second    the second of the time period.
 * @param millisecond the millisecond of the time period.
 *
 * @return The millisecond value.
 *
 * @throws NullPointerException if <code>calendar</code> is <code>null</code>.
 */
protected long calculateMillisecond(Calendar calendar, int year, int month, int day, int hour, int minute, int second, int millisecond) {
    calendar.clear();
    calendar.set(year, month, day, hour, minute, second);
    calendar.set(Calendar.MILLISECOND, millisecond);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### 2. Refactored Method Calls

#### In `Day.java` (Replacing `getFirstMillisecond`)
```java
/**
 * Returns the first millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The start of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, this.serialDate.getYYYY(), this.serialDate.getMonth() - 1, this.serialDate.getDayOfMonth(), 0, 0, 0, 0);
}
```

---

#### In `Hour.java` (Replacing `getLastMillisecond`)
```java
/**
 * Returns the last millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The last millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    return calculateMillisecond(calendar, this.day.getYear(), this.day.getMonth() - 1, this.day.getDayOfMonth(), this.hour, 59, 59, 999);
}
```",Type-3
1283-2-3,src,org.jfree.data.time,Day,getLastMillisecond,340,348,src,org.jfree.data.time,Hour,getFirstMillisecond,315,322,Type 3,"### Code Snippet 1: `getLastMillisecond` from `Day.java`
```java
/**
 * Returns the last millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The end of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, 23, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### Code Snippet 2: `getFirstMillisecond` from `Hour.java`
```java
/**
 * Returns the first millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The first millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, 0, 0);
    calendar.set(Calendar.MILLISECOND, 0);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.serialDate` vs. `this.day`, `23, 59, 59` vs. `this.hour, 0, 0`, and `MILLISECOND` values).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`)
```java
/**
 * Calculates the millisecond value (start or end) of a time period.
 *
 * @param calendar  the calendar to use (<code>null</code> not permitted).
 * @param year  the year.
 * @param month  the month (0-based).
 * @param day  the day of the month.
 * @param hour  the hour of the day.
 * @param minute  the minute of the hour.
 * @param second  the second of the minute.
 * @param millisecond  the millisecond of the second.
 *
 * @return The calculated millisecond value.
 *
 * @throws NullPointerException if <code>calendar</code> is <code>null</code>.
 */
protected long calculateMillisecond(Calendar calendar, int year, int month, int day, int hour, int minute, int second, int millisecond) {
    calendar.clear();
    calendar.set(year, month, day, hour, minute, second);
    calendar.set(Calendar.MILLISECOND, millisecond);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### 2. Refactored Method in `Day.java`
```java
/**
 * Returns the last millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The end of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth() - 1;
    int day = this.serialDate.getDayOfMonth();
    return calculateMillisecond(calendar, year, month, day, 23, 59, 59, 999);
}
```

---

### 3. Refactored Method in `Hour.java`
```java
/**
 * Returns the first millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The first millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getFirstMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    return calculateMillisecond(calendar, year, month, dom, this.hour, 0, 0, 0);
}
```",Type-3
1283-2-4,src,org.jfree.data.time,Day,getLastMillisecond,340,348,src,org.jfree.data.time,Hour,getLastMillisecond,335,342,Type 3,"### Code Snippet 1 (from `Day.java`):
```java
/**
 * Returns the last millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The end of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    int year = this.serialDate.getYYYY();
    int month = this.serialDate.getMonth();
    int day = this.serialDate.getDayOfMonth();
    calendar.clear();
    calendar.set(year, month - 1, day, 23, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

### Code Snippet 2 (from `Hour.java`):
```java
/**
 * Returns the last millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The last millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    int year = this.day.getYear();
    int month = this.day.getMonth() - 1;
    int dom = this.day.getDayOfMonth();
    calendar.set(year, month, dom, this.hour, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements (e.g., `this.serialDate` vs. `this.day`, and the addition of `this.hour` in the second snippet).","### 1. Extracted Method (to be placed in the superclass `RegularTimePeriod`):
```java
/**
 * Returns the last millisecond of a time period, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 * @param year  the year of the time period.
 * @param month  the month of the time period (0-based).
 * @param day  the day of the time period.
 * @param hour  the hour of the time period (use 23 for end of day).
 *
 * @return The last millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
protected long calculateLastMillisecond(Calendar calendar, int year, int month, int day, int hour) {
    calendar.clear();
    calendar.set(year, month, day, hour, 59, 59);
    calendar.set(Calendar.MILLISECOND, 999);
    //return calendar.getTimeInMillis();  // this won't work for JDK 1.3
    return calendar.getTime().getTime();
}
```

---

### 2. Refactored Method in `Day.java`:
```java
/**
 * Returns the last millisecond of the day, evaluated using the supplied
 * calendar (which determines the time zone).
 *
 * @param calendar  calendar to use (<code>null</code> not permitted).
 *
 * @return The end of the day as milliseconds since 01-01-1970.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    return calculateLastMillisecond(calendar, this.serialDate.getYYYY(), this.serialDate.getMonth() - 1, this.serialDate.getDayOfMonth(), 23);
}
```

---

### 3. Refactored Method in `Hour.java`:
```java
/**
 * Returns the last millisecond of the hour.
 *
 * @param calendar  the calendar/timezone (<code>null</code> not permitted).
 *
 * @return The last millisecond.
 *
 * @throws NullPointerException if <code>calendar</code> is 
 *     <code>null</code>.
 */
public long getLastMillisecond(Calendar calendar) {
    return calculateLastMillisecond(calendar, this.day.getYear(), this.day.getMonth() - 1, this.day.getDayOfMonth(), this.hour);
}
```",Type-3
1294-1-2,src,org.jfree.chart.plot,XYPlot,indexOf,1334,1342,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getSeriesIndex,239,247,Type 3,"### Code Snippet 1: `indexOf` Method (XYPlot.java)
```java
/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */
public int indexOf(XYDataset dataset) {
    int result = -1;
    for (int i = 0; i < this.datasets.size(); i++) {
        if (dataset == this.datasets.get(i)) {
            result = i;
            break;
        }
    }
    return result;
}
```

### Code Snippet 2: `getSeriesIndex` Method (DefaultIntervalCategoryDataset.java)
```java
/**
 * Returns a series index.
 *
 * @param seriesKey  the series key.
 *
 * @return The series index.
 */
public int getSeriesIndex(Comparable seriesKey) {
    int result = -1;
    for (int i = 0; i < this.seriesKeys.length; i++) {
        if (seriesKey.equals(this.seriesKeys[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

### Clone Type:
These two code snippets are **Type-2 Clones** because they are structurally identical but differ in variable names (`dataset` vs. `seriesKey`, `datasets` vs. `seriesKeys`) and object types (`XYDataset` vs. `Comparable`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Returns the index of the specified key in the given array, or <code>-1</code> if the key is not found.
 *
 * @param keyArray  the array of keys (not <code>null</code>).
 * @param key  the key to search for (not <code>null</code>).
 *
 * @return The index of the key, or <code>-1</code> if not found.
 */
protected int findIndex(Object[] keyArray, Object key) {
    int result = -1;
    for (int i = 0; i < keyArray.length; i++) {
        if (key.equals(keyArray[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

---

### 2. Refactored `indexOf` Method (XYPlot.java)
```java
/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */
public int indexOf(XYDataset dataset) {
    return findIndex(this.datasets.toArray(), dataset);
}
```

---

### 3. Refactored `getSeriesIndex` Method (DefaultIntervalCategoryDataset.java)
```java
/**
 * Returns a series index.
 *
 * @param seriesKey  the series key.
 *
 * @return The series index.
 */
public int getSeriesIndex(Comparable seriesKey) {
    return findIndex(this.seriesKeys, seriesKey);
}
```",Type-2
1294-1-3,src,org.jfree.chart.plot,XYPlot,indexOf,1334,1342,src,org.jfree.data.category,DefaultIntervalCategoryDataset,getCategoryIndex,571,579,Type 3,"### Code Snippet 1: `indexOf` Method (XYPlot.java)
```java
/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */
public int indexOf(XYDataset dataset) {
    int result = -1;
    for (int i = 0; i < this.datasets.size(); i++) {
        if (dataset == this.datasets.get(i)) {
            result = i;
            break;
        }
    }
    return result;
}
```

### Code Snippet 2: `getCategoryIndex` Method (DefaultIntervalCategoryDataset.java)
```java
/**
 * Returns the index for the given category.
 *
 * @param category  the category (<code>null</code> not permitted).
 *
 * @return The index.
 */
public int getCategoryIndex(Comparable category) {
    int result = -1;
    for (int i = 0; i < this.categoryKeys.length; i++) {
        if (category.equals(this.categoryKeys[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

### Clone Type:
These two code snippets are **Type-2 Clones** because they are structurally identical but differ in variable names (`dataset` vs. `category`, `datasets` vs. `categoryKeys`) and types (`XYDataset` vs. `Comparable`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Returns the index of the specified key in the given array, or <code>-1</code> if the key is not found.
 *
 * @param keyArray  the array of keys (<code>null</code> not permitted).
 * @param key  the key to search for (<code>null</code> not permitted).
 *
 * @return The index of the key, or -1 if not found.
 */
protected int getIndex(Object[] keyArray, Object key) {
    int result = -1;
    for (int i = 0; i < keyArray.length; i++) {
        if (key.equals(keyArray[i])) {
            result = i;
            break;
        }
    }
    return result;
}
```

---

### 2. Refactored `indexOf` Method (XYPlot.java)
```java
/**
 * Returns the index of the specified dataset, or <code>-1</code> if the
 * dataset does not belong to the plot.
 *
 * @param dataset  the dataset (<code>null</code> not permitted).
 *
 * @return The index.
 */
public int indexOf(XYDataset dataset) {
    return getIndex(this.datasets.toArray(), dataset);
}
```

---

### 3. Refactored `getCategoryIndex` Method (DefaultIntervalCategoryDataset.java)
```java
/**
 * Returns the index for the given category.
 *
 * @param category  the category (<code>null</code> not permitted).
 *
 * @return The index.
 */
public int getCategoryIndex(Comparable category) {
    return getIndex(this.categoryKeys, category);
}
```",Type-2
1546-1-2,src,org.jfree.chart.block,ColorBlock,draw,117,123,src,org.jfree.chart.title,CompositeTitle,draw,130,135,Type 3,"### Code Snippet 1 (ColorBlock.java, method `draw`, lines 117-123):
```java
public void draw(Graphics2D g2, Rectangle2D area) {
    area = trimMargin(area);
    drawBorder(g2, area);
    area = trimBorder(area);
    area = trimPadding(area);
    g2.setPaint(this.paint);
    g2.fill(area);
}
```

### Code Snippet 2 (CompositeTitle.java, method `draw`, lines 130-135):
```java
public void draw(Graphics2D g2, Rectangle2D area) {
    area = trimMargin(area);
    drawBorder(g2, area);
    area = trimBorder(area);
    area = trimPadding(area);
    this.container.draw(g2, area);
}
```

### Clone Type:
**Type-3 Clone**: The two code snippets are mostly similar but differ in the final statement (`g2.setPaint(this.paint); g2.fill(area);` vs. `this.container.draw(g2, area);`).","### 1. Extracted Method (To be placed in the common superclass):
```java
protected void drawCommon(Graphics2D g2, Rectangle2D area, Runnable finalStep) {
    area = trimMargin(area);
    drawBorder(g2, area);
    area = trimBorder(area);
    area = trimPadding(area);
    finalStep.run();
}
```

### 2. Refactored Code in `ColorBlock.java`:
```java
public void draw(Graphics2D g2, Rectangle2D area) {
    drawCommon(g2, area, () -> {
        g2.setPaint(this.paint);
        g2.fill(area);
    });
}
```

### 3. Refactored Code in `CompositeTitle.java`:
```java
public void draw(Graphics2D g2, Rectangle2D area) {
    drawCommon(g2, area, () -> this.container.draw(g2, area));
}
```",Type-3
1785-1-2,src,org.jfree.data.time,TimeSeriesCollection,getXValue,421,425,src,org.jfree.data.time.ohlc,OHLCSeriesCollection,getY,203,206,Type 3,"### Code Snippet 1: `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    TimeSeries s = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem i = s.getDataItem(item);
    RegularTimePeriod period = i.getPeriod();
    return getX(period);
}
```

---

### Code Snippet 2: `getY` Method (OHLCSeriesCollection.java)
```java
/**
 * Returns the y-value for an item within a series.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The y-value.
 */
public Number getY(int series, int item) {
    OHLCSeries s = (OHLCSeries) this.data.get(series);
    OHLCItem di = (OHLCItem) s.getDataItem(item);
    return new Double(di.getYValue());
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different classes (`TimeSeries` vs. `OHLCSeries`, `TimeSeriesDataItem` vs. `OHLCItem`) and the return type (`double` vs. `Number`).","### 1. Extracted Method (To be placed in the common superclass)
```java
/**
 * Returns a value for an item within a series.
 *
 * @param data  the data list.
 * @param series  the series index.
 * @param item  the item index.
 * @param valueExtractor  the function to extract the value.
 * @param <T>  the type of the series.
 * @param <U>  the type of the data item.
 * @return The extracted value.
 */
protected <T, U> Number getValue(List<T> data, int series, int item, ValueExtractor<T, U> valueExtractor) {
    T s = data.get(series);
    U di = valueExtractor.getDataItem(s, item);
    return valueExtractor.extractValue(di);
}

/**
 * Functional interface for extracting data items and values.
 *
 * @param <T>  the type of the series.
 * @param <U>  the type of the data item.
 */
@FunctionalInterface
protected interface ValueExtractor<T, U> {
    U getDataItem(T series, int item);
    Number extractValue(U dataItem);
}
```

---

### 2. Refactored `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    return getValue(this.data, series, item, new ValueExtractor<TimeSeries, TimeSeriesDataItem>() {
        @Override
        public TimeSeriesDataItem getDataItem(TimeSeries series, int item) {
            return series.getDataItem(item);
        }

        @Override
        public Number extractValue(TimeSeriesDataItem dataItem) {
            RegularTimePeriod period = dataItem.getPeriod();
            return getX(period);
        }
    }).doubleValue();
}
```

---

### 3. Refactored `getY` Method (OHLCSeriesCollection.java)
```java
/**
 * Returns the y-value for an item within a series.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The y-value.
 */
public Number getY(int series, int item) {
    return getValue(this.data, series, item, new ValueExtractor<OHLCSeries, OHLCItem>() {
        @Override
        public OHLCItem getDataItem(OHLCSeries series, int item) {
            return (OHLCItem) series.getDataItem(item);
        }

        @Override
        public Number extractValue(OHLCItem dataItem) {
            return new Double(dataItem.getYValue());
        }
    });
}
```",Type-3
1785-1-3,src,org.jfree.data.time,TimeSeriesCollection,getXValue,421,425,src,org.jfree.data.xy,XIntervalSeriesCollection,getY,209,212,Type 3,"### Code Snippet 1: `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    TimeSeries s = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem i = s.getDataItem(item);
    RegularTimePeriod period = i.getPeriod();
    return getX(period);
}
```

### Code Snippet 2: `getY` Method (XIntervalSeriesCollection.java)
```java
/**
 * Returns the y-value for an item within a series.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The y-value.
 */
public Number getY(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getYValue());
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different classes (`TimeSeries` vs. `XIntervalSeries`, `TimeSeriesDataItem` vs. `XIntervalDataItem`) and the return type (`double` vs. `Number`).","### 1. Extracted Method (To be placed in the common superclass `AbstractIntervalXYDataset`)
```java
/**
 * Returns a value (x or y) for an item within a series.
 *
 * @param data  the data list containing the series.
 * @param seriesIndex  the series index.
 * @param itemIndex  the item index.
 * @param isXValue  flag to indicate whether to fetch x-value (true) or y-value (false).
 * @return The value.
 */
protected Number getValue(List data, int seriesIndex, int itemIndex, boolean isXValue) {
    Object series = data.get(seriesIndex);
    Object dataItem;
    if (series instanceof TimeSeries) {
        dataItem = ((TimeSeries) series).getDataItem(itemIndex);
        if (isXValue) {
            RegularTimePeriod period = ((TimeSeriesDataItem) dataItem).getPeriod();
            return getX(period);
        } else {
            return ((TimeSeriesDataItem) dataItem).getValue();
        }
    } else if (series instanceof XIntervalSeries) {
        dataItem = ((XIntervalSeries) series).getDataItem(itemIndex);
        if (isXValue) {
            return ((XIntervalDataItem) dataItem).getX();
        } else {
            return new Double(((XIntervalDataItem) dataItem).getYValue());
        }
    }
    throw new IllegalArgumentException(""Unsupported series type."");
}
```

---

### 2. Refactored `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    return getValue(this.data, series, item, true).doubleValue();
}
```

---

### 3. Refactored `getY` Method (XIntervalSeriesCollection.java)
```java
/**
 * Returns the y-value for an item within a series.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The y-value.
 */
public Number getY(int series, int item) {
    return getValue(this.data, series, item, false);
}
```",Type-3
1785-1-4,src,org.jfree.data.time,TimeSeriesCollection,getXValue,421,425,src,org.jfree.data.xy,XIntervalSeriesCollection,getStartX,223,226,Type 3,"### Code Snippet 1: `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    TimeSeries s = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem i = s.getDataItem(item);
    RegularTimePeriod period = i.getPeriod();
    return getX(period);
}
```

### Code Snippet 2: `getStartX` Method (XIntervalSeriesCollection.java)
```java
/**
 * Returns the start x-value for an item within a series.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The x-value.
 */
public Number getStartX(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    XIntervalDataItem di = (XIntervalDataItem) s.getDataItem(item);
    return new Double(di.getXLowValue());
}
```

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different classes (`TimeSeries` vs. `XIntervalSeries`, `TimeSeriesDataItem` vs. `XIntervalDataItem`) and method calls (`getPeriod()` vs. `getXLowValue()`).","### 1. Extracted Method (To be placed in the common superclass `AbstractIntervalXYDataset`)
```java
/**
 * Extracted method to retrieve a value from a series and item.
 *
 * @param data  the data list containing the series.
 * @param seriesIndex  the series index.
 * @param itemIndex  the item index.
 * @param valueExtractor  a functional interface to extract the desired value.
 * @param <T>  the type of the series.
 * @param <U>  the type of the data item.
 * @return The extracted value.
 */
protected <T, U> Number extractValueFromSeries(List<T> data, int seriesIndex, int itemIndex, ValueExtractor<T, U> valueExtractor) {
    T series = data.get(seriesIndex);
    U dataItem = valueExtractor.getDataItem(series, itemIndex);
    return valueExtractor.extractValue(dataItem);
}

/**
 * Functional interface for extracting values from series and data items.
 *
 * @param <T>  the type of the series.
 * @param <U>  the type of the data item.
 */
@FunctionalInterface
protected interface ValueExtractor<T, U> {
    U getDataItem(T series, int itemIndex);
    Number extractValue(U dataItem);
}
```

---

### 2. Refactored `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    return extractValueFromSeries(
        this.data,
        series,
        item,
        new ValueExtractor<TimeSeries, TimeSeriesDataItem>() {
            @Override
            public TimeSeriesDataItem getDataItem(TimeSeries series, int itemIndex) {
                return series.getDataItem(itemIndex);
            }

            @Override
            public Number extractValue(TimeSeriesDataItem dataItem) {
                RegularTimePeriod period = dataItem.getPeriod();
                return getX(period);
            }
        }
    ).doubleValue();
}
```

---

### 3. Refactored `getStartX` Method (XIntervalSeriesCollection.java)
```java
/**
 * Returns the start x-value for an item within a series.
 *
 * @param series  the series index.
 * @param item  the item index.
 *
 * @return The x-value.
 */
public Number getStartX(int series, int item) {
    return extractValueFromSeries(
        this.data,
        series,
        item,
        new ValueExtractor<XIntervalSeries, XIntervalDataItem>() {
            @Override
            public XIntervalDataItem getDataItem(XIntervalSeries series, int itemIndex) {
                return (XIntervalDataItem) series.getDataItem(itemIndex);
            }

            @Override
            public Number extractValue(XIntervalDataItem dataItem) {
                return new Double(dataItem.getXLowValue());
            }
        }
    );
}
```",Type-3
1785-1-5,src,org.jfree.data.time,TimeSeriesCollection,getXValue,421,425,src,org.jfree.data.xy,XIntervalSeriesCollection,getEndX,237,240,Type 3,"### Code Snippet 1: `getXValue` Method (TimeSeriesCollection.java)
```java
/**
 * Returns the x-value (as a double primitive) for an item within a series.
 * 
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 * 
 * @return The x-value.
 */
public double getXValue(int series, int item) {
    TimeSeries s = (TimeSeries) this.data.get(series);
    TimeSeriesDataItem i = s.getDataItem(item);
    RegularTimePeriod period = i.getPeriod();
    return getX(period);
}
```

---

### Code Snippet 2: `getEndX` Method (XIntervalSeriesCollection.java)
```java
/**
 * Returns the end x-value (as a double primitive) for an item within a
 * series.
 *
 * @param series  the series (zero-based index).
 * @param item  the item (zero-based index).
 *
 * @return The value.
 */
public double getEndXValue(int series, int item) {
    XIntervalSeries s = (XIntervalSeries) this.data.get(series);
    return s.getXHighValue(item);
}
```

---

### Clone Type:
These two code snippets are **Type-3 clones** because they are mostly similar but have some different statements, such as the use of different classes (`TimeSeries` vs. `XIntervalSeries`) and method calls (`getDataItem` vs. `getXHighValue`).","### 1. Extracted Method (To be placed in the common superclass `AbstractIntervalXYDataset`)
```java
/**
 * Returns a double value for an item within a series using the provided
 * data retrieval logic.
 *
 * @param data  the data list (specific to the subclass).
 * @param series  the series index (zero-based).
 * @param item  the item index (zero-based).
 * @param valueExtractor  a functional interface to extract the value.
 * @return The extracted value.
 */
protected double getValueFromSeries(List data, int series, int item, ValueExtractor valueExtractor) {
    Object seriesObject = data.get(series);
    return valueExtractor.extract(seriesObject, item);
}

/**
 * Functional interface for extracting a value from a series.
 */
@FunctionalInterface
protected interface ValueExtractor {
    double extract(Object series, int item);
}
```

---

### 2. Refactored `getXValue` Method (TimeSeriesCollection.java)
```java
@Override
public double getXValue(int series, int item) {
    return getValueFromSeries(this.data, series, item, (seriesObject, itemIndex) -> {
        TimeSeries s = (TimeSeries) seriesObject;
        TimeSeriesDataItem i = s.getDataItem(itemIndex);
        RegularTimePeriod period = i.getPeriod();
        return getX(period);
    });
}
```

---

### 3. Refactored `getEndXValue` Method (XIntervalSeriesCollection.java)
```java
@Override
public double getEndXValue(int series, int item) {
    return getValueFromSeries(this.data, series, item, (seriesObject, itemIndex) -> {
        XIntervalSeries s = (XIntervalSeries) seriesObject;
        return s.getXHighValue(itemIndex);
    });
}
```",Type-3