Pair ID,Source Folder 1,Package 1,Class 1,Method 1,Start Line 1,End Line 1,Source Folder 2,Package 2,Class 2,Method 2,Start Line 2,End Line 2,Left Code,Right Code,Clone Type
4/1/02,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithOr,202,271,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithAnd,274,343,"methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , ""[]"" , CallType . FUNCTIONAL ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
receiver . call ( methodCompiler ) ;
args . call ( methodCompiler ) ;
method . dup2 ( ) ;
int argsLocal = methodCompiler . getVariableCompiler ( ) . grabTempLocal ( ) ;
methodCompiler . getVariableCompiler ( ) . setTempLocal ( argsLocal ) ;
int receiverLocal = methodCompiler . getVariableCompiler ( ) . grabTempLocal ( ) ;
methodCompiler . getVariableCompiler ( ) . setTempLocal ( receiverLocal ) ;
switch ( args . getArity ( ) )
case 1 :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
default :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class ) ) ;
method . dup ( ) ;
methodCompiler . invokeIRubyObject ( ""isTrue"" , sig ( boolean . class ) ) ;
Label done = new Label ( ) ;
method . ifne ( done ) ;
method . pop ( ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
methodCompiler . getVariableCompiler ( ) . getTempLocal ( receiverLocal ) ;
methodCompiler . getVariableCompiler ( ) . getTempLocal ( argsLocal ) ;
valueCallback . call ( methodCompiler ) ;
methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , ""[]="" , CallType . FUNCTIONAL ) ;
switch ( args . getArity ( ) )
case 0 :
throw new NotCompilableException ( ""Op Element Asgn with zero-arity args"" ) ;
case 1 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoOneArg"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 2 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoTwoArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 3 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoThreeArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
default :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoNArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
method . label ( done ) ;
methodCompiler . getVariableCompiler ( ) . releaseTempLocal ( ) ;
methodCompiler . getVariableCompiler ( ) . releaseTempLocal ( ) ;","methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , ""[]"" , CallType . FUNCTIONAL ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
receiver . call ( methodCompiler ) ;
args . call ( methodCompiler ) ;
method . dup2 ( ) ;
int argsLocal = methodCompiler . getVariableCompiler ( ) . grabTempLocal ( ) ;
methodCompiler . getVariableCompiler ( ) . setTempLocal ( argsLocal ) ;
int receiverLocal = methodCompiler . getVariableCompiler ( ) . grabTempLocal ( ) ;
methodCompiler . getVariableCompiler ( ) . setTempLocal ( receiverLocal ) ;
switch ( args . getArity ( ) )
case 1 :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
default :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class ) ) ;
method . dup ( ) ;
methodCompiler . invokeIRubyObject ( ""isTrue"" , sig ( boolean . class ) ) ;
Label done = new Label ( ) ;
method . ifeq ( done ) ;
method . pop ( ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
methodCompiler . getVariableCompiler ( ) . getTempLocal ( receiverLocal ) ;
methodCompiler . getVariableCompiler ( ) . getTempLocal ( argsLocal ) ;
valueCallback . call ( methodCompiler ) ;
methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , ""[]="" , CallType . FUNCTIONAL ) ;
switch ( args . getArity ( ) )
case 0 :
throw new NotCompilableException ( ""Op Element Asgn with zero-arity args"" ) ;
case 1 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoOneArg"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 2 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoTwoArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 3 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoThreeArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
default :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoNArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
method . label ( done ) ;
methodCompiler . getVariableCompiler ( ) . releaseTempLocal ( ) ;
methodCompiler . getVariableCompiler ( ) . releaseTempLocal ( ) ;",Type 2
19-1-2,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeAttrAssign,158,192,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeDynamic,464,475,"switch ( argsCallback . getArity ( ) )
case 1 :
signature = sig ( IRubyObject . class , IRubyObject . class , CallSite . class , IRubyObject . class , ThreadContext . class , IRubyObject . class ) ;
break ;
case 2 :
signature = sig ( IRubyObject . class , IRubyObject . class , CallSite . class , IRubyObject . class , IRubyObject . class , ThreadContext . class , IRubyObject . class ) ;
break ;
case 3 :
signature = sig ( IRubyObject . class , IRubyObject . class , CallSite . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , ThreadContext . class , IRubyObject . class ) ;
break ;
default :
signature = sig ( IRubyObject . class , IRubyObject . class , CallSite . class , IRubyObject [ ] . class , ThreadContext . class , IRubyObject . class ) ;","switch ( argsCallback . getArity ( ) )
case 1 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
case 2 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
case 3 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
default :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class ) ) ;",Type 2
21-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,endBody,97,130,src,org.jruby.compiler.impl,RootScopedBodyCompiler,endBody,95,121,"if ( specificArity )
method = new SkinnyMethodAdapter ( script . getClassVisitor ( ) . visitMethod ( ACC_PUBLIC | ACC_STATIC , methodName , StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , 4 ) , null , null ) ) ;
method . start ( ) ;
method . aload ( 1 ) ;
method . invokevirtual ( p ( ThreadContext . class ) , ""getRuntime"" , sig ( Ruby . class ) ) ;
method . aload ( 3 ) ;
method . pushInt ( scope . getRequiredArgs ( ) ) ;
method . pushInt ( scope . getRequiredArgs ( ) ) ;
method . invokestatic ( p ( Arity . class ) , ""checkArgumentCount"" , sig ( int . class , Ruby . class , IRubyObject [ ] . class , int . class , int . class ) ) ;
method . pop ( ) ;
loadThis ( ) ;
loadThreadContext ( ) ;
loadSelf ( ) ;
for ( int i = 0 ; i < scope . getRequiredArgs ( ) ; i ++ )
method . aload ( StandardASMCompiler . ARGS_INDEX ) ;
method . ldc ( i ) ;
method . arrayload ( ) ;
method . aload ( StandardASMCompiler . ARGS_INDEX + 1 ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
method . areturn ( ) ;
method . end ( ) ;","if ( specificArity )
method = new SkinnyMethodAdapter ( script . getClassVisitor ( ) . visitMethod ( ACC_PUBLIC | ACC_STATIC , methodName , StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , 4 ) , null , null ) ) ;
method . start ( ) ;
method . aload ( 1 ) ;
method . invokevirtual ( p ( ThreadContext . class ) , ""getRuntime"" , sig ( Ruby . class ) ) ;
method . aload ( 3 ) ;
method . pushInt ( scope . getRequiredArgs ( ) ) ;
method . pushInt ( scope . getRequiredArgs ( ) ) ;
method . invokestatic ( p ( Arity . class ) , ""checkArgumentCount"" , sig ( int . class , Ruby . class , IRubyObject [ ] . class , int . class , int . class ) ) ;
method . pop ( ) ;
loadThis ( ) ;
loadThreadContext ( ) ;
loadSelf ( ) ;
for ( int i = 0 ; i < scope . getRequiredArgs ( ) ; i ++ )
method . aload ( StandardASMCompiler . ARGS_INDEX ) ;
method . ldc ( i ) ;
method . arrayload ( ) ;
method . aload ( StandardASMCompiler . ARGS_INDEX + 1 ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
method . areturn ( ) ;
method . end ( ) ;",Type 1
23-1-2,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClass,109,141,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClosure,158,190,"if ( scope != null && scope . getNumberOfVariables ( ) >= 1 )
switch ( scope . getNumberOfVariables ( ) )
case 1 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , false ) ;
break ;
case 2 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , false ) ;
break ;
case 3 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , false ) ;
break ;
case 4 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
break ;
default :
method . aload ( methodCompiler . getVarsArrayIndex ( ) ) ;
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
methodCompiler . loadRuntime ( ) ;
methodCompiler . invokeUtilityMethod ( ""fillNil"" , sig ( void . class , IRubyObject [ ] . class , Ruby . class ) ) ;","if ( scope != null && scope . getNumberOfVariables ( ) >= 1 )
switch ( scope . getNumberOfVariables ( ) )
case 1 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , false ) ;
break ;
case 2 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , false ) ;
break ;
case 3 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , false ) ;
break ;
case 4 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
break ;
default :
method . aload ( methodCompiler . getVarsArrayIndex ( ) ) ;
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
methodCompiler . loadRuntime ( ) ;
methodCompiler . invokeUtilityMethod ( ""fillNil"" , sig ( void . class , IRubyObject [ ] . class , Ruby . class ) ) ;",Type 1
25-1-2,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClass,110,141,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClosure,159,190,"switch ( scope . getNumberOfVariables ( ) )
case 1 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , false ) ;
break ;
case 2 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , false ) ;
break ;
case 3 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , false ) ;
break ;
case 4 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
break ;
default :
method . aload ( methodCompiler . getVarsArrayIndex ( ) ) ;
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
methodCompiler . loadRuntime ( ) ;
methodCompiler . invokeUtilityMethod ( ""fillNil"" , sig ( void . class , IRubyObject [ ] . class , Ruby . class ) ) ;","switch ( scope . getNumberOfVariables ( ) )
case 1 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , false ) ;
break ;
case 2 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , false ) ;
break ;
case 3 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , false ) ;
break ;
case 4 :
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
break ;
default :
method . aload ( methodCompiler . getVarsArrayIndex ( ) ) ;
methodCompiler . loadNil ( ) ;
assignLocalVariable ( 0 , true ) ;
assignLocalVariable ( 1 , true ) ;
assignLocalVariable ( 2 , true ) ;
assignLocalVariable ( 3 , false ) ;
methodCompiler . loadRuntime ( ) ;
methodCompiler . invokeUtilityMethod ( ""fillNil"" , sig ( void . class , IRubyObject [ ] . class , Ruby . class ) ) ;",Type 1
26-1-2,src,org.jruby.evaluator,AssignmentVisitor,multiAssign,50,79,src,org.jruby.evaluator,AssignmentVisitor,multiAssign,82,113,"int valueLen = value . getLength ( ) ;
int varLen = node . getPre ( ) == null ? 0 : node . getPre ( ) . size ( ) ;
int j = 0 ;
Node restArgument = node . getRest ( ) ;







if ( restArgument != null )
if ( varLen < valueLen )
restArgument . assign ( runtime , context , self , value . subseqLight ( varLen , valueLen ) , Block . NULL_BLOCK , checkArity ) ;
else
restArgument . assign ( runtime , context , self , RubyArray . newArrayLight ( runtime , 0 ) , Block . NULL_BLOCK , checkArity ) ;
else if ( checkArity && valueLen < varLen )
else if ( checkArity && valueLen < varLen )
throw runtime . newArgumentError ( ""Wrong # of arguments ("" + valueLen + "" for "" + varLen + "")"" ) ;

throw runtime . newArgumentError ( ""Wrong # of arguments ("" + valueLen + "" for "" + varLen + "")"" ) ;
while ( j < varLen )
node . getPre ( ) . get ( j ++ ) . assign ( runtime , context , self , runtime . getNil ( ) , Block . NULL_BLOCK , checkArity ) ;
return value ;","int valueLen = value . getLength ( ) ;
int varLen = node . getHeadNode ( ) == null ? 0 : node . getHeadNode ( ) . size ( ) ;
int j = 0 ;
Node argsNode = node . getArgsNode ( ) ;
if ( argsNode != null )
if ( argsNode . getNodeType ( ) == NodeType . STARNODE )
else if ( varLen < valueLen )
argsNode . assign ( runtime , context , self , value . subseqLight ( varLen , valueLen ) , Block . NULL_BLOCK , checkArity ) ;
else
argsNode . assign ( runtime , context , self , RubyArray . newArrayLight ( runtime , 0 ) , Block . NULL_BLOCK , checkArity ) ;
else if ( checkArity && valueLen < varLen )






else if ( checkArity && valueLen < varLen )

throw runtime . newArgumentError ( ""Wrong # of arguments ("" + valueLen + "" for "" + varLen + "")"" ) ;
throw runtime . newArgumentError ( ""Wrong # of arguments ("" + valueLen + "" for "" + varLen + "")"" ) ;
while ( j < varLen )
node . getHeadNode ( ) . get ( j ++ ) . assign ( runtime , context , self , runtime . getNil ( ) , Block . NULL_BLOCK , checkArity ) ;
return value ;",Type 3
27-1-2,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeOpAsgnWithOr,573,603,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeOpAsgnWithAnd,606,636,"receiverCallback . call ( methodCompiler ) ;
method . dup ( ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , attrName , CallType . FUNCTIONAL ) ;
methodCompiler . invokeUtilityMethod ( ""preOpAsgnWithOrAnd"" , sig ( IRubyObject . class , IRubyObject . class , ThreadContext . class , IRubyObject . class , CallSite . class ) ) ;
Label done = new Label ( ) ;
Label isTrue = new Label ( ) ;
method . dup ( ) ;
methodCompiler . invokeIRubyObject ( ""isTrue"" , sig ( boolean . class ) ) ;
method . ifne ( isTrue ) ;
method . pop ( ) ;
argsCallback . call ( methodCompiler ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , attrAsgnName , CallType . NORMAL ) ;
methodCompiler . invokeUtilityMethod ( ""postOpAsgnWithOrAnd"" , sig ( IRubyObject . class , IRubyObject . class , IRubyObject . class , ThreadContext . class , IRubyObject . class , CallSite . class ) ) ;
method . go_to ( done ) ;
method . label ( isTrue ) ;
method . swap ( ) ;
method . pop ( ) ;
method . label ( done ) ;","receiverCallback . call ( methodCompiler ) ;
method . dup ( ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , attrName , CallType . FUNCTIONAL ) ;
methodCompiler . invokeUtilityMethod ( ""preOpAsgnWithOrAnd"" , sig ( IRubyObject . class , IRubyObject . class , ThreadContext . class , IRubyObject . class , CallSite . class ) ) ;
Label done = new Label ( ) ;
Label isFalse = new Label ( ) ;
method . dup ( ) ;
methodCompiler . invokeIRubyObject ( ""isTrue"" , sig ( boolean . class ) ) ;
method . ifeq ( isFalse ) ;
method . pop ( ) ;
argsCallback . call ( methodCompiler ) ;
methodCompiler . loadThreadContext ( ) ;
methodCompiler . loadSelf ( ) ;
methodCompiler . getScriptCompiler ( ) . getCacheCompiler ( ) . cacheCallSite ( methodCompiler , attrAsgnName , CallType . NORMAL ) ;
methodCompiler . invokeUtilityMethod ( ""postOpAsgnWithOrAnd"" , sig ( IRubyObject . class , IRubyObject . class , IRubyObject . class , ThreadContext . class , IRubyObject . class , CallSite . class ) ) ;
method . go_to ( done ) ;
method . label ( isFalse ) ;
method . swap ( ) ;
method . pop ( ) ;
method . label ( done ) ;",Type 2
32-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,187,214,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,274,301,"if ( optArgsCount > 0 )
Label doneWithOpt = new Label ( ) ;
Label [ ] optLabels = new Label [ optArgsCount ] ;
for ( int i = 0 ; i < optLabels . length ; i ++ )
optLabels [ i ] = new Label ( ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; currentArgElement ++ , optArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . go_to ( doneWithOpt ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; optArgElement ++ )
method . label ( optLabels [ optArgElement ] ) ;
optNotGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . pop ( ) ;
method . label ( doneWithOpt ) ;","if ( optArgsCount > 0 )
Label doneWithOpt = new Label ( ) ;
Label [ ] optLabels = new Label [ optArgsCount ] ;
for ( int i = 0 ; i < optLabels . length ; i ++ )
optLabels [ i ] = new Label ( ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; currentArgElement ++ , optArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . go_to ( doneWithOpt ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; optArgElement ++ )
method . label ( optLabels [ optArgElement ] ) ;
optNotGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . pop ( ) ;
method . label ( doneWithOpt ) ;",Type 1
39-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,189,214,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,276,301,"Label doneWithOpt = new Label ( ) ;
Label [ ] optLabels = new Label [ optArgsCount ] ;
for ( int i = 0 ; i < optLabels . length ; i ++ )
optLabels [ i ] = new Label ( ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; currentArgElement ++ , optArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . go_to ( doneWithOpt ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; optArgElement ++ )
method . label ( optLabels [ optArgElement ] ) ;
optNotGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . pop ( ) ;
method . label ( doneWithOpt ) ;","Label doneWithOpt = new Label ( ) ;
Label [ ] optLabels = new Label [ optArgsCount ] ;
for ( int i = 0 ; i < optLabels . length ; i ++ )
optLabels [ i ] = new Label ( ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; currentArgElement ++ , optArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . go_to ( doneWithOpt ) ;
for ( int optArgElement = 0 ; optArgElement < optArgsCount ; optArgElement ++ )
method . label ( optLabels [ optArgElement ] ) ;
optNotGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;
method . pop ( ) ;
method . label ( doneWithOpt ) ;",Type 1
40-1-2,src,org.jruby.ast.executable,AbstractScript,createBlockBody,335,359,src,org.jruby.ast.executable,AbstractScript,createBlockBody19,362,386,"String [ ] firstSplit = descriptor . split ( "","" ) ;
String [ ] secondSplit ;
if ( firstSplit [ 2 ] . length ( ) == 0 )
secondSplit = new String [ 0 ] ;
else
secondSplit = firstSplit [ 2 ] . split ( "";"" ) ;
for ( int i = 0 ; i < secondSplit . length ; i ++ )
secondSplit [ i ] = secondSplit [ i ] . intern ( ) ;
BlockBody body = RuntimeHelpers . createCompiledBlockBody ( context , scriptObject , firstSplit [ 0 ] , Integer . parseInt ( firstSplit [ 1 ] ) , secondSplit , Boolean . valueOf ( firstSplit [ 3 ] ) , Integer . parseInt ( firstSplit [ 4 ] ) , Boolean . valueOf ( firstSplit [ 5 ] ) ) ;
return blockBodies [ index ] = body ;","String [ ] firstSplit = descriptor . split ( "","" ) ;
String [ ] secondSplit ;
if ( firstSplit [ 2 ] . length ( ) == 0 )
secondSplit = new String [ 0 ] ;
else
secondSplit = firstSplit [ 2 ] . split ( "";"" ) ;
for ( int i = 0 ; i < secondSplit . length ; i ++ )
secondSplit [ i ] = secondSplit [ i ] . intern ( ) ;
BlockBody body = RuntimeHelpers . createCompiledBlockBody19 ( context , scriptObject , firstSplit [ 0 ] , Integer . parseInt ( firstSplit [ 1 ] ) , secondSplit , Boolean . valueOf ( firstSplit [ 3 ] ) , Integer . parseInt ( firstSplit [ 4 ] ) , Boolean . valueOf ( firstSplit [ 5 ] ) ) ;
return blockBodies [ index ] = body ;",Type 2
42-1-2,src,org.jruby.runtime.callback,FastInvocationCallback,execute,43,67,src,org.jruby.runtime.callback,InvocationCallback,execute,57,81,"if ( arityValue >= 0 )
if ( oargs . length != arityValue )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + arityValue + "")"" ) ;
else
if ( oargs . length < - ( 1 + arityValue ) )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + - ( 1 + arityValue ) + "")"" ) ;
try
return call ( recv , oargs ) ;","if ( arityValue >= 0 )
if ( oargs . length != arityValue )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + arityValue + "")"" ) ;
else
if ( oargs . length < - ( 1 + arityValue ) )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + - ( 1 + arityValue ) + "")"" ) ;
try
return call ( recv , oargs , block ) ;",Type 2
47-1-2,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,52,74,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,52,74,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject arg = getArgsNode ( ) . interpret ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;
return callAdapter . call ( context , self , receiver , arg , block ) ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject arg = getArgsNode ( ) . interpret ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ;
if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;
return callAdapter . call ( context , self , receiver , arg , block ) ;",Type 2
51-1-2,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,25,46,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,27,48,"IRubyObject arg = getArgsNode ( ) . interpret ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;
return callAdapter . callIter ( context , self , self , arg , block ) ;","IRubyObject arg = getArgsNode ( ) . interpret ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ;
if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;
return callAdapter . call ( context , self , self , arg , block ) ;",Type 2
56-1-2,src,org.jruby.ast,RescueNode,handleException,177,197,src,org.jruby.runtime,InterpretedBlock,yield,242,255,"IRubyObject [ ] exceptions = getExceptions ( cRescueNode , runtime , context , self , aBlock ) ;
if ( RuntimeHelpers . isExceptionHandled ( raisedException , exceptions , context ) . isTrue ( ) )

return cRescueNode . interpret ( runtime , context , self , aBlock ) ;","
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;
",Type 3
57-1-2,src,org.jruby.util,Sprintf,rubySprintfToBuffer,720,737,src,org.jruby.util,Sprintf,rubySprintfToBuffer,741,761,"case '0' :
break ;
case '1' :
case '2' :
case '3' :
case '4' :
case '5' :
case '6' :
case '7' :
case '8' :
case '9' :
if ( nTrailingZeroes > 0 )
for ( ; nTrailingZeroes > 0 ; nTrailingZeroes -- )
digits [ nDigits ++ ] = '0' ;","case '0' :
break ;
case '1' :
case '2' :
case '3' :
case '4' :
case '5' :
case '6' :
case '7' :
case '8' :
case '9' :
if ( nTrailingZeroes > 0 )
for ( ; nTrailingZeroes > 0 ; nTrailingZeroes -- )
digits [ nDigits ++ ] = '0' ;",Type 1
61-1-2,src,org.jruby.util,ShellLauncher,pumpInput,604,623,src,org.jruby.util,ShellLauncher,pumpInerr,626,645,"InputStream childIn = unwrapBufferedStream ( child . getInputStream ( ) ) ;
FileChannel childInChannel = null ;
if ( childIn instanceof FileInputStream )
childInChannel = ( ( FileInputStream ) childIn ) . getChannel ( ) ;
OutputStream parentOut = unwrapBufferedStream ( runtime . getOut ( ) ) ;
FileChannel parentOutChannel = null ;
if ( parentOut instanceof FileOutputStream )
parentOutChannel = ( ( FileOutputStream ) parentOut ) . getChannel ( ) ;
if ( childInChannel != null && parentOutChannel != null )
inputPumper = new ChannelPumper ( childInChannel , parentOutChannel , Pumper . Slave . IN , this ) ;
else
inputPumper = new StreamPumper ( childIn , parentOut , false , Pumper . Slave . IN , this ) ;
inputPumper . start ( ) ;
input = null ;
inputChannel = null ;","InputStream childIn = unwrapBufferedStream ( child . getErrorStream ( ) ) ;
FileChannel childInChannel = null ;
if ( childIn instanceof FileInputStream )
childInChannel = ( ( FileInputStream ) childIn ) . getChannel ( ) ;
OutputStream parentOut = unwrapBufferedStream ( runtime . getOut ( ) ) ;
FileChannel parentOutChannel = null ;
if ( parentOut instanceof FileOutputStream )
parentOutChannel = ( ( FileOutputStream ) parentOut ) . getChannel ( ) ;
if ( childInChannel != null && parentOutChannel != null )
inerrPumper = new ChannelPumper ( childInChannel , parentOutChannel , Pumper . Slave . IN , this ) ;
else
inerrPumper = new StreamPumper ( childIn , parentOut , false , Pumper . Slave . IN , this ) ;
inerrPumper . start ( ) ;
inerr = null ;
inerrChannel = null ;",Type 2
63-1-2,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithOr,247,265,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithAnd,319,337,"switch ( args . getArity ( ) )
case 0 :
throw new NotCompilableException ( ""Op Element Asgn with zero-arity args"" ) ;
case 1 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoOneArg"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 2 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoTwoArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 3 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoThreeArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
default :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoNArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;","switch ( args . getArity ( ) )
case 0 :
throw new NotCompilableException ( ""Op Element Asgn with zero-arity args"" ) ;
case 1 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoOneArg"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 2 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoTwoArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
case 3 :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoThreeArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;
default :
methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithOrPartTwoNArgs"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , IRubyObject . class , CallSite . class ) ) ;
break ;",Type 1
64-1-2,src,org.jruby.util,Sprintf,rubySprintfToBuffer,722,737,src,org.jruby.util,Sprintf,rubySprintfToBuffer,743,761,"case '0' :
break ;
case '1' :
case '2' :
case '3' :
case '4' :
case '5' :
case '6' :
case '7' :
case '8' :
case '9' :
if ( nTrailingZeroes > 0 )
for ( ; nTrailingZeroes > 0 ; nTrailingZeroes -- )
digits [ nDigits ++ ] = '0' ;","case '0' :
break ;
case '1' :
case '2' :
case '3' :
case '4' :
case '5' :
case '6' :
case '7' :
case '8' :
case '9' :
if ( nTrailingZeroes > 0 )
for ( ; nTrailingZeroes > 0 ; nTrailingZeroes -- )
digits [ nDigits ++ ] = '0' ;",Type 1
68-1-2,src,org.jruby.ast,AttrAssignNode,definition,258,276,src,org.jruby.ast,CallNode,definition,173,191,"if ( receiverNode . definition ( runtime , context , self , aBlock ) != null )
try
IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
RubyClass metaClass = receiver . getMetaClass ( ) ;
DynamicMethod method = metaClass . searchMethod ( name ) ;
Visibility visibility = method . getVisibility ( ) ;
if ( visibility != Visibility . PRIVATE && ( visibility != Visibility . PROTECTED || metaClass . getRealClass ( ) . isInstance ( self ) ) )
if ( metaClass . isMethodBound ( name , false ) )
return ASTInterpreter . getArgumentDefinition ( runtime , context , argsNode , ""assignment"" , self , aBlock ) ;
return null ;","if ( receiverNode . definition ( runtime , context , self , aBlock ) != null )
try
IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
RubyClass metaClass = receiver . getMetaClass ( ) ;
DynamicMethod method = metaClass . searchMethod ( getName ( ) ) ;
Visibility visibility = method . getVisibility ( ) ;
if ( visibility != Visibility . PRIVATE && ( visibility != Visibility . PROTECTED || metaClass . getRealClass ( ) . isInstance ( self ) ) )
if ( ! method . isUndefined ( ) )
return ASTInterpreter . getArgumentDefinition ( runtime , context , getArgsNode ( ) , ""method"" , self , aBlock ) ;
return null ;",Type 2
72-2-3,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,207,220,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,225,238,"Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
72-2-4,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,207,220,src,org.jruby.runtime,InterpretedBlock,yield,259,272,"Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assignArray ( context . getRuntime ( ) , context , self , assigner . convertToArray ( context . getRuntime ( ) , value ) , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
72-3-4,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,225,238,src,org.jruby.runtime,InterpretedBlock,yield,259,272,"Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assignArray ( context . getRuntime ( ) , context , self , assigner . convertToArray ( context . getRuntime ( ) , value ) , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
73-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,102,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,202,216,"assert args != null ;
Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;
argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","
Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 3
73-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,102,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,221,235,"assert args != null ;
Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;
argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","
Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 3
73-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,102,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,258,272,"assert args != null ;
Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;
argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","
Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 3
73-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,202,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,221,235,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
73-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,202,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,258,272,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
73-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,221,235,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,258,272,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
74-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,beginMethod,55,71,src,org.jruby.compiler.impl,RootScopedBodyCompiler,beginMethod,46,62,"method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . astore ( getRuntimeIndex ( ) ) ;
method . aload ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginMethod ( args , scope ) ;
method . label ( scopeStart ) ;","method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . astore ( getRuntimeIndex ( ) ) ;
method . aload ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginMethod ( args , scope ) ;
method . label ( scopeStart ) ;",Type 1
75-1-2,src,org.jruby.compiler.impl,ChainedChildBodyCompiler19,outline,19,35,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,outline,63,79,"method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 4 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler19 methodCompiler = new ChainedChildBodyCompiler19 ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;","method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 3 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler methodCompiler = new ChainedChildBodyCompiler ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;",Type 2
75-1-3,src,org.jruby.compiler.impl,ChainedChildBodyCompiler19,outline,19,35,src,org.jruby.compiler.impl,ChildScopedBodyCompiler19,outline,18,34,"method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 4 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler19 methodCompiler = new ChainedChildBodyCompiler19 ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;","method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 4 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler19 methodCompiler = new ChainedChildBodyCompiler19 ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;",Type 1
75-1-4,src,org.jruby.compiler.impl,ChainedChildBodyCompiler19,outline,19,35,src,org.jruby.compiler.impl,RootScopedBodyCompiler,outline,65,81,"method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 4 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler19 methodCompiler = new ChainedChildBodyCompiler19 ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;","method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= getClosureIndex ( ) ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedRootBodyCompiler methodCompiler = new ChainedRootBodyCompiler ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;",Type 2
75-2-3,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,outline,63,79,src,org.jruby.compiler.impl,ChildScopedBodyCompiler19,outline,18,34,"method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 3 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler methodCompiler = new ChainedChildBodyCompiler ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;","method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 4 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler19 methodCompiler = new ChainedChildBodyCompiler19 ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;",Type 2
75-2-4,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,outline,63,79,src,org.jruby.compiler.impl,RootScopedBodyCompiler,outline,65,81,"method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 3 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler methodCompiler = new ChainedChildBodyCompiler ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;","method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= getClosureIndex ( ) ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedRootBodyCompiler methodCompiler = new ChainedRootBodyCompiler ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;",Type 2
75-3-4,src,org.jruby.compiler.impl,ChildScopedBodyCompiler19,outline,18,34,src,org.jruby.compiler.impl,RootScopedBodyCompiler,outline,65,81,"method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= 4 ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedChildBodyCompiler19 methodCompiler = new ChainedChildBodyCompiler19 ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;","method . aload ( StandardASMCompiler . THIS ) ;
for ( int i = 1 ; i <= getClosureIndex ( ) ; i ++ )
method . aload ( i ) ;
methodName = methodName + ""_"" + script . getAndIncrementMethodIndex ( ) ;
method . invokestatic ( script . getClassname ( ) , methodName , getSignature ( ) ) ;
ChainedRootBodyCompiler methodCompiler = new ChainedRootBodyCompiler ( script , methodName , inspector , scope , this ) ;
methodCompiler . beginChainedMethod ( ) ;
return methodCompiler ;",Type 2
77-1-2,src,org.jruby.compiler.impl,ClassBodyCompiler,beginMethod,18,34,src,org.jruby.compiler.impl,MethodBodyCompiler,beginMethod,55,71,"method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . dup ( ) ;
method . astore ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginClass ( bodyPrep , scope ) ;
method . label ( scopeStart ) ;","method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . aload ( getRuntimeIndex ( ) ) ;
method . astore ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginMethod ( args , scope ) ;
method . label ( scopeStart ) ;",Type 2
77-1-3,src,org.jruby.compiler.impl,ClassBodyCompiler,beginMethod,18,34,src,org.jruby.compiler.impl,RootScopedBodyCompiler,beginMethod,46,62,"method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . dup ( ) ;
method . astore ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginClass ( bodyPrep , scope ) ;
method . label ( scopeStart ) ;","method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . aload ( getRuntimeIndex ( ) ) ;
method . astore ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginMethod ( args , scope ) ;
method . label ( scopeStart ) ;",Type 2
77-2-3,src,org.jruby.compiler.impl,MethodBodyCompiler,beginMethod,55,71,src,org.jruby.compiler.impl,RootScopedBodyCompiler,beginMethod,46,62,"method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . astore ( getRuntimeIndex ( ) ) ;
method . aload ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginMethod ( args , scope ) ;
method . label ( scopeStart ) ;","method . start ( ) ;
method . aload ( StandardASMCompiler . THREADCONTEXT_INDEX ) ;
invokeThreadContext ( ""getRuntime"" , sig ( Ruby . class ) ) ;
method . astore ( getRuntimeIndex ( ) ) ;
method . aload ( getRuntimeIndex ( ) ) ;
invokeRuby ( ""getNil"" , sig ( IRubyObject . class ) ) ;
method . astore ( getNilIndex ( ) ) ;
variableCompiler . beginMethod ( args , scope ) ;
method . label ( scopeStart ) ;",Type 1
83-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,createCompiledBlockBody,157,172,src,org.jruby.javasupport.util,RuntimeHelpers,createCompiledBlockBody19,176,191,"StaticScope staticScope = new BlockStaticScope ( context . getCurrentScope ( ) . getStaticScope ( ) , staticScopeNames ) ;
staticScope . determineModule ( ) ;
if ( light )
return CompiledBlockLight . newCompiledBlockLight ( Arity . createArity ( arity ) , staticScope , createBlockCallback ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;
else
return CompiledBlock . newCompiledBlock ( Arity . createArity ( arity ) , staticScope , createBlockCallback ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;","StaticScope staticScope = new BlockStaticScope ( context . getCurrentScope ( ) . getStaticScope ( ) , staticScopeNames ) ;
staticScope . determineModule ( ) ;
if ( light )
return CompiledBlockLight19 . newCompiledBlockLight ( Arity . createArity ( arity ) , staticScope , createBlockCallback19 ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;
else
return CompiledBlock19 . newCompiledBlock ( Arity . createArity ( arity ) , staticScope , createBlockCallback19 ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;",Type 2
90-1-2,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,158,173,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,215,230,"RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;
try
if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , arg0 , block ) ;
site . setTarget ( createGWT ( TEST_1_B , TARGET_1_B , FALLBACK_1_B , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 , block ) ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;
try
if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , args , block ) ;
site . setTarget ( createGWT ( TEST_N_B , TARGET_N_B , FALLBACK_N_B , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , args , block ) ;",Type 2
91-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,202,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,239,253,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
91-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,202,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,258,272,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
91-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,202,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,295,309,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
91-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,239,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,258,272,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
91-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,239,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,295,309,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
91-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,258,272,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,295,309,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
92-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,99,113,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,116,130,"JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 2 || ( callablesForArity = javaCallables [ 2 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 2 , javaCallables . length - 1 ) ;","
if ( callable . getParameterTypes ( ) . length != 3 )
throw self . getRuntime ( ) . newArgumentError ( 3 , callable . getParameterTypes ( ) . length ) ;",Type 3
92-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,99,113,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,116,130,"
if ( callable . getParameterTypes ( ) . length != 2 )
throw self . getRuntime ( ) . newArgumentError ( 2 , callable . getParameterTypes ( ) . length ) ;","JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 3 || ( callablesForArity = javaCallables [ 3 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 3 , javaCallables . length - 1 ) ;",Type 3
93-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,116,130,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityFour,133,147,"JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 3 || ( callablesForArity = javaCallables [ 3 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 3 , javaCallables . length - 1 ) ;","
if ( callable . getParameterTypes ( ) . length != 4 )
throw self . getRuntime ( ) . newArgumentError ( 4 , callable . getParameterTypes ( ) . length ) ;",Type 3
93-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,116,130,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityFour,133,147,"
if ( callable . getParameterTypes ( ) . length != 3 )
throw self . getRuntime ( ) . newArgumentError ( 3 , callable . getParameterTypes ( ) . length ) ;","JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 4 || ( callablesForArity = javaCallables [ 4 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 4 , javaCallables . length - 1 ) ;",Type 3
94-1-2,src,org.jruby.util,Sprintf,rubySprintfToBuffer,944,956,src,org.jruby.util,Sprintf,rubySprintfToBuffer,1025,1039,"int n = round ( digits , nDigits , intDigits + precision - 1 , precision != 0 ) ;
if ( n > nDigits )
nDigits = n ;
intDigits = Math . max ( 0 , Math . min ( nDigits + exponent , nDigits ) ) ;
intLength = intDigits + intZeroes ;
decDigits = nDigits - intDigits ;
decZeroes = Math . max ( 0 , - ( decDigits + exponent ) ) ;
precision = Math . max ( 0 , precision - 1 ) ;","int n = round ( digits , nDigits , intDigits + precision - decZeroes - 1 , precision != 0 ) ;
if ( n > nDigits )
nDigits = n ;
intDigits = Math . max ( 0 , Math . min ( nDigits + exponent , nDigits ) ) ;
intLength = intDigits + intZeroes ;
decDigits = nDigits - intDigits ;
decZeroes = Math . max ( 0 , - ( decDigits + exponent ) ) ;
decLength = decZeroes + decDigits ;",Type 2
100-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,128,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,147,161,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
100-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,128,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,165,179,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
100-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,128,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,184,198,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
100-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,147,161,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,165,179,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
100-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,147,161,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,184,198,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
100-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,165,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,184,198,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
101-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,165,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,184,198,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
101-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,165,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,221,235,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
101-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,184,198,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,221,235,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
102-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityOne,82,96,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,99,113,"JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length < 1 || ( callablesForArity = javaCallables [ 1 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 1 , javaCallables . length - 1 ) ;","
if ( callable . getParameterTypes ( ) . length != 2 )
throw self . getRuntime ( ) . newArgumentError ( 2 , callable . getParameterTypes ( ) . length ) ;",Type 3
102-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityOne,82,96,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,99,113,"
if ( callable . getParameterTypes ( ) . length != 1 )
throw self . getRuntime ( ) . newArgumentError ( 1 , callable . getParameterTypes ( ) . length ) ;","JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 2 || ( callablesForArity = javaCallables [ 2 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 2 , javaCallables . length - 1 ) ;",Type 3
105-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,128,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,147,161,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
106-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,313,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,332,346,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
106-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,313,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,350,364,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
106-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,313,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,369,383,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
106-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,332,346,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,350,364,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
106-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,332,346,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,369,383,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
106-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,350,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,369,383,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
107-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,350,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,387,401,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
107-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,350,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,406,420,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
107-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,387,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,406,420,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
108-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,239,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,276,290,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
108-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,239,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,295,309,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
108-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,276,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,295,309,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
109-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,276,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,313,327,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
109-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,276,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,332,346,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
109-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,313,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,332,346,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
110-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,387,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,406,420,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
110-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,387,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,424,438,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
110-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,387,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,443,457,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
110-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,406,420,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,424,438,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
110-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,406,420,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,443,457,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
110-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,424,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,443,457,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
111-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,424,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,461,475,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
111-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,424,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,480,494,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
111-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,424,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,517,531,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
111-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,461,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,480,494,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
111-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,461,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,517,531,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
111-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,480,494,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,517,531,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
112-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,461,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,480,494,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
112-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,461,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,498,512,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
112-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,461,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,517,531,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
112-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,480,494,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,498,512,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
112-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,480,494,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,517,531,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
112-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,498,512,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,517,531,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
113-1-2,src,org.jruby.runtime.callback,FastInvocationCallback,execute,54,67,src,org.jruby.runtime.callback,InvocationCallback,execute,68,81,"try
return call ( recv , oargs ) ;","try
return call ( recv , oargs , block ) ;",Type 2
114-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,invokeSuper,460,471,src,org.jruby.javasupport.util,RuntimeHelpers,invokeSuper,488,499,"checkSuperDisabledOrOutOfMethod ( context ) ;
RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass superClass = findImplementerIfNecessary ( self . getMetaClass ( ) , klazz ) . getSuperClass ( ) ;
DynamicMethod method = superClass != null ? superClass . searchMethod ( name ) : UndefinedMethod . INSTANCE ;
if ( method . isUndefined ( ) )
return callMethodMissing ( context , self , method . getVisibility ( ) , name , CallType . SUPER , args , block ) ;
return method . call ( context , self , superClass , name , args , block ) ;","checkSuperDisabledOrOutOfMethod ( context ) ;
RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass superClass = findImplementerIfNecessary ( self . getMetaClass ( ) , klazz ) . getSuperClass ( ) ;
DynamicMethod method = superClass != null ? superClass . searchMethod ( name ) : UndefinedMethod . INSTANCE ;
if ( method . isUndefined ( ) )
return callMethodMissing ( context , self , method . getVisibility ( ) , name , CallType . SUPER , arg0 , block ) ;
return method . call ( context , self , superClass , name , arg0 , block ) ;",Type 2
114-1-3,src,org.jruby.javasupport.util,RuntimeHelpers,invokeSuper,460,471,src,org.jruby.runtime,InterpretedBlock,yield,259,272,"checkSuperDisabledOrOutOfMethod ( context ) ;
RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass superClass = findImplementerIfNecessary ( self . getMetaClass ( ) , klazz ) . getSuperClass ( ) ;
DynamicMethod method = superClass != null ? superClass . searchMethod ( name ) : UndefinedMethod . INSTANCE ;
if ( method . isUndefined ( ) )

return callMethodMissing ( context , self , method . getVisibility ( ) , name , CallType . SUPER , args , block ) ;

return method . call ( context , self , superClass , name , args , block ) ;","




if ( ! noargblock )
assigner . assignArray ( context . getRuntime ( ) , context , self , assigner . convertToArray ( context . getRuntime ( ) , value ) , Block . NULL_BLOCK ) ;

return evalBlockBody ( context , self ) ;
",Type 3
114-2-3,src,org.jruby.javasupport.util,RuntimeHelpers,invokeSuper,488,499,src,org.jruby.runtime,InterpretedBlock,yield,259,272,"checkSuperDisabledOrOutOfMethod ( context ) ;
RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass superClass = findImplementerIfNecessary ( self . getMetaClass ( ) , klazz ) . getSuperClass ( ) ;
DynamicMethod method = superClass != null ? superClass . searchMethod ( name ) : UndefinedMethod . INSTANCE ;
if ( method . isUndefined ( ) )

return callMethodMissing ( context , self , method . getVisibility ( ) , name , CallType . SUPER , arg0 , block ) ;

return method . call ( context , self , superClass , name , arg0 , block ) ;","




if ( ! noargblock )
assigner . assignArray ( context . getRuntime ( ) , context , self , assigner . convertToArray ( context . getRuntime ( ) , value ) , Block . NULL_BLOCK ) ;

return evalBlockBody ( context , self ) ;
",Type 3
115-2-3,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assignArray,117,130,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assignArray,136,149,"switch ( valueLength )
case 0 :
assign ( runtime , context , self , block ) ;
break ;
case 1 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , block ) ;
break ;
case 2 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , block ) ;
break ;
case 3 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , values . eltInternal ( 2 ) , block ) ;
break ;","switch ( valueLength )
case 0 :
assign ( runtime , context , self , block ) ;
break ;
case 1 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , block ) ;
break ;
case 2 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , block ) ;
break ;
case 3 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , values . eltInternal ( 2 ) , block ) ;
break ;",Type 1
116-1-2,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,225,238,src,org.jruby.runtime,InterpretedBlock,yield,259,272,"Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assignArray ( context . getRuntime ( ) , context , self , assigner . convertToArray ( context . getRuntime ( ) , value ) , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
118-1-2,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,57,70,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,57,70,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 1
118-1-3,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,57,70,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,29,42,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
118-1-4,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,57,70,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,31,44,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
118-2-3,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,57,70,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,29,42,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
118-2-4,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,57,70,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,31,44,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
118-3-4,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,29,42,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,31,44,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
120-1-2,src,org.jruby.runtime,CompiledBlock,yield,97,110,src,org.jruby.runtime,Interpreted19Block,yield,129,142,"IRubyObject self = prepareSelf ( binding ) ;
IRubyObject realArg = setupBlockArg ( context . getRuntime ( ) , value , self ) ;
Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
try


return callback . call ( context , self , realArg ) ;","IRubyObject self = prepareSelf ( binding ) ;

Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
try
setupBlockArg ( context , value , self , Block . NULL_BLOCK , type ) ;
return evalBlockBody ( context , self ) ;
",Type 3
124-1-2,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,60,70,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,60,70,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 1
124-1-3,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,60,70,src,org.jruby.ast,CallSpecialArgNode,interpret,60,73,"
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 3
124-1-4,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,60,70,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,32,42,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
124-1-5,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,60,70,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,34,44,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
124-1-6,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,60,70,src,org.jruby.ast,FCallSpecialArgNode,interpret,32,45,"
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 3
124-2-3,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,60,70,src,org.jruby.ast,CallSpecialArgNode,interpret,60,73,"
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 3
124-2-4,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,60,70,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,32,42,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
124-2-5,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,60,70,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,34,44,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
124-2-6,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,60,70,src,org.jruby.ast,FCallSpecialArgNode,interpret,32,45,"
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 3
124-3-4,src,org.jruby.ast,CallSpecialArgNode,interpret,60,73,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,32,42,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;","
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 3
124-3-5,src,org.jruby.ast,CallSpecialArgNode,interpret,60,73,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,34,44,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;","
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 3
124-3-6,src,org.jruby.ast,CallSpecialArgNode,interpret,60,73,src,org.jruby.ast,FCallSpecialArgNode,interpret,32,45,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 2
124-4-5,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,32,42,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,34,44,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
124-4-6,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,32,42,src,org.jruby.ast,FCallSpecialArgNode,interpret,32,45,"
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 3
124-5-6,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,34,44,src,org.jruby.ast,FCallSpecialArgNode,interpret,32,45,"
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 3
127-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,issueBreakEvent,147,160,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueBreakEvent,136,149,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 1
128-1-2,src,org.jruby.runtime,CompiledBlock,yield,97,110,src,org.jruby.runtime,CompiledBlock19,yield,130,143,"IRubyObject self = prepareSelf ( binding ) ;

IRubyObject realArg = setupBlockArg ( context . getRuntime ( ) , value , self ) ;
Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
try

return callback . call ( context , self , realArg ) ;","IRubyObject self = prepareSelf ( binding ) ;
IRubyObject [ ] realArgs = setupBlockArg ( context . getRuntime ( ) , value , self ) ;

Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
try
return callback . call ( context , self , realArgs , Block . NULL_BLOCK ) ;
",Type 2
128-3-4,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,189,202,src,org.jruby.runtime,InterpretedBlock,yield,242,255,"Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","Visibility oldVis = binding . getFrame ( ) . getVisibility ( ) ;
Frame lastFrame = pre ( context , null , binding ) ;
IRubyObject self = prepareSelf ( binding ) ;
try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
129-2-3,src,org.jruby,TopSelfFactory,createTopSelf,89,101,src,org.jruby,TopSelfFactory,createTopSelf,105,117,"topSelf . getSingletonClass ( ) . defineFastPrivateMethod ( ""public"" , new Callback ( ) { . . . } ) ;","topSelf . getSingletonClass ( ) . defineFastPrivateMethod ( ""private"" , new Callback ( ) { . . . } ) ;",Type 2
130-1-2,src,org.jruby.ast,AttrAssignNode,definition,259,272,src,org.jruby.ast,CallNode,definition,174,187,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
RubyClass metaClass = receiver . getMetaClass ( ) ;
DynamicMethod method = metaClass . searchMethod ( name ) ;
Visibility visibility = method . getVisibility ( ) ;
if ( visibility != Visibility . PRIVATE && ( visibility != Visibility . PROTECTED || metaClass . getRealClass ( ) . isInstance ( self ) ) )
if ( metaClass . isMethodBound ( name , false ) )
return ASTInterpreter . getArgumentDefinition ( runtime , context , argsNode , ""assignment"" , self , aBlock ) ;","IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
RubyClass metaClass = receiver . getMetaClass ( ) ;
DynamicMethod method = metaClass . searchMethod ( getName ( ) ) ;
Visibility visibility = method . getVisibility ( ) ;
if ( visibility != Visibility . PRIVATE && ( visibility != Visibility . PROTECTED || metaClass . getRealClass ( ) . isInstance ( self ) ) )
if ( ! method . isUndefined ( ) )
return ASTInterpreter . getArgumentDefinition ( runtime , context , getArgsNode ( ) , ""method"" , self , aBlock ) ;",Type 2
131-1-2,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assignArray,117,130,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assignArray,136,149,"switch ( valueLength )
case 0 :
assign ( runtime , context , self , block ) ;
break ;
case 1 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , block ) ;
break ;
case 2 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , block ) ;
break ;
case 3 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , values . eltInternal ( 2 ) , block ) ;
break ;","switch ( valueLength )
case 0 :
assign ( runtime , context , self , block ) ;
break ;
case 1 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , block ) ;
break ;
case 2 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , block ) ;
break ;
case 3 :
assign ( runtime , context , self , values . eltInternal ( 0 ) , values . eltInternal ( 1 ) , values . eltInternal ( 2 ) , block ) ;
break ;",Type 1
133-1-2,src,org.jruby.ast,CallSpecialArgNode,interpret,60,73,src,org.jruby.ast,FCallSpecialArgNode,interpret,32,45,"if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;","if ( arg instanceof RubyArray )
RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 2
134-1-2,src,org.jruby.javasupport.proxy,JavaProxyClassFactory,generateGetInvocationHandler,313,325,src,org.jruby.javasupport.proxy,JavaProxyClassFactory,generateGetProxyClass,328,336,"GeneratorAdapter gh = new GeneratorAdapter ( Opcodes . ACC_PUBLIC , new org . objectweb . asm . commons . Method ( ""___getInvocationHandler"" , INVOCATION_HANDLER_TYPE , EMPTY_TYPE_ARR ) , null , EMPTY_TYPE_ARR , cw ) ;
gh . loadThis ( ) ;
gh . getField ( selfType , INVOCATION_HANDLER_FIELD_NAME , INVOCATION_HANDLER_TYPE ) ;
gh . returnValue ( ) ;
gh . endMethod ( ) ;","GeneratorAdapter gpc = new GeneratorAdapter ( Opcodes . ACC_PUBLIC , new org . objectweb . asm . commons . Method ( ""___getProxyClass"" , PROXY_CLASS_TYPE , EMPTY_TYPE_ARR ) , null , EMPTY_TYPE_ARR , cw ) ;

gpc . getStatic ( selfType , PROXY_CLASS_FIELD_NAME , PROXY_CLASS_TYPE ) ;
gpc . returnValue ( ) ;
gpc . endMethod ( ) ;",Type 3
135-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,issueBreakEvent,148,160,src,org.jruby.compiler.impl,MethodBodyCompiler,issueNextEvent,165,177,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )

value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 3
135-1-3,src,org.jruby.compiler.impl,MethodBodyCompiler,issueBreakEvent,148,160,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueBreakEvent,137,149,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 1
135-1-4,src,org.jruby.compiler.impl,MethodBodyCompiler,issueBreakEvent,148,160,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueNextEvent,153,165,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )

value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 3
135-2-3,src,org.jruby.compiler.impl,MethodBodyCompiler,issueNextEvent,165,177,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueBreakEvent,137,149,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )

value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 3
135-2-4,src,org.jruby.compiler.impl,MethodBodyCompiler,issueNextEvent,165,177,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueNextEvent,153,165,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )
value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )
value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 1
135-3-4,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueBreakEvent,137,149,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueNextEvent,153,165,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopBreak ( ) ;
else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )

value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 3
136-1-2,src,org.jruby.compiler.impl,StackBasedVariableCompiler,beginMethod,59,71,src,org.jruby.compiler.impl,StackBasedVariableCompiler,beginClass,92,104,"if ( scope . getNumberOfVariables ( ) > 0 )
int start = scope . getRequiredArgs ( ) ;
for ( int i = start ; i < scope . getNumberOfVariables ( ) ; i ++ )
methodCompiler . loadNil ( ) ;
assignLocalVariable ( i , false ) ;
tempVariableIndex += scope . getNumberOfVariables ( ) ;","if ( scope . getNumberOfVariables ( ) > 0 )
int start = scope . getRequiredArgs ( ) ;
for ( int i = start ; i < scope . getNumberOfVariables ( ) ; i ++ )
methodCompiler . loadNil ( ) ;
assignLocalVariable ( i , false ) ;
tempVariableIndex += scope . getNumberOfVariables ( ) ;",Type 1
137-2-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,113,125,src,org.jruby.internal.runtime.methods,JittedMethod,call,130,142,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 0 ) ;
return jitCompiledScript . __file__ ( context , self , block ) ;",Type 2
139-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,181,193,src,org.jruby.internal.runtime.methods,JittedMethod,call,198,210,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
140-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,215,227,src,org.jruby.internal.runtime.methods,JittedMethod,call,232,244,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , block ) ;",Type 2
143-1-2,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,58,70,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,58,70,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 1
143-1-3,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,58,70,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,30,42,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
143-1-4,src,org.jruby.ast,CallSpecialArgBlockNode,interpret,58,70,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,32,44,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
143-2-3,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,58,70,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,30,42,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
143-2-4,src,org.jruby.ast,CallSpecialArgBlockPassNode,interpret,58,70,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,32,44,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver , block ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
143-3-4,src,org.jruby.ast,FCallSpecialArgBlockNode,interpret,30,42,src,org.jruby.ast,FCallSpecialArgBlockPassNode,interpret,32,44,"RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . callIter ( context , self , self , block ) ;
case 1 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . callIter ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . callIter ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;","RubyArray nodes = ( RubyArray ) arg ;
switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self , block ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , block ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , block ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) , block ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) , block ) ;",Type 2
144-1-2,src,org.jruby.ast,AttrAssignTwoArgNode,interpret,33,44,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;

IRubyObject param2 = arg2 . interpret ( runtime , context , self , aBlock ) ;
assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;
CallSite callSite = selectCallSite ( self , receiver ) ;

callSite . call ( context , self , receiver , param1 , param2 ) ;
return param2 ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;



firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;",Type 3
144-1-3,src,org.jruby.ast,AttrAssignTwoArgNode,interpret,33,44,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;

IRubyObject param2 = arg2 . interpret ( runtime , context , self , aBlock ) ;
assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;
CallSite callSite = selectCallSite ( self , receiver ) ;
callSite . call ( context , self , receiver , param1 , param2 ) ;
return param2 ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;



elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;",Type 3
144-1-4,src,org.jruby.ast,AttrAssignTwoArgNode,interpret,33,44,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;

IRubyObject param2 = arg2 . interpret ( runtime , context , self , aBlock ) ;
assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;
CallSite callSite = selectCallSite ( self , receiver ) ;

callSite . call ( context , self , receiver , param1 , param2 ) ;
return param2 ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;



firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;",Type 3
144-1-5,src,org.jruby.ast,AttrAssignTwoArgNode,interpret,33,44,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,80,92,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param2 = arg2 . interpret ( runtime , context , self , aBlock ) ;

assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;

CallSite callSite = selectCallSite ( self , receiver ) ;
callSite . call ( context , self , receiver , param1 , param2 ) ;
return param2 ;","

RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

site . setTarget ( createGWT ( TEST_0 , TARGET_0 , FALLBACK_0 , entry , site ) ) ;


return entry . method . call ( context , self , selfClass , name ) ;",Type 3
144-2-3,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;

firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;
return firstValue ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
",Type 3
144-2-4,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( ! firstValue . isTrue ( ) )
return firstValue ;
firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( firstValue . isTrue ( ) )
return firstValue ;
firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;",Type 2
144-2-5,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,80,92,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( ! firstValue . isTrue ( ) )
return firstValue ;


firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;


if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name ) ;
site . setTarget ( createGWT ( TEST_0 , TARGET_0 , FALLBACK_0 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name ) ;


",Type 3
144-3-4,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;
","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;

return firstValue ;",Type 3
144-3-5,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,80,92,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;

return firstValue ;","

RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

site . setTarget ( createGWT ( TEST_0 , TARGET_0 , FALLBACK_0 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name ) ;",Type 3
144-4-5,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,80,92,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;


IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( firstValue . isTrue ( ) )
return firstValue ;


firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name ) ;



site . setTarget ( createGWT ( TEST_0 , TARGET_0 , FALLBACK_0 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name ) ;


",Type 3
145-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,79,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,96,108,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;",Type 2
145-1-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,79,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,147,159,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , args . length ) ;

return jitCompiledScript . __file__ ( context , self , args , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;
",Type 2
145-1-4,src,org.jruby.internal.runtime.methods,JittedMethod,call,79,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,164,176,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;",Type 2
145-1-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,79,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,181,193,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
145-1-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,79,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,198,210,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
145-2-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,96,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,147,159,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;",Type 2
145-2-4,src,org.jruby.internal.runtime.methods,JittedMethod,call,96,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,164,176,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;

return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;
",Type 2
145-2-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,96,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,181,193,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
145-2-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,96,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,198,210,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
145-3-4,src,org.jruby.internal.runtime.methods,JittedMethod,call,147,159,src,org.jruby.internal.runtime.methods,JittedMethod,call,164,176,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;",Type 2
145-3-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,147,159,src,org.jruby.internal.runtime.methods,JittedMethod,call,181,193,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
145-3-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,147,159,src,org.jruby.internal.runtime.methods,JittedMethod,call,198,210,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
145-4-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,164,176,src,org.jruby.internal.runtime.methods,JittedMethod,call,181,193,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
145-4-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,164,176,src,org.jruby.internal.runtime.methods,JittedMethod,call,198,210,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
145-5-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,181,193,src,org.jruby.internal.runtime.methods,JittedMethod,call,198,210,"Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;","Ruby runtime = context . getRuntime ( ) ;
try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
148-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,353,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,390,401,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
148-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,353,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,409,420,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
148-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,390,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,409,420,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
149-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,390,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,427,438,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
149-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,390,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,446,457,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
149-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,390,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
149-1-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,390,401,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,483,494,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
149-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,427,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,446,457,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
149-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,427,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
149-2-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,427,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,483,494,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
149-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,446,457,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
149-3-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,446,457,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,483,494,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
149-4-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,483,494,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
150-1-2,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;

firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;
return firstValue ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
",Type 3
150-1-3,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( ! firstValue . isTrue ( ) )
return firstValue ;
firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( firstValue . isTrue ( ) )
return firstValue ;
firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;",Type 2
150-1-4,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,95,103,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( ! firstValue . isTrue ( ) )
return firstValue ;


firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;


if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , arg0 ) ;
site . setTarget ( createGWT ( TEST_1 , TARGET_1 , FALLBACK_1 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 ) ;


",Type 3
150-1-5,src,org.jruby.ast,OpElementOneArgAndAsgnNode,interpret,61,72,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,128,136,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( ! firstValue . isTrue ( ) )
return firstValue ;


firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;


if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , args ) ;
site . setTarget ( createGWT ( TEST_N , TARGET_N , FALLBACK_N , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , args ) ;


",Type 3
150-2-3,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;
","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;

return firstValue ;",Type 3
150-2-4,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,95,103,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;

return firstValue ;","

RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

site . setTarget ( createGWT ( TEST_1 , TARGET_1 , FALLBACK_1 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 ) ;",Type 3
150-2-5,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,128,136,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;

return firstValue ;","

RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

site . setTarget ( createGWT ( TEST_N , TARGET_N , FALLBACK_N , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , args ) ;",Type 3
150-3-4,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,95,103,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;


IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( firstValue . isTrue ( ) )
return firstValue ;


firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , arg0 ) ;



site . setTarget ( createGWT ( TEST_1 , TARGET_1 , FALLBACK_1 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 ) ;


",Type 3
150-3-5,src,org.jruby.ast,OpElementOneArgOrAsgnNode,interpret,61,72,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,128,136,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;


IRubyObject firstValue = elementAdapter . call ( context , self , receiver , rArg1 ) ;
if ( firstValue . isTrue ( ) )
return firstValue ;


firstValue = getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ;
elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , args ) ;



site . setTarget ( createGWT ( TEST_N , TARGET_N , FALLBACK_N , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , args ) ;


",Type 3
150-4-5,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,95,103,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,128,136,"RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;
if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , arg0 ) ;
site . setTarget ( createGWT ( TEST_1 , TARGET_1 , FALLBACK_1 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 ) ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;
if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , args ) ;
site . setTarget ( createGWT ( TEST_N , TARGET_N , FALLBACK_N , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , args ) ;",Type 2
151-1-2,src,org.jruby.ast,AttrAssignNode,otherAssign,243,254,src,org.jruby.ast,CallNode,assign,158,169,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , block ) ;
if ( argsNode == null )

RuntimeHelpers . invoke ( context , receiver , name , value , CallType . NORMAL , Block . NULL_BLOCK ) ;
else
RubyArray args = ( RubyArray ) argsNode . interpret ( runtime , context , self , block ) ;
args . append ( value ) ;
RuntimeHelpers . invoke ( context , receiver , name , args . toJavaArray ( ) , CallType . NORMAL , Block . NULL_BLOCK ) ;
return runtime . getNil ( ) ;","IRubyObject receiver = receiverNode . interpret ( runtime , context , self , block ) ;
if ( argsNode == null )
RuntimeHelpers . invoke ( context , receiver , getName ( ) , new IRubyObject [ ] { value } , CallType . NORMAL , Block . NULL_BLOCK ) ;

else
RubyArray args = ( RubyArray ) argsNode . interpret ( runtime , context , self , block ) ;
args . append ( value ) ;
RuntimeHelpers . invoke ( context , receiver , getName ( ) , args . toJavaArray ( ) , CallType . NORMAL , Block . NULL_BLOCK ) ;
return runtime . getNil ( ) ;",Type 2
152-1-2,src,org.jruby.ast,AttrAssignTwoArgNode,assign,49,60,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;

IRubyObject param2 = arg2 . interpret ( runtime , context , self , aBlock ) ;
assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;
CallSite callSite = selectCallSite ( self , receiver ) ;
callSite . call ( context , self , receiver , param1 , param2 , value ) ;
return runtime . getNil ( ) ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;



elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;
return firstValue ;",Type 3
152-1-3,src,org.jruby.ast,AttrAssignTwoArgNode,assign,49,60,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,95,103,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;

IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param2 = arg2 . interpret ( runtime , context , self , aBlock ) ;
assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;

CallSite callSite = selectCallSite ( self , receiver ) ;

callSite . call ( context , self , receiver , param1 , param2 , value ) ;
return runtime . getNil ( ) ;","RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;



site . setTarget ( createGWT ( TEST_1 , TARGET_1 , FALLBACK_1 , entry , site ) ) ;

return entry . method . call ( context , self , selfClass , name , arg0 ) ;

",Type 3
152-2-3,src,org.jruby.ast,OpElementOneArgAsgnNode,interpret,61,70,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,95,103,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject rArg1 = arg1 . interpret ( runtime , context , self , aBlock ) ;
IRubyObject firstValue = callAdapter . call ( context , self , elementAdapter . call ( context , self , receiver , rArg1 ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) ) ;

elementAsgnAdapter . call ( context , self , receiver , rArg1 , firstValue ) ;

return firstValue ;","

RubyClass selfClass = pollAndGetClass ( context , self ) ;
CacheEntry entry = selfClass . searchWithCache ( name ) ;

site . setTarget ( createGWT ( TEST_1 , TARGET_1 , FALLBACK_1 , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 ) ;",Type 3
153-2-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,162,173,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,fallback,219,230,"try
if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , arg0 , block ) ;
site . setTarget ( createGWT ( TEST_1_B , TARGET_1_B , FALLBACK_1_B , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , arg0 , block ) ;","try
if ( methodMissing ( entry , site . callType ( ) , name , caller ) )
return callMethodMissing ( entry , site . callType ( ) , context , self , name , args , block ) ;
site . setTarget ( createGWT ( TEST_N_B , TARGET_N_B , FALLBACK_N_B , entry , site ) ) ;
return entry . method . call ( context , self , selfClass , name , args , block ) ;",Type 2
155-1-2,src,org.jruby.util,GenericMap,values,180,191,src,org.jruby.util,GenericMap,keySet,196,207,return new AbstractCollection ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
156-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,selectMethodMissing,321,332,src,org.jruby.javasupport.util,RuntimeHelpers,selectMethodMissing,335,346,"Ruby runtime = context . getRuntime ( ) ;
if ( name . equals ( ""method_missing"" ) )
return selectInternalMM ( runtime , visibility , callType ) ;
DynamicMethod methodMissing = receiver . getMetaClass ( ) . searchMethod ( ""method_missing"" ) ;
if ( methodMissing . isUndefined ( ) || methodMissing == runtime . getDefaultMethodMissing ( ) )
return selectInternalMM ( runtime , visibility , callType ) ;
return new MethodMissingMethod ( methodMissing ) ;","Ruby runtime = context . getRuntime ( ) ;
if ( name . equals ( ""method_missing"" ) )
return selectInternalMM ( runtime , visibility , callType ) ;
DynamicMethod methodMissing = selfClass . searchMethod ( ""method_missing"" ) ;
if ( methodMissing . isUndefined ( ) || methodMissing == runtime . getDefaultMethodMissing ( ) )
return selectInternalMM ( runtime , visibility , callType ) ;
return new MethodMissingMethod ( methodMissing ) ;",Type 2
157-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,107,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,131,142,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;
argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
157-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,107,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;

argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;

return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
157-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,107,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,187,198,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;
argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
157-1-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,107,118,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , args . length ) ;
argsNode . prepare ( context , runtime , self , args , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
157-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,131,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
157-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,131,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,187,198,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
157-2-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,131,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
157-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,187,198,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
157-3-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
157-4-5,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,187,198,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
158-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,205,216,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
158-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
158-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,168,179,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,261,272,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
158-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,205,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
158-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,205,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,261,272,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
158-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,224,235,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,261,272,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
159-1-2,src,org.jruby.ext.ffi.jffi,DefaultMethodFactory,createMethod,123,134,src,org.jruby.ext.ffi.jffi,FastIntMethodFactory,createMethod,89,99,"switch ( parameterTypes . length )
case 0 :
return new FastIntMethodZeroArg ( module , function , resultConverter , intParameterConverters ) ;
case 1 :
return new FastIntPointerMethodOneArg ( module , function , resultConverter , intParameterConverters , marshallers ) ;
case 2 :
return new FastIntPointerMethodTwoArg ( module , function , resultConverter , intParameterConverters , marshallers ) ;
case 3 :
return new FastIntPointerMethodThreeArg ( module , function , resultConverter , intParameterConverters , marshallers ) ;

","switch ( parameterTypes . length )
case 0 :
return new FastIntMethodZeroArg ( module , function , resultConverter , parameterConverters ) ;
case 1 :
return new FastIntMethodOneArg ( module , function , resultConverter , parameterConverters ) ;
case 2 :
return new FastIntMethodTwoArg ( module , function , resultConverter , parameterConverters ) ;
case 3 :
return new FastIntMethodThreeArg ( module , function , resultConverter , parameterConverters ) ;
default :
throw module . getRuntime ( ) . newRuntimeError ( ""Arity "" + parameterTypes . length + "" not implemented"" ) ;",Type 3
159-1-3,src,org.jruby.ext.ffi.jffi,DefaultMethodFactory,createMethod,123,134,src,org.jruby.ext.ffi.jffi,FastLongMethodFactory,createMethod,87,97,"switch ( parameterTypes . length )
case 0 :
return new FastIntMethodZeroArg ( module , function , resultConverter , intParameterConverters ) ;
case 1 :
return new FastIntPointerMethodOneArg ( module , function , resultConverter , intParameterConverters , marshallers ) ;
case 2 :
return new FastIntPointerMethodTwoArg ( module , function , resultConverter , intParameterConverters , marshallers ) ;
case 3 :
return new FastIntPointerMethodThreeArg ( module , function , resultConverter , intParameterConverters , marshallers ) ;

","switch ( parameterTypes . length )
case 0 :
return new FastLongMethodZeroArg ( module , function , resultConverter , parameterConverters ) ;
case 1 :
return new FastLongMethodOneArg ( module , function , resultConverter , parameterConverters ) ;
case 2 :
return new FastLongMethodTwoArg ( module , function , resultConverter , parameterConverters ) ;
case 3 :
return new FastLongMethodThreeArg ( module , function , resultConverter , parameterConverters ) ;
default :
throw module . getRuntime ( ) . newRuntimeError ( ""Arity "" + parameterTypes . length + "" not implemented"" ) ;",Type 3
159-2-3,src,org.jruby.ext.ffi.jffi,FastIntMethodFactory,createMethod,89,99,src,org.jruby.ext.ffi.jffi,FastLongMethodFactory,createMethod,87,97,"switch ( parameterTypes . length )
case 0 :
return new FastIntMethodZeroArg ( module , function , resultConverter , parameterConverters ) ;
case 1 :
return new FastIntMethodOneArg ( module , function , resultConverter , parameterConverters ) ;
case 2 :
return new FastIntMethodTwoArg ( module , function , resultConverter , parameterConverters ) ;
case 3 :
return new FastIntMethodThreeArg ( module , function , resultConverter , parameterConverters ) ;
default :
throw module . getRuntime ( ) . newRuntimeError ( ""Arity "" + parameterTypes . length + "" not implemented"" ) ;","switch ( parameterTypes . length )
case 0 :
return new FastLongMethodZeroArg ( module , function , resultConverter , parameterConverters ) ;
case 1 :
return new FastLongMethodOneArg ( module , function , resultConverter , parameterConverters ) ;
case 2 :
return new FastLongMethodTwoArg ( module , function , resultConverter , parameterConverters ) ;
case 3 :
return new FastLongMethodThreeArg ( module , function , resultConverter , parameterConverters ) ;
default :
throw module . getRuntime ( ) . newRuntimeError ( ""Arity "" + parameterTypes . length + "" not implemented"" ) ;",Type 2
161-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,131,142,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,150,161,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
162-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,150,161,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,187,198,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 0 ) ;
argsNode . prepare ( context , runtime , self , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 1 ) ;
argsNode . prepare ( context , runtime , self , arg0 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
163-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,issueNextEvent,166,177,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueNextEvent,154,165,"if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )
value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","if ( currentLoopLabels != null )
value . call ( this ) ;
issueLoopNext ( ) ;
else if ( inNestedMethod )
value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 1
165-1-2,src,org.jruby.compiler.impl,InvokeDynamicInvocationCompiler,invokeDynamic,92,103,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeDynamic,482,493,"switch ( argsCallback . getArity ( ) )
case 1 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , String . class , IRubyObject . class ) ) ;
break ;
case 2 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , String . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
case 3 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , String . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
default :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , String . class , IRubyObject [ ] . class ) ) ;","switch ( argsCallback . getArity ( ) )
case 1 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , Block . class ) ) ;
break ;
case 2 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , Block . class ) ) ;
break ;
case 3 :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , Block . class ) ) ;
break ;
default :
signature = sig ( IRubyObject . class , params ( ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class , Block . class ) ) ;",Type 2
166-1-2,src,org.jruby.ast,Colon2ConstNode,reCache,67,78,src,org.jruby.ast,Colon3Node,reCache,135,144,"
int newGeneration = context . getRuntime ( ) . getConstantGeneration ( ) ;
IRubyObject value = target . fastGetConstantFromNoConstMissing ( name ) ;
cachedValue = value ;
if ( value != null )
generation = newGeneration ;
hash = target . hashCode ( ) ;
return value ;","Ruby runtime = context . getRuntime ( ) ;
int newGeneration = runtime . getConstantGeneration ( ) ;
IRubyObject value = runtime . getObject ( ) . fastGetConstantFromNoConstMissing ( name ) ;
cachedValue = value ;
if ( value != null )
generation = newGeneration ;

return value ;",Type 3
167-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,279,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,316,327,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
167-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,279,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,335,346,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
167-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,316,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,335,346,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
168-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,316,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,353,364,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
168-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,316,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,372,383,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
168-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,316,327,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,409,420,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
168-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,353,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,372,383,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
168-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,353,364,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,409,420,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
168-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,372,383,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,409,420,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 6 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 7 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
171-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,205,216,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,242,253,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 2 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
172-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,242,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,261,272,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
172-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,242,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,298,309,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
172-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,261,272,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,298,309,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
173-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,242,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,279,290,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
173-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,242,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,298,309,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
173-1-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,242,253,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,335,346,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 3 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
173-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,279,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,298,309,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
173-2-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,279,290,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,335,346,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
173-3-4,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,298,309,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,335,346,"try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 4 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , block ) ;
return body . interpret ( runtime , context , self , block ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 5 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
174-1-2,src,org.jruby.util,GenericMap,values,180,191,src,org.jruby.util,GenericMap,keySet,196,207,return new AbstractCollection ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
174-1-3,src,org.jruby.util,GenericMap,values,180,191,src,org.jruby.util,GenericMap,entrySet,245,256,return new AbstractCollection ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
174-2-3,src,org.jruby.util,GenericMap,keySet,196,207,src,org.jruby.util,GenericMap,entrySet,245,256,return new AbstractSet ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
175-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,427,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
175-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,427,438,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,483,494,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 8 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
175-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,483,494,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
176-1-2,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,501,512,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;",Type 2
176-1-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,464,475,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,520,531,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 9 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
176-2-3,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,501,512,src,org.jruby.internal.runtime.methods,InterpretedMethod,call,520,531,"try
pre ( context , name , self , Block . NULL_BLOCK , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , Block . NULL_BLOCK ) ;
return body . interpret ( runtime , context , self , Block . NULL_BLOCK ) ;","try
pre ( context , name , self , block , runtime ) ;
argsNode . checkArgCount ( runtime , 10 ) ;
argsNode . prepare ( context , runtime , self , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , block ) ;
return body . interpret ( runtime , context , self , block ) ;",Type 2
178-1-2,src,org.jruby.runtime,CompiledBlock,defaultArgsLogic,166,176,src,org.jruby.runtime,CompiledBlock19,defaultArgsLogic,209,219,"int length = ArgsUtil . arrayLength ( value ) ;
switch ( length )
case 0 :
return ruby . getNil ( ) ;
case 1 :
return ( ( RubyArray ) value ) . eltInternal ( 0 ) ;
default :
blockArgWarning ( ruby , length ) ;
return value ;","int length = ArgsUtil . arrayLength ( value ) ;
switch ( length )
case 0 :
return ruby . getNil ( ) ;
case 1 :
return ( ( RubyArray ) value ) . eltInternal ( 0 ) ;
default :
blockArgWarning ( ruby , length ) ;
return value ;",Type 1
179-1-2,src,org.jruby.util,JRubyFile,list,156,166,src,org.jruby.util,NormalizedFile,listFiles,157,167,"String [ ] files = super . list ( filter ) ;

String [ ] smartFiles = new String [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )

smartFiles [ i ] = normalizeSeps ( files [ i ] ) ;","
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;

for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
",Type 3
179-1-3,src,org.jruby.util,JRubyFile,list,156,166,src,org.jruby.util,NormalizedFile,listFiles,172,182,"String [ ] files = super . list ( filter ) ;

String [ ] smartFiles = new String [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )

smartFiles [ i ] = normalizeSeps ( files [ i ] ) ;","
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;

for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
",Type 3
179-2-3,src,org.jruby.util,NormalizedFile,listFiles,157,167,src,org.jruby.util,NormalizedFile,listFiles,172,182,"File [ ] files = super . listFiles ( filter ) ;
if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","File [ ] files = super . listFiles ( filter ) ;
if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 2
180-1-2,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,"byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-3,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","short [ ] array = new short [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-4,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","short [ ] array = new short [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-5,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-6,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-7,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-1-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned8,12,22,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned8 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-3,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","short [ ] array = new short [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-4,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","short [ ] array = new short [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-5,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-6,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-7,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-2-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned8,35,45,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
byte [ ] array = new byte [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned8 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-4,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,"short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-5,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-6,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-7,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-3-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned16,58,68,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned16 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-4-5,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-4-6,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-4-7,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-4-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-4-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-4-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned16,81,91,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
short [ ] array = new short [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned16 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-5-6,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,"int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;","int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-5-7,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-5-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-5-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-5-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned32,104,114,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned32 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-6-7,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-6-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-6-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-6-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned32,127,137,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
int [ ] array = new int [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned32 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-7-8,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,"long [ ] array = new long [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;","long [ ] array = new long [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-7-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
long [ ] array = new long [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-7-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfSigned64,150,160,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
long [ ] array = new long [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newSigned64 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-8-9,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,"
long [ ] array = new long [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;","float [ ] array = new float [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-8-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfUnsigned64,173,183,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
long [ ] array = new long [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( Util . newUnsigned64 ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
180-9-10,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat32,196,206,src,org.jruby.ext.ffi,MemoryUtil,getArrayOfFloat64,219,229,"
float [ ] array = new float [ count ] ;
io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;","double [ ] array = new double [ count ] ;

io . get ( offset , array , 0 , array . length ) ;
RubyArray arr = RubyArray . newArray ( runtime , array . length ) ;
for ( int i = 0 ; i < array . length ; ++ i )
arr . add ( RubyFloat . newFloat ( runtime , array [ i ] ) ) ;
return arr ;",Type 2
181-1-2,src,org.jruby.util,JRubyFile,listFiles,184,194,src,org.jruby.util,JRubyFile,listFiles,198,208,"final File [ ] files = super . listFiles ( filter ) ;
if ( files == null )
return null ;
JRubyFile [ ] smartFiles = new JRubyFile [ files . length ] ;
for ( int i = 0 , j = files . length ; i < j ; i ++ )
smartFiles [ i ] = createNoUnicodeConversion ( super . getAbsolutePath ( ) , files [ i ] . getPath ( ) ) ;
return smartFiles ;","final File [ ] files = super . listFiles ( filter ) ;
if ( files == null )
return null ;
JRubyFile [ ] smartFiles = new JRubyFile [ files . length ] ;
for ( int i = 0 , j = files . length ; i < j ; i ++ )
smartFiles [ i ] = createNoUnicodeConversion ( super . getAbsolutePath ( ) , files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 2
184-1-2,src,org.jruby.ast,AttrAssignOneArgNode,interpret,31,41,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,192,198,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;

assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;
CallSite callSite = selectCallSite ( self , receiver ) ;
callSite . call ( context , self , receiver , param1 ) ;
return param1 ;","
RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;



return cacheAndCall ( caller , selfType , block , context , self , arg1 , arg2 ) ;",Type 3
184-1-3,src,org.jruby.ast,AttrAssignOneArgNode,interpret,31,41,src,org.jruby.runtime.callsite,CachingCallSite,call,223,229,"IRubyObject receiver = receiverNode . interpret ( runtime , context , self , aBlock ) ;
IRubyObject param1 = arg1 . interpret ( runtime , context , self , aBlock ) ;

assert hasMetaClass ( receiver ) : receiverClassName ( receiver ) ;
CallSite callSite = selectCallSite ( self , receiver ) ;
callSite . call ( context , self , receiver , param1 ) ;
return param1 ;","
RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;



return cacheAndCall ( caller , selfType , context , self , arg1 , arg2 , arg3 ) ;",Type 3
184-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,192,198,src,org.jruby.runtime.callsite,CachingCallSite,call,223,229,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , arg1 , arg2 ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 ) ;
return cacheAndCall ( caller , selfType , context , self , arg1 , arg2 , arg3 ) ;",Type 2
186-1-2,src,org.jruby.util,ShellLauncher,unwrapBufferedStream,409,419,src,org.jruby.util,ShellLauncher,unwrapBufferedStream,430,440,"while ( filteredStream instanceof FilterOutputStream )
try
filteredStream = ( OutputStream ) FieldAccess . getProtectedFieldValue ( FilterOutputStream . class , ""out"" , filteredStream ) ;
return filteredStream ;","while ( filteredStream instanceof FilterInputStream )
try
filteredStream = ( InputStream ) FieldAccess . getProtectedFieldValue ( FilterInputStream . class , ""in"" , filteredStream ) ;
return filteredStream ;",Type 2
188-1-2,src,org.jruby.util,GenericMap,values,181,191,src,org.jruby.util,GenericMap,keySet,197,207,return new AbstractCollection ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
188-1-3,src,org.jruby.util,GenericMap,values,181,191,src,org.jruby.util,GenericMap,entrySet,246,256,return new AbstractCollection ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
188-2-3,src,org.jruby.util,GenericMap,keySet,197,207,src,org.jruby.util,GenericMap,entrySet,246,256,return new AbstractSet ( ) { . . . } ;,return new AbstractSet ( ) { . . . } ;,Type 2
189-2-3,src,org.jruby.util,Sprintf,rubySprintfToBuffer,676,686,src,org.jruby.util,Sprintf,rubySprintfToBuffer,794,804,"if ( negative )
signChar = '-' ;
width -- ;
else if ( ( flags & FLAG_PLUS ) != 0 )
signChar = '+' ;
width -- ;
else if ( ( flags & FLAG_SPACE ) != 0 )
signChar = ' ' ;
width -- ;
else
signChar = 0 ;","if ( negative )
signChar = '-' ;
width -- ;
else if ( ( flags & FLAG_PLUS ) != 0 )
signChar = '+' ;
width -- ;
else if ( ( flags & FLAG_SPACE ) != 0 )
signChar = ' ' ;
width -- ;
else
signChar = 0 ;",Type 1
193-1-2,src,org.jruby.ast,CallSpecialArgNode,interpret,63,73,src,org.jruby.ast,FCallSpecialArgNode,interpret,35,45,"switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , receiver ) ;
case 1 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , receiver , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , receiver , nodes . toJavaArrayMaybeUnsafe ( ) ) ;","switch ( nodes . size ( ) )
case 0 :
return callAdapter . call ( context , self , self ) ;
case 1 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) ) ;
case 2 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) ) ;
case 3 :
return callAdapter . call ( context , self , self , nodes . eltInternal ( 0 ) , nodes . eltInternal ( 1 ) , nodes . eltInternal ( 2 ) ) ;
default :
return callAdapter . call ( context , self , self , nodes . toJavaArrayMaybeUnsafe ( ) ) ;",Type 2
194-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,issueBreakEvent,151,160,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueBreakEvent,140,149,"else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","else if ( inNestedMethod )
loadThreadContext ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakJump"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""breakLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 1
195-1-2,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,24,32,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,35,44,return new Fixnum ( _value + ( ( Fixnum ) arg ) . _value ) ;,return new Float ( _value + ( ( Float ) arg ) . _value ) ;,Type 2
198-1-2,src,org.jruby.runtime.callsite,SuperCallSite,callBlock,41,50,src,org.jruby.runtime.callsite,SuperCallSite,callBlock,133,142,"RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , args , block ) ;
return cacheAndCall ( caller , selfType , block , args , context , self , name ) ;","RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , name , arg1 ) ;",Type 2
198-1-3,src,org.jruby.runtime.callsite,SuperCallSite,callBlock,41,50,src,org.jruby.runtime.callsite,SuperCallSite,call,167,176,"RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , args , block ) ;
return cacheAndCall ( caller , selfType , block , args , context , self , name ) ;","RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 , arg2 ) ;
return cacheAndCall ( caller , selfType , context , self , name , arg1 , arg2 ) ;",Type 2
198-2-3,src,org.jruby.runtime.callsite,SuperCallSite,callBlock,133,142,src,org.jruby.runtime.callsite,SuperCallSite,call,167,176,"RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , name , arg1 ) ;","RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 , arg2 ) ;
return cacheAndCall ( caller , selfType , context , self , name , arg1 , arg2 ) ;",Type 2
199-1-2,src,org.jruby.runtime.callsite,SuperCallSite,callBlock,179,188,src,org.jruby.runtime.callsite,SuperCallSite,call,213,222,"RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 , arg2 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , name , arg1 , arg2 ) ;","RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 , arg2 , arg3 ) ;
return cacheAndCall ( caller , selfType , context , self , name , arg1 , arg2 , arg3 ) ;",Type 2
200-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,82,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,99,108,"try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;",Type 2
200-1-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,82,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,116,125,"try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;",Type 2
200-1-4,src,org.jruby.internal.runtime.methods,JittedMethod,call,82,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,150,159,"try
pre ( context , self , name , block , args . length ) ;

return jitCompiledScript . __file__ ( context , self , args , block ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;
",Type 2
200-1-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,82,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,167,176,"try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;",Type 2
200-1-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,82,91,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,"try
pre ( context , self , name , block , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , block ) ;","try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
200-2-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,99,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,116,125,"try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;",Type 2
200-2-4,src,org.jruby.internal.runtime.methods,JittedMethod,call,99,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,150,159,"try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;",Type 2
200-2-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,99,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,167,176,"try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;

return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;
",Type 2
200-2-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,99,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,"try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
200-3-4,src,org.jruby.internal.runtime.methods,JittedMethod,call,116,125,src,org.jruby.internal.runtime.methods,JittedMethod,call,150,159,"try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;",Type 2
200-3-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,116,125,src,org.jruby.internal.runtime.methods,JittedMethod,call,167,176,"try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;",Type 2
200-3-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,116,125,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,"try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
200-4-5,src,org.jruby.internal.runtime.methods,JittedMethod,call,150,159,src,org.jruby.internal.runtime.methods,JittedMethod,call,167,176,"try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;",Type 2
200-4-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,150,159,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,"try
pre ( context , self , name , Block . NULL_BLOCK , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
200-5-6,src,org.jruby.internal.runtime.methods,JittedMethod,call,167,176,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,"try
pre ( context , self , name , block , 1 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , block ) ;","try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
200-7-8,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,212,220,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,230,238,"try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
201-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,issueRedoEvent,182,191,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueRedoEvent,169,178,"if ( currentLoopLabels != null )
issueLoopRedo ( ) ;
else if ( inNestedMethod )
invokeUtilityMethod ( ""redoJump"" , sig ( IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
invokeUtilityMethod ( ""redoLocalJumpError"" , sig ( IRubyObject . class , Ruby . class ) ) ;","if ( currentLoopLabels != null )
issueLoopRedo ( ) ;
else if ( inNestedMethod )
invokeUtilityMethod ( ""redoJump"" , sig ( IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
invokeUtilityMethod ( ""redoLocalJumpError"" , sig ( IRubyObject . class , Ruby . class ) ) ;",Type 1
203-1-2,src,org.jruby.runtime.load,LoadService,prepareRequireSearch,575,584,src,org.jruby.runtime.load,LoadService,prepareLoadSearch,597,606,"if ( ( matcher = extensionPattern . matcher ( file ) ) . find ( ) )
suffixType = SuffixType . Extension ;
searchFile = file . substring ( 0 , matcher . start ( ) ) ;
else
suffixType = SuffixType . Both ;
searchFile = file ;","if ( ( matcher = sourcePattern . matcher ( file ) ) . find ( ) )
suffixType = SuffixType . Source ;
searchFile = file . substring ( 0 , matcher . start ( ) ) ;
else
suffixType = SuffixType . Neither ;
searchFile = file ;",Type 2
204-1-2,src,org.jruby.java,MiniJava,call,1266,1275,src,org.jruby.java,MiniJava,call,1307,1316,"Object [ ] newArgs = new Object [ args . length ] ;
for ( int i = 0 ; i < args . length ; i ++ )
IRubyObject arg = args [ i ] ;
newArgs [ i ] = rubyToJava ( arg ) ;
handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , newArgs ) ;
return self ;","Object [ ] newArgs = new Object [ args . length ] ;
for ( int i = 0 ; i < args . length ; i ++ )
IRubyObject arg = args [ i ] ;
newArgs [ i ] = rubyToJava ( arg ) ;
handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , newArgs ) ;
return self ;",Type 1
205-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,createCompiledBlockBody,163,172,src,org.jruby.javasupport.util,RuntimeHelpers,createCompiledBlockBody19,182,191,"if ( light )
return CompiledBlockLight . newCompiledBlockLight ( Arity . createArity ( arity ) , staticScope , createBlockCallback ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;
else
return CompiledBlock . newCompiledBlock ( Arity . createArity ( arity ) , staticScope , createBlockCallback ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;","if ( light )
return CompiledBlockLight19 . newCompiledBlockLight ( Arity . createArity ( arity ) , staticScope , createBlockCallback19 ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;
else
return CompiledBlock19 . newCompiledBlock ( Arity . createArity ( arity ) , staticScope , createBlockCallback19 ( context . getRuntime ( ) , scriptObject , closureMethod ) , hasMultipleArgsHead , argsNodeType ) ;",Type 2
208-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityOne,84,93,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,101,110,"JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length < 1 || ( callablesForArity = javaCallables [ 1 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 1 , javaCallables . length - 1 ) ;","
if ( callable . getParameterTypes ( ) . length != 2 )
throw self . getRuntime ( ) . newArgumentError ( 2 , callable . getParameterTypes ( ) . length ) ;",Type 3
208-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityOne,84,93,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,101,110,"
if ( callable . getParameterTypes ( ) . length != 1 )
throw self . getRuntime ( ) . newArgumentError ( 1 , callable . getParameterTypes ( ) . length ) ;","JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 2 || ( callablesForArity = javaCallables [ 2 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 2 , javaCallables . length - 1 ) ;",Type 3
209-1-2,src,org.jruby.java,MiniJava,call,1178,1187,src,org.jruby.java,MiniJava,call,1219,1228,"Object [ ] newArgs = new Object [ args . length ] ;
for ( int i = 0 ; i < args . length ; i ++ )
IRubyObject arg = args [ i ] ;
newArgs [ i ] = rubyToJava ( arg ) ;
Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , newArgs ) ;
return javaToRuby ( ruby , result ) ;","Object [ ] newArgs = new Object [ args . length ] ;
for ( int i = 0 ; i < args . length ; i ++ )
IRubyObject arg = args [ i ] ;
newArgs [ i ] = rubyToJava ( arg ) ;
Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , newArgs ) ;
return javaToRuby ( ruby , result ) ;",Type 1
211-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,116,125,src,org.jruby.internal.runtime.methods,JittedMethod,call,133,142,"try
pre ( context , self , name , Block . NULL_BLOCK , 0 ) ;
return jitCompiledScript . __file__ ( context , self , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 0 ) ;
return jitCompiledScript . __file__ ( context , self , block ) ;",Type 2
212-2-3,src,org.jruby.runtime,InterpretedBlock,yieldSpecific,194,202,src,org.jruby.runtime,InterpretedBlock,yield,248,255,"try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , arg0 , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;","try
if ( ! noargblock )
assigner . assign ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;
return evalBlockBody ( context , self ) ;",Type 2
215-1-2,src,org.jruby.util,Sprintf,rubySprintfToBuffer,984,993,src,org.jruby.util,Sprintf,rubySprintfToBuffer,1068,1077,"if ( intLength > 0 )
if ( intDigits > 0 )
buf . append ( digits , 0 , intDigits ) ;
if ( intZeroes > 0 )
buf . fill ( '0' , intZeroes ) ;
else
buf . append ( '0' ) ;","if ( intLength > 0 )
if ( intDigits > 0 )
buf . append ( digits , 0 , intDigits ) ;
if ( intZeroes > 0 )
buf . fill ( '0' , intZeroes ) ;
else
buf . append ( '0' ) ;",Type 1
216-1-2,src,org.jruby.runtime,Interpreted19Block,evalBlockBody,182,191,src,org.jruby.runtime,InterpretedBlock,evalBlockBody,313,322,"while ( true )
try
return body . interpret ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;","while ( true )
try
return bodyNode . interpret ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;",Type 2
220-1-2,src,org.jruby.runtime.callsite,SuperCallSite,callBlock,87,96,src,org.jruby.runtime.callsite,SuperCallSite,call,121,130,"RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , name ) ;","RubyModule klazz = context . getFrameKlazz ( ) ;
String name = context . getFrameName ( ) ;
RubyClass selfType = pollAndGetClass ( context , self , klazz , name ) ;
CacheEntry myCache = cache ;
if ( name == lastName && selfType != null && myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , name , arg1 ) ;
return cacheAndCall ( caller , selfType , context , self , name , arg1 ) ;",Type 2
221-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,99,108,src,org.jruby.internal.runtime.methods,JittedMethod,call,184,193,"try
pre ( context , self , name , Block . NULL_BLOCK , args . length ) ;
return jitCompiledScript . __file__ ( context , self , args , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
222-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,184,193,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,"try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;",Type 2
222-1-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,184,193,src,org.jruby.internal.runtime.methods,JittedMethod,call,235,244,"try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , block ) ;",Type 2
222-2-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,201,210,src,org.jruby.internal.runtime.methods,JittedMethod,call,235,244,"try
pre ( context , self , name , block , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , block ) ;","try
pre ( context , self , name , block , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , block ) ;",Type 2
223-1-2,src,org.jruby.internal.runtime.methods,JittedMethod,call,184,193,src,org.jruby.internal.runtime.methods,JittedMethod,call,218,227,"try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , Block . NULL_BLOCK , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;",Type 2
223-1-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,184,193,src,org.jruby.internal.runtime.methods,JittedMethod,call,235,244,"try
pre ( context , self , name , Block . NULL_BLOCK , 2 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , block ) ;",Type 2
223-2-3,src,org.jruby.internal.runtime.methods,JittedMethod,call,218,227,src,org.jruby.internal.runtime.methods,JittedMethod,call,235,244,"try
pre ( context , self , name , Block . NULL_BLOCK , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","try
pre ( context , self , name , block , 3 ) ;
return jitCompiledScript . __file__ ( context , self , arg0 , arg1 , arg2 , block ) ;",Type 2
225-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,101,110,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,118,127,"JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 2 || ( callablesForArity = javaCallables [ 2 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 2 , javaCallables . length - 1 ) ;","
if ( callable . getParameterTypes ( ) . length != 3 )
throw self . getRuntime ( ) . newArgumentError ( 3 , callable . getParameterTypes ( ) . length ) ;",Type 3
225-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityTwo,101,110,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,118,127,"
if ( callable . getParameterTypes ( ) . length != 2 )
throw self . getRuntime ( ) . newArgumentError ( 2 , callable . getParameterTypes ( ) . length ) ;","JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 3 || ( callablesForArity = javaCallables [ 3 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 3 , javaCallables . length - 1 ) ;",Type 3
226-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,118,127,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityFour,135,144,"JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 3 || ( callablesForArity = javaCallables [ 3 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 3 , javaCallables . length - 1 ) ;","
if ( callable . getParameterTypes ( ) . length != 4 )
throw self . getRuntime ( ) . newArgumentError ( 4 , callable . getParameterTypes ( ) . length ) ;",Type 3
226-1-2,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityThree,118,127,src,org.jruby.java.invokers,RubyToJavaInvoker,findCallableArityFour,135,144,"
if ( callable . getParameterTypes ( ) . length != 3 )
throw self . getRuntime ( ) . newArgumentError ( 3 , callable . getParameterTypes ( ) . length ) ;","JavaCallable [ ] callablesForArity = null ;
if ( javaCallables . length <= 4 || ( callablesForArity = javaCallables [ 4 ] ) == null )
throw self . getRuntime ( ) . newArgumentError ( 4 , javaCallables . length - 1 ) ;",Type 3
228-1-2,src,org.jruby.ast,ClassVarNode,interpret,87,92,src,org.jruby.ast,UndefNode,interpret,80,89,"RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )

rubyClass = self . getMetaClass ( ) ;

return rubyClass . getClassVar ( name ) ;
","RubyModule module = context . getRubyClass ( ) ;
if ( module == null )
throw runtime . newTypeError ( ""No class to undef method '"" + name + ""'."" ) ;

module . undef ( context , name ) ;

return runtime . getNil ( ) ;",Type 3
228-1-3,src,org.jruby.ast,ClassVarNode,interpret,87,92,src,org.jruby.javasupport.util,RuntimeHelpers,fetchClassVariable,545,551,"RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
return rubyClass . getClassVar ( name ) ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
return rubyClass . getClassVar ( name ) ;",Type 1
228-1-4,src,org.jruby.ast,ClassVarNode,interpret,87,92,src,org.jruby.javasupport.util,RuntimeHelpers,fastFetchClassVariable,554,560,"RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
return rubyClass . getClassVar ( name ) ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
return rubyClass . fastGetClassVar ( internedName ) ;",Type 2
228-2-3,src,org.jruby.ast,UndefNode,interpret,80,89,src,org.jruby.javasupport.util,RuntimeHelpers,fetchClassVariable,545,551,"RubyModule module = context . getRubyClass ( ) ;
if ( module == null )

throw runtime . newTypeError ( ""No class to undef method '"" + name + ""'."" ) ;

module . undef ( context , name ) ;
return runtime . getNil ( ) ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;

return rubyClass . getClassVar ( name ) ;

",Type 3
228-2-4,src,org.jruby.ast,UndefNode,interpret,80,89,src,org.jruby.javasupport.util,RuntimeHelpers,fastFetchClassVariable,554,560,"RubyModule module = context . getRubyClass ( ) ;
if ( module == null )

throw runtime . newTypeError ( ""No class to undef method '"" + name + ""'."" ) ;

module . undef ( context , name ) ;
return runtime . getNil ( ) ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;

return rubyClass . fastGetClassVar ( internedName ) ;

",Type 3
228-3-4,src,org.jruby.javasupport.util,RuntimeHelpers,fetchClassVariable,545,551,src,org.jruby.javasupport.util,RuntimeHelpers,fastFetchClassVariable,554,560,"RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
return rubyClass . getClassVar ( name ) ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
return rubyClass . fastGetClassVar ( internedName ) ;",Type 2
232-1-2,src,org.jruby.util.collections,IntHashMap,containsKey,91,100,src,org.jruby.util.collections,IntHashMap,getEntry,137,146,"Entry tab [ ] = table ;
int hash = key ;
int index = ( hash & 0x7FFFFFFF ) % tab . length ;
for ( Entry e = tab [ index ] ; e != null ; e = e . next )
if ( e . hash == hash )

return true ;

return false ;","Entry tab [ ] = table ;
int hash = key ;
int index = ( hash & 0x7FFFFFFF ) % tab . length ;
for ( Entry e = tab [ index ] ; e != null ; e = e . next )
if ( e . hash == hash )
return e ;

return null ;
",Type 2
233-1-2,src,org.jruby.util.collections,IntHashMap,get,103,112,src,org.jruby.util.collections,IntHashMap,getEntry,137,146,"Entry tab [ ] = table ;
int hash = key ;
int index = ( hash & 0x7FFFFFFF ) % tab . length ;
for ( Entry e = tab [ index ] ; e != null ; e = e . next )
if ( e . hash == hash )

return e . value ;
return null ;","Entry tab [ ] = table ;
int hash = key ;
int index = ( hash & 0x7FFFFFFF ) % tab . length ;
for ( Entry e = tab [ index ] ; e != null ; e = e . next )
if ( e . hash == hash )
return e ;

return null ;",Type 2
234-1-2,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeDynamicSelfNoBlockSpecificArity,521,530,src,org.jruby.compiler.impl,StandardInvocationCompiler,invokeDynamicNoBlockSpecificArity,560,569,"switch ( argsCallback . getArity ( ) )
case 1 :
method . invokevirtual ( p ( DynamicMethod . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , RubyModule . class , String . class , IRubyObject . class ) ) ;
break ;
case 2 :
method . invokevirtual ( p ( DynamicMethod . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , RubyModule . class , String . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
case 3 :
method . invokevirtual ( p ( DynamicMethod . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , RubyModule . class , String . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;","switch ( argsCallback . getArity ( ) )
case 1 :
method . invokevirtual ( p ( DynamicMethod . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , RubyModule . class , String . class , IRubyObject . class ) ) ;
break ;
case 2 :
method . invokevirtual ( p ( DynamicMethod . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , RubyModule . class , String . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
case 3 :
method . invokevirtual ( p ( DynamicMethod . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , RubyModule . class , String . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;",Type 1
235-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callIter,91,99,src,org.jruby.runtime.callsite,SuperCallSite,callIter,63,71,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 1
236-1-3,src,org.jruby.runtime.callsite,CachingCallSite,call,201,207,src,org.jruby.runtime.callsite,SuperCallSite,call,191,197,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
236-2-4,src,org.jruby.runtime.callsite,CachingCallSite,callIter,211,219,src,org.jruby.runtime.callsite,SuperCallSite,callIter,201,209,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
237-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callIter,211,219,src,org.jruby.runtime.callsite,SuperCallSite,callIter,201,209,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
237-2-4,src,org.jruby.runtime.callsite,CachingCallSite,call,241,247,src,org.jruby.runtime.callsite,SuperCallSite,call,237,243,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
238-1-2,src,org.jruby.evaluator,ASTInterpreter,arrayValue,322,330,src,org.jruby.javasupport.util,RuntimeHelpers,arrayValue,1357,1364,"
if ( value . getMetaClass ( ) . searchMethod ( ""to_a"" ) . getImplementationClass ( ) != runtime . getKernel ( ) )
value = value . callMethod ( runtime . getCurrentContext ( ) , ""to_a"" ) ;
if ( ! ( value instanceof RubyArray ) )
throw runtime . newTypeError ( ""`to_a' did not return Array"" ) ;
return ( RubyArray ) value ;
else
return runtime . newArray ( value ) ;","Ruby runtime = value . getRuntime ( ) ;
if ( value . getMetaClass ( ) . searchMethod ( ""to_a"" ) . getImplementationClass ( ) != runtime . getKernel ( ) )
value = value . callMethod ( runtime . getCurrentContext ( ) , ""to_a"" ) ;
if ( ! ( value instanceof RubyArray ) )
throw runtime . newTypeError ( ""`to_a' did not return Array"" ) ;
return ( RubyArray ) value ;
else
return runtime . newArray ( value ) ;",Type 3
239-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,setClassVariable,594,602,src,org.jruby.javasupport.util,RuntimeHelpers,fastSetClassVariable,605,613,"RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
rubyClass . setClassVar ( name , value ) ;
return value ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
rubyClass = self . getMetaClass ( ) ;
rubyClass . fastSetClassVar ( internedName , value ) ;
return value ;",Type 2
240-1-2,src,org.jruby,RubySymbol,getSymbol,629,636,src,org.jruby,RubySymbol,getSymbol,639,647,"
int hash = name . hashCode ( ) ;
SymbolEntry [ ] table = symbolTable ;
SymbolEntry e = getEntryFromTable ( table , hash ) ;
for ( ; e != null ; e = e . next )
if ( isSymbolMatch ( name , hash , e ) )
return e . symbol ;
return createSymbol ( name , ByteList . create ( name ) , hash , table ) ;","String name = bytes . toString ( ) ;
int hash = name . hashCode ( ) ;
SymbolEntry [ ] table = symbolTable ;
SymbolEntry e = getEntryFromTable ( table , hash ) ;
for ( ; e != null ; e = e . next )
if ( isSymbolMatch ( name , hash , e ) )
return e . symbol ;
return createSymbol ( name , bytes , hash , table ) ;",Type 3
241-1-2,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,270,278,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,292,300,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , block ) ;",Type 2
241-1-3,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,270,278,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,303,311,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg ) ;",Type 2
241-2-3,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,292,300,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,303,311,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg ) ;",Type 2
242-1-2,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,353,360,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,314,322,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg , block ) ;",Type 3
242-1-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,353,360,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,325,333,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg1 , arg2 ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg1 , arg2 ) ;",Type 3
242-2-3,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,314,322,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,325,333,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg1 , arg2 ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg1 , arg2 ) ;",Type 2
243-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,issueNextEvent,169,177,src,org.jruby.compiler.impl,RootScopedBodyCompiler,issueNextEvent,157,165,"else if ( inNestedMethod )
value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;","else if ( inNestedMethod )
value . call ( this ) ;
invokeUtilityMethod ( ""nextJump"" , sig ( IRubyObject . class , IRubyObject . class ) ) ;
else
loadRuntime ( ) ;
value . call ( this ) ;
invokeUtilityMethod ( ""nextLocalJumpError"" , sig ( IRubyObject . class , Ruby . class , IRubyObject . class ) ) ;",Type 1
244-1-2,src,org.jruby.ext.ffi.io,FileDescriptorByteChannel,read,62,70,src,org.jruby.ext.ffi.io,FileDescriptorByteChannel,write,81,89,"if ( ! isOpen )
throw new IOException ( ""Not open"" ) ;
int n = libc . read ( fd , dst , dst . remaining ( ) ) ;
if ( n > 0 )
dst . position ( dst . position ( ) + n ) ;
return n ;","if ( ! isOpen )
throw new IOException ( ""Not open"" ) ;
int n = libc . write ( fd , src , src . remaining ( ) ) ;
if ( n > 0 )
src . position ( src . position ( ) + n ) ;
return n ;",Type 2
245-1-3,src,org.jruby.runtime.callsite,CachingCallSite,call,81,87,src,org.jruby.runtime.callsite,CachingCallSite,call,161,167,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
245-1-5,src,org.jruby.runtime.callsite,CachingCallSite,call,81,87,src,org.jruby.runtime.callsite,SuperCallSite,call,53,59,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 1
245-1-7,src,org.jruby.runtime.callsite,CachingCallSite,call,81,87,src,org.jruby.runtime.callsite,SuperCallSite,call,145,151,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
245-2-4,src,org.jruby.runtime.callsite,CachingCallSite,callIter,91,99,src,org.jruby.runtime.callsite,CachingCallSite,callIter,171,179,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
245-2-6,src,org.jruby.runtime.callsite,CachingCallSite,callIter,91,99,src,org.jruby.runtime.callsite,SuperCallSite,callIter,63,71,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 1
245-2-8,src,org.jruby.runtime.callsite,CachingCallSite,callIter,91,99,src,org.jruby.runtime.callsite,SuperCallSite,callIter,155,163,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
245-3-5,src,org.jruby.runtime.callsite,CachingCallSite,call,161,167,src,org.jruby.runtime.callsite,SuperCallSite,call,53,59,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 2
245-3-7,src,org.jruby.runtime.callsite,CachingCallSite,call,161,167,src,org.jruby.runtime.callsite,SuperCallSite,call,145,151,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 1
245-4-6,src,org.jruby.runtime.callsite,CachingCallSite,callIter,171,179,src,org.jruby.runtime.callsite,SuperCallSite,callIter,63,71,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 2
245-4-8,src,org.jruby.runtime.callsite,CachingCallSite,callIter,171,179,src,org.jruby.runtime.callsite,SuperCallSite,callIter,155,163,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 1
245-5-7,src,org.jruby.runtime.callsite,SuperCallSite,call,53,59,src,org.jruby.runtime.callsite,SuperCallSite,call,145,151,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
245-6-8,src,org.jruby.runtime.callsite,SuperCallSite,callIter,63,71,src,org.jruby.runtime.callsite,SuperCallSite,callIter,155,163,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
246-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callIter,171,179,src,org.jruby.runtime.callsite,SuperCallSite,callIter,155,163,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 1
246-2-4,src,org.jruby.runtime.callsite,CachingCallSite,call,201,207,src,org.jruby.runtime.callsite,SuperCallSite,call,191,197,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
247-1-2,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,333,340,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,343,350,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 ) ;",Type 2
247-1-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,333,340,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,270,278,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args ) ;",Type 3
247-1-4,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,333,340,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,292,300,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , block ) ;",Type 3
247-1-5,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,333,340,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,303,311,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg ) ;",Type 3
247-2-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,343,350,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,270,278,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args ) ;",Type 3
247-2-4,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,343,350,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,292,300,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , block ) ;",Type 3
247-2-5,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,343,350,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,303,311,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg ) ;",Type 3
247-3-4,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,270,278,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,292,300,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , block ) ;",Type 2
247-3-5,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,270,278,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,303,311,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg ) ;",Type 2
247-4-5,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,292,300,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,303,311,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg ) ;",Type 2
249-1-2,src,org.jruby,RubyClass,call,682,690,src,org.jruby,RubyClass,call,704,712,"preBacktraceOnly ( context , name ) ;
try
RubyClass cls = ( RubyClass ) self ;
IRubyObject obj = cls . allocate ( ) ;
cls . baseCallSites [ CS_IDX_INITIALIZE ] . call ( context , self , obj , args , block ) ;
return obj ;","preBacktraceOnly ( context , name ) ;
try
RubyClass cls = ( RubyClass ) self ;
IRubyObject obj = cls . allocate ( ) ;
cls . baseCallSites [ CS_IDX_INITIALIZE ] . call ( context , self , obj , arg0 , block ) ;
return obj ;",Type 2
250-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callIter,251,259,src,org.jruby.runtime.callsite,SuperCallSite,callIter,247,255,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
251-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt64,351,359,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt64,393,401,return ( ( ( long ) array [ offset + 0 ] & 0xff ) << 0 ) | ( ( ( long ) array [ offset + 1 ] & 0xff ) << 8 ) | ( ( ( long ) array [ offset + 2 ] & 0xff ) << 16 ) | ( ( ( long ) array [ offset + 3 ] & 0xff ) << 24 ) | ( ( ( long ) array [ offset + 4 ] & 0xff ) << 32 ) | ( ( ( long ) array [ offset + 5 ] & 0xff ) << 40 ) | ( ( ( long ) array [ offset + 6 ] & 0xff ) << 48 ) | ( ( ( long ) array [ offset + 7 ] & 0xff ) << 56 ) ;,return ( ( ( long ) array [ offset + 0 ] & 0xff ) << 56 ) | ( ( ( long ) array [ offset + 1 ] & 0xff ) << 48 ) | ( ( ( long ) array [ offset + 2 ] & 0xff ) << 40 ) | ( ( ( long ) array [ offset + 3 ] & 0xff ) << 32 ) | ( ( ( long ) array [ offset + 4 ] & 0xff ) << 24 ) | ( ( ( long ) array [ offset + 5 ] & 0xff ) << 16 ) | ( ( ( long ) array [ offset + 6 ] & 0xff ) << 8 ) | ( ( ( long ) array [ offset + 7 ] & 0xff ) << 0 ) ;,Type 2
253-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,declareClassVariable,616,624,src,org.jruby.javasupport.util,RuntimeHelpers,fastDeclareClassVariable,627,635,"RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
throw runtime . newTypeError ( ""no class/module to define class variable"" ) ;
rubyClass . setClassVar ( name , value ) ;
return value ;","RubyModule rubyClass = ASTInterpreter . getClassVariableBase ( context , runtime ) ;
if ( rubyClass == null )
throw runtime . newTypeError ( ""no class/module to define class variable"" ) ;
rubyClass . fastSetClassVar ( internedName , value ) ;
return value ;",Type 2
254-2-3,src,org.jruby.javasupport.util,RuntimeHelpers,createBlockCallback,141,146,src,org.jruby.javasupport.util,RuntimeHelpers,createBlockCallback19,149,154,"Class scriptClass = scriptObject . getClass ( ) ;
ClassLoader scriptClassLoader = scriptClass . getClassLoader ( ) ;
MethodFactory factory = MethodFactory . createFactory ( scriptClassLoader ) ;

return factory . getBlockCallback ( closureMethod , scriptObject ) ;","Class scriptClass = scriptObject . getClass ( ) ;
ClassLoader scriptClassLoader = scriptClass . getClassLoader ( ) ;
MethodFactory factory = MethodFactory . createFactory ( scriptClassLoader ) ;
return factory . getBlockCallback19 ( closureMethod , scriptObject ) ;
",Type 2
255-1-2,src,org.jruby.util,ShellLauncher,prepareInput,571,579,src,org.jruby.util,ShellLauncher,prepareInerr,582,590,"input = unwrapBufferedStream ( child . getInputStream ( ) ) ;
if ( input instanceof FileInputStream )
inputChannel = ( ( FileInputStream ) input ) . getChannel ( ) ;
else
inputChannel = null ;
inputPumper = null ;","inerr = unwrapBufferedStream ( child . getErrorStream ( ) ) ;
if ( inerr instanceof FileInputStream )
inerrChannel = ( ( FileInputStream ) inerr ) . getChannel ( ) ;
else
inerrChannel = null ;
inerrPumper = null ;",Type 2
255-1-3,src,org.jruby.util,ShellLauncher,prepareInput,571,579,src,org.jruby.util,ShellLauncher,prepareOutput,593,601,"input = unwrapBufferedStream ( child . getInputStream ( ) ) ;
if ( input instanceof FileInputStream )
inputChannel = ( ( FileInputStream ) input ) . getChannel ( ) ;
else
inputChannel = null ;
inputPumper = null ;","output = unwrapBufferedStream ( child . getOutputStream ( ) ) ;
if ( output instanceof FileOutputStream )
outputChannel = ( ( FileOutputStream ) output ) . getChannel ( ) ;
else
outputChannel = null ;
outputPumper = null ;",Type 2
255-2-3,src,org.jruby.util,ShellLauncher,prepareInerr,582,590,src,org.jruby.util,ShellLauncher,prepareOutput,593,601,"inerr = unwrapBufferedStream ( child . getErrorStream ( ) ) ;
if ( inerr instanceof FileInputStream )
inerrChannel = ( ( FileInputStream ) inerr ) . getChannel ( ) ;
else
inerrChannel = null ;
inerrPumper = null ;","output = unwrapBufferedStream ( child . getOutputStream ( ) ) ;
if ( output instanceof FileOutputStream )
outputChannel = ( ( FileOutputStream ) output ) . getChannel ( ) ;
else
outputChannel = null ;
outputPumper = null ;",Type 2
258-1-2,src,org.jruby.runtime,CompiledBlock,setupBlockArg,184,192,src,org.jruby.runtime,CompiledBlock19,setupBlockArg,227,235,"switch ( argumentType )
case ZERO_ARGS :
return null ;
case MULTIPLE_ASSIGNMENT :
case SINGLE_RESTARG :

return ArgsUtil . convertToRubyArray ( ruby , value , hasMultipleArgsHead ) ;
default :

return defaultArgLogic ( ruby , value ) ;","switch ( argumentType )
case ZERO_ARGS :
return null ;
case MULTIPLE_ASSIGNMENT :
case SINGLE_RESTARG :
return ArgsUtil . convertToRubyArray ( ruby , value , hasMultipleArgsHead ) . toJavaArray ( ) ;

default :
return defaultArgLogic ( ruby , value ) ;
",Type 2
259-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callIter,131,139,src,org.jruby.runtime.callsite,SuperCallSite,callIter,109,117,"try
return callBlock ( context , caller , self , block ) ;","try
return callBlock ( context , caller , self , block ) ;",Type 1
260-1-2,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,24,32,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,36,44,return new Fixnum ( _value + ( ( Fixnum ) arg ) . _value ) ;,return new Float ( _value + ( ( Float ) arg ) . _value ) ;,Type 2
262-1-2,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,336,344,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,347,355,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg1 , arg2 , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg1 , arg2 , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg1 , arg2 , arg3 ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg1 , arg2 , arg3 ) ;",Type 2
263-1-2,src,org.jruby.util,IOInputStream,read,96,104,src,org.jruby.util,IOInputStream,read,107,115,"IRubyObject readValue = readAdapter . call ( io . getRuntime ( ) . getCurrentContext ( ) , io , io , io . getRuntime ( ) . newFixnum ( b . length ) ) ;
int returnValue = - 1 ;
if ( ! readValue . isNil ( ) )
ByteList str = ( ( RubyString ) readValue ) . getByteList ( ) ;
System . arraycopy ( str . bytes , str . begin , b , 0 , str . realSize ) ;
returnValue = str . realSize ;
return returnValue ;","IRubyObject readValue = readAdapter . call ( io . getRuntime ( ) . getCurrentContext ( ) , io , io , io . getRuntime ( ) . newFixnum ( len ) ) ;
int returnValue = - 1 ;
if ( ! readValue . isNil ( ) )
ByteList str = ( ( RubyString ) readValue ) . getByteList ( ) ;
System . arraycopy ( str . bytes , str . begin , b , off , str . realSize ) ;
returnValue = str . realSize ;
return returnValue ;",Type 2
264-1-2,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,263,270,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,313,320,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , args , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , args , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg , block ) ;",Type 2
264-1-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,263,270,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,323,330,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , args , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , args , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;",Type 2
264-1-4,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,263,270,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,281,289,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , args , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , args , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name ) ;",Type 3
264-2-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,313,320,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,323,330,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;",Type 2
264-2-4,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,313,320,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,281,289,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg , block ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name ) ;",Type 3
264-3-4,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,323,330,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,281,289,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 ) ;

cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name ) ;",Type 3
265-1-2,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,259,267,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,314,322,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg , block ) ;",Type 2
265-1-3,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,259,267,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,325,333,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , args , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , args , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg1 , arg2 ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg1 , arg2 ) ;",Type 2
265-2-3,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,314,322,src,org.jruby.runtime.callsite,SuperCallSite,cacheAndCall,325,333,"CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg , block ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg , block ) ;","CacheEntry entry = selfType != null ? selfType . searchWithCache ( name ) : CacheEntry . NULL_CACHE ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , name , method , arg1 , arg2 ) ;
lastName = name ;
cache = entry ;
return method . call ( context , self , selfType , name , arg1 , arg2 ) ;",Type 2
266-2-3,src,org.jruby.javasupport.util,RuntimeHelpers,createBlockCallback,141,146,src,org.jruby.javasupport.util,RuntimeHelpers,createBlockCallback19,149,154,"Class scriptClass = scriptObject . getClass ( ) ;
ClassLoader scriptClassLoader = scriptClass . getClassLoader ( ) ;
MethodFactory factory = MethodFactory . createFactory ( scriptClassLoader ) ;

return factory . getBlockCallback ( closureMethod , scriptObject ) ;","Class scriptClass = scriptObject . getClass ( ) ;
ClassLoader scriptClassLoader = scriptClass . getClassLoader ( ) ;
MethodFactory factory = MethodFactory . createFactory ( scriptClassLoader ) ;
return factory . getBlockCallback19 ( closureMethod , scriptObject ) ;
",Type 2
270-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,putInt64,371,379,src,org.jruby.ext.ffi,ArrayMemoryIO,putInt64,413,421,"buffer [ offset + 0 ] = ( byte ) ( value >> 0 ) ;
buffer [ offset + 1 ] = ( byte ) ( value >> 8 ) ;
buffer [ offset + 2 ] = ( byte ) ( value >> 16 ) ;
buffer [ offset + 3 ] = ( byte ) ( value >> 24 ) ;
buffer [ offset + 4 ] = ( byte ) ( value >> 32 ) ;
buffer [ offset + 5 ] = ( byte ) ( value >> 40 ) ;
buffer [ offset + 6 ] = ( byte ) ( value >> 48 ) ;
buffer [ offset + 7 ] = ( byte ) ( value >> 56 ) ;","buffer [ offset + 0 ] = ( byte ) ( value >> 56 ) ;
buffer [ offset + 1 ] = ( byte ) ( value >> 48 ) ;
buffer [ offset + 2 ] = ( byte ) ( value >> 40 ) ;
buffer [ offset + 3 ] = ( byte ) ( value >> 32 ) ;
buffer [ offset + 4 ] = ( byte ) ( value >> 24 ) ;
buffer [ offset + 5 ] = ( byte ) ( value >> 16 ) ;
buffer [ offset + 6 ] = ( byte ) ( value >> 8 ) ;
buffer [ offset + 7 ] = ( byte ) ( value >> 0 ) ;",Type 2
272-1-2,src,org.jruby.runtime,Interpreted19Block,yield,135,142,src,org.jruby.runtime,Interpreted19Block,yield,170,178,"try
setupBlockArg ( context , value , self , Block . NULL_BLOCK , type ) ;
return evalBlockBody ( context , self ) ;","try
setupBlockArgs ( context , value , self , block , type , aValue ) ;
return evalBlockBody ( context , self ) ;",Type 2
274-1-3,src,org.jruby.runtime.callsite,CachingCallSite,call,241,247,src,org.jruby.runtime.callsite,SuperCallSite,call,237,243,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
274-2-4,src,org.jruby.runtime.callsite,CachingCallSite,callIter,251,259,src,org.jruby.runtime.callsite,SuperCallSite,callIter,247,255,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
275-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,195,201,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,263,270,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;

method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;


requiredAssignment . nextValue ( methodCompiler , preArgs , currentArgElement ) ;",Type 3
275-1-3,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,195,201,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,282,288,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;",Type 1
275-1-4,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,195,201,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,316,323,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;

optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;


methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , postArgs , currentArgElement ) ;",Type 3
275-2-3,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,263,270,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,282,288,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;


requiredAssignment . nextValue ( methodCompiler , preArgs , currentArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;

method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;",Type 3
275-2-4,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,263,270,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,316,323,"for ( ; currentArgElement < preArgsCount ; currentArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , preArgs , currentArgElement ) ;","for ( ; currentArgElement < postArgsCount ; currentArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , postArgs , currentArgElement ) ;",Type 2
275-3-4,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,282,288,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,316,323,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;

optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;


methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , postArgs , currentArgElement ) ;",Type 3
276-1-2,src,org.jruby.java.proxies,ConcreteJavaProxy,call,103,110,src,org.jruby.java.proxies,ConcreteJavaProxy,call,147,154,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , args ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , args ) ;
return proxy ;",Type 2
276-1-3,src,org.jruby.java.proxies,ConcreteJavaProxy,call,103,110,src,org.jruby.java.proxies,ConcreteJavaProxy,call,169,176,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 ) ;
return proxy ;",Type 2
276-2-3,src,org.jruby.java.proxies,ConcreteJavaProxy,call,147,154,src,org.jruby.java.proxies,ConcreteJavaProxy,call,169,176,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , args ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , args ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 ) ;
return proxy ;",Type 2
277-1-2,src,org.jruby.util,NormalizedFile,listFiles,145,152,src,org.jruby.util,NormalizedFile,listFiles,160,167,"if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 1
277-1-3,src,org.jruby.util,NormalizedFile,listFiles,145,152,src,org.jruby.util,NormalizedFile,listFiles,175,182,"if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 1
277-2-3,src,org.jruby.util,NormalizedFile,listFiles,160,167,src,org.jruby.util,NormalizedFile,listFiles,175,182,"if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","if ( files == null )
return null ;
else
NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 1
278-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,194,201,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,281,288,"for ( int optArgElement = 0 ; optArgElement < optArgsCount ; currentArgElement ++ , optArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;","for ( int optArgElement = 0 ; optArgElement < optArgsCount ; currentArgElement ++ , optArgElement ++ )
method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;",Type 1
279-1-2,src,org.jruby.ast,OpElementAsgnNode,interpret,138,143,src,org.jruby.ast,RescueNode,handleException,186,193,"
if ( ! value . isTrue ( ) )
return value ;","IRubyObject [ ] exceptions = getExceptions ( cRescueNode , runtime , context , self , aBlock ) ;
if ( RuntimeHelpers . isExceptionHandled ( raisedException , exceptions , context ) . isTrue ( ) )
return cRescueNode . interpret ( runtime , context , self , aBlock ) ;",Type 3
280-1-2,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"
IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;

if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )
return bodyNode . interpret ( runtime , context , self , aBlock ) ;



return null ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;

DynamicMethod method = entry . method ;


if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName ) ;",Type 3
281-1-2,src,org.jruby.java.proxies,ConcreteJavaProxy,call,125,132,src,org.jruby.java.proxies,ConcreteJavaProxy,call,191,198,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 , arg2 ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 , arg2 ) ;
return proxy ;",Type 2
282-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callIter,132,139,src,org.jruby.runtime.callsite,SuperCallSite,callIter,110,117,"try
return callBlock ( context , caller , self , block ) ;","try
return callBlock ( context , caller , self , block ) ;",Type 1
283-1-2,src,org.jruby.ast.executable,AbstractScript,getBlockBody,96,103,src,org.jruby.ast.executable,AbstractScript,getBlockBody19,116,123,"BlockBody body = blockBodies [ index ] ;
if ( body == null )
return createBlockBody ( scriptObject , context , index , descriptor ) ;
return body ;","BlockBody body = blockBodies [ index ] ;
if ( body == null )
return createBlockBody19 ( scriptObject , context , index , descriptor ) ;
return body ;",Type 2
283-1-3,src,org.jruby.ast.executable,AbstractScript,getBlockBody,96,103,src,org.jruby.ast.executable,AbstractScript,getBlockCallback,126,133,"
BlockBody body = blockBodies [ index ] ;
if ( body == null )

return createBlockBody ( scriptObject , context , index , descriptor ) ;

return body ;","CompiledBlockCallback callback = blockCallbacks [ index ] ;

if ( callback == null )
return createCompiledBlockCallback ( scriptObject , runtime , index , method ) ;

return callback ;
",Type 2
283-2-3,src,org.jruby.ast.executable,AbstractScript,getBlockBody19,116,123,src,org.jruby.ast.executable,AbstractScript,getBlockCallback,126,133,"
BlockBody body = blockBodies [ index ] ;
if ( body == null )

return createBlockBody19 ( scriptObject , context , index , descriptor ) ;

return body ;","CompiledBlockCallback callback = blockCallbacks [ index ] ;

if ( callback == null )
return createCompiledBlockCallback ( scriptObject , runtime , index , method ) ;

return callback ;
",Type 2
285-1-2,src,org.jruby.runtime,Interpreted19Block,evalBlockBody,184,191,src,org.jruby.runtime,InterpretedBlock,evalBlockBody,315,322,"while ( true )
try
return body . interpret ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;","while ( true )
try
return bodyNode . interpret ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;",Type 2
286-1-2,src,org.jruby.runtime.marshal,UnmarshalStream,unmarshalObjectDirectly,176,182,src,org.jruby.runtime.marshal,UnmarshalStream,defaultObjectUnmarshal,287,294,"try
tp = runtime . getClassFromPath ( moduleName . asJavaString ( ) ) ;","try
type = getClassFromPath ( runtime , className . toString ( ) ) ;",Type 2
287-1-2,src,org.jruby.java.proxies,ConcreteJavaProxy,call,136,143,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,313,320,"
IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 , arg2 , block ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 , arg2 , block ) ;


return proxy ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;

DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )

return callMethodMissing ( context , self , method , arg , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg , block ) ;",Type 3
287-1-3,src,org.jruby.java.proxies,ConcreteJavaProxy,call,136,143,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,323,330,"
IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 , arg2 , block ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 , arg2 , block ) ;


return proxy ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;

DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )

return callMethodMissing ( context , self , method , arg1 , arg2 ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;",Type 3
287-2-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,313,320,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,323,330,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;",Type 2
288-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,performReturn,135,142,src,org.jruby.compiler.impl,RootScopedBodyCompiler,performReturn,125,132,"if ( inNestedMethod )
loadThreadContext ( ) ;
invokeUtilityMethod ( ""returnJump"" , sig ( JumpException . ReturnJump . class , IRubyObject . class , ThreadContext . class ) ) ;
method . athrow ( ) ;
else
method . areturn ( ) ;","if ( inNestedMethod )
loadThreadContext ( ) ;
invokeUtilityMethod ( ""returnJump"" , sig ( JumpException . ReturnJump . class , IRubyObject . class , ThreadContext . class ) ) ;
method . athrow ( ) ;
else
method . areturn ( ) ;",Type 1
290-1-2,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,56,63,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,67,73,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 3
290-1-3,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,56,63,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,77,83,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 3
290-1-4,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,56,63,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,87,93,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 3
290-1-5,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,56,63,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,72,79,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;

parameter3 . assign ( runtime , context , self , nil , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 3
290-2-3,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,67,73,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,77,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
290-2-4,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,67,73,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,87,93,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
290-2-5,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,67,73,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,72,79,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
290-3-4,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,77,83,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,87,93,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
290-3-5,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,77,83,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,72,79,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;

parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
290-4-5,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,87,93,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,72,79,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;

parameter3 . assign ( runtime , context , self , value3 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
291-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,232,238,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,353,360,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;



if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 , block ) ;

return cacheAndCall ( caller , selfType , block , context , self , arg1 , arg2 , arg3 ) ;
","
CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg1 , arg2 , arg3 , block ) ;


cache = entry ;

return method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 , block ) ;",Type 3
292-1-2,src,org.jruby.ast,AndNode,interpret,89,94,src,org.jruby.ast,ArgsPushNode,interpret,76,79,"IRubyObject result = firstNode . interpret ( runtime , context , self , aBlock ) ;

return secondNode . interpret ( runtime , context , self , aBlock ) ;","RubyArray args = ( RubyArray ) firstNode . interpret ( runtime , context , self , aBlock ) . dup ( ) ;
return args . append ( secondNode . interpret ( runtime , context , self , aBlock ) ) ;
",Type 2
292-1-3,src,org.jruby.ast,AndNode,interpret,89,94,src,org.jruby.ast,OrNode,interpret,93,100,"IRubyObject result = firstNode . interpret ( runtime , context , self , aBlock ) ;
if ( ! result . isTrue ( ) )

return result ;
return secondNode . interpret ( runtime , context , self , aBlock ) ;","IRubyObject result = firstNode . interpret ( runtime , context , self , aBlock ) ;
if ( ! result . isTrue ( ) )
result = secondNode . interpret ( runtime , context , self , aBlock ) ;

return result ;",Type 2
292-2-3,src,org.jruby.ast,ArgsPushNode,interpret,76,79,src,org.jruby.ast,OrNode,interpret,93,100,"RubyArray args = ( RubyArray ) firstNode . interpret ( runtime , context , self , aBlock ) . dup ( ) ;
return args . append ( secondNode . interpret ( runtime , context , self , aBlock ) ) ;","IRubyObject result = firstNode . interpret ( runtime , context , self , aBlock ) ;
return result ;",Type 2
293-1-2,src,org.jruby.ast.executable,AbstractScript,getRegexp,158,165,src,org.jruby.ast.executable,AbstractScript,cacheRegexp,172,178,"RubyRegexp regexp = regexps [ index ] ;
if ( regexp == null )

regexp = RubyRegexp . newRegexp ( runtime , pattern , options ) ;
regexp . setLiteral ( ) ;
regexps [ index ] = regexp ;
return regexp ;","RubyRegexp regexp = regexps [ index ] ;
if ( regexp == null )
regexp = RubyRegexp . newRegexp ( pattern . getRuntime ( ) , pattern . getByteList ( ) , options ) ;


regexps [ index ] = regexp ;
return regexp ;",Type 3
294-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callIter,252,259,src,org.jruby.runtime.callsite,SuperCallSite,callIter,248,255,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
295-1-2,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,120,126,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assignArray,158,165,"if ( valueLength < preLength )
assignNilTo ( runtime , context , self , block , valueLength ) ;
else if ( valueLength == preLength )
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
else
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( shiftedArray ( values , valueLength - preLength ) ) , block , true ) ;
","if ( valueLength < preLength )
assignNilTo ( runtime , context , self , block , valueLength ) ;
else if ( valueLength == preLength )
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;


rest . assign ( runtime , context , self , values . subseqLight ( preLength , valueLength - preLength ) , block , true ) ;",Type 2
297-1-2,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,"

IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;
if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )
return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;



return box . actualMethod . call ( context , self , clazz , name , block ) ;",Type 3
297-1-3,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,"

IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;
if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )
return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;



return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;",Type 3
297-1-4,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,"
IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;
if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;

return proxy ;",Type 2
297-1-5,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,"
IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;
if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;

return proxy ;",Type 2
297-1-6,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.runtime.callsite,CachingCallSite,call,103,109,"IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;

if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )
return bodyNode . interpret ( runtime , context , self , aBlock ) ;


return null ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;


if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName ) ;
return cacheAndCall ( caller , selfType , context , self ) ;",Type 3
297-1-7,src,org.jruby.ast,WhenOneArgNode,whenSlowTest,33,39,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"
IRubyObject expression = expressionNodes . interpret ( runtime , context , self , aBlock ) ;

if ( eqq . call ( context , self , expression , test ) . isTrue ( ) )
return bodyNode . interpret ( runtime , context , self , aBlock ) ;



return null ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;

DynamicMethod method = entry . method ;


if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName ) ;",Type 3
297-2-3,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;
return box . actualMethod . call ( context , self , clazz , name , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;",Type 2
297-2-4,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,"
if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;


return box . actualMethod . call ( context , self , clazz , name , block ) ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;


if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;
return proxy ;",Type 3
297-2-5,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,"
if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;


return box . actualMethod . call ( context , self , clazz , name , block ) ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;


if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;
return proxy ;",Type 3
297-2-7,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"
if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;




return box . actualMethod . call ( context , self , clazz , name , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;


DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName ) ;",Type 3
297-3-4,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,"
if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;


return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;


if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;
return proxy ;",Type 3
297-3-5,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,"
if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;


return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;


if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;
return proxy ;",Type 3
297-3-7,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"
if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;




return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;


DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName ) ;",Type 3
297-4-5,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;
return proxy ;",Type 2
297-4-6,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,src,org.jruby.runtime.callsite,CachingCallSite,call,103,109,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;

return proxy ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )

return myCache . method . call ( context , self , selfType , methodName ) ;
return cacheAndCall ( caller , selfType , context , self ) ;",Type 3
297-4-7,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"
IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;


return proxy ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;

DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )

return callMethodMissing ( context , self , method ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName ) ;",Type 3
297-5-6,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,src,org.jruby.runtime.callsite,CachingCallSite,call,103,109,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;

return proxy ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )

return myCache . method . call ( context , self , selfType , methodName ) ;
return cacheAndCall ( caller , selfType , context , self ) ;",Type 3
297-5-7,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"
IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;

if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;


return proxy ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;

DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )

return callMethodMissing ( context , self , method ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName ) ;",Type 3
297-6-7,src,org.jruby.runtime.callsite,CachingCallSite,call,103,109,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,283,290,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;



if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName ) ;

return cacheAndCall ( caller , selfType , context , self ) ;
","
CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method ) ;


cache = entry ;

return method . call ( context , self , selfType , methodName ) ;",Type 3
298-1-2,src,org.jruby.ast.executable,AbstractScript,createBlockBody,339,346,src,org.jruby.ast.executable,AbstractScript,createBlockBody19,366,373,"if ( firstSplit [ 2 ] . length ( ) == 0 )
secondSplit = new String [ 0 ] ;
else
secondSplit = firstSplit [ 2 ] . split ( "";"" ) ;
for ( int i = 0 ; i < secondSplit . length ; i ++ )
secondSplit [ i ] = secondSplit [ i ] . intern ( ) ;","if ( firstSplit [ 2 ] . length ( ) == 0 )
secondSplit = new String [ 0 ] ;
else
secondSplit = firstSplit [ 2 ] . split ( "";"" ) ;
for ( int i = 0 ; i < secondSplit . length ; i ++ )
secondSplit [ i ] = secondSplit [ i ] . intern ( ) ;",Type 1
299-1-2,src,org.jruby.java.proxies,ConcreteJavaProxy,call,92,99,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , args , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , args , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;
return proxy ;",Type 2
299-1-3,src,org.jruby.java.proxies,ConcreteJavaProxy,call,92,99,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , args , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , args , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;
return proxy ;",Type 2
299-2-3,src,org.jruby.java.proxies,ConcreteJavaProxy,call,114,121,src,org.jruby.java.proxies,ConcreteJavaProxy,call,180,187,"IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , block ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , block ) ;
return proxy ;","IRubyObject proxy = oldNew . call ( context , self , clazz , ""new_proxy"" , arg0 , arg1 ) ;
if ( ! ( proxy . dataGetStruct ( ) instanceof JavaObject ) )
RuntimeHelpers . invoke ( context , proxy , ""__jcreate!"" , arg0 , arg1 ) ;
return proxy ;",Type 2
300-1-2,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,"byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-3,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","short [ ] array = new short [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-4,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-5,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-6,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-7,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-1-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned8,25,32,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-3,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","short [ ] array = new short [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-4,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-5,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-6,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-7,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-2-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned8,48,55,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
byte [ ] array = new byte [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( byte ) Util . uint8Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-3-4,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-3-5,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-3-6,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-3-7,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-3-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-3-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-4-5,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,"int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;",Type 2
300-4-6,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-4-7,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-4-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-4-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned32,117,124,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-5-6,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-5-7,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-5-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-5-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned32,140,147,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
int [ ] array = new int [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( int ) Util . uint32Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-6-7,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,"long [ ] array = new long [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","long [ ] array = new long [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;",Type 2
300-6-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
long [ ] array = new long [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-6-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned64,163,170,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
long [ ] array = new long [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int64Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-7-8,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,"
long [ ] array = new long [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","float [ ] array = new float [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-7-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned64,186,193,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
long [ ] array = new long [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . uint64Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
300-8-9,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat32,209,216,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
float [ ] array = new float [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . floatValue ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
301-1-2,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned16,94,101,"short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = ( short ) Util . uint16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;",Type 2
301-1-3,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfSigned16,71,78,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = Util . int16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
301-2-3,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfUnsigned16,94,101,src,org.jruby.ext.ffi,MemoryUtil,putArrayOfFloat64,232,239,"
short [ ] array = new short [ ary . size ( ) ] ;
for ( int i = 0 ; i < array . length ; ++ i )

array [ i ] = ( short ) Util . uint16Value ( ary . entry ( i ) ) ;
io . put ( offset , array , 0 , array . length ) ;","double [ ] array = new double [ ary . size ( ) ] ;

for ( int i = 0 ; i < array . length ; ++ i )
array [ i ] = Util . doubleValue ( ary . entry ( i ) ) ;

io . put ( offset , array , 0 , array . length ) ;",Type 2
303-1-2,src,org.jruby.compiler.impl,StackBasedVariableCompiler,beginMethod,64,71,src,org.jruby.compiler.impl,StackBasedVariableCompiler,beginClass,97,104,"int start = scope . getRequiredArgs ( ) ;
for ( int i = start ; i < scope . getNumberOfVariables ( ) ; i ++ )
methodCompiler . loadNil ( ) ;
assignLocalVariable ( i , false ) ;
tempVariableIndex += scope . getNumberOfVariables ( ) ;","int start = scope . getRequiredArgs ( ) ;
for ( int i = start ; i < scope . getNumberOfVariables ( ) ; i ++ )
methodCompiler . loadNil ( ) ;
assignLocalVariable ( i , false ) ;
tempVariableIndex += scope . getNumberOfVariables ( ) ;",Type 1
305-1-2,src,org.jruby.ast,SClassNode,interpret,121,128,src,org.jruby.javasupport.util,RuntimeHelpers,getSingletonClass,274,281,"if ( receiver instanceof RubyFixnum || receiver instanceof RubySymbol )
throw runtime . newTypeError ( ""no virtual class for "" + receiver . getMetaClass ( ) . getBaseName ( ) ) ;
else
if ( runtime . getSafeLevel ( ) >= 4 && ! receiver . isTaint ( ) )
throw runtime . newSecurityError ( ""Insecure: can't extend object."" ) ;

singletonClass = receiver . getSingletonClass ( ) ;","if ( receiver instanceof RubyFixnum || receiver instanceof RubySymbol )
throw runtime . newTypeError ( ""no virtual class for "" + receiver . getMetaClass ( ) . getBaseName ( ) ) ;
else
if ( runtime . getSafeLevel ( ) >= 4 && ! receiver . isTaint ( ) )
throw runtime . newSecurityError ( ""Insecure: can't extend object."" ) ;
return receiver . getSingletonClass ( ) ;
",Type 2
308-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callIter,92,99,src,org.jruby.runtime.callsite,CachingCallSite,callIter,172,179,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
308-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callIter,92,99,src,org.jruby.runtime.callsite,SuperCallSite,callIter,64,71,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 1
308-1-4,src,org.jruby.runtime.callsite,CachingCallSite,callIter,92,99,src,org.jruby.runtime.callsite,SuperCallSite,callIter,156,163,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
308-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callIter,172,179,src,org.jruby.runtime.callsite,SuperCallSite,callIter,64,71,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 2
308-2-4,src,org.jruby.runtime.callsite,CachingCallSite,callIter,172,179,src,org.jruby.runtime.callsite,SuperCallSite,callIter,156,163,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 1
308-3-4,src,org.jruby.runtime.callsite,SuperCallSite,callIter,64,71,src,org.jruby.runtime.callsite,SuperCallSite,callIter,156,163,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
311-1-2,src,org.jruby.evaluator,ASTInterpreter,aryToAry,337,344,src,org.jruby.javasupport.util,RuntimeHelpers,aryToAry,1370,1377,"if ( value instanceof RubyArray )
return value ;
if ( value . respondsTo ( ""to_ary"" ) )
return TypeConverter . convertToType ( value , runtime . getArray ( ) , ""to_ary"" , false ) ;
return runtime . newArray ( value ) ;","if ( value instanceof RubyArray )
return value ;
if ( value . respondsTo ( ""to_ary"" ) )
return TypeConverter . convertToType ( value , value . getRuntime ( ) . getArray ( ) , ""to_ary"" , false ) ;
return value . getRuntime ( ) . newArray ( value ) ;",Type 2
315-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callIter,212,219,src,org.jruby.runtime.callsite,SuperCallSite,callIter,202,209,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
316-1-2,src,org.jruby.runtime,CompiledBlock19,yieldSpecificInternal,119,125,src,org.jruby.runtime,CompiledBlock19,yield,137,143,"try
return callback . call ( context , self , args , Block . NULL_BLOCK ) ;","try
return callback . call ( context , self , realArgs , Block . NULL_BLOCK ) ;",Type 2
316-1-3,src,org.jruby.runtime,CompiledBlock19,yieldSpecificInternal,119,125,src,org.jruby.runtime,CompiledBlock19,yield,160,166,"try
return callback . call ( context , self , args , Block . NULL_BLOCK ) ;","try
return callback . call ( context , self , realArgs , block ) ;",Type 2
316-2-3,src,org.jruby.runtime,CompiledBlock19,yield,137,143,src,org.jruby.runtime,CompiledBlock19,yield,160,166,"try
return callback . call ( context , self , realArgs , Block . NULL_BLOCK ) ;","try
return callback . call ( context , self , realArgs , block ) ;",Type 2
316-4-6,src,org.jruby.runtime.callsite,CachingCallSite,callIter,212,219,src,org.jruby.runtime.callsite,CachingCallSite,callIter,252,259,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 2
316-4-7,src,org.jruby.runtime.callsite,CachingCallSite,callIter,212,219,src,org.jruby.runtime.callsite,SuperCallSite,callIter,202,209,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
316-4-9,src,org.jruby.runtime.callsite,CachingCallSite,callIter,212,219,src,org.jruby.runtime.callsite,SuperCallSite,callIter,248,255,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 2
316-5-8,src,org.jruby.runtime.callsite,CachingCallSite,call,242,247,src,org.jruby.runtime.callsite,SuperCallSite,call,238,243,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
316-6-7,src,org.jruby.runtime.callsite,CachingCallSite,callIter,252,259,src,org.jruby.runtime.callsite,SuperCallSite,callIter,202,209,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 2
316-6-9,src,org.jruby.runtime.callsite,CachingCallSite,callIter,252,259,src,org.jruby.runtime.callsite,SuperCallSite,callIter,248,255,"try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 1
316-7-9,src,org.jruby.runtime.callsite,SuperCallSite,callIter,202,209,src,org.jruby.runtime.callsite,SuperCallSite,callIter,248,255,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , arg3 , block ) ;",Type 2
317-1-2,src,org.jruby.ast,Match3Node,interpret,95,102,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,72,78,"IRubyObject recv = receiverNode . interpret ( runtime , context , self , aBlock ) ;

IRubyObject value = valueNode . interpret ( runtime , context , self , aBlock ) ;


if ( value instanceof RubyString )
return ( ( RubyRegexp ) recv ) . op_match ( context , value ) ;
else
return callAdapter . call ( context , self , value , recv ) ;
","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;

if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , args , block ) ;




return cacheAndCall ( caller , selfType , block , args , context , self ) ;",Type 3
320-1-2,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,273,280,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,293,300,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , args ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , args ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , block ) ;",Type 2
320-1-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,273,280,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,303,310,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , args ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , args ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg ) ;",Type 2
320-2-3,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,293,300,src,org.jruby.runtime.callsite,CachingCallSite,cacheAndCall,303,310,"CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , block ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , block ) ;","CacheEntry entry = selfType . searchWithCache ( methodName ) ;
DynamicMethod method = entry . method ;
if ( methodMissing ( method , caller ) )
return callMethodMissing ( context , self , method , arg ) ;
cache = entry ;
return method . call ( context , self , selfType , methodName , arg ) ;",Type 2
321-1-2,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,74,80,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,72,79,"pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 2 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 3 ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;",Type 2
322-1-2,src,org.jruby.runtime.assigner,Pre3Rest1Post0Assigner,assign,56,63,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,72,79,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;

parameter3 . assign ( runtime , context , self , nil , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 3
326-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt64,352,359,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt64,394,401,return ( ( ( long ) array [ offset + 0 ] & 0xff ) << 0 ) | ( ( ( long ) array [ offset + 1 ] & 0xff ) << 8 ) | ( ( ( long ) array [ offset + 2 ] & 0xff ) << 16 ) | ( ( ( long ) array [ offset + 3 ] & 0xff ) << 24 ) | ( ( ( long ) array [ offset + 4 ] & 0xff ) << 32 ) | ( ( ( long ) array [ offset + 5 ] & 0xff ) << 40 ) | ( ( ( long ) array [ offset + 6 ] & 0xff ) << 48 ) | ( ( ( long ) array [ offset + 7 ] & 0xff ) << 56 ) ;,return ( ( ( long ) array [ offset + 0 ] & 0xff ) << 56 ) | ( ( ( long ) array [ offset + 1 ] & 0xff ) << 48 ) | ( ( ( long ) array [ offset + 2 ] & 0xff ) << 40 ) | ( ( ( long ) array [ offset + 3 ] & 0xff ) << 32 ) | ( ( ( long ) array [ offset + 4 ] & 0xff ) << 24 ) | ( ( ( long ) array [ offset + 5 ] & 0xff ) << 16 ) | ( ( ( long ) array [ offset + 6 ] & 0xff ) << 8 ) | ( ( ( long ) array [ offset + 7 ] & 0xff ) << 0 ) ;,Type 2
327-3-4,src,org.jruby.ext.ffi.jffi,FastIntMethodThreeArg,invoke,19,25,src,org.jruby.ext.ffi.jffi,FastLongMethodThreeArg,invoke,19,25,"
int retval = invoker . invokeIIIrI ( function , c1 . intValue ( context , arg1 ) , c2 . intValue ( context , arg2 ) , c3 . intValue ( context , arg3 ) ) ;
return resultConverter . fromNative ( context , retval ) ;","long retval = invoker . invokeLLLrL ( function , c1 . longValue ( context , arg1 ) , c2 . longValue ( context , arg2 ) , c3 . longValue ( context , arg3 ) ) ;

return resultConverter . fromNative ( context , retval ) ;",Type 2
328-1-2,src,org.jruby.ast.executable,AbstractScript,getMethod,394,400,src,org.jruby.javasupport.util,RuntimeHelpers,invokeEqqForCaseWhen,110,113,"RubyClass selfType = pollAndGetClass ( context , self ) ;


CacheEntry myCache = getCacheEntry ( index ) ;
if ( myCache . typeOk ( selfType ) )
return myCache . method ;

return cacheAndGet ( context , selfType , index , methodName ) ;","IRubyObject result = callSite . call ( context , caller , receiver0 , arg ) ;
if ( result . isTrue ( ) )
return true ;



return invokeEqqForCaseWhen ( callSite , context , caller , arg , receiver1 ) ;
",Type 3
329-1-2,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.ast,CallOneArgBlockNode,interpret,57,62,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 3
329-1-3,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.ast,CallTwoArgNode,interpret,58,61,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;","

return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) ) ;",Type 3
329-1-4,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.ast,FCallManyArgsBlockNode,interpret,25,29,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;

return callAdapter . call ( context , self , receiver , args ) ;","
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . call ( context , self , self , args , block ) ;",Type 2
329-1-5,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.ast,FCallManyArgsBlockPassNode,interpret,24,27,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;","
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , self , args , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
329-1-6,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.ast,FCallThreeArgNode,interpret,39,43,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;","

return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;",Type 3
329-1-7,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.ast,FCallTwoArgBlockNode,interpret,33,37,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;","

return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 3
329-1-9,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,112,118,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;
","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;


return cacheAndCall ( caller , selfType , block , context , self ) ;",Type 2
329-1-10,src,org.jruby.ast,CallManyArgsNode,interpret,55,59,src,org.jruby.runtime.callsite,CachingCallSite,call,143,149,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , args ) ;
","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;


return cacheAndCall ( caller , selfType , context , self , arg1 ) ;",Type 2
329-2-6,src,org.jruby.ast,CallOneArgBlockNode,interpret,57,62,src,org.jruby.ast,FCallThreeArgNode,interpret,39,43,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;","
return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;",Type 3
329-2-7,src,org.jruby.ast,CallOneArgBlockNode,interpret,57,62,src,org.jruby.ast,FCallTwoArgBlockNode,interpret,33,37,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;","
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 3
329-2-9,src,org.jruby.ast,CallOneArgBlockNode,interpret,57,62,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,112,118,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;
","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;

return cacheAndCall ( caller , selfType , block , context , self ) ;",Type 3
329-2-10,src,org.jruby.ast,CallOneArgBlockNode,interpret,57,62,src,org.jruby.runtime.callsite,CachingCallSite,call,143,149,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;

return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;
","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;

return cacheAndCall ( caller , selfType , context , self , arg1 ) ;",Type 3
329-3-6,src,org.jruby.ast,CallTwoArgNode,interpret,58,61,src,org.jruby.ast,FCallThreeArgNode,interpret,39,43,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;",Type 2
329-3-7,src,org.jruby.ast,CallTwoArgNode,interpret,58,61,src,org.jruby.ast,FCallTwoArgBlockNode,interpret,33,37,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) ) ;","return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 2
329-4-5,src,org.jruby.ast,FCallManyArgsBlockNode,interpret,25,29,src,org.jruby.ast,FCallManyArgsBlockPassNode,interpret,24,27,"IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . call ( context , self , self , args , block ) ;","IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;

return callAdapter . call ( context , self , self , args , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
329-4-6,src,org.jruby.ast,FCallManyArgsBlockNode,interpret,25,29,src,org.jruby.ast,FCallThreeArgNode,interpret,39,43,"IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . call ( context , self , self , args , block ) ;","

return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;",Type 3
329-4-7,src,org.jruby.ast,FCallManyArgsBlockNode,interpret,25,29,src,org.jruby.ast,FCallTwoArgBlockNode,interpret,33,37,"IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . call ( context , self , self , args , block ) ;","

return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 3
329-5-6,src,org.jruby.ast,FCallManyArgsBlockPassNode,interpret,24,27,src,org.jruby.ast,FCallThreeArgNode,interpret,39,43,"IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , self , args , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","
return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;",Type 3
329-5-7,src,org.jruby.ast,FCallManyArgsBlockPassNode,interpret,24,27,src,org.jruby.ast,FCallTwoArgBlockNode,interpret,33,37,"IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , self , args , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 3
329-9-10,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,112,118,src,org.jruby.runtime.callsite,CachingCallSite,call,143,149,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , block ) ;
return cacheAndCall ( caller , selfType , block , context , self ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 ) ;
return cacheAndCall ( caller , selfType , context , self , arg1 ) ;",Type 2
330-1-2,src,org.jruby.compiler.ir.instructions,GET_CVAR_Instr,getParentmostScope,16,22,src,org.jruby.compiler.ir.instructions,PUT_CVAR_Instr,getParentmostScope,15,21,"while ( ( scope instanceof MetaObject ) && ! ( ( ( MetaObject ) scope ) . _scope instanceof IR_Class ) )
scope = ( ( MetaObject ) scope ) . _scope . getParent ( ) ;
return scope ;","while ( ( scope instanceof MetaObject ) && ! ( ( ( MetaObject ) scope ) . _scope instanceof IR_Class ) )
scope = ( ( MetaObject ) scope ) . _scope . getParent ( ) ;
return scope ;",Type 1
332-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,191,196,src,org.jruby.internal.runtime.methods,DefaultMethod,call,199,204,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 ) ;",Type 2
332-3-4,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,72,78,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,152,158,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , args , block ) ;
return cacheAndCall ( caller , selfType , block , args , context , self ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , arg1 ) ;",Type 2
332-3-5,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,72,78,src,org.jruby.runtime.callsite,CachingCallSite,call,183,189,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , args , block ) ;
return cacheAndCall ( caller , selfType , block , args , context , self ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;
return cacheAndCall ( caller , selfType , context , self , arg1 , arg2 ) ;",Type 2
332-4-5,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,152,158,src,org.jruby.runtime.callsite,CachingCallSite,call,183,189,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , arg1 ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 ) ;
return cacheAndCall ( caller , selfType , context , self , arg1 , arg2 ) ;",Type 2
333-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,createVariableCompiler,44,50,src,org.jruby.compiler.impl,RootScopedBodyCompiler,createVariableCompiler,36,42,"if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 1
334-1-2,src,org.jruby.ast,CallManyArgsBlockPassNode,interpret,52,57,src,org.jruby.ast,CallTwoArgBlockPassNode,interpret,59,65,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ;
return callAdapter . call ( context , self , receiver , args , block ) ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;


return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
335-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,195,201,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,282,288,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNull"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class ) ) ;
method . dup ( ) ;
method . ifnull ( optLabels [ optArgElement ] ) ;
optGivenAssignment . nextValue ( methodCompiler , optArgs , optArgElement ) ;",Type 1
336-1-2,src,org.jruby,RubyClass,call,728,734,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodTwoArg,invoke,32,35,"RubyClass cls = ( RubyClass ) self ;

IRubyObject obj = cls . allocate ( ) ;

cls . baseCallSites [ CS_IDX_INITIALIZE ] . call ( context , self , obj , arg0 , arg1 , arg2 , block ) ;

return obj ;","
HeapInvocationBuffer buffer = new HeapInvocationBuffer ( function ) ;

m1 . marshal ( context , buffer , arg1 ) ;

m2 . marshal ( context , buffer , arg2 ) ;
return resultConverter . fromNative ( context , invoker . invokeInt ( function , buffer ) ) ;",Type 2
337-1-2,src,org.jruby.javasupport,JavaClass,install,322,327,src,org.jruby.javasupport,JavaClass,install,337,343,"RubyClass singleton = proxy . getSingletonClass ( ) ;
DynamicMethod method = new StaticMethodInvoker ( singleton , methods ) ;
singleton . addMethod ( name , method ) ;
if ( aliases != null && isPublic ( ) )
singleton . defineAliases ( aliases , this . name ) ;
aliases = null ;","
DynamicMethod method = new InstanceMethodInvoker ( proxy , methods ) ;
proxy . addMethod ( name , method ) ;
if ( aliases != null && isPublic ( ) )
proxy . defineAliases ( aliases , this . name ) ;
aliases = null ;",Type 3
339-1-2,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,createVariableCompiler,25,31,src,org.jruby.compiler.impl,MethodBodyCompiler,createVariableCompiler,45,50,"if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 2
339-1-3,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,createVariableCompiler,25,31,src,org.jruby.compiler.impl,RootScopedBodyCompiler,createVariableCompiler,37,42,"if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 2
339-2-3,src,org.jruby.compiler.impl,MethodBodyCompiler,createVariableCompiler,45,50,src,org.jruby.compiler.impl,RootScopedBodyCompiler,createVariableCompiler,37,42,"if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","if ( inspector == null )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 1
340-1-2,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,26,32,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,38,44,return new Fixnum ( _value - ( ( Fixnum ) arg ) . _value ) ;,return new Float ( _value - ( ( Float ) arg ) . _value ) ;,Type 2
341-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,223,228,src,org.jruby.internal.runtime.methods,DefaultMethod,call,231,236,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 ) ;",Type 2
342-1-2,src,org.jruby.ast,CallManyArgsBlockPassNode,interpret,52,57,src,org.jruby.ast,CallTwoArgBlockPassNode,interpret,59,65,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ;
return callAdapter . call ( context , self , receiver , args , block ) ;","IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;


return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
342-1-3,src,org.jruby.ast,CallManyArgsBlockPassNode,interpret,52,57,src,org.jruby.ast,FCallThreeArgBlockPassNode,interpret,35,40,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
IRubyObject [ ] args = ( ( ArrayNode ) getArgsNode ( ) ) . interpretPrimitive ( runtime , context , self , aBlock ) ;
Block block = RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ;
return callAdapter . call ( context , self , receiver , args , block ) ;","


return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
342-2-3,src,org.jruby.ast,CallTwoArgBlockPassNode,interpret,59,65,src,org.jruby.ast,FCallThreeArgBlockPassNode,interpret,35,40,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","
return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
344-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,getSignature,33,39,src,org.jruby.compiler.impl,RootScopedBodyCompiler,getSignature,26,32,"if ( shouldUseBoxedArgs ( scope ) )
specificArity = false ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , 4 ) ;
else
specificArity = true ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , scope . getRequiredArgs ( ) ) ;","if ( shouldUseBoxedArgs ( scope ) )
specificArity = false ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , 4 ) ;
else
specificArity = true ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , scope . getRequiredArgs ( ) ) ;",Type 1
345-1-2,src,org.jruby,RubyClass,call,684,690,src,org.jruby,RubyClass,call,706,712,"try
RubyClass cls = ( RubyClass ) self ;
IRubyObject obj = cls . allocate ( ) ;
cls . baseCallSites [ CS_IDX_INITIALIZE ] . call ( context , self , obj , args , block ) ;
return obj ;","try
RubyClass cls = ( RubyClass ) self ;
IRubyObject obj = cls . allocate ( ) ;
cls . baseCallSites [ CS_IDX_INITIALIZE ] . call ( context , self , obj , arg0 , block ) ;
return obj ;",Type 2
346-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodFactory,isFastIntMethod,29,35,src,org.jruby.ext.ffi.jffi,FastLongMethodFactory,isFastLongMethod,25,31,"for ( int i = 0 ; i < parameterTypes . length ; ++ i )
if ( ! isFastIntParam ( parameterTypes [ i ] ) )
return false ;
return parameterTypes . length <= 3 && isFastIntResult ( returnType ) ;","for ( int i = 0 ; i < parameterTypes . length ; ++ i )
if ( ! isFastLongParam ( parameterTypes [ i ] ) )
return false ;
return parameterTypes . length <= 3 && isFastLongResult ( returnType ) ;",Type 2
349-1-2,src,org.jruby.runtime.callback,FastInvocationCallback,execute,44,50,src,org.jruby.runtime.callback,InvocationCallback,execute,58,64,"if ( arityValue >= 0 )
if ( oargs . length != arityValue )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + arityValue + "")"" ) ;
else
if ( oargs . length < - ( 1 + arityValue ) )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + - ( 1 + arityValue ) + "")"" ) ;","if ( arityValue >= 0 )
if ( oargs . length != arityValue )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + arityValue + "")"" ) ;
else
if ( oargs . length < - ( 1 + arityValue ) )
throw recv . getRuntime ( ) . newArgumentError ( ""wrong number of arguments("" + oargs . length + "" for "" + - ( 1 + arityValue ) + "")"" ) ;",Type 1
350-2-3,src,org.jruby.runtime.callsite,CachingCallSite,call,202,207,src,org.jruby.runtime.callsite,SuperCallSite,call,192,197,"try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;","try
return callBlock ( context , caller , self , arg1 , arg2 , block ) ;",Type 1
351-1-2,src,org.jruby.runtime.callsite,CachingCallSite,call,121,127,src,org.jruby.runtime.callsite,SuperCallSite,call,99,105,"try
return callBlock ( context , caller , self , block ) ;","try
return callBlock ( context , caller , self , block ) ;",Type 1
352-1-2,src,org.jruby.ast,Colon2ConstNode,definition,41,46,src,org.jruby.ast,Colon2MethodNode,definition,34,40,"try
if ( isModuleAndHasConstant ( leftNode . interpret ( runtime , context , self , aBlock ) ) )
return ""constant"" ;
return null ;","try
if ( hasMethod ( leftNode . interpret ( runtime , context , self , aBlock ) ) )
return ""method"" ;
return null ;",Type 2
353-1-2,src,org.jruby.runtime,Interpreted19Block,evalBlockBody,185,191,src,org.jruby.runtime,InterpretedBlock,evalBlockBody,316,322,"try
return body . interpret ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;","try
return bodyNode . interpret ( context . getRuntime ( ) , context , self , Block . NULL_BLOCK ) ;",Type 2
354-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,218,224,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,265,270,"method . aload ( argsIndex ) ;
methodCompiler . loadRuntime ( ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""createSubarray"" , sig ( RubyArray . class , IRubyObject [ ] . class , Ruby . class , int . class ) ) ;

restAssignment . call ( methodCompiler ) ;","method . aload ( argsIndex ) ;
methodCompiler . loadNil ( ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , preArgs , currentArgElement ) ;
",Type 2
354-1-3,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,218,224,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,318,323,"method . aload ( argsIndex ) ;
methodCompiler . loadRuntime ( ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""createSubarray"" , sig ( RubyArray . class , IRubyObject [ ] . class , Ruby . class , int . class ) ) ;
restAssignment . call ( methodCompiler ) ;
","method . aload ( argsIndex ) ;
methodCompiler . loadNil ( ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;

requiredAssignment . nextValue ( methodCompiler , postArgs , currentArgElement ) ;",Type 2
354-2-3,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,265,270,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,318,323,"method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , preArgs , currentArgElement ) ;","method . aload ( argsIndex ) ;
method . pushInt ( currentArgElement ) ;
methodCompiler . loadNil ( ) ;
methodCompiler . invokeUtilityMethod ( ""elementOrNil"" , sig ( IRubyObject . class , IRubyObject [ ] . class , int . class , IRubyObject . class ) ) ;
requiredAssignment . nextValue ( methodCompiler , postArgs , currentArgElement ) ;",Type 2
357-1-2,src,org.jruby.runtime.callsite,CachingCallSite,call,81,87,src,org.jruby.runtime.callsite,CachingCallSite,call,161,167,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
357-1-3,src,org.jruby.runtime.callsite,CachingCallSite,call,81,87,src,org.jruby.runtime.callsite,SuperCallSite,call,53,59,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 1
357-1-4,src,org.jruby.runtime.callsite,CachingCallSite,call,81,87,src,org.jruby.runtime.callsite,SuperCallSite,call,145,151,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
357-2-3,src,org.jruby.runtime.callsite,CachingCallSite,call,161,167,src,org.jruby.runtime.callsite,SuperCallSite,call,53,59,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , args , block ) ;",Type 2
357-2-4,src,org.jruby.runtime.callsite,CachingCallSite,call,161,167,src,org.jruby.runtime.callsite,SuperCallSite,call,145,151,"try
return callBlock ( context , caller , self , arg1 , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 1
357-3-4,src,org.jruby.runtime.callsite,SuperCallSite,call,53,59,src,org.jruby.runtime.callsite,SuperCallSite,call,145,151,"try
return callBlock ( context , caller , self , args , block ) ;","try
return callBlock ( context , caller , self , arg1 , block ) ;",Type 2
359-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,207,212,src,org.jruby.internal.runtime.methods,DefaultMethod,call,215,220,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 ) ;",Type 2
359-3-4,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,192,198,src,org.jruby.runtime.callsite,CachingCallSite,call,223,229,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 , block ) ;
return cacheAndCall ( caller , selfType , block , context , self , arg1 , arg2 ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 , arg2 , arg3 ) ;
return cacheAndCall ( caller , selfType , context , self , arg1 , arg2 , arg3 ) ;",Type 2
360-1-3,src,org.jruby.ast,CallThreeArgNode,interpret,60,64,src,org.jruby.ast,FCallThreeArgBlockNode,interpret,35,40,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;","return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 2
360-2-3,src,org.jruby.ast,CallTwoArgBlockNode,interpret,59,65,src,org.jruby.ast,FCallThreeArgBlockNode,interpret,35,40,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
return callAdapter . callIter ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;","
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 3
362-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callBlock,112,118,src,org.jruby.runtime.callsite,CachingCallSite,call,143,149,"RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , block ) ;
return cacheAndCall ( caller , selfType , block , context , self ) ;","RubyClass selfType = pollAndGetClass ( context , self ) ;
CacheEntry myCache = cache ;
if ( myCache . typeOk ( selfType ) )
return myCache . method . call ( context , self , selfType , methodName , arg1 ) ;
return cacheAndCall ( caller , selfType , context , self , arg1 ) ;",Type 2
363-1-2,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
363-1-3,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;",Type 2
363-1-4,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,65,70,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;
",Type 2
363-1-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
363-2-3,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 3
363-2-4,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,65,70,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;

parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;
",Type 3
363-2-5,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;

parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
",Type 3
363-3-4,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,65,70,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;
",Type 2
363-3-5,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
363-4-5,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,65,70,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
pre . get ( 1 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 2 ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;",Type 2
364-1-2,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-1-3,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-1-4,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;
",Type 2
364-1-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
364-1-6,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;",Type 2
364-1-7,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;",Type 2
364-1-8,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-2-3,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-2-4,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;
",Type 2
364-2-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
364-2-6,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
364-2-7,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;",Type 2
364-2-8,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,63,68,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-3-4,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;
",Type 2
364-3-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
364-3-6,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
364-3-7,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
364-3-8,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-4-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
364-4-6,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
364-4-7,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
364-4-8,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
",Type 2
364-5-6,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 3
364-5-7,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 3
364-5-8,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;

parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
",Type 3
364-6-7,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
364-6-8,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
364-7-8,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,62,68,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
",Type 2
367-2-3,src,org.jruby.ext.ffi.jffi,FastIntMethodThreeArg,invoke,19,25,src,org.jruby.ext.ffi.jffi,FastLongMethodThreeArg,invoke,19,25,"
int retval = invoker . invokeIIIrI ( function , c1 . intValue ( context , arg1 ) , c2 . intValue ( context , arg2 ) , c3 . intValue ( context , arg3 ) ) ;
return resultConverter . fromNative ( context , retval ) ;","long retval = invoker . invokeLLLrL ( function , c1 . longValue ( context , arg1 ) , c2 . longValue ( context , arg2 ) , c3 . longValue ( context , arg3 ) ) ;

return resultConverter . fromNative ( context , retval ) ;",Type 2
368-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,constructHash,1167,1172,src,org.jruby.javasupport.util,RuntimeHelpers,constructHash19,1188,1193,"RubyHash hash = RubyHash . newHash ( runtime ) ;
hash . fastASetCheckString ( runtime , key1 , value1 ) ;
hash . fastASetCheckString ( runtime , key2 , value2 ) ;
hash . fastASetCheckString ( runtime , key3 , value3 ) ;
return hash ;","RubyHash hash = RubyHash . newHash ( runtime ) ;
hash . fastASetCheckString19 ( runtime , key1 , value1 ) ;
hash . fastASetCheckString19 ( runtime , key2 , value2 ) ;
hash . fastASetCheckString19 ( runtime , key3 , value3 ) ;
return hash ;",Type 2
369-1-2,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-1-3,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-1-4,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-1-5,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledSharedScopeBlock,newCompiledSharedScopeClosure,39,44,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC , dynamicScope ) ;
BlockBody body = new CompiledSharedScopeBlock ( arity , dynamicScope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-2-3,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-2-4,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-2-5,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledSharedScopeBlock,newCompiledSharedScopeClosure,39,44,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC , dynamicScope ) ;
BlockBody body = new CompiledSharedScopeBlock ( arity , dynamicScope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-3-4,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-3-5,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,src,org.jruby.runtime,CompiledSharedScopeBlock,newCompiledSharedScopeClosure,39,44,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC , dynamicScope ) ;
BlockBody body = new CompiledSharedScopeBlock ( arity , dynamicScope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
369-4-5,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,src,org.jruby.runtime,CompiledSharedScopeBlock,newCompiledSharedScopeClosure,39,44,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC , dynamicScope ) ;
BlockBody body = new CompiledSharedScopeBlock ( arity , dynamicScope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
370-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,271,276,src,org.jruby.internal.runtime.methods,DefaultMethod,call,279,284,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 ) ;",Type 2
371-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,287,292,src,org.jruby.internal.runtime.methods,DefaultMethod,call,295,300,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 ) ;",Type 2
372-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,133,138,src,org.jruby.internal.runtime.methods,DefaultMethod,call,175,180,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , args , block ) ;
return box . actualMethod . call ( context , self , clazz , name , args , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , block ) ;",Type 2
372-1-3,src,org.jruby.internal.runtime.methods,DefaultMethod,call,133,138,src,org.jruby.internal.runtime.methods,DefaultMethod,call,183,188,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , args , block ) ;
return box . actualMethod . call ( context , self , clazz , name , args , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 ) ;",Type 2
372-2-3,src,org.jruby.internal.runtime.methods,DefaultMethod,call,175,180,src,org.jruby.internal.runtime.methods,DefaultMethod,call,183,188,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 ) ;",Type 2
373-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,doAttrAsgn,88,93,src,org.jruby.javasupport.util,RuntimeHelpers,opElementAsgnWithOrPartTwoNArgs,1343,1348,"IRubyObject [ ] newArgs = new IRubyObject [ args . length + 1 ] ;
System . arraycopy ( args , 0 , newArgs , 0 , args . length ) ;
newArgs [ args . length ] = value ;
callSite . call ( context , caller , receiver , newArgs ) ;
return value ;","IRubyObject [ ] newArgs = new IRubyObject [ args . length + 1 ] ;
System . arraycopy ( args , 0 , newArgs , 0 , args . length ) ;
newArgs [ args . length ] = value ;
asetSite . call ( context , self , receiver , newArgs ) ;
return value ;",Type 2
374-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,opElementAsgnWithMethod,1295,1300,src,org.jruby.javasupport.util,RuntimeHelpers,opElementAsgnWithMethod,1319,1324,"IRubyObject var = elementSite . call ( context , self , receiver , arg ) ;
IRubyObject result = opSite . call ( context , self , var , value ) ;
elementAsgnSite . call ( context , self , receiver , arg , result ) ;
return result ;","IRubyObject var = elementSite . call ( context , self , receiver ) ;
IRubyObject result = opSite . call ( context , self , var , value ) ;
elementAsgnSite . call ( context , self , receiver , appendToObjectArray ( args , result ) ) ;
return result ;",Type 2
375-1-2,src,org.jruby.compiler.impl,MethodBodyCompiler,getSignature,34,39,src,org.jruby.compiler.impl,RootScopedBodyCompiler,getSignature,27,32,"if ( shouldUseBoxedArgs ( scope ) )
specificArity = false ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , 4 ) ;
else
specificArity = true ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , scope . getRequiredArgs ( ) ) ;","if ( shouldUseBoxedArgs ( scope ) )
specificArity = false ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , 4 ) ;
else
specificArity = true ;
return StandardASMCompiler . getStaticMethodSignature ( script . getClassname ( ) , scope . getRequiredArgs ( ) ) ;",Type 1
376-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignLastLine,82,87,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignBackRef,103,108,"methodCompiler . loadRuntime ( ) ;
method . swap ( ) ;
methodCompiler . loadThreadContext ( ) ;
method . swap ( ) ;
method . invokestatic ( p ( RuntimeHelpers . class ) , ""setLastLine"" , sig ( IRubyObject . class , Ruby . class , ThreadContext . class , IRubyObject . class ) ) ;","methodCompiler . loadRuntime ( ) ;
method . swap ( ) ;
methodCompiler . loadThreadContext ( ) ;
method . swap ( ) ;
method . invokestatic ( p ( RuntimeHelpers . class ) , ""setBackref"" , sig ( IRubyObject . class , Ruby . class , ThreadContext . class , IRubyObject . class ) ) ;",Type 2
377-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,230,235,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,329,334,"if ( blockAssignment != null )
methodCompiler . loadRuntime ( ) ;
method . aload ( methodCompiler . getClosureIndex ( ) ) ;
methodCompiler . invokeUtilityMethod ( ""processBlockArgument"" , sig ( IRubyObject . class , params ( Ruby . class , Block . class ) ) ) ;
blockAssignment . call ( methodCompiler ) ;","if ( blockAssignment != null )
methodCompiler . loadRuntime ( ) ;
method . aload ( methodCompiler . getClosureIndex ( ) ) ;
methodCompiler . invokeUtilityMethod ( ""processBlockArgument"" , sig ( IRubyObject . class , params ( Ruby . class , Block . class ) ) ) ;
blockAssignment . call ( methodCompiler ) ;",Type 1
380-1-2,src,org.jruby.util,TypeConverter,convertToType,46,51,src,org.jruby.util,TypeConverter,convertToType,63,68,"if ( ! obj . respondsTo ( convertMethod ) )
return handleUncoercibleObject ( raise , obj , target ) ;
return obj . callMethod ( obj . getRuntime ( ) . getCurrentContext ( ) , convertMethod ) ;","if ( ! obj . respondsTo ( convertMethod ) )
return handleUncoercibleObject ( raise , obj , target ) ;
return obj . callMethod ( obj . getRuntime ( ) . getCurrentContext ( ) , convertMethod ) ;",Type 1
382-1-2,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithOr,218,223,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithAnd,290,295,"switch ( args . getArity ( ) )
case 1 :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
default :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class ) ) ;","switch ( args . getArity ( ) )
case 1 :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class ) ) ;
break ;
default :
method . invokevirtual ( p ( CallSite . class ) , ""call"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject [ ] . class ) ) ;",Type 1
383-1-2,src,org.jruby.util,TypeConverter,checkData,114,119,src,org.jruby.util,TypeConverter,handleUncoercibleObject,181,186,"if ( obj . isNil ( ) )
type = ""nil"" ;
else if ( obj instanceof RubyBoolean )
type = obj . isTrue ( ) ? ""true"" : ""false"" ;
else
type = obj . getMetaClass ( ) . getRealClass ( ) . getName ( ) ;","if ( obj . isNil ( ) )
type = ""nil"" ;
else if ( obj instanceof RubyBoolean )
type = obj . isTrue ( ) ? ""true"" : ""false"" ;
else
type = obj . getMetaClass ( ) . getRealClass ( ) . getName ( ) ;",Type 1
384-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,239,244,src,org.jruby.internal.runtime.methods,DefaultMethod,call,247,252,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 ) ;",Type 2
385-1-2,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assignNilTo,139,144,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assignNilTo,169,174,"IRubyObject nil = runtime . getNil ( ) ;
for ( int i = start ; i < preLength ; i ++ )
pre . get ( i ) . assign ( runtime , context , self , nil , block , false ) ;","IRubyObject nil = runtime . getNil ( ) ;
for ( int i = start ; i < preLength ; i ++ )
pre . get ( i ) . assign ( runtime , context , self , nil , block , false ) ;",Type 1
386-1-2,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
386-1-3,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
386-1-4,src,org.jruby.runtime,CompiledBlock,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
386-2-3,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
386-2-4,src,org.jruby.runtime,CompiledBlock19,newCompiledClosure,50,55,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlock19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
386-3-4,src,org.jruby.runtime,CompiledBlockLight,newCompiledClosureLight,40,45,src,org.jruby.runtime,CompiledBlockLight19,newCompiledClosureLight,40,45,"Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;","Binding binding = context . currentBinding ( self , Visibility . PUBLIC ) ;
BlockBody body = new CompiledBlockLight19 ( arity , scope , callback , hasMultipleArgsHead , argumentType ) ;
return new Block ( body , binding ) ;",Type 2
387-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,142,147,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , args ) ;
return box . actualMethod . call ( context , self , clazz , name , args ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;
return box . actualMethod . call ( context , self , clazz , name , block ) ;",Type 2
387-1-3,src,org.jruby.internal.runtime.methods,DefaultMethod,call,142,147,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , args ) ;
return box . actualMethod . call ( context , self , clazz , name , args ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;",Type 2
387-2-3,src,org.jruby.internal.runtime.methods,DefaultMethod,call,159,164,src,org.jruby.internal.runtime.methods,DefaultMethod,call,167,172,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , block ) ;
return box . actualMethod . call ( context , self , clazz , name , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 ) ;",Type 2
388-2-4,src,org.jruby.evaluator,AssignmentVisitor,multiAssign,66,69,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,122,126,"if ( varLen < valueLen )
restArgument . assign ( runtime , context , self , value . subseqLight ( varLen , valueLen ) , Block . NULL_BLOCK , checkArity ) ;

else
restArgument . assign ( runtime , context , self , RubyArray . newArrayLight ( runtime , 0 ) , Block . NULL_BLOCK , checkArity ) ;","if ( valueLength == preLength )

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
else
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( shiftedArray ( values , valueLength - preLength ) ) , block , true ) ;",Type 2
388-3-4,src,org.jruby.evaluator,AssignmentVisitor,multiAssign,100,103,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,122,126,"else if ( varLen < valueLen )
argsNode . assign ( runtime , context , self , value . subseqLight ( varLen , valueLen ) , Block . NULL_BLOCK , checkArity ) ;

else
argsNode . assign ( runtime , context , self , RubyArray . newArrayLight ( runtime , 0 ) , Block . NULL_BLOCK , checkArity ) ;","else if ( valueLength == preLength )

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
else
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( shiftedArray ( values , valueLength - preLength ) ) , block , true ) ;",Type 2
389-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,opAsgnWithMethod,1279,1284,src,org.jruby.javasupport.util,RuntimeHelpers,opElementAsgnWithMethod,1287,1292,"IRubyObject var = varSite . call ( context , self , receiver ) ;
IRubyObject result = opSite . call ( context , self , var , arg ) ;
opAsgnSite . call ( context , self , receiver , result ) ;
return result ;","IRubyObject var = elementSite . call ( context , self , receiver ) ;
IRubyObject result = opSite . call ( context , self , var , value ) ;
elementAsgnSite . call ( context , self , receiver , result ) ;
return result ;",Type 2
391-1-2,src,org.jruby.util,Qsort,bubbleDown,292,297,src,org.jruby.util,Qsort,bubbleUp,300,305,"Object x = a [ lo ] ;
while ( lo < hi && c . compare ( x , a [ lo + 1 ] ) > 0 )
a [ lo ] = a [ ++ lo ] ;
a [ lo ] = x ;","Object x = a [ hi ] ;
while ( hi > lo && c . compare ( x , a [ hi - 1 ] ) < 0 )
a [ hi ] = a [ -- hi ] ;
a [ hi ] = x ;",Type 2
392-1-2,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,122,126,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assignArray,160,165,"else if ( valueLength == preLength )
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
else
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( shiftedArray ( values , valueLength - preLength ) ) , block , true ) ;
","else if ( valueLength == preLength )
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;


rest . assign ( runtime , context , self , values . subseqLight ( preLength , valueLength - preLength ) , block , true ) ;",Type 2
393-1-2,src,org.jruby.ast,DVarNode,interpret,113,118,src,org.jruby.ast,LocalVarNode,interpret,114,118,"IRubyObject obj = context . getCurrentScope ( ) . getValue ( getIndex ( ) , getDepth ( ) ) ;
return obj == null ? runtime . getNil ( ) : obj ;","IRubyObject result = context . getCurrentScope ( ) . getValue ( getIndex ( ) , getDepth ( ) ) ;
return result == null ? runtime . getNil ( ) : result ;",Type 2
396-1-2,src,org.jruby.ast,LocalAsgnNode,interpret,119,124,src,org.jruby.runtime.callsite,ArefCallSite,call,21,25,"

if ( location == 0xFFFFFFFF )
return runtime . getNil ( ) ;
return context . getCurrentScope ( ) . setValue ( getIndex ( ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) , getDepth ( ) ) ;","if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )
return ( ( RubyArray ) self ) . aref ( arg ) ;


return super . call ( context , caller , self , arg ) ;",Type 3
397-1-2,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-3,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-4,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-5,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-6,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-7,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-8,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-1-9,src,org.jruby.ast,WhenOneArgNode,whenNoTest,25,30,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( expressionNodes . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )

return bodyNode . interpret ( runtime , context , self , aBlock ) ;
return null ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
397-2-3,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-2-4,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-2-5,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-2-6,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-2-7,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-2-8,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-2-9,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-3-4,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-3-5,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-3-6,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-3-7,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-3-8,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-3-9,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-4-5,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-4-6,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-4-7,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-4-8,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-4-9,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-5-6,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-5-7,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-5-8,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-5-9,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-6-7,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-6-8,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-6-9,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-7-8,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-7-9,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
397-8-9,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
401-1-2,src,org.jruby.ast,LocalAsgnNode,interpret,119,124,src,org.jruby.runtime.callsite,ArefCallSite,call,13,17,"

if ( location == 0xFFFFFFFF )
return runtime . getNil ( ) ;
return context . getCurrentScope ( ) . setValue ( getIndex ( ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) , getDepth ( ) ) ;","if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )
return ( ( RubyArray ) self ) . entry ( fixnum ) ;


return super . call ( context , caller , self , fixnum ) ;",Type 3
401-1-3,src,org.jruby.ast,LocalAsgnNode,interpret,119,124,src,org.jruby.runtime.callsite,ArefCallSite,call,21,25,"

if ( location == 0xFFFFFFFF )
return runtime . getNil ( ) ;
return context . getCurrentScope ( ) . setValue ( getIndex ( ) , getValueNode ( ) . interpret ( runtime , context , self , aBlock ) , getDepth ( ) ) ;","if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )
return ( ( RubyArray ) self ) . aref ( arg ) ;


return super . call ( context , caller , self , arg ) ;",Type 3
401-2-3,src,org.jruby.runtime.callsite,ArefCallSite,call,13,17,src,org.jruby.runtime.callsite,ArefCallSite,call,21,25,"if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )

return ( ( RubyArray ) self ) . entry ( fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )
return ( ( RubyArray ) self ) . aref ( arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
402-1-2,src,org.jruby.ast,AndNode,interpret,89,94,src,org.jruby.ast,ArgsPushNode,interpret,76,79,"IRubyObject result = firstNode . interpret ( runtime , context , self , aBlock ) ;

return secondNode . interpret ( runtime , context , self , aBlock ) ;","RubyArray args = ( RubyArray ) firstNode . interpret ( runtime , context , self , aBlock ) . dup ( ) ;
return args . append ( secondNode . interpret ( runtime , context , self , aBlock ) ) ;
",Type 2
403-1-2,src,org.jruby.exceptions,RaiseException,javaTraceFromRubyTrace,184,189,src,org.jruby.javasupport.proxy,JavaProxyClassFactory,toType,535,540,"
StackTraceElement [ ] newTrace = new StackTraceElement [ trace . length ] ;
for ( int i = 0 ; i < newTrace . length ; i ++ )

newTrace [ i ] = trace [ i ] . getElement ( ) ;

return newTrace ;","Type [ ] result = new Type [ parameterTypes . length ] ;

for ( int i = 0 ; i < result . length ; i ++ )
result [ i ] = Type . getType ( parameterTypes [ i ] ) ;

return result ;
",Type 2
403-1-3,src,org.jruby.exceptions,RaiseException,javaTraceFromRubyTrace,184,189,src,org.jruby.javasupport.proxy,JavaProxyClassFactory,getType,588,593,"
StackTraceElement [ ] newTrace = new StackTraceElement [ trace . length ] ;
for ( int i = 0 ; i < newTrace . length ; i ++ )

newTrace [ i ] = trace [ i ] . getElement ( ) ;

return newTrace ;","Type [ ] result = new Type [ parameterTypes . length ] ;

for ( int i = 0 ; i < parameterTypes . length ; i ++ )
result [ i ] = Type . getType ( parameterTypes [ i ] ) ;

return result ;
",Type 2
403-2-3,src,org.jruby.javasupport.proxy,JavaProxyClassFactory,toType,535,540,src,org.jruby.javasupport.proxy,JavaProxyClassFactory,getType,588,593,"Type [ ] result = new Type [ parameterTypes . length ] ;
for ( int i = 0 ; i < result . length ; i ++ )
result [ i ] = Type . getType ( parameterTypes [ i ] ) ;
return result ;","Type [ ] result = new Type [ parameterTypes . length ] ;
for ( int i = 0 ; i < parameterTypes . length ; i ++ )
result [ i ] = Type . getType ( parameterTypes [ i ] ) ;
return result ;",Type 2
406-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,255,260,src,org.jruby.internal.runtime.methods,DefaultMethod,call,263,268,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 ) ;",Type 2
409-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,191,196,src,org.jruby.internal.runtime.methods,DefaultMethod,call,199,204,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 ) ;",Type 2
410-1-2,src,org.jruby.ast,CallOneArgBlockPassNode,interpret,57,62,src,org.jruby.ast,FCallTwoArgBlockPassNode,interpret,33,37,"IRubyObject receiver = getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) ;
return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","
return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
411-1-2,src,org.jruby.util,TypeConverter,convertToTypeWithCheck,135,140,src,org.jruby.util,TypeConverter,convertToTypeWithCheck,153,158,"if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = TypeConverter . convertToType ( obj , target , convertMethod , false ) ;
if ( val . isNil ( ) )
return val ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;","if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = TypeConverter . convertToType ( obj , target , convertMethod , false ) ;
if ( val . isNil ( ) )
return val ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;",Type 1
411-1-3,src,org.jruby.util,TypeConverter,convertToTypeWithCheck,135,140,src,org.jruby.util,TypeConverter,convertToTypeOrRaise,170,175,"if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = TypeConverter . convertToType ( obj , target , convertMethod , false ) ;
if ( val . isNil ( ) )
return val ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;","if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = TypeConverter . convertToType ( obj , target , convertMethod , true ) ;
if ( val . isNil ( ) )
return val ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;",Type 2
411-2-3,src,org.jruby.util,TypeConverter,convertToTypeWithCheck,153,158,src,org.jruby.util,TypeConverter,convertToTypeOrRaise,170,175,"if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = TypeConverter . convertToType ( obj , target , convertMethod , false ) ;
if ( val . isNil ( ) )
return val ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;","if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = TypeConverter . convertToType ( obj , target , convertMethod , true ) ;
if ( val . isNil ( ) )
return val ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;",Type 2
412-1-2,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;
",Type 2
412-1-3,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
412-1-4,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
412-1-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
412-1-6,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,72,77,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 2
412-2-3,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,"
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;",Type 3
412-2-4,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
412-2-5,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
412-2-6,src,org.jruby.runtime.assigner,Pre2Rest1Post0Assigner,assign,81,86,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value3 ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 2
412-3-4,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 3
412-3-5,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 3
412-3-6,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,54,59,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"IRubyObject nil = runtime . getNil ( ) ;
parameter1 . assign ( runtime , context , self , nil , block , false ) ;
parameter2 . assign ( runtime , context , self , nil , block , false ) ;
parameter3 . assign ( runtime , context , self , nil , block , false ) ;","
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 3
412-4-5,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
412-4-6,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 2
412-5-6,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 2
416-1-2,src,org.jruby.internal.runtime.methods,DefaultMethod,call,303,308,src,org.jruby.internal.runtime.methods,DefaultMethod,call,311,316,"if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , block ) ;","if ( box . callCount >= 0 )
return tryJitReturnMethod ( context , name ) . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 ) ;
return box . actualMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 ) ;",Type 2
419-1-2,src,org.jruby.compiler.util,HandleFactory,createHandle,141,146,src,org.jruby.compiler.util,HandleFactory,unboxAndCast,227,232,"if ( paramClass . isPrimitive ( ) )
Class boxType = getBoxType ( paramClass ) ;
m . checkcast ( p ( boxType ) ) ;
m . invokevirtual ( p ( boxType ) , paramClass . toString ( ) + ""Value"" , sig ( paramClass ) ) ;
else if ( paramClass != Object . class )
m . checkcast ( p ( paramClass ) ) ;","if ( paramClass . isPrimitive ( ) )
Class boxType = getBoxType ( paramClass ) ;
m . checkcast ( p ( boxType ) ) ;
m . invokevirtual ( p ( boxType ) , paramClass . toString ( ) + ""Value"" , sig ( paramClass ) ) ;
else if ( paramClass != Object . class )
m . checkcast ( p ( paramClass ) ) ;",Type 1
421-1-2,src,org.jruby.evaluator,ASTInterpreter,arrayValue,325,330,src,org.jruby.javasupport.util,RuntimeHelpers,arrayValue,1359,1364,"if ( value . getMetaClass ( ) . searchMethod ( ""to_a"" ) . getImplementationClass ( ) != runtime . getKernel ( ) )
value = value . callMethod ( runtime . getCurrentContext ( ) , ""to_a"" ) ;
if ( ! ( value instanceof RubyArray ) )
throw runtime . newTypeError ( ""`to_a' did not return Array"" ) ;
return ( RubyArray ) value ;
else
return runtime . newArray ( value ) ;","if ( value . getMetaClass ( ) . searchMethod ( ""to_a"" ) . getImplementationClass ( ) != runtime . getKernel ( ) )
value = value . callMethod ( runtime . getCurrentContext ( ) , ""to_a"" ) ;
if ( ! ( value instanceof RubyArray ) )
throw runtime . newTypeError ( ""`to_a' did not return Array"" ) ;
return ( RubyArray ) value ;
else
return runtime . newArray ( value ) ;",Type 1
422-1-2,src,org.jruby.ast,MultipleAsgn19Node,assign,115,120,src,org.jruby.ast,MultipleAsgnNode,assign,139,144,"if ( ! ( value instanceof RubyArray ) )
value = ArgsUtil . convertToRubyArray ( runtime , value , pre != null ) ;
return AssignmentVisitor . multiAssign ( runtime , context , self , this , ( RubyArray ) value , checkArity ) ;","if ( ! ( value instanceof RubyArray ) )
value = ArgsUtil . convertToRubyArray ( runtime , value , pre != null ) ;
return AssignmentVisitor . multiAssign ( runtime , context , self , this , ( RubyArray ) value , checkArity ) ;",Type 1
427-1-2,src,org.jruby.ast,Colon2ConstNode,interpret,33,37,src,org.jruby.java,MiniJava,call,1246,1249,"
RubyModule target = RuntimeHelpers . checkIsModule ( leftNode . interpret ( runtime , context , self , aBlock ) ) ;
IRubyObject value = getValue ( context , target ) ;
return value != null ? value : target . fastGetConstantFromConstMissing ( name ) ;","Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) ) ;


return javaToRuby ( ruby , result ) ;",Type 3
428-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,putInt32,365,369,src,org.jruby.ext.ffi,ArrayMemoryIO,putInt32,407,411,"buffer [ offset + 0 ] = ( byte ) ( value >> 0 ) ;
buffer [ offset + 1 ] = ( byte ) ( value >> 8 ) ;
buffer [ offset + 2 ] = ( byte ) ( value >> 16 ) ;
buffer [ offset + 3 ] = ( byte ) ( value >> 24 ) ;","buffer [ offset + 0 ] = ( byte ) ( value >> 24 ) ;
buffer [ offset + 1 ] = ( byte ) ( value >> 16 ) ;
buffer [ offset + 2 ] = ( byte ) ( value >> 8 ) ;
buffer [ offset + 3 ] = ( byte ) ( value >> 0 ) ;",Type 2
429-1-2,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
429-1-3,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,63,67,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 2
429-2-3,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,71,75,src,org.jruby.runtime.assigner,Pre3Rest0Post0Assigner,assign,79,83,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;
parameter3 . assign ( runtime , context , self , value3 , block , false ) ;",Type 2
430-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignLastLine,90,94,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignBackRef,111,115,"methodCompiler . loadRuntime ( ) ;
methodCompiler . loadThreadContext ( ) ;
value . call ( methodCompiler ) ;
method . invokestatic ( p ( RuntimeHelpers . class ) , ""setLastLine"" , sig ( IRubyObject . class , Ruby . class , ThreadContext . class , IRubyObject . class ) ) ;","methodCompiler . loadRuntime ( ) ;
methodCompiler . loadThreadContext ( ) ;
value . call ( methodCompiler ) ;
method . invokestatic ( p ( RuntimeHelpers . class ) , ""setBackref"" , sig ( IRubyObject . class , Ruby . class , ThreadContext . class , IRubyObject . class ) ) ;",Type 2
431-1-2,src,org.jruby.compiler,ASTCompiler19,compileMethodArgs,108,112,src,org.jruby.compiler,ASTCompiler19,compileMethodArgs,115,119,optionalGiven = new ArrayCallback ( ) { . . . } ;,optionalNotGiven = new ArrayCallback ( ) { . . . } ;,Type 2
432-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,195,196,src,org.jruby.internal.runtime.methods,DynamicMethod,call,199,200,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;",Type 2
433-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,constructHash,1160,1164,src,org.jruby.javasupport.util,RuntimeHelpers,constructHash19,1181,1185,"RubyHash hash = RubyHash . newHash ( runtime ) ;
hash . fastASetCheckString ( runtime , key1 , value1 ) ;
hash . fastASetCheckString ( runtime , key2 , value2 ) ;
return hash ;","RubyHash hash = RubyHash . newHash ( runtime ) ;
hash . fastASetCheckString19 ( runtime , key1 , value1 ) ;
hash . fastASetCheckString19 ( runtime , key2 , value2 ) ;
return hash ;",Type 2
435-1-2,src,org.jruby.ast,CallThreeArgBlockNode,interpret,64,68,src,org.jruby.ast,CallThreeArgNode,interpret,61,64,"return callAdapter . callIter ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;","return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;",Type 2
435-1-3,src,org.jruby.ast,CallThreeArgBlockNode,interpret,64,68,src,org.jruby.ast,FCallThreeArgBlockNode,interpret,36,40,"return callAdapter . callIter ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;","return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 2
435-2-3,src,org.jruby.ast,CallThreeArgNode,interpret,61,64,src,org.jruby.ast,FCallThreeArgBlockNode,interpret,36,40,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) ) ;","return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 2
436-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt32,345,349,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt32,387,391,return ( ( array [ offset + 0 ] & 0xff ) << 0 ) | ( ( array [ offset + 1 ] & 0xff ) << 8 ) | ( ( array [ offset + 2 ] & 0xff ) << 16 ) | ( ( array [ offset + 3 ] & 0xff ) << 24 ) ;,return ( ( array [ offset + 0 ] & 0xff ) << 24 ) | ( ( array [ offset + 1 ] & 0xff ) << 16 ) | ( ( array [ offset + 2 ] & 0xff ) << 8 ) | ( ( array [ offset + 3 ] & 0xff ) << 0 ) ;,Type 2
437-1-2,src,org.jruby.runtime,BlockBody,call,146,150,src,org.jruby.runtime,BlockBody,call,160,164,"IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;","IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;",Type 2
439-1-2,src,org.jruby.runtime,BlockBody,call,202,206,src,org.jruby.runtime,BlockBody,call,216,220,"IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;","IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;",Type 2
440-1-4,src,org.jruby.ast,CallNoArgBlockPassNode,interpret,52,55,src,org.jruby.ast,FCallOneArgBlockNode,interpret,31,34,"
return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , block ) ;",Type 3
440-1-5,src,org.jruby.ast,CallNoArgBlockPassNode,interpret,52,55,src,org.jruby.ast,FCallTwoArgNode,interpret,37,40,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) ) ;",Type 2
440-2-4,src,org.jruby.ast,CallOneArgNode,interpret,56,58,src,org.jruby.ast,FCallOneArgBlockNode,interpret,31,34,"
return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) ) ;","Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , block ) ;",Type 3
440-2-5,src,org.jruby.ast,CallOneArgNode,interpret,56,58,src,org.jruby.ast,FCallTwoArgNode,interpret,37,40,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) ) ;",Type 2
441-2-3,src,org.jruby.runtime.assigner,Pre1Rest1Post0Assigner,assign,52,55,src,org.jruby.runtime.assigner,Pre1Rest1Post0Assigner,assign,59,63,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
441-2-4,src,org.jruby.runtime.assigner,Pre1Rest1Post0Assigner,assign,52,55,src,org.jruby.runtime.assigner,Pre1Rest1Post0Assigner,assign,67,71,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value2 ) , block , true ) ;
",Type 2
441-3-4,src,org.jruby.runtime.assigner,Pre1Rest1Post0Assigner,assign,59,63,src,org.jruby.runtime.assigner,Pre1Rest1Post0Assigner,assign,67,71,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value2 ) , block , true ) ;
",Type 2
443-1-2,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,28,32,src,org.jruby.compiler.ir.operands,Fixnum,computeValue,40,44,return new Fixnum ( _value * ( ( Fixnum ) arg ) . _value ) ;,return new Float ( _value * ( ( Float ) arg ) . _value ) ;,Type 2
444-1-2,src,org.jruby.ast,CallTwoArgNode,interpret,58,61,src,org.jruby.ast,FCallTwoArgBlockNode,interpret,33,37,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) ) ;","return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 2
447-1-2,src,org.jruby.util,TypeConverter,convertToType,81,85,src,org.jruby.util,TypeConverter,convertToType,96,100,"if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = convertToType ( obj , target , convertMethod , true ) ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;","if ( target . isInstance ( obj ) )
return obj ;
IRubyObject val = convertToType ( obj , target , convertMethod , true ) ;
if ( ! target . isInstance ( val ) )
throw obj . getRuntime ( ) . newTypeError ( obj . getMetaClass ( ) + ""#"" + convertMethod + "" should return "" + target . getName ( ) ) ;
return val ;",Type 1
448-1-2,src,org.jruby.util,Numeric,f_gt_p,78,82,src,org.jruby.util,Numeric,f_lt_p,88,92,"if ( x instanceof RubyFixnum && y instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) > ( ( RubyFixnum ) y ) . getLongValue ( ) ? context . getRuntime ( ) . getTrue ( ) : context . getRuntime ( ) . getFalse ( ) ;
return x . callMethod ( context , "">"" , y ) ;","if ( x instanceof RubyFixnum && y instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) < ( ( RubyFixnum ) y ) . getLongValue ( ) ? context . getRuntime ( ) . getTrue ( ) : context . getRuntime ( ) . getFalse ( ) ;
return x . callMethod ( context , ""<"" , y ) ;",Type 2
452-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodTwoArg,invoke,19,23,src,org.jruby.ext.ffi.jffi,FastLongMethodTwoArg,invoke,19,23,"
int retval = invoker . invokeIIrI ( function , c1 . intValue ( context , arg1 ) , c2 . intValue ( context , arg2 ) ) ;
return resultConverter . fromNative ( context , retval ) ;","long retval = invoker . invokeLLrL ( function , c1 . longValue ( context , arg1 ) , c2 . longValue ( context , arg2 ) ) ;

return resultConverter . fromNative ( context , retval ) ;",Type 2
452-3-4,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,367,368,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,371,372,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , block ) ;",Type 2
453-1-2,src,org.jruby.util,NormalizedFile,listFiles,148,152,src,org.jruby.util,NormalizedFile,listFiles,163,167,"NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 1
453-1-3,src,org.jruby.util,NormalizedFile,listFiles,148,152,src,org.jruby.util,NormalizedFile,listFiles,178,182,"NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 1
453-2-3,src,org.jruby.util,NormalizedFile,listFiles,163,167,src,org.jruby.util,NormalizedFile,listFiles,178,182,"NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;","NormalizedFile [ ] smartFiles = new NormalizedFile [ files . length ] ;
for ( int i = 0 ; i < files . length ; i ++ )
smartFiles [ i ] = new NormalizedFile ( files [ i ] . getPath ( ) ) ;
return smartFiles ;",Type 1
454-1-2,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,57,61,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,55,58,"pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;","rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
assignNilTo ( runtime , context , self , block , 0 ) ;",Type 2
455-1-2,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-1-3,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-4,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-1-5,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-6,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-1-7,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-8,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-1-9,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-10,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-1-11,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-12,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-1-13,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-14,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-1-15,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-1-16,src,org.jruby.runtime.callsite,DivCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-2-3,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-4,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-2-5,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-6,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-2-7,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-8,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-2-9,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-10,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-2-11,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-12,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-2-13,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-14,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-2-15,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-2-16,src,org.jruby.runtime.callsite,DivCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_div ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-3-4,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-3-5,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-3-6,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-3-7,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-3-8,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-3-9,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-3-10,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-3-11,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-3-12,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-3-13,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-3-14,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-3-15,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-3-16,src,org.jruby.runtime.callsite,GeCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-4-5,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-4-6,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-4-7,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-4-8,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-4-9,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-4-10,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-4-11,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-4-12,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-4-13,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-4-14,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-4-15,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-4-16,src,org.jruby.runtime.callsite,GeCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_ge ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-5-6,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-5-7,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-5-8,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-5-9,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-5-10,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-5-11,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-5-12,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-5-13,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-5-14,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-5-15,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-5-16,src,org.jruby.runtime.callsite,GtCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-6-7,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-6-8,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-6-9,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-6-10,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-6-11,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-6-12,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-6-13,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-6-14,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-6-15,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-6-16,src,org.jruby.runtime.callsite,GtCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_gt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-7-8,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-7-9,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-7-10,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-7-11,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-7-12,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-7-13,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-7-14,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-7-15,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-7-16,src,org.jruby.runtime.callsite,LeCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-8-9,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-8-10,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-8-11,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-8-12,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-8-13,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-8-14,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-8-15,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-8-16,src,org.jruby.runtime.callsite,LeCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_le ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-9-10,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-9-11,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-9-12,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-9-13,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-9-14,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-9-15,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-9-16,src,org.jruby.runtime.callsite,LtCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_lt ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-10-11,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-10-12,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-10-13,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-10-14,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-10-15,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-10-16,src,org.jruby.runtime.callsite,LtCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_lt ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-11-12,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-11-13,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-11-14,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-11-15,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-11-16,src,org.jruby.runtime.callsite,MinusCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_minus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-12-13,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-12-14,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-12-15,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-12-16,src,org.jruby.runtime.callsite,MinusCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_minus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-13-14,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-13-15,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;",Type 2
455-13-16,src,org.jruby.runtime.callsite,MulCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_mul ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
455-14-15,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,"if ( self instanceof RubyFixnum )

return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;

return super . call ( context , caller , self , fixnum ) ;",Type 2
455-14-16,src,org.jruby.runtime.callsite,MulCallSite,call,21,25,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_mul ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
455-15-16,src,org.jruby.runtime.callsite,PlusCallSite,call,13,17,src,org.jruby.runtime.callsite,PlusCallSite,call,21,25,"if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self instanceof RubyFixnum )
return ( ( RubyFixnum ) self ) . op_plus ( context , arg ) ;
return super . call ( context , caller , self , arg ) ;",Type 2
456-1-2,src,org.jruby.runtime.callsite,ArefCallSite,call,13,17,src,org.jruby.runtime.callsite,ArefCallSite,call,21,25,"if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )

return ( ( RubyArray ) self ) . entry ( fixnum ) ;
return super . call ( context , caller , self , fixnum ) ;","if ( self . getMetaClass ( ) == context . getRuntime ( ) . getArray ( ) )
return ( ( RubyArray ) self ) . aref ( arg ) ;

return super . call ( context , caller , self , arg ) ;",Type 2
457-1-2,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments,231,235,src,org.jruby.compiler.impl,AbstractVariableCompiler,assignMethodArguments19,330,334,"methodCompiler . loadRuntime ( ) ;
method . aload ( methodCompiler . getClosureIndex ( ) ) ;
methodCompiler . invokeUtilityMethod ( ""processBlockArgument"" , sig ( IRubyObject . class , params ( Ruby . class , Block . class ) ) ) ;
blockAssignment . call ( methodCompiler ) ;","methodCompiler . loadRuntime ( ) ;
method . aload ( methodCompiler . getClosureIndex ( ) ) ;
methodCompiler . invokeUtilityMethod ( ""processBlockArgument"" , sig ( IRubyObject . class , params ( Ruby . class , Block . class ) ) ) ;
blockAssignment . call ( methodCompiler ) ;",Type 1
459-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodTwoArg,invoke,19,23,src,org.jruby.ext.ffi.jffi,FastLongMethodTwoArg,invoke,19,23,"
int retval = invoker . invokeIIrI ( function , c1 . intValue ( context , arg1 ) , c2 . intValue ( context , arg2 ) ) ;
return resultConverter . fromNative ( context , retval ) ;","long retval = invoker . invokeLLrL ( function , c1 . longValue ( context , arg1 ) , c2 . longValue ( context , arg2 ) ) ;

return resultConverter . fromNative ( context , retval ) ;",Type 2
460-1-2,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,52,55,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,59,62,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;",Type 2
460-1-3,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,52,55,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,57,61,"parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;
",Type 2
460-1-4,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,52,55,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,55,58,"
parameter1 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","assignNilTo ( runtime , context , self , block , 0 ) ;

rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;",Type 2
460-2-3,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,59,62,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,57,61,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;

parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;
",Type 2
460-2-4,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,59,62,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,55,58,"
parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","assignNilTo ( runtime , context , self , block , 0 ) ;
rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
",Type 2
460-3-4,src,org.jruby.runtime.assigner,PreManyRest0Post0Assigner,assign,57,61,src,org.jruby.runtime.assigner,PreManyRest1Post0Assigner,assign,55,58,"pre . get ( 0 ) . assign ( runtime , context , self , value1 , block , false ) ;
assignNilTo ( runtime , context , self , block , 1 ) ;","rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( IRubyObject . NULL_ARRAY ) , block , true ) ;
assignNilTo ( runtime , context , self , block , 0 ) ;",Type 2
461-1-2,src,org.jruby.ast,CallThreeArgBlockPassNode,interpret,64,68,src,org.jruby.ast,FCallThreeArgBlockPassNode,interpret,36,40,"return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 2
462-1-2,src,org.jruby.runtime,BlockBody,call,160,164,src,org.jruby.runtime,BlockBody,call,174,178,"IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;","IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;",Type 2
463-1-2,src,org.jruby.ast,CallThreeArgBlockNode,interpret,64,68,src,org.jruby.ast,FCallThreeArgBlockNode,interpret,36,40,"return callAdapter . callIter ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;","return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , arg3 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( context , self , iterNode ) ) ;",Type 2
464-1-2,src,org.jruby.runtime,BlockBody,call,216,220,src,org.jruby.runtime,BlockBody,call,230,234,"IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;","IRubyObject [ ] args = new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 } ;
args = prepareArgumentsForCall ( context , args , type ) ;
return yield ( context , RubyArray . newArrayNoCopy ( context . getRuntime ( ) , args ) , null , null , true , binding , type ) ;",Type 2
468-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;
",Type 2
468-1-3,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-1-4,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;
",Type 2
468-1-5,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-1-6,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-1-7,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-1-8,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;
",Type 2
468-1-9,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-1-10,src,org.jruby.ext.ffi,ArrayMemoryIO,get,182,186,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt16 ( buffer , begin + ( i << 1 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-2-3,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-2-4,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;",Type 2
468-2-5,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-2-6,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;",Type 2
468-2-7,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-2-8,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;",Type 2
468-2-9,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-2-10,src,org.jruby.ext.ffi,ArrayMemoryIO,put,190,194,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 1 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt16 ( buffer , begin + ( i << 1 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;",Type 2
468-3-4,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;
",Type 2
468-3-5,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-3-6,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-3-7,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-3-8,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;
",Type 2
468-3-9,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-3-10,src,org.jruby.ext.ffi,ArrayMemoryIO,get,198,202,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-4-5,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-4-6,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;",Type 2
468-4-7,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-4-8,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;",Type 2
468-4-9,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-4-10,src,org.jruby.ext.ffi,ArrayMemoryIO,put,206,210,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;",Type 2
468-5-6,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-5-7,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-5-8,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;
",Type 2
468-5-9,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-5-10,src,org.jruby.ext.ffi,ArrayMemoryIO,get,214,218,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getInt64 ( buffer , begin + ( i << 3 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-6-7,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;
",Type 2
468-6-8,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;",Type 2
468-6-9,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-6-10,src,org.jruby.ext.ffi,ArrayMemoryIO,put,222,226,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putInt64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;",Type 2
468-7-8,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;
",Type 2
468-7-9,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-7-10,src,org.jruby.ext.ffi,ArrayMemoryIO,get,230,234,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getFloat32 ( buffer , begin + ( i << 2 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
468-8-9,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;
",Type 2
468-8-10,src,org.jruby.ext.ffi,ArrayMemoryIO,put,238,242,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 2 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat32 ( buffer , begin + ( i << 2 ) , src [ off + i ] ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;",Type 2
468-9-10,src,org.jruby.ext.ffi,ArrayMemoryIO,get,246,250,src,org.jruby.ext.ffi,ArrayMemoryIO,put,254,258,"checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )

dst [ off + i ] = IO . getFloat64 ( buffer , begin + ( i << 3 ) ) ;","checkBounds ( offset , len << 3 ) ;
int begin = index ( offset ) ;
for ( int i = 0 ; i < len ; ++ i )
IO . putFloat64 ( buffer , begin + ( i << 3 ) , src [ off + i ] ) ;
",Type 2
470-1-2,src,org.jruby.ast,CallNoArgBlockPassNode,interpret,52,55,src,org.jruby.ast,FCallOneArgBlockNode,interpret,31,34,"
return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , block ) ;",Type 3
470-1-3,src,org.jruby.ast,CallNoArgBlockPassNode,interpret,52,55,src,org.jruby.ast,FCallOneArgBlockPassNode,interpret,31,34,"return callAdapter . call ( context , self , getReceiverNode ( ) . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 2
470-2-3,src,org.jruby.ast,FCallOneArgBlockNode,interpret,31,34,src,org.jruby.ast,FCallOneArgBlockPassNode,interpret,31,34,"Block block = RuntimeHelpers . getBlock ( context , self , iterNode ) ;
return callAdapter . callIter ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , block ) ;","
return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 3
471-1-2,src,org.jruby.java,MiniJava,call,1205,1208,src,org.jruby.java,MiniJava,call,1246,1249,"Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) ) ;
return javaToRuby ( ruby , result ) ;","Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) ) ;
return javaToRuby ( ruby , result ) ;",Type 1
472-1-2,src,org.jruby.ast,CallTwoArgBlockPassNode,interpret,62,65,src,org.jruby.ast,FCallTwoArgBlockPassNode,interpret,34,37,"return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 2
473-1-2,src,org.jruby.java,MiniJava,call,1212,1215,src,org.jruby.java,MiniJava,call,1253,1256,"Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;
return javaToRuby ( ruby , result ) ;","Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;
return javaToRuby ( ruby , result ) ;",Type 1
475-1-2,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClass,103,106,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClosure,152,155,"if ( scope . getNumberOfVariables ( ) > 4 )
method . aload ( methodCompiler . getDynamicScopeIndex ( ) ) ;
method . invokevirtual ( p ( DynamicScope . class ) , ""getValues"" , sig ( IRubyObject [ ] . class ) ) ;
method . astore ( methodCompiler . getVarsArrayIndex ( ) ) ;","if ( scope . getNumberOfVariables ( ) > 4 )
method . aload ( methodCompiler . getDynamicScopeIndex ( ) ) ;
method . invokevirtual ( p ( DynamicScope . class ) , ""getValues"" , sig ( IRubyObject [ ] . class ) ) ;
method . astore ( methodCompiler . getVarsArrayIndex ( ) ) ;",Type 1
475-1-3,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClass,103,106,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginFlatClosure,208,211,"if ( scope . getNumberOfVariables ( ) > 4 )
method . aload ( methodCompiler . getDynamicScopeIndex ( ) ) ;
method . invokevirtual ( p ( DynamicScope . class ) , ""getValues"" , sig ( IRubyObject [ ] . class ) ) ;
method . astore ( methodCompiler . getVarsArrayIndex ( ) ) ;","if ( scope . getNumberOfVariables ( ) > 4 )
method . aload ( methodCompiler . getDynamicScopeIndex ( ) ) ;
method . invokevirtual ( p ( DynamicScope . class ) , ""getValues"" , sig ( IRubyObject [ ] . class ) ) ;
method . astore ( methodCompiler . getVarsArrayIndex ( ) ) ;",Type 1
475-2-3,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginClosure,152,155,src,org.jruby.compiler.impl,HeapBasedVariableCompiler,beginFlatClosure,208,211,"if ( scope . getNumberOfVariables ( ) > 4 )
method . aload ( methodCompiler . getDynamicScopeIndex ( ) ) ;
method . invokevirtual ( p ( DynamicScope . class ) , ""getValues"" , sig ( IRubyObject [ ] . class ) ) ;
method . astore ( methodCompiler . getVarsArrayIndex ( ) ) ;","if ( scope . getNumberOfVariables ( ) > 4 )
method . aload ( methodCompiler . getDynamicScopeIndex ( ) ) ;
method . invokevirtual ( p ( DynamicScope . class ) , ""getValues"" , sig ( IRubyObject [ ] . class ) ) ;
method . astore ( methodCompiler . getVarsArrayIndex ( ) ) ;",Type 1
476-1-2,src,org.jruby.ast,ArrayNode,interpret,83,86,src,org.jruby.java,MiniJava,call,1191,1194,"
IRubyObject [ ] array = interpretPrimitive ( runtime , context , self , aBlock ) ;
return lightweight ? runtime . newArrayNoCopyLight ( array ) : runtime . newArrayNoCopy ( array ) ;","Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object ) ;

return javaToRuby ( ruby , result ) ;",Type 2
477-1-2,src,org.jruby.java,MiniJava,call,1293,1296,src,org.jruby.java,MiniJava,call,1334,1337,"handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) ) ;
return self ;","handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) ) ;
return self ;",Type 1
478-1-2,src,org.jruby.util,IOInputStream,read,99,102,src,org.jruby.util,IOInputStream,read,110,113,"if ( ! readValue . isNil ( ) )
ByteList str = ( ( RubyString ) readValue ) . getByteList ( ) ;
System . arraycopy ( str . bytes , str . begin , b , 0 , str . realSize ) ;
returnValue = str . realSize ;","if ( ! readValue . isNil ( ) )
ByteList str = ( ( RubyString ) readValue ) . getByteList ( ) ;
System . arraycopy ( str . bytes , str . begin , b , off , str . realSize ) ;
returnValue = str . realSize ;",Type 2
480-1-2,src,org.jruby.util,Numeric,int_pow,454,457,src,org.jruby.util,Numeric,int_pow,464,467,"IRubyObject v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , x ) ) ) . op_pow ( context , RubyFixnum . newFixnum ( runtime , y ) ) ;
if ( z != 1 )
v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , neg ? - z : z ) ) ) . op_mul ( context , v ) ;","IRubyObject v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , x ) ) ) . op_pow ( context , RubyFixnum . newFixnum ( runtime , y ) ) ;
if ( z != 1 )
v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , neg ? - z : z ) ) ) . op_mul ( context , v ) ;",Type 1
481-1-2,src,org.jruby.ast,AttrAssignNode,otherAssign,249,251,src,org.jruby.ast,CallNode,assign,164,166,"RubyArray args = ( RubyArray ) argsNode . interpret ( runtime , context , self , block ) ;
args . append ( value ) ;
RuntimeHelpers . invoke ( context , receiver , name , args . toJavaArray ( ) , CallType . NORMAL , Block . NULL_BLOCK ) ;","RubyArray args = ( RubyArray ) argsNode . interpret ( runtime , context , self , block ) ;
args . append ( value ) ;
RuntimeHelpers . invoke ( context , receiver , getName ( ) , args . toJavaArray ( ) , CallType . NORMAL , Block . NULL_BLOCK ) ;",Type 2
482-1-4,src,org.jruby.ast,ArgsPushNode,interpret,76,79,src,org.jruby.java,MiniJava,call,1341,1344,"
RubyArray args = ( RubyArray ) firstNode . interpret ( runtime , context , self , aBlock ) . dup ( ) ;
return args . append ( secondNode . interpret ( runtime , context , self , aBlock ) ) ;","handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;

return self ;",Type 2
482-2-3,src,org.jruby.java,MiniJava,call,1198,1201,src,org.jruby.java,MiniJava,call,1239,1242,"Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) ) ;
return javaToRuby ( ruby , result ) ;","Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) ) ;
return javaToRuby ( ruby , result ) ;",Type 1
482-2-4,src,org.jruby.java,MiniJava,call,1198,1201,src,org.jruby.java,MiniJava,call,1341,1344,"
Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) ) ;
return javaToRuby ( ruby , result ) ;","handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;

return self ;",Type 2
482-2-5,src,org.jruby.java,MiniJava,call,1198,1201,src,org.jruby.runtime,BlockBody,yieldSpecific,157,158,"Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) ) ;
return javaToRuby ( ruby , result ) ;","
return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 , arg3 ) , null , null , true , binding , type ) ;",Type 3
482-3-4,src,org.jruby.java,MiniJava,call,1239,1242,src,org.jruby.java,MiniJava,call,1341,1344,"
Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) ) ;
return javaToRuby ( ruby , result ) ;","handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;

return self ;",Type 2
482-3-5,src,org.jruby.java,MiniJava,call,1239,1242,src,org.jruby.runtime,BlockBody,yieldSpecific,157,158,"Object result = ( Object ) handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) ) ;
return javaToRuby ( ruby , result ) ;","
return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 , arg3 ) , null , null , true , binding , type ) ;",Type 3
482-4-5,src,org.jruby.java,MiniJava,call,1341,1344,src,org.jruby.runtime,BlockBody,yieldSpecific,157,158,"handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;
return self ;","
return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 , arg3 ) , null , null , true , binding , type ) ;",Type 3
483-1-2,src,org.jruby.java,MiniJava,call,1300,1303,src,org.jruby.java,MiniJava,call,1341,1344,"handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;
return self ;","handle . invoke ( isStatic ? null : ( ( JavaObjectWrapper ) self ) . object , rubyToJava ( arg0 ) , rubyToJava ( arg1 ) , rubyToJava ( arg2 ) ) ;
return self ;",Type 1
484-1-2,src,org.jruby.util,ShellLauncher,pumpInput,616,619,src,org.jruby.util,ShellLauncher,pumpInerr,638,641,"if ( childInChannel != null && parentOutChannel != null )
inputPumper = new ChannelPumper ( childInChannel , parentOutChannel , Pumper . Slave . IN , this ) ;
else
inputPumper = new StreamPumper ( childIn , parentOut , false , Pumper . Slave . IN , this ) ;","if ( childInChannel != null && parentOutChannel != null )
inerrPumper = new ChannelPumper ( childInChannel , parentOutChannel , Pumper . Slave . IN , this ) ;
else
inerrPumper = new StreamPumper ( childIn , parentOut , false , Pumper . Slave . IN , this ) ;",Type 2
485-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,363,364,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,379,380,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , block ) ;",Type 2
485-3-4,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,379,380,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,383,384,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , block ) ;",Type 2
486-1-3,src,org.jruby.ast,CallTwoArgBlockPassNode,interpret,62,65,src,org.jruby.ast,FCallTwoArgBlockPassNode,interpret,34,37,"return callAdapter . call ( context , self , receiver , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;","return callAdapter . call ( context , self , self , arg1 . interpret ( runtime , context , self , aBlock ) , arg2 . interpret ( runtime , context , self , aBlock ) , RuntimeHelpers . getBlock ( runtime , context , self , iterNode , aBlock ) ) ;",Type 2
488-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodFactory,fromNative,234,236,src,org.jruby.ext.ffi.jffi,FastLongMethodFactory,fromNative,238,241,"final long address = ( ( long ) value ) & ADDRESS_MASK ;
return new Pointer ( context . getRuntime ( ) , NativeMemoryIO . wrap ( context . getRuntime ( ) , address ) ) ;","final long address = ( ( long ) value ) & ADDRESS_MASK ;
return new Pointer ( context . getRuntime ( ) , NativeMemoryIO . wrap ( context . getRuntime ( ) , address ) ) ;",Type 2
489-1-2,src,org.jruby.util,Convert2,intToHexBytes,44,47,src,org.jruby.util,Convert2,longToHexBytes,85,88,"String s = Integer . toHexString ( i ) ;
s = upper ? s . toUpperCase ( ) : s . toLowerCase ( ) ;
return ByteList . plain ( s ) ;","String s = Long . toHexString ( i ) ;
s = upper ? s . toUpperCase ( ) : s . toLowerCase ( ) ;
return ByteList . plain ( s ) ;",Type 2
495-1-2,src,org.jruby,JRubyApplet,findFont,426,428,src,org.jruby.demo,IRBConsole,findFont,93,96,"for ( int i = 0 ; i < families . length ; i ++ )
if ( Arrays . binarySearch ( fonts , families [ i ] ) >= 0 )
return new Font ( families [ i ] , style , size ) ;

","for ( int i = 0 ; i < families . length ; i ++ )
if ( Arrays . binarySearch ( fonts , families [ i ] ) >= 0 )

font = new Font ( families [ i ] , style , size ) ;
break ;",Type 3
500-1-2,src,org.jruby.ext.ffi.jffi,DefaultMethodThreeArg,call,36,39,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodTwoArg,invoke,32,35,"
m1 . marshal ( context , buffer , arg1 ) ;
m2 . marshal ( context , buffer , arg2 ) ;

m3 . marshal ( context , buffer , arg3 ) ;
return functionInvoker . invoke ( context . getRuntime ( ) , function , buffer ) ;","HeapInvocationBuffer buffer = new HeapInvocationBuffer ( function ) ;
m1 . marshal ( context , buffer , arg1 ) ;
m2 . marshal ( context , buffer , arg2 ) ;
return resultConverter . fromNative ( context , invoker . invokeInt ( function , buffer ) ) ;

",Type 2
501-1-2,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,59,62,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,66,69,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;",Type 2
501-1-3,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,59,62,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,73,76,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , runtime . getNil ( ) , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;",Type 2
501-2-3,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,66,69,src,org.jruby.runtime.assigner,Pre2Rest0Post0Assigner,assign,73,76,"parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;","parameter1 . assign ( runtime , context , self , value1 , block , false ) ;
parameter2 . assign ( runtime , context , self , value2 , block , false ) ;",Type 1
502-3-4,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,363,364,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,375,376,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg , Block . NULL_BLOCK ) ;",Type 2
502-3-5,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,363,364,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,379,380,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , block ) ;",Type 2
502-4-6,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,375,376,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,383,384,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , block ) ;",Type 2
502-5-6,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,379,380,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,383,384,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , block ) ;",Type 2
505-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt32,346,349,src,org.jruby.ext.ffi,ArrayMemoryIO,getInt32,388,391,return ( ( array [ offset + 0 ] & 0xff ) << 0 ) | ( ( array [ offset + 1 ] & 0xff ) << 8 ) | ( ( array [ offset + 2 ] & 0xff ) << 16 ) | ( ( array [ offset + 3 ] & 0xff ) << 24 ) ;,return ( ( array [ offset + 0 ] & 0xff ) << 24 ) | ( ( array [ offset + 1 ] & 0xff ) << 16 ) | ( ( array [ offset + 2 ] & 0xff ) << 8 ) | ( ( array [ offset + 3 ] & 0xff ) << 0 ) ;,Type 2
508-1-2,src,org.jruby.internal.runtime.methods,CompiledMethod,call,81,83,src,org.jruby.internal.runtime.methods,CompiledMethod,call,105,107,"if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , arg1 ) ;","if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , block ) ;",Type 2
508-1-3,src,org.jruby.internal.runtime.methods,CompiledMethod,call,81,83,src,org.jruby.internal.runtime.methods,CompiledMethod,call,123,125,"if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , arg1 ) ;","if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , args , block ) ;",Type 2
508-2-3,src,org.jruby.internal.runtime.methods,CompiledMethod,call,105,107,src,org.jruby.internal.runtime.methods,CompiledMethod,call,123,125,"if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , block ) ;","if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , args , block ) ;",Type 2
509-1-2,src,org.jruby.util,Convert2,intToByteArray,63,66,src,org.jruby.util,Convert2,longToByteArray,104,107,"String s = Integer . toString ( i , radix ) ;
s = upper ? s . toUpperCase ( ) : s . toLowerCase ( ) ;
return ByteList . plain ( s ) ;","String s = Long . toString ( i , radix ) ;
s = upper ? s . toUpperCase ( ) : s . toLowerCase ( ) ;
return ByteList . plain ( s ) ;",Type 2
510-1-2,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,createVariableCompiler,28,31,src,org.jruby.compiler.impl,MethodBodyCompiler,createVariableCompiler,47,50,"else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 2
510-1-3,src,org.jruby.compiler.impl,ChildScopedBodyCompiler,createVariableCompiler,28,31,src,org.jruby.compiler.impl,RootScopedBodyCompiler,createVariableCompiler,39,42,"else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , false , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 2
510-2-3,src,org.jruby.compiler.impl,MethodBodyCompiler,createVariableCompiler,47,50,src,org.jruby.compiler.impl,RootScopedBodyCompiler,createVariableCompiler,39,42,"else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;","else if ( inspector . hasClosure ( ) || inspector . hasScopeAwareMethods ( ) )
variableCompiler = new HeapBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;
else
variableCompiler = new StackBasedVariableCompiler ( this , method , scope , specificArity , StandardASMCompiler . ARGS_INDEX , getFirstTempIndex ( ) ) ;",Type 1
513-1-2,src,org.jruby.runtime,CompiledBlock19,call,77,80,src,org.jruby.runtime,CompiledBlock19,call,84,87,"IRubyObject value = args . length == 1 ? args [ 0 ] : context . getRuntime ( ) . newArrayNoCopy ( args ) ;
return yield ( context , value , null , null , true , binding , type , Block . NULL_BLOCK ) ;","IRubyObject value = args . length == 1 ? args [ 0 ] : context . getRuntime ( ) . newArrayNoCopy ( args ) ;
return yield ( context , value , null , null , true , binding , type , block ) ;",Type 2
513-1-3,src,org.jruby.runtime,CompiledBlock19,call,77,80,src,org.jruby.runtime,Interpreted19Block,call,98,101,"IRubyObject value = args . length == 1 ? args [ 0 ] : context . getRuntime ( ) . newArrayNoCopy ( args ) ;
return yield ( context , value , null , null , true , binding , type , Block . NULL_BLOCK ) ;","IRubyObject value = args . length == 1 ? args [ 0 ] : context . getRuntime ( ) . newArrayNoCopy ( args ) ;
return yield ( context , value , null , null , ALREADY_ARRAY , binding , type , Block . NULL_BLOCK ) ;",Type 2
513-2-3,src,org.jruby.runtime,CompiledBlock19,call,84,87,src,org.jruby.runtime,Interpreted19Block,call,98,101,"IRubyObject value = args . length == 1 ? args [ 0 ] : context . getRuntime ( ) . newArrayNoCopy ( args ) ;
return yield ( context , value , null , null , true , binding , type , block ) ;","IRubyObject value = args . length == 1 ? args [ 0 ] : context . getRuntime ( ) . newArrayNoCopy ( args ) ;
return yield ( context , value , null , null , ALREADY_ARRAY , binding , type , Block . NULL_BLOCK ) ;",Type 2
514-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,223,224,src,org.jruby.runtime,BlockBody,call,208,210,"return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , binding , type ) ;",Type 2
516-1-2,src,org.jruby.internal.runtime.methods,CompiledMethod,call,87,89,src,org.jruby.internal.runtime.methods,CompiledMethod,call,111,113,"if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , arg1 , arg2 ) ;","if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , arg1 , block ) ;",Type 2
517-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodTwoArg,call,26,28,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodTwoArg,call,40,42,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] ) ;",Type 1
517-1-3,src,org.jruby.ext.ffi.jffi,FastIntMethodTwoArg,call,26,28,src,org.jruby.ext.ffi.jffi,FastLongMethodTwoArg,call,26,28,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] ) ;",Type 1
517-2-3,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodTwoArg,call,40,42,src,org.jruby.ext.ffi.jffi,FastLongMethodTwoArg,call,26,28,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] ) ;",Type 1
518-1-2,src,org.jruby.util,Numeric,f_div,70,72,src,org.jruby.util,Numeric,f_sub,128,130,"if ( y instanceof RubyFixnum && ( ( RubyFixnum ) y ) . getLongValue ( ) == 1 )
return x ;
return x . callMethod ( context , ""/"" , y ) ;","if ( y instanceof RubyFixnum && ( ( RubyFixnum ) y ) . getLongValue ( ) == 0 )
return x ;
return x . callMethod ( context , ""-"" , y ) ;",Type 2
519-1-2,src,org.jruby.util,Numeric,f_negative_p,321,323,src,org.jruby.util,Numeric,f_zero_p,329,331,"if ( x instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) < 0 ;
return x . callMethod ( context , ""<"" , RubyFixnum . zero ( context . getRuntime ( ) ) ) . isTrue ( ) ;","if ( x instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) == 0 ;
return x . callMethod ( context , ""=="" , RubyFixnum . zero ( context . getRuntime ( ) ) ) . isTrue ( ) ;",Type 2
519-1-3,src,org.jruby.util,Numeric,f_negative_p,321,323,src,org.jruby.util,Numeric,f_one_p,337,339,"if ( x instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) < 0 ;
return x . callMethod ( context , ""<"" , RubyFixnum . zero ( context . getRuntime ( ) ) ) . isTrue ( ) ;","if ( x instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) == 1 ;
return x . callMethod ( context , ""=="" , RubyFixnum . one ( context . getRuntime ( ) ) ) . isTrue ( ) ;",Type 2
519-2-3,src,org.jruby.util,Numeric,f_zero_p,329,331,src,org.jruby.util,Numeric,f_one_p,337,339,"if ( x instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) == 0 ;
return x . callMethod ( context , ""=="" , RubyFixnum . zero ( context . getRuntime ( ) ) ) . isTrue ( ) ;","if ( x instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) == 1 ;
return x . callMethod ( context , ""=="" , RubyFixnum . one ( context . getRuntime ( ) ) ) . isTrue ( ) ;",Type 2
520-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,199,200,src,org.jruby.runtime,BlockBody,call,166,168,"return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , Block . NULL_BLOCK ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , binding , type ) ;",Type 2
521-1-2,src,org.jruby.internal.runtime.methods,JavaMethod,call,595,597,src,org.jruby.internal.runtime.methods,JavaMethod,call,1019,1021,"if ( args . length != 3 )
return raiseArgumentError ( this , context , name , args . length , 3 , 3 ) ;
return call ( context , self , clazz , name , args [ 0 ] , args [ 1 ] , args [ 2 ] , block ) ;","if ( args . length != 3 )
return raiseArgumentError ( this , context , name , args . length , 3 , 3 ) ;
return call ( context , self , clazz , name , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;",Type 2
522-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodOneArg,call,22,24,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodOneArg,call,36,38,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] ) ;",Type 1
522-1-3,src,org.jruby.ext.ffi.jffi,FastIntMethodOneArg,call,22,24,src,org.jruby.ext.ffi.jffi,FastLongMethodOneArg,call,22,24,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] ) ;",Type 1
522-2-3,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodOneArg,call,36,38,src,org.jruby.ext.ffi.jffi,FastLongMethodOneArg,call,22,24,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] ) ;",Type 1
523-1-2,src,org.jruby.ast,FlipNode,interpret,157,159,src,org.jruby.ast,RescueNode,handleJavaException,206,208,"if ( beginNode . interpret ( runtime , context , self , aBlock ) . isTrue ( ) )


flipScope . setValueDepthZero ( falseIfTrue ( runtime , endNode . interpret ( runtime , context , self , aBlock ) ) , index ) ;
return runtime . getTrue ( ) ;","if ( RuntimeHelpers . isJavaExceptionHandled ( throwable , exceptions , context ) . isTrue ( ) )
runtime . getGlobalVariables ( ) . set ( ""$!"" , JavaUtil . convertJavaToUsableRubyObject ( runtime , throwable ) ) ;
return cRescueNode . interpret ( runtime , context , self , aBlock ) ;

",Type 2
524-1-2,src,org.jruby.util,Numeric,int_pow,455,457,src,org.jruby.util,Numeric,int_pow,465,467,"IRubyObject v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , x ) ) ) . op_pow ( context , RubyFixnum . newFixnum ( runtime , y ) ) ;
if ( z != 1 )
v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , neg ? - z : z ) ) ) . op_mul ( context , v ) ;
return v ;","IRubyObject v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , x ) ) ) . op_pow ( context , RubyFixnum . newFixnum ( runtime , y ) ) ;
if ( z != 1 )
v = RubyBignum . newBignum ( runtime , RubyBignum . fix2big ( RubyFixnum . newFixnum ( runtime , neg ? - z : z ) ) ) . op_mul ( context , v ) ;
return v ;",Type 1
526-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,239,240,src,org.jruby.runtime,BlockBody,call,236,238,"return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , binding , type ) ;",Type 2
528-1-2,src,org.jruby.ext.ffi.jffi,DefaultMethodZeroArg,call,21,23,src,org.jruby.ext.ffi.jffi,FastIntMethodZeroArg,call,18,20,"arity . checkArity ( context . getRuntime ( ) , args ) ;

return functionInvoker . invoke ( context . getRuntime ( ) , function , dummyBuffer ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return resultConverter . fromNative ( context , invoker . invokeVrI ( function ) ) ;
",Type 2
528-1-3,src,org.jruby.ext.ffi.jffi,DefaultMethodZeroArg,call,21,23,src,org.jruby.ext.ffi.jffi,FastLongMethodZeroArg,call,18,20,"arity . checkArity ( context . getRuntime ( ) , args ) ;

return functionInvoker . invoke ( context . getRuntime ( ) , function , dummyBuffer ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return resultConverter . fromNative ( context , invoker . invokeVrL ( function ) ) ;
",Type 2
528-2-3,src,org.jruby.ext.ffi.jffi,FastIntMethodZeroArg,call,18,20,src,org.jruby.ext.ffi.jffi,FastLongMethodZeroArg,call,18,20,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return resultConverter . fromNative ( context , invoker . invokeVrI ( function ) ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return resultConverter . fromNative ( context , invoker . invokeVrL ( function ) ) ;",Type 2
529-1-2,src,org.jruby.ext.ffi.jffi,FastIntMethodThreeArg,call,28,30,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodThreeArg,call,47,49,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;",Type 1
529-1-3,src,org.jruby.ext.ffi.jffi,FastIntMethodThreeArg,call,28,30,src,org.jruby.ext.ffi.jffi,FastLongMethodThreeArg,call,28,30,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;",Type 1
529-2-3,src,org.jruby.ext.ffi.jffi,FastIntPointerMethodThreeArg,call,47,49,src,org.jruby.ext.ffi.jffi,FastLongMethodThreeArg,call,28,30,"arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;","arity . checkArity ( context . getRuntime ( ) , args ) ;
return invoke ( context , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;",Type 1
531-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,207,208,src,org.jruby.runtime,BlockBody,call,180,182,"return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , binding , type ) ;",Type 2
532-1-2,src,org.jruby.internal.runtime.methods,CompiledMethod,call,81,83,src,org.jruby.internal.runtime.methods,CompiledMethod,call,105,107,"if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , arg1 ) ;","if ( compiledMethod == null )
initializeMethod ( ) ;
return compiledMethod . call ( context , self , clazz , name , arg0 , block ) ;",Type 2
533-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,doAttrAsgn,80,82,src,org.jruby.javasupport.util,RuntimeHelpers,invokeAs,448,449,"callSite . call ( context , caller , receiver , arg0 , arg1 , arg2 , value ) ;
return value ;","
return asClass . finvoke ( context , self , name , arg0 , arg1 , arg2 , block ) ;",Type 3
533-1-3,src,org.jruby.javasupport.util,RuntimeHelpers,doAttrAsgn,80,82,src,org.jruby.runtime,BlockBody,call,152,154,"callSite . call ( context , caller , receiver , arg0 , arg1 , arg2 , value ) ;
return value ;","
return call ( context , arg0 , arg1 , arg2 , arg3 , binding , type ) ;",Type 3
534-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,invoke,398,399,src,org.jruby.javasupport.util,RuntimeHelpers,invokeAs,448,449,"return self . getMetaClass ( ) . finvoke ( context , self , name , arg0 , arg1 , arg2 , block ) ;","return asClass . finvoke ( context , self , name , arg0 , arg1 , arg2 , block ) ;",Type 2
535-1-2,src,org.jruby.ext.ffi,ArrayMemoryIO,putInt16,361,363,src,org.jruby.ext.ffi,ArrayMemoryIO,putInt16,403,405,"buffer [ offset + 0 ] = ( byte ) ( value >> 0 ) ;
buffer [ offset + 1 ] = ( byte ) ( value >> 8 ) ;","buffer [ offset + 0 ] = ( byte ) ( value >> 8 ) ;
buffer [ offset + 1 ] = ( byte ) ( value >> 0 ) ;",Type 2
536-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,215,216,src,org.jruby.runtime,BlockBody,call,194,196,"return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , binding , type ) ;",Type 2
539-1-2,src,org.jruby.internal.runtime.methods,JavaMethod,call,559,561,src,org.jruby.internal.runtime.methods,JavaMethod,call,1019,1021,"if ( args . length != 2 )
return raiseArgumentError ( this , context , name , args . length , 2 , 2 ) ;

return call ( context , self , clazz , name , args [ 0 ] , args [ 1 ] , block ) ;","if ( args . length != 3 )
return raiseArgumentError ( this , context , name , args . length , 3 , 3 ) ;
return call ( context , self , clazz , name , args [ 0 ] , args [ 1 ] , args [ 2 ] ) ;
",Type 2
540-1-2,src,org.jruby.internal.runtime.methods,AliasMethod,call,95,96,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,"return oldMethod . call ( context , self , klazz , oldName , arg1 , arg2 , arg3 , block ) ;","return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;",Type 2
540-1-3,src,org.jruby.internal.runtime.methods,AliasMethod,call,95,96,src,org.jruby.internal.runtime.methods,WrapperMethod,call,85,86,"return oldMethod . call ( context , self , klazz , oldName , arg1 , arg2 , arg3 , block ) ;","return method . call ( context , self , klazz , name , arg1 , arg2 , arg3 , block ) ;",Type 2
540-2-3,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,src,org.jruby.internal.runtime.methods,WrapperMethod,call,85,86,"return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;","return method . call ( context , self , klazz , name , arg1 , arg2 , arg3 , block ) ;",Type 2
540-2-4,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,src,org.jruby.runtime,BlockBody,call,166,168,"return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , binding , type ) ;",Type 2
540-2-5,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,src,org.jruby.runtime,CompiledBlock19,yield,147,148,"return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;","return yield ( context , args , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
540-2-6,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,src,org.jruby.runtime,Interpreted19Block,yield,156,158,"return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;","return yield ( context , value , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
540-5-6,src,org.jruby.runtime,CompiledBlock19,yield,147,148,src,org.jruby.runtime,Interpreted19Block,yield,156,158,"return yield ( context , args , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;","return yield ( context , value , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
541-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,187,188,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 } , block ) ;","return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;",Type 2
541-1-3,src,org.jruby.internal.runtime.methods,DynamicMethod,call,187,188,src,org.jruby.runtime,CompiledBlock19,yield,147,148,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 } , block ) ;","return yield ( context , args , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
541-1-5,src,org.jruby.internal.runtime.methods,DynamicMethod,call,187,188,src,org.jruby.runtime,Interpreted19Block,yield,156,158,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 } , block ) ;","return yield ( context , value , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
541-2-3,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,src,org.jruby.runtime,CompiledBlock19,yield,147,148,"return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;","return yield ( context , args , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
541-2-5,src,org.jruby.internal.runtime.methods,JavaMethod,call,630,631,src,org.jruby.runtime,Interpreted19Block,yield,156,158,"return call ( context , self , clazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 } ) ;","return yield ( context , value , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
541-3-5,src,org.jruby.runtime,CompiledBlock19,yield,147,148,src,org.jruby.runtime,Interpreted19Block,yield,156,158,"return yield ( context , args , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;","return yield ( context , value , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
544-1-2,src,org.jruby.runtime,CompiledBlock19,yield,147,148,src,org.jruby.runtime,Interpreted19Block,yield,156,158,"return yield ( context , args , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;","return yield ( context , value , self , klass , aValue , binding , type , Block . NULL_BLOCK ) ;",Type 2
544-3-4,src,org.jruby.runtime.assigner,Pre0Rest1Post0Assigner,assign,68,70,src,org.jruby.runtime.assigner,Pre1ExpandedRest0Post0Assigner,assign,70,72,"rest . assign ( runtime , context , self , runtime . newArrayNoCopyLight ( value1 , value2 , value3 ) , block , true ) ;","parameter1 . assign ( runtime , context , self , runtime . newArray ( value1 , value2 , value3 ) , block , false ) ;",Type 2
544-5-6,src,org.jruby.runtime.callsite,SuperCallSite,callMethodMissing,393,394,src,org.jruby.runtime.callsite,SuperCallSite,callMethodMissing,397,398,"return RuntimeHelpers . callMethodMissing ( context , self , method . getVisibility ( ) , name , callType , arg0 , arg1 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . callMethodMissing ( context , self , method . getVisibility ( ) , name , callType , arg0 , arg1 , block ) ;",Type 2
545-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,231,232,src,org.jruby.runtime,BlockBody,call,222,224,"return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;","return call ( context , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , binding , type ) ;",Type 2
546-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,219,220,src,org.jruby.internal.runtime.methods,DynamicMethod,call,223,224,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , Block . NULL_BLOCK ) ;",Type 2
547-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,309,310,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,391,392,"return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , arg0 , arg1 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , block ) ;",Type 2
548-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,313,314,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,"return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , arg0 , arg1 , arg2 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;",Type 2
549-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,387,388,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,391,392,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , block ) ;",Type 2
550-1-2,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,239,240,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,255,256,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , block ) ;",Type 2
550-2-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,255,256,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,259,260,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , block ) ;",Type 2
551-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,259,260,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , block ) ;",Type 2
551-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,263,264,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
551-1-4,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;",Type 2
551-2-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,259,260,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,263,264,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
551-2-4,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,259,260,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;",Type 2
551-3-4,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,263,264,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;",Type 2
552-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,391,392,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,395,396,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;",Type 2
552-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,391,392,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;",Type 2
552-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,395,396,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;",Type 2
553-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,243,244,src,org.jruby.internal.runtime.methods,DynamicMethod,call,247,248,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , Block . NULL_BLOCK ) ;",Type 2
554-2-3,src,org.jruby.runtime,Interpreted19Block,call,105,106,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,120,121,"return yield ( context , context . getRuntime ( ) . newArrayNoCopy ( args ) , null , null , ALREADY_ARRAY , binding , type , block ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , ALREADY_ARRAY , binding , type ) ;",Type 2
555-1-2,src,org.jruby.util,Numeric,f_gt_p,79,80,src,org.jruby.util,Numeric,f_lt_p,89,90,"if ( x instanceof RubyFixnum && y instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) > ( ( RubyFixnum ) y ) . getLongValue ( ) ? context . getRuntime ( ) . getTrue ( ) : context . getRuntime ( ) . getFalse ( ) ;","if ( x instanceof RubyFixnum && y instanceof RubyFixnum )
return ( ( RubyFixnum ) x ) . getLongValue ( ) < ( ( RubyFixnum ) y ) . getLongValue ( ) ? context . getRuntime ( ) . getTrue ( ) : context . getRuntime ( ) . getFalse ( ) ;",Type 2
556-1-2,src,org.jruby.runtime,BlockBody,yieldSpecific,129,130,src,org.jruby.runtime,CompiledBlock,yieldSpecific,87,88,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;",Type 1
556-1-3,src,org.jruby.runtime,BlockBody,yieldSpecific,129,130,src,org.jruby.runtime,Interpreted19Block,call,105,106,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopy ( args ) , null , null , ALREADY_ARRAY , binding , type , block ) ;",Type 2
556-1-4,src,org.jruby.runtime,BlockBody,yieldSpecific,129,130,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,120,121,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , ALREADY_ARRAY , binding , type ) ;",Type 2
556-1-5,src,org.jruby.runtime,BlockBody,yieldSpecific,129,130,src,org.jruby.runtime,MethodBlock,yieldSpecific,86,87,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;",Type 1
556-2-3,src,org.jruby.runtime,CompiledBlock,yieldSpecific,87,88,src,org.jruby.runtime,Interpreted19Block,call,105,106,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopy ( args ) , null , null , ALREADY_ARRAY , binding , type , block ) ;",Type 2
556-2-4,src,org.jruby.runtime,CompiledBlock,yieldSpecific,87,88,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,120,121,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , ALREADY_ARRAY , binding , type ) ;",Type 2
556-2-5,src,org.jruby.runtime,CompiledBlock,yieldSpecific,87,88,src,org.jruby.runtime,MethodBlock,yieldSpecific,86,87,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;",Type 1
556-3-4,src,org.jruby.runtime,Interpreted19Block,call,105,106,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,120,121,"return yield ( context , context . getRuntime ( ) . newArrayNoCopy ( args ) , null , null , ALREADY_ARRAY , binding , type , block ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , ALREADY_ARRAY , binding , type ) ;",Type 2
556-3-5,src,org.jruby.runtime,Interpreted19Block,call,105,106,src,org.jruby.runtime,MethodBlock,yieldSpecific,86,87,"return yield ( context , context . getRuntime ( ) . newArrayNoCopy ( args ) , null , null , ALREADY_ARRAY , binding , type , block ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;",Type 2
556-4-5,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,120,121,src,org.jruby.runtime,MethodBlock,yieldSpecific,86,87,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , ALREADY_ARRAY , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 ) , null , null , true , binding , type ) ;",Type 2
557-2-3,src,org.jruby.runtime.callsite,SuperCallSite,callMethodMissing,401,402,src,org.jruby.runtime.callsite,SuperCallSite,callMethodMissing,405,406,"return RuntimeHelpers . callMethodMissing ( context , self , method . getVisibility ( ) , name , callType , arg0 , arg1 , arg3 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . callMethodMissing ( context , self , method . getVisibility ( ) , name , callType , arg0 , arg1 , arg2 , block ) ;",Type 2
558-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,80,81,src,org.jruby.runtime,NullBlockBody,yieldSpecific,88,89,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
559-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,88,89,src,org.jruby.runtime,NullBlockBody,yieldSpecific,96,97,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
561-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,211,212,src,org.jruby.internal.runtime.methods,DynamicMethod,call,215,216,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , Block . NULL_BLOCK ) ;",Type 2
562-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,301,302,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,305,306,"return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , args , block ) ;","return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , arg0 , block ) ;",Type 2
562-1-3,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,301,302,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,379,380,"return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , args , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , args , block ) ;",Type 2
565-1-2,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,239,240,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,251,252,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg , Block . NULL_BLOCK ) ;",Type 2
565-1-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,239,240,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,255,256,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , block ) ;",Type 2
565-2-4,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,251,252,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,259,260,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , block ) ;",Type 2
565-3-4,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,255,256,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,259,260,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , args , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , block ) ;",Type 2
566-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,235,236,src,org.jruby.internal.runtime.methods,DynamicMethod,call,239,240,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , Block . NULL_BLOCK ) ;",Type 2
567-1-2,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,271,272,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,275,276,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , arg2 , block ) ;",Type 2
568-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,96,97,src,org.jruby.runtime,NullBlockBody,yieldSpecific,104,105,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
569-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,104,105,src,org.jruby.runtime,NullBlockBody,yieldSpecific,112,113,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
572-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,203,204,src,org.jruby.internal.runtime.methods,DynamicMethod,call,207,208,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;",Type 2
573-1-2,src,org.jruby.runtime,BlockBody,yieldSpecific,143,144,src,org.jruby.runtime,CompiledBlock,yieldSpecific,92,93,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;",Type 1
573-1-3,src,org.jruby.runtime,BlockBody,yieldSpecific,143,144,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,125,126,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , ALREADY_ARRAY , binding , type ) ;",Type 2
573-1-4,src,org.jruby.runtime,BlockBody,yieldSpecific,143,144,src,org.jruby.runtime,MethodBlock,yieldSpecific,90,91,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;",Type 1
573-2-3,src,org.jruby.runtime,CompiledBlock,yieldSpecific,92,93,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,125,126,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , ALREADY_ARRAY , binding , type ) ;",Type 2
573-2-4,src,org.jruby.runtime,CompiledBlock,yieldSpecific,92,93,src,org.jruby.runtime,MethodBlock,yieldSpecific,90,91,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;",Type 1
573-3-4,src,org.jruby.runtime,Interpreted19Block,yieldSpecific,125,126,src,org.jruby.runtime,MethodBlock,yieldSpecific,90,91,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , ALREADY_ARRAY , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;",Type 2
574-1-2,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getMethod,94,95,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,99,100,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , false ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;",Type 2
574-1-3,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getMethod,94,95,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,104,105,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , false ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;",Type 2
574-1-4,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getMethod,94,95,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getSingletonMethod,139,140,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , false ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , false ) ;",Type 2
574-1-5,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getMethod,94,95,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastSingletonMethod,144,145,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , false ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , true ) ;",Type 2
574-2-3,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,99,100,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,104,105,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;",Type 1
574-2-4,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,99,100,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getSingletonMethod,139,140,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , false ) ;",Type 2
574-2-5,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,99,100,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastSingletonMethod,144,145,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , true ) ;",Type 2
574-3-4,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,104,105,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getSingletonMethod,139,140,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , false ) ;",Type 2
574-3-5,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastMethod,104,105,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastSingletonMethod,144,145,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , false , Arity . fixed ( 3 ) , true ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , true ) ;",Type 2
574-4-5,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getSingletonMethod,139,140,src,org.jruby.runtime.callback,ReflectionCallbackFactory,getFastSingletonMethod,144,145,"return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , false ) ;","return new ReflectionCallback ( type , method , new Class [ ] { arg1 , arg2 , arg3 } , false , true , Arity . fixed ( 3 ) , true ) ;",Type 2
575-1-2,src,org.jruby.runtime.callsite,SuperCallSite,callMethodMissing,401,402,src,org.jruby.runtime.callsite,SuperCallSite,callMethodMissing,405,406,"return RuntimeHelpers . callMethodMissing ( context , self , method . getVisibility ( ) , name , callType , arg0 , arg1 , arg3 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . callMethodMissing ( context , self , method . getVisibility ( ) , name , callType , arg0 , arg1 , arg2 , block ) ;",Type 2
576-1-2,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithMethod,366,367,src,org.jruby.compiler.impl,StandardInvocationCompiler,opElementAsgnWithMethod,370,371,"methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithMethod"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , CallSite . class , CallSite . class , CallSite . class ) ) ;","methodCompiler . invokeUtilityMethod ( ""opElementAsgnWithMethod"" , sig ( IRubyObject . class , ThreadContext . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , IRubyObject . class , CallSite . class , CallSite . class , CallSite . class ) ) ;",Type 2
577-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,203,204,src,org.jruby.internal.runtime.methods,DynamicMethod,call,207,208,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , Block . NULL_BLOCK ) ;",Type 2
578-1-2,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,301,302,src,org.jruby.javasupport.util,RuntimeHelpers,callMethodMissing,305,306,"return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , args , block ) ;","return selectMethodMissing ( context , receiver , visibility , name , callType ) . call ( context , receiver , receiver . getMetaClass ( ) , name , arg0 , block ) ;",Type 2
579-1-2,src,org.jruby.runtime,BlockBody,yieldSpecific,143,144,src,org.jruby.runtime,MethodBlock,yieldSpecific,90,91,"return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;","return yield ( context , context . getRuntime ( ) . newArrayNoCopyLight ( arg0 , arg1 , arg2 ) , null , null , true , binding , type ) ;",Type 1
580-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,383,384,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,243,244,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , Block . NULL_BLOCK ) ;",Type 2
580-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,383,384,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,247,248,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , block ) ;",Type 2
580-2-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,243,244,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,247,248,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , block ) ;",Type 2
583-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,56,57,src,org.jruby.runtime,NullBlockBody,yieldSpecific,64,65,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
584-1-2,src,org.jruby.internal.runtime.methods,DynamicMethod,call,227,228,src,org.jruby.internal.runtime.methods,DynamicMethod,call,231,232,"return call ( context , self , klazz , name , new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 } , block ) ;","return call ( context , self , klazz , name , arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , Block . NULL_BLOCK ) ;",Type 2
586-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,395,396,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;",Type 2
587-1-2,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,395,396,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;",Type 2
587-1-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,395,396,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,263,264,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
587-1-4,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,395,396,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;",Type 2
587-2-3,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,263,264,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , Block . NULL_BLOCK ) ;",Type 2
587-2-4,src,org.jruby.runtime.callsite,CachingCallSite,callMethodMissing,399,400,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,"return RuntimeHelpers . selectMethodMissing ( context , self , method . getVisibility ( ) , methodName , callType ) . call ( context , self , self . getMetaClass ( ) , methodName , arg0 , arg1 , arg2 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;",Type 2
587-3-4,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,263,264,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;",Type 2
588-1-2,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,271,272,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;",Type 2
588-1-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,267,268,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,275,276,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , block ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , arg2 , block ) ;",Type 2
588-2-3,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,271,272,src,org.jruby.runtime.invokedynamic,InvokeDynamicSupport,callMethodMissing,275,276,"return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , arg2 , Block . NULL_BLOCK ) ;","return RuntimeHelpers . selectMethodMissing ( context , self , entry . method . getVisibility ( ) , name , callType ) . call ( context , self , self . getMetaClass ( ) , name , arg0 , arg1 , arg2 , block ) ;",Type 2
589-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,64,65,src,org.jruby.runtime,NullBlockBody,yieldSpecific,72,73,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
590-1-2,src,org.jruby.runtime,NullBlockBody,yieldSpecific,72,73,src,org.jruby.runtime,NullBlockBody,yieldSpecific,80,81,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . getNil ( ) , ""yield called out of block"" ) ;",Type 1
591-1-2,src,org.jruby.runtime,NullBlockBody,call,101,101,src,org.jruby.runtime,NullBlockBody,call,109,109,"throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . newArrayNoCopy ( new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 } ) , ""yield called out of block"" ) ;","throw context . getRuntime ( ) . newLocalJumpError ( RubyLocalJumpError . Reason . NOREASON , context . getRuntime ( ) . newArrayNoCopy ( new IRubyObject [ ] { arg0 , arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 } ) , ""yield called out of block"" ) ;",Type 2